// Code generated from MySqlParser.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // MySqlParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 1127, 6873,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 3, 2, 5, 2, 676, 10, 2, 3, 2, 3, 2, 5, 2, 680,
	10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 5, 3, 687, 10, 3, 3, 3, 5, 3, 690,
	10, 3, 3, 3, 7, 3, 693, 10, 3, 12, 3, 14, 3, 696, 11, 3, 3, 3, 3, 3, 3,
	3, 5, 3, 701, 10, 3, 3, 3, 5, 3, 704, 10, 3, 3, 3, 5, 3, 707, 10, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 716, 10, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 755,
	10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7,
	767, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8,
	778, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 795, 10, 9, 3, 10, 3, 10, 3, 10, 5,
	10, 800, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 5, 11, 812, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 839,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 848, 10,
	13, 3, 14, 3, 14, 3, 14, 5, 14, 853, 10, 14, 3, 14, 3, 14, 7, 14, 857,
	10, 14, 12, 14, 14, 14, 860, 11, 14, 3, 15, 3, 15, 5, 15, 864, 10, 15,
	3, 15, 3, 15, 5, 15, 868, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 5, 15, 877, 10, 15, 3, 15, 5, 15, 880, 10, 15, 3, 15, 5, 15,
	883, 10, 15, 3, 15, 3, 15, 5, 15, 887, 10, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 16, 5, 16, 895, 10, 16, 3, 16, 5, 16, 898, 10, 16, 3, 16,
	5, 16, 901, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 907, 10, 16, 3,
	16, 3, 16, 5, 16, 911, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	5, 16, 919, 10, 16, 3, 16, 7, 16, 922, 10, 16, 12, 16, 14, 16, 925, 11,
	16, 3, 16, 3, 16, 5, 16, 929, 10, 16, 3, 16, 3, 16, 3, 16, 5, 16, 934,
	10, 16, 3, 16, 7, 16, 937, 10, 16, 12, 16, 14, 16, 940, 11, 16, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 951, 10,
	17, 3, 17, 5, 17, 954, 10, 17, 3, 17, 3, 17, 5, 17, 958, 10, 17, 3, 17,
	5, 17, 961, 10, 17, 3, 17, 3, 17, 5, 17, 965, 10, 17, 3, 17, 5, 17, 968,
	10, 17, 3, 17, 3, 17, 5, 17, 972, 10, 17, 3, 17, 5, 17, 975, 10, 17, 3,
	17, 5, 17, 978, 10, 17, 3, 17, 3, 17, 5, 17, 982, 10, 17, 3, 17, 5, 17,
	985, 10, 17, 3, 17, 3, 17, 5, 17, 989, 10, 17, 3, 17, 3, 17, 3, 18, 3,
	18, 5, 18, 995, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 1001, 10, 18,
	3, 18, 3, 18, 7, 18, 1005, 10, 18, 12, 18, 14, 18, 1008, 11, 18, 3, 18,
	3, 18, 7, 18, 1012, 10, 18, 12, 18, 14, 18, 1015, 11, 18, 3, 18, 3, 18,
	3, 19, 3, 19, 5, 19, 1021, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 1027,
	10, 19, 3, 19, 3, 19, 7, 19, 1031, 10, 19, 12, 19, 14, 19, 1034, 11, 19,
	3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 1040, 10, 19, 12, 19, 14, 19, 1043,
	11, 19, 3, 19, 3, 19, 5, 19, 1047, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 1061, 10,
	20, 12, 20, 14, 20, 1064, 11, 20, 3, 20, 3, 20, 3, 21, 3, 21, 5, 21, 1070,
	10, 21, 3, 21, 3, 21, 5, 21, 1074, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 1084, 10, 21, 3, 21, 3, 21, 5, 21, 1088,
	10, 21, 3, 21, 3, 21, 5, 21, 1092, 10, 21, 3, 21, 3, 21, 5, 21, 1096, 10,
	21, 3, 21, 3, 21, 5, 21, 1100, 10, 21, 3, 21, 7, 21, 1103, 10, 21, 12,
	21, 14, 21, 1106, 11, 21, 5, 21, 1108, 10, 21, 3, 21, 5, 21, 1111, 10,
	21, 3, 21, 5, 21, 1114, 10, 21, 3, 21, 5, 21, 1117, 10, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 5, 21, 1123, 10, 21, 3, 21, 3, 21, 5, 21, 1127, 10, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 5, 21, 1133, 10, 21, 3, 21, 7, 21, 1136, 10, 21,
	12, 21, 14, 21, 1139, 11, 21, 5, 21, 1141, 10, 21, 3, 21, 5, 21, 1144,
	10, 21, 5, 21, 1146, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 5, 22, 1157, 10, 22, 3, 22, 3, 22, 5, 22, 1161, 10,
	22, 3, 22, 5, 22, 1164, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 1178, 10, 23, 3, 23, 5,
	23, 1181, 10, 23, 3, 23, 3, 23, 5, 23, 1185, 10, 23, 3, 23, 5, 23, 1188,
	10, 23, 3, 23, 3, 23, 5, 23, 1192, 10, 23, 3, 23, 5, 23, 1195, 10, 23,
	3, 23, 3, 23, 5, 23, 1199, 10, 23, 3, 23, 5, 23, 1202, 10, 23, 3, 23, 3,
	23, 5, 23, 1206, 10, 23, 3, 23, 5, 23, 1209, 10, 23, 3, 23, 5, 23, 1212,
	10, 23, 3, 23, 3, 23, 5, 23, 1216, 10, 23, 3, 23, 5, 23, 1219, 10, 23,
	3, 23, 3, 23, 5, 23, 1223, 10, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 5,
	24, 1230, 10, 24, 3, 24, 5, 24, 1233, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 1246, 10, 24, 3,
	24, 3, 24, 3, 25, 3, 25, 5, 25, 1252, 10, 25, 3, 25, 3, 25, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 7, 26, 1261, 10, 26, 12, 26, 14, 26, 1264, 11, 26,
	3, 26, 3, 26, 5, 26, 1268, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 5, 26, 1276, 10, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29,
	5, 29, 1285, 10, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1290, 10, 29, 3, 29, 5,
	29, 1293, 10, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1298, 10, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1306, 10, 29, 3, 29, 3, 29, 5, 29, 1310,
	10, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1315, 10, 29, 3, 29, 3, 29, 5, 29,
	1319, 10, 29, 3, 30, 5, 30, 1322, 10, 30, 3, 30, 3, 30, 5, 30, 1326, 10,
	30, 3, 30, 3, 30, 5, 30, 1330, 10, 30, 3, 30, 5, 30, 1333, 10, 30, 3, 30,
	3, 30, 5, 30, 1337, 10, 30, 3, 30, 5, 30, 1340, 10, 30, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 5, 31, 1347, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 5, 32, 1355, 10, 32, 5, 32, 1357, 10, 32, 3, 33, 3, 33, 3, 33, 7,
	33, 1362, 10, 33, 12, 33, 14, 33, 1365, 11, 33, 3, 33, 3, 33, 3, 33, 5,
	33, 1370, 10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 1376, 10, 33, 12,
	33, 14, 33, 1379, 11, 33, 5, 33, 1381, 10, 33, 3, 33, 3, 33, 3, 33, 7,
	33, 1386, 10, 33, 12, 33, 14, 33, 1389, 11, 33, 5, 33, 1391, 10, 33, 5,
	33, 1393, 10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 1399, 10, 34, 3, 35,
	3, 35, 3, 35, 3, 35, 5, 35, 1405, 10, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	5, 36, 1422, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1429, 10,
	37, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 5, 39, 1436, 10, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1448, 10,
	39, 3, 39, 3, 39, 3, 39, 5, 39, 1453, 10, 39, 3, 39, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 5, 39, 1462, 10, 39, 5, 39, 1464, 10, 39, 3, 40, 5,
	40, 1467, 10, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 5, 42, 1480, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1493, 10, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 1498, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1514,
	10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 1520, 10, 44, 12, 44, 14, 44,
	1523, 11, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1532,
	10, 45, 3, 46, 3, 46, 7, 46, 1536, 10, 46, 12, 46, 14, 46, 1539, 11, 46,
	3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1550,
	10, 47, 3, 47, 5, 47, 1553, 10, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1558, 10,
	47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47,
	3, 47, 5, 47, 1571, 10, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1578,
	10, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1585, 10, 47, 5, 47,
	1587, 10, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1594, 10, 47, 3,
	48, 3, 48, 5, 48, 1598, 10, 48, 5, 48, 1600, 10, 48, 3, 48, 3, 48, 3, 48,
	5, 48, 1605, 10, 48, 3, 48, 5, 48, 1608, 10, 48, 3, 48, 3, 48, 7, 48, 1612,
	10, 48, 12, 48, 14, 48, 1615, 11, 48, 3, 48, 3, 48, 5, 48, 1619, 10, 48,
	5, 48, 1621, 10, 48, 3, 48, 3, 48, 5, 48, 1625, 10, 48, 3, 48, 5, 48, 1628,
	10, 48, 3, 48, 5, 48, 1631, 10, 48, 3, 48, 3, 48, 7, 48, 1635, 10, 48,
	12, 48, 14, 48, 1638, 11, 48, 3, 48, 3, 48, 5, 48, 1642, 10, 48, 5, 48,
	1644, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1649, 10, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 5, 48, 1656, 10, 48, 5, 48, 1658, 10, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 5, 48, 1665, 10, 48, 3, 49, 3, 49, 3, 49, 5, 49, 1670,
	10, 49, 3, 49, 3, 49, 5, 49, 1674, 10, 49, 3, 49, 5, 49, 1677, 10, 49,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1685, 10, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1693, 10, 50, 5, 50, 1695, 10, 50,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1703, 10, 51, 3, 52, 3,
	52, 5, 52, 1707, 10, 52, 3, 52, 5, 52, 1710, 10, 52, 3, 52, 3, 52, 7, 52,
	1714, 10, 52, 12, 52, 14, 52, 1717, 11, 52, 3, 52, 3, 52, 5, 52, 1721,
	10, 52, 3, 52, 5, 52, 1724, 10, 52, 3, 52, 3, 52, 7, 52, 1728, 10, 52,
	12, 52, 14, 52, 1731, 11, 52, 5, 52, 1733, 10, 52, 3, 53, 3, 53, 5, 53,
	1737, 10, 53, 3, 53, 5, 53, 1740, 10, 53, 3, 53, 3, 53, 5, 53, 1744, 10,
	53, 3, 53, 3, 53, 3, 53, 5, 53, 1749, 10, 53, 3, 53, 3, 53, 5, 53, 1753,
	10, 53, 3, 53, 3, 53, 5, 53, 1757, 10, 53, 3, 53, 3, 53, 5, 53, 1761, 10,
	53, 3, 53, 3, 53, 5, 53, 1765, 10, 53, 3, 53, 3, 53, 5, 53, 1769, 10, 53,
	3, 53, 3, 53, 5, 53, 1773, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1778, 10,
	53, 3, 53, 3, 53, 3, 53, 5, 53, 1783, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53,
	1788, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1794, 10, 53, 3, 53, 3,
	53, 3, 53, 5, 53, 1799, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1804, 10, 53,
	3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1810, 10, 53, 3, 53, 3, 53, 3, 53, 5,
	53, 1815, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1820, 10, 53, 3, 53, 3, 53,
	3, 53, 5, 53, 1825, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1830, 10, 53, 3,
	53, 3, 53, 3, 53, 5, 53, 1835, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1840,
	10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1845, 10, 53, 3, 53, 3, 53, 3, 53,
	5, 53, 1850, 10, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1855, 10, 53, 3, 53, 3,
	53, 3, 53, 5, 53, 1860, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1866,
	10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1874, 10, 53,
	3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1880, 10, 53, 3, 54, 3, 54, 3, 55, 3,
	55, 3, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1892, 10, 56, 3, 56,
	3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1899, 10, 56, 5, 56, 1901, 10, 56, 3,
	56, 3, 56, 3, 56, 3, 56, 7, 56, 1907, 10, 56, 12, 56, 14, 56, 1910, 11,
	56, 3, 56, 3, 56, 5, 56, 1914, 10, 56, 3, 57, 5, 57, 1917, 10, 57, 3, 57,
	3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1925, 10, 57, 3, 57, 3, 57, 3,
	57, 3, 57, 5, 57, 1931, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1947, 10,
	57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	5, 57, 1959, 10, 57, 5, 57, 1961, 10, 57, 3, 58, 5, 58, 1964, 10, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1972, 10, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 5, 58, 1978, 10, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1984,
	10, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	7, 59, 1995, 10, 59, 12, 59, 14, 59, 1998, 11, 59, 3, 59, 3, 59, 7, 59,
	2002, 10, 59, 12, 59, 14, 59, 2005, 11, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	7, 59, 2011, 10, 59, 12, 59, 14, 59, 2014, 11, 59, 3, 59, 3, 59, 5, 59,
	2018, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59, 2027,
	10, 59, 12, 59, 14, 59, 2030, 11, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59,
	2036, 10, 59, 12, 59, 14, 59, 2039, 11, 59, 3, 59, 3, 59, 5, 59, 2043,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59,
	2053, 10, 59, 12, 59, 14, 59, 2056, 11, 59, 3, 59, 3, 59, 7, 59, 2060,
	10, 59, 12, 59, 14, 59, 2063, 11, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59,
	2069, 10, 59, 12, 59, 14, 59, 2072, 11, 59, 3, 59, 3, 59, 5, 59, 2076,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59,
	2086, 10, 59, 12, 59, 14, 59, 2089, 11, 59, 3, 59, 3, 59, 7, 59, 2093,
	10, 59, 12, 59, 14, 59, 2096, 11, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59,
	2102, 10, 59, 12, 59, 14, 59, 2105, 11, 59, 3, 59, 3, 59, 5, 59, 2109,
	10, 59, 3, 59, 3, 59, 3, 59, 7, 59, 2114, 10, 59, 12, 59, 14, 59, 2117,
	11, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59, 2123, 10, 59, 12, 59, 14, 59,
	2126, 11, 59, 3, 59, 3, 59, 5, 59, 2130, 10, 59, 5, 59, 2132, 10, 59, 3,
	60, 3, 60, 3, 60, 5, 60, 2137, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 6, 61,
	2143, 10, 61, 13, 61, 14, 61, 2144, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62,
	7, 62, 2152, 10, 62, 12, 62, 14, 62, 2155, 11, 62, 3, 63, 5, 63, 2158,
	10, 63, 3, 63, 5, 63, 2161, 10, 63, 3, 63, 3, 63, 5, 63, 2165, 10, 63,
	3, 63, 3, 63, 3, 63, 5, 63, 2170, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5,
	63, 2176, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2182, 10, 63, 3, 63,
	3, 63, 3, 63, 5, 63, 2187, 10, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2192, 10,
	63, 3, 63, 3, 63, 3, 63, 5, 63, 2197, 10, 63, 3, 63, 3, 63, 3, 63, 5, 63,
	2202, 10, 63, 3, 63, 5, 63, 2205, 10, 63, 3, 64, 3, 64, 3, 64, 5, 64, 2210,
	10, 64, 3, 64, 6, 64, 2213, 10, 64, 13, 64, 14, 64, 2214, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2225, 10, 64, 3, 65, 3,
	65, 5, 65, 2229, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2236,
	10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2241, 10, 65, 3, 65, 5, 65, 2244, 10,
	65, 3, 65, 3, 65, 3, 65, 5, 65, 2249, 10, 65, 3, 65, 5, 65, 2252, 10, 65,
	3, 65, 3, 65, 5, 65, 2256, 10, 65, 3, 65, 3, 65, 5, 65, 2260, 10, 65, 3,
	66, 3, 66, 3, 66, 3, 66, 7, 66, 2266, 10, 66, 12, 66, 14, 66, 2269, 11,
	66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2287, 10, 68, 3, 68, 5,
	68, 2290, 10, 68, 3, 68, 5, 68, 2293, 10, 68, 3, 68, 3, 68, 5, 68, 2297,
	10, 68, 3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 69, 7, 69, 2305, 10, 69,
	12, 69, 14, 69, 2308, 11, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70,
	3, 70, 3, 70, 7, 70, 2318, 10, 70, 12, 70, 14, 70, 2321, 11, 70, 3, 70,
	3, 70, 3, 71, 3, 71, 5, 71, 2327, 10, 71, 3, 71, 5, 71, 2330, 10, 71, 3,
	71, 3, 71, 3, 71, 3, 71, 3, 71, 7, 71, 2337, 10, 71, 12, 71, 14, 71, 2340,
	11, 71, 5, 71, 2342, 10, 71, 3, 71, 5, 71, 2345, 10, 71, 3, 72, 3, 72,
	3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 5, 72, 2356, 10, 72, 3,
	72, 5, 72, 2359, 10, 72, 3, 72, 3, 72, 5, 72, 2363, 10, 72, 3, 72, 3, 72,
	3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 2371, 10, 73, 3, 73, 5, 73, 2374, 10,
	73, 3, 73, 3, 73, 3, 73, 5, 73, 2379, 10, 73, 3, 73, 3, 73, 3, 73, 3, 73,
	3, 73, 3, 73, 5, 73, 2387, 10, 73, 3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 2393,
	10, 73, 3, 73, 3, 73, 5, 73, 2397, 10, 73, 3, 74, 3, 74, 5, 74, 2401, 10,
	74, 3, 74, 7, 74, 2404, 10, 74, 12, 74, 14, 74, 2407, 11, 74, 3, 74, 3,
	74, 5, 74, 2411, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2418,
	10, 74, 3, 74, 3, 74, 5, 74, 2422, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 3, 74, 7, 74, 2431, 10, 74, 12, 74, 14, 74, 2434, 11, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2441, 10, 74, 3, 74, 5, 74, 2444,
	10, 74, 3, 74, 3, 74, 7, 74, 2448, 10, 74, 12, 74, 14, 74, 2451, 11, 74,
	3, 74, 3, 74, 3, 74, 5, 74, 2456, 10, 74, 5, 74, 2458, 10, 74, 3, 74, 3,
	74, 3, 74, 5, 74, 2463, 10, 74, 3, 74, 5, 74, 2466, 10, 74, 3, 74, 3, 74,
	7, 74, 2470, 10, 74, 12, 74, 14, 74, 2473, 11, 74, 3, 74, 3, 74, 3, 74,
	5, 74, 2478, 10, 74, 5, 74, 2480, 10, 74, 3, 74, 3, 74, 5, 74, 2484, 10,
	74, 3, 74, 5, 74, 2487, 10, 74, 3, 74, 5, 74, 2490, 10, 74, 3, 74, 3, 74,
	7, 74, 2494, 10, 74, 12, 74, 14, 74, 2497, 11, 74, 3, 74, 3, 74, 3, 74,
	5, 74, 2502, 10, 74, 3, 74, 5, 74, 2505, 10, 74, 3, 74, 3, 74, 7, 74, 2509,
	10, 74, 12, 74, 14, 74, 2512, 11, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2517,
	10, 74, 5, 74, 2519, 10, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2524, 10, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2532, 10, 74, 5, 74, 2534,
	10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2543, 10,
	74, 3, 74, 3, 74, 3, 74, 5, 74, 2548, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 5, 74, 2556, 10, 74, 3, 74, 3, 74, 5, 74, 2560, 10, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2568, 10, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2578, 10, 74, 3, 74, 3,
	74, 3, 74, 5, 74, 2583, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74,
	2590, 10, 74, 3, 74, 3, 74, 5, 74, 2594, 10, 74, 3, 74, 3, 74, 5, 74, 2598,
	10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	5, 74, 2630, 10, 74, 3, 74, 3, 74, 5, 74, 2634, 10, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2646, 10, 74,
	3, 74, 5, 74, 2649, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 5, 74, 2658, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 7, 74, 2673, 10, 74, 12, 74,
	14, 74, 2676, 11, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 5, 74, 2687, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5,
	74, 2694, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2701, 10, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 7, 74, 2714, 10, 74, 12, 74, 14, 74, 2717, 11, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2729, 10, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2735, 10, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 5, 74, 2741, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2747, 10, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2753, 10, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 5, 74, 2759, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2765, 10, 74,
	3, 75, 3, 75, 3, 75, 5, 75, 2770, 10, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3,
	76, 5, 76, 2777, 10, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77, 5, 77, 2784,
	10, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 2791, 10, 77, 3, 77,
	3, 77, 3, 77, 5, 77, 2796, 10, 77, 3, 77, 7, 77, 2799, 10, 77, 12, 77,
	14, 77, 2802, 11, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78,
	3, 78, 3, 79, 3, 79, 3, 79, 5, 79, 2815, 10, 79, 3, 79, 3, 79, 3, 80, 3,
	80, 3, 80, 5, 80, 2822, 10, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 5, 81,
	2829, 10, 81, 3, 81, 3, 81, 3, 82, 3, 82, 5, 82, 2835, 10, 82, 3, 82, 3,
	82, 5, 82, 2839, 10, 82, 3, 82, 3, 82, 5, 82, 2843, 10, 82, 3, 83, 3, 83,
	3, 83, 3, 83, 3, 83, 5, 83, 2850, 10, 83, 3, 83, 5, 83, 2853, 10, 83, 3,
	84, 3, 84, 3, 84, 5, 84, 2858, 10, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85,
	5, 85, 2865, 10, 85, 3, 85, 3, 85, 3, 85, 7, 85, 2870, 10, 85, 12, 85,
	14, 85, 2873, 11, 85, 3, 85, 5, 85, 2876, 10, 85, 3, 86, 3, 86, 3, 86,
	3, 86, 3, 86, 7, 86, 2883, 10, 86, 12, 86, 14, 86, 2886, 11, 86, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 88, 3, 88, 5, 88, 2894, 10, 88, 3, 88, 3, 88, 3,
	89, 3, 89, 3, 89, 3, 89, 3, 89, 5, 89, 2903, 10, 89, 3, 89, 5, 89, 2906,
	10, 89, 3, 90, 3, 90, 5, 90, 2910, 10, 90, 3, 91, 3, 91, 3, 91, 3, 92,
	3, 92, 3, 92, 3, 92, 5, 92, 2919, 10, 92, 3, 93, 3, 93, 5, 93, 2923, 10,
	93, 3, 93, 5, 93, 2926, 10, 93, 3, 93, 5, 93, 2929, 10, 93, 3, 93, 3, 93,
	3, 93, 3, 93, 5, 93, 2935, 10, 93, 3, 93, 5, 93, 2938, 10, 93, 3, 93, 3,
	93, 3, 93, 3, 93, 5, 93, 2944, 10, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93,
	7, 93, 2951, 10, 93, 12, 93, 14, 93, 2954, 11, 93, 5, 93, 2956, 10, 93,
	3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 7, 93, 2965, 10, 93, 12,
	93, 14, 93, 2968, 11, 93, 5, 93, 2970, 10, 93, 3, 94, 3, 94, 3, 94, 5,
	94, 2975, 10, 94, 3, 94, 5, 94, 2978, 10, 94, 3, 94, 3, 94, 3, 94, 5, 94,
	2983, 10, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 5,
	94, 2993, 10, 94, 3, 94, 3, 94, 3, 94, 5, 94, 2998, 10, 94, 3, 94, 3, 94,
	6, 94, 3002, 10, 94, 13, 94, 14, 94, 3003, 5, 94, 3006, 10, 94, 3, 94,
	3, 94, 6, 94, 3010, 10, 94, 13, 94, 14, 94, 3011, 5, 94, 3014, 10, 94,
	3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 3020, 10, 94, 3, 94, 3, 94, 3, 94, 3,
	94, 7, 94, 3026, 10, 94, 12, 94, 14, 94, 3029, 11, 94, 3, 94, 3, 94, 5,
	94, 3033, 10, 94, 3, 94, 3, 94, 3, 94, 3, 94, 7, 94, 3039, 10, 94, 12,
	94, 14, 94, 3042, 11, 94, 5, 94, 3044, 10, 94, 3, 95, 3, 95, 3, 95, 5,
	95, 3049, 10, 95, 3, 95, 5, 95, 3052, 10, 95, 3, 95, 3, 95, 3, 95, 5, 95,
	3057, 10, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 5, 95, 3065, 10,
	95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 5, 95, 3073, 10, 95, 3, 95,
	3, 95, 3, 95, 3, 95, 5, 95, 3079, 10, 95, 3, 95, 3, 95, 3, 95, 3, 95, 7,
	95, 3085, 10, 95, 12, 95, 14, 95, 3088, 11, 95, 3, 95, 3, 95, 5, 95, 3092,
	10, 95, 3, 95, 3, 95, 3, 95, 3, 95, 7, 95, 3098, 10, 95, 12, 95, 14, 95,
	3101, 11, 95, 5, 95, 3103, 10, 95, 3, 96, 3, 96, 5, 96, 3107, 10, 96, 3,
	96, 5, 96, 3110, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 5, 96,
	3118, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 5, 96, 3124, 10, 96, 3, 96, 3,
	96, 3, 96, 3, 96, 3, 96, 7, 96, 3131, 10, 96, 12, 96, 14, 96, 3134, 11,
	96, 5, 96, 3136, 10, 96, 3, 97, 3, 97, 5, 97, 3140, 10, 97, 3, 97, 3, 97,
	5, 97, 3144, 10, 97, 3, 97, 3, 97, 6, 97, 3148, 10, 97, 13, 97, 14, 97,
	3149, 3, 97, 3, 97, 5, 97, 3154, 10, 97, 3, 97, 3, 97, 5, 97, 3158, 10,
	97, 5, 97, 3160, 10, 97, 3, 97, 5, 97, 3163, 10, 97, 3, 97, 5, 97, 3166,
	10, 97, 3, 97, 5, 97, 3169, 10, 97, 3, 97, 3, 97, 6, 97, 3173, 10, 97,
	13, 97, 14, 97, 3174, 3, 97, 3, 97, 5, 97, 3179, 10, 97, 3, 97, 5, 97,
	3182, 10, 97, 3, 97, 5, 97, 3185, 10, 97, 3, 97, 5, 97, 3188, 10, 97, 3,
	97, 5, 97, 3191, 10, 97, 5, 97, 3193, 10, 97, 3, 98, 3, 98, 5, 98, 3197,
	10, 98, 3, 99, 3, 99, 3, 99, 3, 99, 5, 99, 3203, 10, 99, 3, 99, 3, 99,
	3, 99, 3, 99, 5, 99, 3209, 10, 99, 3, 99, 7, 99, 3212, 10, 99, 12, 99,
	14, 99, 3215, 11, 99, 5, 99, 3217, 10, 99, 3, 100, 3, 100, 3, 100, 3, 100,
	5, 100, 3223, 10, 100, 3, 101, 3, 101, 5, 101, 3227, 10, 101, 3, 102, 3,
	102, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 3235, 10, 102, 3, 103, 3,
	103, 5, 103, 3239, 10, 103, 3, 103, 5, 103, 3242, 10, 103, 3, 103, 5, 103,
	3245, 10, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103,
	5, 103, 3254, 10, 103, 3, 103, 3, 103, 5, 103, 3258, 10, 103, 3, 103, 5,
	103, 3261, 10, 103, 3, 103, 3, 103, 5, 103, 3265, 10, 103, 3, 104, 3, 104,
	5, 104, 3269, 10, 104, 3, 104, 5, 104, 3272, 10, 104, 3, 104, 5, 104, 3275,
	10, 104, 3, 104, 3, 104, 3, 104, 5, 104, 3280, 10, 104, 3, 104, 3, 104,
	3, 104, 3, 104, 5, 104, 3286, 10, 104, 7, 104, 3288, 10, 104, 12, 104,
	14, 104, 3291, 11, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104,
	3, 104, 5, 104, 3300, 10, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104,
	3306, 10, 104, 7, 104, 3308, 10, 104, 12, 104, 14, 104, 3311, 11, 104,
	3, 104, 3, 104, 3, 104, 5, 104, 3316, 10, 104, 3, 104, 3, 104, 5, 104,
	3320, 10, 104, 3, 105, 3, 105, 3, 105, 3, 105, 5, 105, 3326, 10, 105, 3,
	105, 5, 105, 3329, 10, 105, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3,
	106, 3, 106, 3, 106, 3, 106, 3, 106, 5, 106, 3341, 10, 106, 3, 106, 3,
	106, 5, 106, 3345, 10, 106, 3, 106, 3, 106, 5, 106, 3349, 10, 106, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 3357, 10, 107, 3, 107,
	3, 107, 5, 107, 3361, 10, 107, 3, 108, 3, 108, 3, 108, 3, 108, 3, 109,
	3, 109, 5, 109, 3369, 10, 109, 3, 109, 5, 109, 3372, 10, 109, 3, 109, 3,
	109, 5, 109, 3376, 10, 109, 3, 109, 5, 109, 3379, 10, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 7, 109, 3385, 10, 109, 12, 109, 14, 109, 3388, 11, 109,
	3, 109, 3, 109, 5, 109, 3392, 10, 109, 3, 109, 5, 109, 3395, 10, 109, 3,
	109, 5, 109, 3398, 10, 109, 3, 110, 3, 110, 5, 110, 3402, 10, 110, 3, 110,
	5, 110, 3405, 10, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 7, 110,
	3412, 10, 110, 12, 110, 14, 110, 3415, 11, 110, 3, 110, 3, 110, 5, 110,
	3419, 10, 110, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 7, 111, 3426, 10,
	111, 12, 111, 14, 111, 3429, 11, 111, 3, 112, 3, 112, 5, 112, 3433, 10,
	112, 3, 113, 3, 113, 3, 113, 7, 113, 3438, 10, 113, 12, 113, 14, 113, 3441,
	11, 113, 3, 114, 3, 114, 7, 114, 3445, 10, 114, 12, 114, 14, 114, 3448,
	11, 114, 3, 114, 3, 114, 3, 114, 7, 114, 3453, 10, 114, 12, 114, 14, 114,
	3456, 11, 114, 3, 114, 3, 114, 5, 114, 3460, 10, 114, 3, 115, 3, 115, 3,
	115, 3, 115, 3, 115, 3, 115, 5, 115, 3468, 10, 115, 3, 115, 5, 115, 3471,
	10, 115, 3, 115, 5, 115, 3474, 10, 115, 3, 115, 3, 115, 3, 115, 7, 115,
	3479, 10, 115, 12, 115, 14, 115, 3482, 11, 115, 5, 115, 3484, 10, 115,
	3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 5, 115, 3491, 10, 115, 3, 115,
	5, 115, 3494, 10, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115,
	5, 115, 3502, 10, 115, 3, 116, 3, 116, 3, 116, 3, 116, 5, 116, 3508, 10,
	116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 117, 3, 117, 3, 117, 3, 117, 3,
	117, 5, 117, 3519, 10, 117, 3, 118, 5, 118, 3522, 10, 118, 3, 118, 3, 118,
	3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 5, 118, 3533, 10,
	118, 3, 118, 3, 118, 3, 118, 3, 118, 5, 118, 3539, 10, 118, 3, 118, 3,
	118, 5, 118, 3543, 10, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3,
	118, 3, 118, 3, 118, 3, 118, 5, 118, 3554, 10, 118, 3, 118, 3, 118, 3,
	118, 5, 118, 3559, 10, 118, 5, 118, 3561, 10, 118, 3, 118, 3, 118, 5, 118,
	3565, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119,
	3, 119, 5, 119, 3575, 10, 119, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120,
	3, 120, 3, 120, 3, 120, 5, 120, 3585, 10, 120, 3, 121, 3, 121, 7, 121,
	3589, 10, 121, 12, 121, 14, 121, 3592, 11, 121, 3, 121, 3, 121, 5, 121,
	3596, 10, 121, 3, 121, 5, 121, 3599, 10, 121, 3, 121, 5, 121, 3602, 10,
	121, 3, 121, 5, 121, 3605, 10, 121, 3, 121, 5, 121, 3608, 10, 121, 3, 121,
	5, 121, 3611, 10, 121, 3, 121, 5, 121, 3614, 10, 121, 3, 121, 3, 121, 7,
	121, 3618, 10, 121, 12, 121, 14, 121, 3621, 11, 121, 3, 121, 3, 121, 5,
	121, 3625, 10, 121, 3, 121, 5, 121, 3628, 10, 121, 3, 121, 5, 121, 3631,
	10, 121, 3, 121, 5, 121, 3634, 10, 121, 3, 121, 5, 121, 3637, 10, 121,
	3, 121, 5, 121, 3640, 10, 121, 3, 121, 5, 121, 3643, 10, 121, 5, 121, 3645,
	10, 121, 3, 122, 3, 122, 7, 122, 3649, 10, 122, 12, 122, 14, 122, 3652,
	11, 122, 3, 122, 3, 122, 5, 122, 3656, 10, 122, 3, 122, 5, 122, 3659, 10,
	122, 3, 122, 5, 122, 3662, 10, 122, 3, 122, 5, 122, 3665, 10, 122, 3, 122,
	5, 122, 3668, 10, 122, 3, 122, 5, 122, 3671, 10, 122, 3, 123, 3, 123, 5,
	123, 3675, 10, 123, 3, 123, 3, 123, 3, 124, 3, 124, 5, 124, 3681, 10, 124,
	3, 124, 3, 124, 5, 124, 3685, 10, 124, 3, 125, 3, 125, 3, 125, 3, 125,
	3, 125, 3, 125, 3, 125, 3, 125, 5, 125, 3695, 10, 125, 3, 126, 3, 126,
	5, 126, 3699, 10, 126, 3, 126, 3, 126, 7, 126, 3703, 10, 126, 12, 126,
	14, 126, 3706, 11, 126, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	5, 127, 3714, 10, 127, 3, 127, 5, 127, 3717, 10, 127, 3, 127, 3, 127, 5,
	127, 3721, 10, 127, 3, 127, 5, 127, 3724, 10, 127, 3, 127, 3, 127, 5, 127,
	3728, 10, 127, 3, 127, 3, 127, 5, 127, 3732, 10, 127, 3, 127, 5, 127, 3735,
	10, 127, 5, 127, 3737, 10, 127, 3, 128, 3, 128, 3, 128, 3, 128, 7, 128,
	3743, 10, 128, 12, 128, 14, 128, 3746, 11, 128, 3, 128, 3, 128, 3, 128,
	3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 3, 128, 5, 128, 3757, 10, 128,
	3, 128, 3, 128, 6, 128, 3761, 10, 128, 13, 128, 14, 128, 3762, 5, 128,
	3765, 10, 128, 3, 128, 3, 128, 6, 128, 3769, 10, 128, 13, 128, 14, 128,
	3770, 5, 128, 3773, 10, 128, 5, 128, 3775, 10, 128, 3, 129, 3, 129, 3,
	129, 3, 129, 5, 129, 3781, 10, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3,
	129, 3, 129, 5, 129, 3789, 10, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3,
	130, 3, 130, 5, 130, 3797, 10, 130, 3, 131, 3, 131, 5, 131, 3801, 10, 131,
	3, 131, 3, 131, 5, 131, 3805, 10, 131, 3, 132, 3, 132, 3, 132, 3, 132,
	3, 132, 7, 132, 3812, 10, 132, 12, 132, 14, 132, 3815, 11, 132, 3, 132,
	3, 132, 5, 132, 3819, 10, 132, 3, 133, 3, 133, 3, 133, 3, 134, 3, 134,
	3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134,
	3, 134, 3, 134, 7, 134, 3837, 10, 134, 12, 134, 14, 134, 3840, 11, 134,
	3, 135, 3, 135, 5, 135, 3844, 10, 135, 3, 136, 3, 136, 3, 136, 3, 136,
	5, 136, 3850, 10, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 5, 136,
	3857, 10, 136, 3, 137, 3, 137, 3, 137, 5, 137, 3862, 10, 137, 3, 138, 3,
	138, 3, 138, 3, 138, 3, 138, 7, 138, 3869, 10, 138, 12, 138, 14, 138, 3872,
	11, 138, 5, 138, 3874, 10, 138, 3, 139, 3, 139, 5, 139, 3878, 10, 139,
	3, 140, 3, 140, 5, 140, 3882, 10, 140, 3, 140, 3, 140, 5, 140, 3886, 10,
	140, 3, 140, 5, 140, 3889, 10, 140, 3, 140, 5, 140, 3892, 10, 140, 3, 140,
	5, 140, 3895, 10, 140, 3, 141, 3, 141, 5, 141, 3899, 10, 141, 3, 141, 3,
	141, 5, 141, 3903, 10, 141, 3, 141, 5, 141, 3906, 10, 141, 3, 141, 5, 141,
	3909, 10, 141, 3, 141, 5, 141, 3912, 10, 141, 3, 142, 3, 142, 3, 142, 3,
	143, 3, 143, 5, 143, 3919, 10, 143, 3, 143, 3, 143, 5, 143, 3923, 10, 143,
	3, 143, 3, 143, 3, 144, 3, 144, 3, 144, 3, 144, 3, 145, 3, 145, 3, 145,
	3, 145, 3, 145, 7, 145, 3936, 10, 145, 12, 145, 14, 145, 3939, 11, 145,
	3, 146, 3, 146, 3, 146, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 148,
	3, 148, 5, 148, 3951, 10, 148, 3, 148, 3, 148, 3, 148, 3, 148, 7, 148,
	3957, 10, 148, 12, 148, 14, 148, 3960, 11, 148, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 5, 149, 3969, 10, 149, 3, 150, 3, 150,
	5, 150, 3973, 10, 150, 3, 150, 5, 150, 3976, 10, 150, 3, 150, 3, 150, 3,
	151, 3, 151, 5, 151, 3982, 10, 151, 3, 151, 5, 151, 3985, 10, 151, 3, 151,
	5, 151, 3988, 10, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152,
	3, 152, 5, 152, 3997, 10, 152, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153,
	3, 153, 3, 153, 5, 153, 4006, 10, 153, 3, 154, 3, 154, 3, 154, 3, 154,
	3, 154, 3, 154, 7, 154, 4014, 10, 154, 12, 154, 14, 154, 4017, 11, 154,
	3, 154, 5, 154, 4020, 10, 154, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155,
	3, 155, 7, 155, 4028, 10, 155, 12, 155, 14, 155, 4031, 11, 155, 3, 156,
	3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 5, 156, 4040, 10, 156,
	3, 157, 3, 157, 3, 157, 3, 158, 3, 158, 3, 158, 5, 158, 4048, 10, 158,
	3, 158, 5, 158, 4051, 10, 158, 3, 159, 3, 159, 3, 159, 3, 159, 3, 159,
	7, 159, 4058, 10, 159, 12, 159, 14, 159, 4061, 11, 159, 5, 159, 4063, 10,
	159, 3, 159, 3, 159, 5, 159, 4067, 10, 159, 3, 159, 7, 159, 4070, 10, 159,
	12, 159, 14, 159, 4073, 11, 159, 3, 159, 5, 159, 4076, 10, 159, 3, 160,
	3, 160, 3, 160, 3, 160, 3, 160, 7, 160, 4083, 10, 160, 12, 160, 14, 160,
	4086, 11, 160, 5, 160, 4088, 10, 160, 3, 161, 3, 161, 3, 161, 3, 162, 3,
	162, 3, 162, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3,
	163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3,
	163, 3, 163, 3, 163, 3, 163, 3, 163, 7, 163, 4117, 10, 163, 12, 163, 14,
	163, 4120, 11, 163, 5, 163, 4122, 10, 163, 3, 163, 5, 163, 4125, 10, 163,
	3, 164, 3, 164, 3, 165, 3, 165, 3, 166, 3, 166, 3, 167, 3, 167, 3, 167,
	3, 167, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 7, 168, 4179, 10,
	168, 12, 168, 14, 168, 4182, 11, 168, 3, 168, 3, 168, 5, 168, 4186, 10,
	168, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 170, 3, 170, 3,
	171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3,
	171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5,
	171, 4214, 10, 171, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3,
	172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 4228, 10, 172, 3,
	173, 3, 173, 3, 173, 7, 173, 4233, 10, 173, 12, 173, 14, 173, 4236, 11,
	173, 3, 173, 5, 173, 4239, 10, 173, 3, 174, 3, 174, 3, 174, 3, 174, 5,
	174, 4245, 10, 174, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 5,
	175, 4253, 10, 175, 5, 175, 4255, 10, 175, 3, 176, 3, 176, 3, 176, 3, 176,
	3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 5, 177, 4266, 10, 177, 3, 178,
	3, 178, 3, 178, 3, 178, 3, 179, 3, 179, 3, 179, 3, 179, 5, 179, 4276, 10,
	179, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 5, 180, 4283, 10, 180, 3,
	181, 3, 181, 3, 181, 3, 181, 5, 181, 4289, 10, 181, 3, 182, 3, 182, 3,
	182, 3, 182, 3, 183, 3, 183, 5, 183, 4297, 10, 183, 3, 184, 3, 184, 3,
	184, 5, 184, 4302, 10, 184, 3, 184, 3, 184, 3, 184, 3, 184, 7, 184, 4308,
	10, 184, 12, 184, 14, 184, 4311, 11, 184, 3, 184, 3, 184, 3, 184, 7, 184,
	4316, 10, 184, 12, 184, 14, 184, 4319, 11, 184, 3, 184, 3, 184, 3, 184,
	7, 184, 4324, 10, 184, 12, 184, 14, 184, 4327, 11, 184, 3, 184, 3, 184,
	3, 184, 7, 184, 4332, 10, 184, 12, 184, 14, 184, 4335, 11, 184, 3, 184,
	7, 184, 4338, 10, 184, 12, 184, 14, 184, 4341, 11, 184, 5, 184, 4343, 10,
	184, 3, 184, 3, 184, 5, 184, 4347, 10, 184, 3, 185, 3, 185, 3, 185, 5,
	185, 4352, 10, 185, 3, 185, 6, 185, 4355, 10, 185, 13, 185, 14, 185, 4356,
	3, 185, 3, 185, 6, 185, 4361, 10, 185, 13, 185, 14, 185, 4362, 5, 185,
	4365, 10, 185, 3, 185, 3, 185, 3, 185, 3, 186, 3, 186, 3, 186, 3, 186,
	6, 186, 4374, 10, 186, 13, 186, 14, 186, 4375, 3, 186, 7, 186, 4379, 10,
	186, 12, 186, 14, 186, 4382, 11, 186, 3, 186, 3, 186, 6, 186, 4386, 10,
	186, 13, 186, 14, 186, 4387, 5, 186, 4390, 10, 186, 3, 186, 3, 186, 3,
	186, 3, 187, 3, 187, 3, 187, 3, 188, 3, 188, 3, 188, 3, 189, 3, 189, 3,
	189, 5, 189, 4404, 10, 189, 3, 189, 3, 189, 6, 189, 4408, 10, 189, 13,
	189, 14, 189, 4409, 3, 189, 3, 189, 3, 189, 5, 189, 4415, 10, 189, 3, 190,
	3, 190, 3, 190, 5, 190, 4420, 10, 190, 3, 190, 3, 190, 6, 190, 4424, 10,
	190, 13, 190, 14, 190, 4425, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5,
	190, 4433, 10, 190, 3, 191, 3, 191, 3, 191, 3, 192, 3, 192, 3, 192, 5,
	192, 4441, 10, 192, 3, 192, 3, 192, 3, 192, 3, 192, 6, 192, 4447, 10, 192,
	13, 192, 14, 192, 4448, 3, 192, 3, 192, 3, 192, 5, 192, 4454, 10, 192,
	3, 193, 3, 193, 3, 193, 3, 193, 5, 193, 4460, 10, 193, 3, 193, 5, 193,
	4463, 10, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 5, 193,
	4471, 10, 193, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 5, 194, 4478, 10,
	194, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4487,
	10, 195, 3, 195, 5, 195, 4490, 10, 195, 3, 196, 3, 196, 3, 196, 3, 196,
	3, 196, 3, 196, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197,
	7, 197, 4505, 10, 197, 12, 197, 14, 197, 4508, 11, 197, 3, 197, 3, 197,
	3, 198, 3, 198, 3, 198, 5, 198, 4515, 10, 198, 3, 198, 3, 198, 3, 198,
	3, 198, 3, 198, 3, 198, 5, 198, 4523, 10, 198, 3, 199, 3, 199, 5, 199,
	4527, 10, 199, 3, 199, 3, 199, 3, 200, 3, 200, 3, 200, 5, 200, 4534, 10,
	200, 3, 200, 3, 200, 6, 200, 4538, 10, 200, 13, 200, 14, 200, 4539, 3,
	201, 3, 201, 3, 201, 3, 201, 6, 201, 4546, 10, 201, 13, 201, 14, 201, 4547,
	3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 7, 202, 4555, 10, 202, 12, 202,
	14, 202, 4558, 11, 202, 3, 202, 3, 202, 3, 202, 5, 202, 4563, 10, 202,
	3, 202, 3, 202, 3, 202, 7, 202, 4568, 10, 202, 12, 202, 14, 202, 4571,
	11, 202, 3, 202, 3, 202, 3, 202, 3, 202, 5, 202, 4577, 10, 202, 3, 202,
	7, 202, 4580, 10, 202, 12, 202, 14, 202, 4583, 11, 202, 5, 202, 4585, 10,
	202, 5, 202, 4587, 10, 202, 3, 202, 3, 202, 6, 202, 4591, 10, 202, 13,
	202, 14, 202, 4592, 5, 202, 4595, 10, 202, 3, 202, 3, 202, 7, 202, 4599,
	10, 202, 12, 202, 14, 202, 4602, 11, 202, 5, 202, 4604, 10, 202, 3, 203,
	3, 203, 3, 203, 3, 203, 3, 203, 7, 203, 4611, 10, 203, 12, 203, 14, 203,
	4614, 11, 203, 3, 203, 3, 203, 3, 203, 5, 203, 4619, 10, 203, 3, 203, 3,
	203, 3, 203, 7, 203, 4624, 10, 203, 12, 203, 14, 203, 4627, 11, 203, 3,
	203, 3, 203, 3, 203, 3, 203, 5, 203, 4633, 10, 203, 3, 203, 7, 203, 4636,
	10, 203, 12, 203, 14, 203, 4639, 11, 203, 5, 203, 4641, 10, 203, 5, 203,
	4643, 10, 203, 3, 203, 3, 203, 6, 203, 4647, 10, 203, 13, 203, 14, 203,
	4648, 5, 203, 4651, 10, 203, 3, 203, 3, 203, 7, 203, 4655, 10, 203, 12,
	203, 14, 203, 4658, 11, 203, 5, 203, 4660, 10, 203, 3, 204, 3, 204, 3,
	204, 5, 204, 4665, 10, 204, 3, 204, 3, 204, 3, 204, 7, 204, 4670, 10, 204,
	12, 204, 14, 204, 4673, 11, 204, 3, 205, 3, 205, 3, 205, 3, 205, 7, 205,
	4679, 10, 205, 12, 205, 14, 205, 4682, 11, 205, 3, 205, 3, 205, 5, 205,
	4686, 10, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 7, 205, 4693, 10,
	205, 12, 205, 14, 205, 4696, 11, 205, 3, 205, 3, 205, 3, 205, 3, 205, 5,
	205, 4702, 10, 205, 3, 205, 7, 205, 4705, 10, 205, 12, 205, 14, 205, 4708,
	11, 205, 5, 205, 4710, 10, 205, 5, 205, 4712, 10, 205, 3, 205, 3, 205,
	3, 205, 3, 205, 7, 205, 4718, 10, 205, 12, 205, 14, 205, 4721, 11, 205,
	5, 205, 4723, 10, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205,
	5, 205, 4731, 10, 205, 3, 205, 3, 205, 3, 205, 5, 205, 4736, 10, 205, 3,
	205, 3, 205, 3, 205, 5, 205, 4741, 10, 205, 7, 205, 4743, 10, 205, 12,
	205, 14, 205, 4746, 11, 205, 3, 205, 3, 205, 3, 205, 5, 205, 4751, 10,
	205, 3, 205, 3, 205, 3, 205, 5, 205, 4756, 10, 205, 7, 205, 4758, 10, 205,
	12, 205, 14, 205, 4761, 11, 205, 3, 205, 3, 205, 3, 205, 5, 205, 4766,
	10, 205, 5, 205, 4768, 10, 205, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206,
	3, 206, 3, 206, 7, 206, 4777, 10, 206, 12, 206, 14, 206, 4780, 11, 206,
	5, 206, 4782, 10, 206, 3, 206, 3, 206, 3, 206, 7, 206, 4787, 10, 206, 12,
	206, 14, 206, 4790, 11, 206, 5, 206, 4792, 10, 206, 3, 207, 3, 207, 3,
	207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 7, 207, 4802, 10, 207, 12,
	207, 14, 207, 4805, 11, 207, 3, 207, 3, 207, 3, 207, 5, 207, 4810, 10,
	207, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 7, 208, 4817, 10, 208, 12,
	208, 14, 208, 4820, 11, 208, 3, 209, 3, 209, 3, 209, 3, 209, 7, 209, 4826,
	10, 209, 12, 209, 14, 209, 4829, 11, 209, 3, 209, 3, 209, 5, 209, 4833,
	10, 209, 3, 209, 3, 209, 3, 209, 3, 209, 3, 209, 7, 209, 4840, 10, 209,
	12, 209, 14, 209, 4843, 11, 209, 3, 209, 3, 209, 3, 209, 5, 209, 4848,
	10, 209, 3, 209, 3, 209, 3, 209, 3, 209, 3, 209, 3, 209, 3, 209, 7, 209,
	4857, 10, 209, 12, 209, 14, 209, 4860, 11, 209, 3, 209, 3, 209, 3, 209,
	3, 209, 7, 209, 4866, 10, 209, 12, 209, 14, 209, 4869, 11, 209, 3, 209,
	3, 209, 3, 209, 5, 209, 4874, 10, 209, 3, 209, 3, 209, 3, 209, 5, 209,
	4879, 10, 209, 7, 209, 4881, 10, 209, 12, 209, 14, 209, 4884, 11, 209,
	5, 209, 4886, 10, 209, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210,
	3, 210, 3, 210, 7, 210, 4896, 10, 210, 12, 210, 14, 210, 4899, 11, 210,
	3, 211, 3, 211, 3, 211, 3, 211, 5, 211, 4905, 10, 211, 3, 211, 3, 211,
	3, 211, 5, 211, 4910, 10, 211, 3, 212, 3, 212, 3, 212, 3, 213, 3, 213,
	3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213,
	4925, 10, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213, 4932, 10,
	213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213, 4940, 10,
	213, 3, 213, 5, 213, 4943, 10, 213, 3, 214, 3, 214, 3, 214, 3, 214, 3,
	214, 3, 214, 3, 214, 3, 214, 5, 214, 4953, 10, 214, 3, 215, 3, 215, 3,
	215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 5, 215, 4963, 10, 215, 3,
	216, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 5, 216, 4973,
	10, 216, 3, 217, 3, 217, 3, 217, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218,
	5, 218, 4983, 10, 218, 3, 219, 3, 219, 5, 219, 4987, 10, 219, 3, 219, 3,
	219, 5, 219, 4991, 10, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 5, 219, 5001, 10, 219, 3, 219, 3, 219, 3, 219, 5,
	219, 5006, 10, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3,
	219, 3, 219, 3, 219, 3, 219, 3, 219, 5, 219, 5064, 10, 219, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 5082, 10, 220, 3,
	221, 3, 221, 3, 221, 3, 221, 3, 222, 3, 222, 5, 222, 5090, 10, 222, 3,
	222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 7, 222, 5100,
	10, 222, 12, 222, 14, 222, 5103, 11, 222, 3, 222, 3, 222, 3, 222, 3, 222,
	5, 222, 5109, 10, 222, 5, 222, 5111, 10, 222, 3, 222, 3, 222, 3, 222, 3,
	222, 3, 222, 3, 222, 7, 222, 5119, 10, 222, 12, 222, 14, 222, 5122, 11,
	222, 5, 222, 5124, 10, 222, 3, 223, 3, 223, 3, 223, 3, 223, 7, 223, 5130,
	10, 223, 12, 223, 14, 223, 5133, 11, 223, 3, 224, 3, 224, 3, 224, 3, 224,
	5, 224, 5139, 10, 224, 3, 225, 3, 225, 5, 225, 5143, 10, 225, 3, 225, 3,
	225, 3, 225, 3, 226, 3, 226, 5, 226, 5150, 10, 226, 3, 226, 3, 226, 3,
	226, 5, 226, 5155, 10, 226, 3, 226, 5, 226, 5158, 10, 226, 3, 226, 5, 226,
	5161, 10, 226, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227,
	5, 227, 5170, 10, 227, 3, 228, 3, 228, 5, 228, 5174, 10, 228, 3, 228, 3,
	228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 229, 3, 229, 3, 229, 3,
	229, 3, 229, 3, 229, 3, 230, 3, 230, 3, 230, 3, 230, 3, 231, 3, 231, 3,
	231, 3, 231, 3, 231, 5, 231, 5198, 10, 231, 3, 231, 3, 231, 3, 231, 3,
	231, 3, 231, 5, 231, 5205, 10, 231, 7, 231, 5207, 10, 231, 12, 231, 14,
	231, 5210, 11, 231, 3, 231, 3, 231, 3, 231, 3, 231, 5, 231, 5216, 10, 231,
	3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 5, 231, 5223, 10, 231, 3, 231,
	5, 231, 5226, 10, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231,
	3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 3, 231, 7, 231, 5240, 10, 231,
	12, 231, 14, 231, 5243, 11, 231, 5, 231, 5245, 10, 231, 3, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5255, 10, 232,
	3, 232, 3, 232, 5, 232, 5259, 10, 232, 3, 232, 3, 232, 3, 232, 3, 232,
	5, 232, 5265, 10, 232, 3, 232, 5, 232, 5268, 10, 232, 3, 232, 3, 232, 3,
	232, 5, 232, 5273, 10, 232, 3, 232, 3, 232, 5, 232, 5277, 10, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5284, 10, 232, 3, 232, 5, 232,
	5287, 10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5293, 10, 232, 3,
	232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3,
	232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3,
	232, 3, 232, 3, 232, 3, 232, 5, 232, 5317, 10, 232, 3, 232, 5, 232, 5320,
	10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232,
	3, 232, 3, 232, 5, 232, 5332, 10, 232, 3, 232, 5, 232, 5335, 10, 232, 3,
	232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5345,
	10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5353,
	10, 232, 3, 232, 3, 232, 5, 232, 5357, 10, 232, 3, 232, 3, 232, 3, 232,
	3, 232, 3, 232, 5, 232, 5364, 10, 232, 3, 232, 5, 232, 5367, 10, 232, 3,
	232, 3, 232, 3, 232, 3, 232, 3, 232, 7, 232, 5374, 10, 232, 12, 232, 14,
	232, 5377, 11, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5382, 10, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 5, 232, 5388, 10, 232, 3, 232, 3, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5398, 10, 232, 5, 232,
	5400, 10, 232, 3, 233, 3, 233, 3, 233, 3, 233, 5, 233, 5406, 10, 233, 3,
	233, 5, 233, 5409, 10, 233, 3, 233, 5, 233, 5412, 10, 233, 3, 234, 3, 234,
	3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 5, 234,
	5424, 10, 234, 3, 234, 5, 234, 5427, 10, 234, 3, 235, 3, 235, 3, 235, 3,
	235, 5, 235, 5433, 10, 235, 3, 236, 5, 236, 5436, 10, 236, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 236, 3, 236, 5, 236, 5444, 10, 236, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 236, 3, 236, 5, 236, 5452, 10, 236, 3, 237, 3, 237,
	3, 237, 3, 237, 5, 237, 5458, 10, 237, 3, 237, 3, 237, 5, 237, 5462, 10,
	237, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3,
	238, 3, 238, 3, 238, 3, 238, 5, 238, 5476, 10, 238, 3, 239, 3, 239, 3,
	239, 3, 240, 3, 240, 3, 240, 3, 240, 3, 240, 7, 240, 5486, 10, 240, 12,
	240, 14, 240, 5489, 11, 240, 3, 240, 3, 240, 3, 240, 3, 240, 5, 240, 5495,
	10, 240, 3, 240, 5, 240, 5498, 10, 240, 3, 240, 3, 240, 3, 240, 3, 241,
	3, 241, 5, 241, 5505, 10, 241, 3, 241, 3, 241, 3, 241, 7, 241, 5510, 10,
	241, 12, 241, 14, 241, 5513, 11, 241, 3, 242, 3, 242, 5, 242, 5517, 10,
	242, 3, 242, 6, 242, 5520, 10, 242, 13, 242, 14, 242, 5521, 3, 243, 3,
	243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 7, 243, 5531, 10, 243, 12,
	243, 14, 243, 5534, 11, 243, 3, 244, 3, 244, 3, 244, 3, 244, 3, 245, 3,
	245, 3, 246, 3, 246, 5, 246, 5544, 10, 246, 3, 246, 3, 246, 3, 246, 3,
	246, 5, 246, 5550, 10, 246, 3, 247, 3, 247, 3, 247, 5, 247, 5555, 10, 247,
	3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247, 3, 247,
	3, 247, 3, 247, 5, 247, 5568, 10, 247, 5, 247, 5570, 10, 247, 3, 247, 3,
	247, 3, 247, 5, 247, 5575, 10, 247, 3, 247, 3, 247, 5, 247, 5579, 10, 247,
	3, 247, 5, 247, 5582, 10, 247, 5, 247, 5584, 10, 247, 3, 248, 3, 248, 3,
	248, 3, 248, 3, 248, 5, 248, 5591, 10, 248, 3, 249, 3, 249, 3, 249, 3,
	249, 3, 249, 5, 249, 5598, 10, 249, 3, 249, 5, 249, 5601, 10, 249, 3, 249,
	5, 249, 5604, 10, 249, 3, 249, 3, 249, 3, 249, 3, 249, 5, 249, 5610, 10,
	249, 3, 249, 3, 249, 5, 249, 5614, 10, 249, 3, 250, 3, 250, 3, 250, 3,
	250, 5, 250, 5620, 10, 250, 3, 251, 3, 251, 3, 251, 3, 251, 5, 251, 5626,
	10, 251, 3, 251, 3, 251, 3, 252, 3, 252, 3, 252, 3, 253, 3, 253, 3, 253,
	3, 254, 3, 254, 3, 254, 5, 254, 5639, 10, 254, 3, 254, 3, 254, 3, 254,
	5, 254, 5644, 10, 254, 3, 254, 3, 254, 3, 254, 3, 254, 7, 254, 5650, 10,
	254, 12, 254, 14, 254, 5653, 11, 254, 5, 254, 5655, 10, 254, 3, 255, 3,
	255, 3, 255, 5, 255, 5660, 10, 255, 3, 255, 3, 255, 3, 255, 5, 255, 5665,
	10, 255, 3, 255, 3, 255, 3, 255, 3, 255, 7, 255, 5671, 10, 255, 12, 255,
	14, 255, 5674, 11, 255, 5, 255, 5676, 10, 255, 3, 256, 3, 256, 3, 256,
	3, 256, 3, 256, 3, 256, 5, 256, 5684, 10, 256, 3, 257, 3, 257, 5, 257,
	5688, 10, 257, 3, 257, 3, 257, 3, 257, 3, 257, 3, 257, 3, 257, 3, 257,
	3, 257, 3, 257, 7, 257, 5699, 10, 257, 12, 257, 14, 257, 5702, 11, 257,
	3, 257, 3, 257, 3, 257, 5, 257, 5707, 10, 257, 3, 257, 3, 257, 3, 257,
	3, 257, 3, 257, 3, 257, 3, 257, 3, 257, 7, 257, 5717, 10, 257, 12, 257,
	14, 257, 5720, 11, 257, 5, 257, 5722, 10, 257, 3, 258, 3, 258, 3, 259,
	3, 259, 3, 259, 3, 259, 3, 259, 5, 259, 5731, 10, 259, 3, 259, 3, 259,
	3, 259, 5, 259, 5736, 10, 259, 3, 260, 3, 260, 3, 260, 3, 260, 5, 260,
	5742, 10, 260, 3, 261, 3, 261, 3, 262, 3, 262, 3, 262, 5, 262, 5749, 10,
	262, 5, 262, 5751, 10, 262, 3, 262, 3, 262, 3, 262, 5, 262, 5756, 10, 262,
	5, 262, 5758, 10, 262, 3, 263, 3, 263, 5, 263, 5762, 10, 263, 3, 263, 3,
	263, 3, 263, 3, 263, 5, 263, 5768, 10, 263, 3, 263, 5, 263, 5771, 10, 263,
	3, 263, 5, 263, 5774, 10, 263, 3, 264, 3, 264, 3, 265, 3, 265, 3, 266,
	3, 266, 3, 266, 3, 266, 5, 266, 5784, 10, 266, 3, 267, 3, 267, 5, 267,
	5788, 10, 267, 3, 268, 3, 268, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269,
	3, 269, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269,
	6, 269, 5806, 10, 269, 13, 269, 14, 269, 5807, 3, 270, 3, 270, 3, 270,
	3, 270, 3, 270, 5, 270, 5815, 10, 270, 5, 270, 5817, 10, 270, 3, 271, 3,
	271, 3, 271, 6, 271, 5822, 10, 271, 13, 271, 14, 271, 5823, 5, 271, 5826,
	10, 271, 3, 272, 3, 272, 5, 272, 5830, 10, 272, 3, 273, 3, 273, 3, 273,
	5, 273, 5835, 10, 273, 3, 274, 3, 274, 3, 274, 3, 274, 3, 274, 3, 274,
	3, 274, 3, 274, 3, 274, 5, 274, 5846, 10, 274, 3, 275, 3, 275, 3, 275,
	5, 275, 5851, 10, 275, 3, 276, 3, 276, 3, 277, 3, 277, 5, 277, 5857, 10,
	277, 3, 278, 5, 278, 5860, 10, 278, 3, 278, 3, 278, 5, 278, 5864, 10, 278,
	3, 278, 6, 278, 5867, 10, 278, 13, 278, 14, 278, 5868, 3, 278, 5, 278,
	5872, 10, 278, 3, 278, 3, 278, 5, 278, 5876, 10, 278, 3, 278, 3, 278, 5,
	278, 5880, 10, 278, 5, 278, 5882, 10, 278, 3, 279, 3, 279, 3, 280, 5, 280,
	5887, 10, 280, 3, 280, 3, 280, 3, 281, 5, 281, 5892, 10, 281, 3, 281, 3,
	281, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282, 3,
	282, 5, 282, 5905, 10, 282, 3, 282, 5, 282, 5908, 10, 282, 3, 283, 3, 283,
	5, 283, 5912, 10, 283, 3, 283, 5, 283, 5915, 10, 283, 3, 283, 5, 283, 5918,
	10, 283, 3, 283, 3, 283, 3, 283, 5, 283, 5923, 10, 283, 3, 283, 3, 283,
	3, 283, 5, 283, 5928, 10, 283, 3, 283, 3, 283, 3, 283, 5, 283, 5933, 10,
	283, 3, 283, 5, 283, 5936, 10, 283, 3, 283, 3, 283, 3, 283, 5, 283, 5941,
	10, 283, 3, 283, 5, 283, 5944, 10, 283, 3, 283, 3, 283, 3, 283, 3, 283,
	5, 283, 5950, 10, 283, 3, 283, 5, 283, 5953, 10, 283, 3, 283, 3, 283, 5,
	283, 5957, 10, 283, 3, 283, 7, 283, 5960, 10, 283, 12, 283, 14, 283, 5963,
	11, 283, 3, 283, 3, 283, 5, 283, 5967, 10, 283, 3, 283, 7, 283, 5970, 10,
	283, 12, 283, 14, 283, 5973, 11, 283, 3, 283, 3, 283, 5, 283, 5977, 10,
	283, 3, 283, 5, 283, 5980, 10, 283, 3, 283, 7, 283, 5983, 10, 283, 12,
	283, 14, 283, 5986, 11, 283, 3, 283, 3, 283, 5, 283, 5990, 10, 283, 3,
	283, 7, 283, 5993, 10, 283, 12, 283, 14, 283, 5996, 11, 283, 3, 283, 3,
	283, 3, 283, 5, 283, 6001, 10, 283, 3, 283, 3, 283, 3, 283, 5, 283, 6006,
	10, 283, 3, 283, 3, 283, 3, 283, 5, 283, 6011, 10, 283, 3, 283, 3, 283,
	3, 283, 5, 283, 6016, 10, 283, 3, 283, 5, 283, 6019, 10, 283, 3, 283, 3,
	283, 3, 283, 5, 283, 6024, 10, 283, 3, 283, 3, 283, 5, 283, 6028, 10, 283,
	3, 283, 3, 283, 5, 283, 6032, 10, 283, 3, 284, 3, 284, 3, 284, 3, 284,
	7, 284, 6038, 10, 284, 12, 284, 14, 284, 6041, 11, 284, 3, 284, 3, 284,
	3, 285, 3, 285, 5, 285, 6047, 10, 285, 3, 285, 3, 285, 5, 285, 6051, 10,
	285, 3, 285, 3, 285, 3, 285, 5, 285, 6056, 10, 285, 3, 285, 3, 285, 3,
	285, 5, 285, 6061, 10, 285, 3, 285, 3, 285, 5, 285, 6065, 10, 285, 5, 285,
	6067, 10, 285, 3, 285, 5, 285, 6070, 10, 285, 3, 286, 3, 286, 3, 286, 3,
	286, 3, 287, 3, 287, 3, 287, 3, 287, 3, 287, 3, 287, 3, 288, 3, 288, 3,
	288, 3, 288, 5, 288, 6086, 10, 288, 3, 288, 3, 288, 3, 289, 3, 289, 3,
	289, 7, 289, 6093, 10, 289, 12, 289, 14, 289, 6096, 11, 289, 3, 290, 3,
	290, 3, 290, 7, 290, 6101, 10, 290, 12, 290, 14, 290, 6104, 11, 290, 3,
	291, 3, 291, 3, 291, 3, 291, 7, 291, 6110, 10, 291, 12, 291, 14, 291, 6113,
	11, 291, 3, 291, 3, 291, 3, 292, 3, 292, 3, 292, 7, 292, 6120, 10, 292,
	12, 292, 14, 292, 6123, 11, 292, 3, 293, 3, 293, 3, 293, 7, 293, 6128,
	10, 293, 12, 293, 14, 293, 6131, 11, 293, 3, 294, 3, 294, 3, 294, 7, 294,
	6136, 10, 294, 12, 294, 14, 294, 6139, 11, 294, 3, 295, 3, 295, 3, 295,
	7, 295, 6144, 10, 295, 12, 295, 14, 295, 6147, 11, 295, 3, 296, 3, 296,
	3, 296, 7, 296, 6152, 10, 296, 12, 296, 14, 296, 6155, 11, 296, 3, 297,
	3, 297, 5, 297, 6159, 10, 297, 3, 297, 3, 297, 3, 297, 3, 297, 3, 297,
	3, 297, 5, 297, 6167, 10, 297, 3, 297, 3, 297, 3, 297, 5, 297, 6172, 10,
	297, 3, 298, 3, 298, 3, 298, 5, 298, 6177, 10, 298, 3, 298, 5, 298, 6180,
	10, 298, 3, 298, 3, 298, 3, 298, 5, 298, 6185, 10, 298, 3, 298, 5, 298,
	6188, 10, 298, 3, 299, 3, 299, 5, 299, 6192, 10, 299, 3, 300, 3, 300, 3,
	300, 3, 301, 3, 301, 3, 301, 3, 301, 3, 302, 3, 302, 3, 302, 3, 302, 3,
	302, 3, 302, 5, 302, 6207, 10, 302, 3, 302, 3, 302, 3, 302, 3, 302, 3,
	302, 5, 302, 6214, 10, 302, 3, 302, 3, 302, 3, 302, 5, 302, 6219, 10, 302,
	3, 303, 3, 303, 3, 303, 5, 303, 6224, 10, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 6, 303,
	6255, 10, 303, 13, 303, 14, 303, 6256, 3, 303, 3, 303, 5, 303, 6261, 10,
	303, 3, 303, 3, 303, 3, 303, 3, 303, 6, 303, 6267, 10, 303, 13, 303, 14,
	303, 6268, 3, 303, 3, 303, 5, 303, 6273, 10, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6282, 10, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6290, 10, 303, 3, 303, 3, 303,
	3, 303, 5, 303, 6295, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 5, 303, 6303, 10, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6308, 10,
	303, 3, 303, 3, 303, 3, 303, 5, 303, 6313, 10, 303, 5, 303, 6315, 10, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6324, 10,
	303, 3, 303, 3, 303, 3, 303, 5, 303, 6329, 10, 303, 3, 303, 3, 303, 3,
	303, 3, 303, 3, 303, 3, 303, 5, 303, 6337, 10, 303, 3, 303, 3, 303, 3,
	303, 5, 303, 6342, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3,
	303, 5, 303, 6350, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3,
	303, 5, 303, 6358, 10, 303, 3, 303, 5, 303, 6361, 10, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6371, 10, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303,
	3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6389, 10,
	303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6395, 10, 303, 3, 303, 3,
	303, 5, 303, 6399, 10, 303, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6405,
	10, 303, 3, 303, 3, 303, 5, 303, 6409, 10, 303, 3, 303, 3, 303, 5, 303,
	6413, 10, 303, 3, 304, 3, 304, 3, 304, 3, 304, 3, 304, 3, 305, 3, 305,
	3, 305, 3, 305, 7, 305, 6424, 10, 305, 12, 305, 14, 305, 6427, 11, 305,
	3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 6434, 10, 305, 3, 306,
	3, 306, 5, 306, 6438, 10, 306, 3, 307, 3, 307, 3, 307, 5, 307, 6443, 10,
	307, 3, 307, 3, 307, 3, 307, 5, 307, 6448, 10, 307, 3, 307, 3, 307, 3,
	307, 3, 307, 5, 307, 6454, 10, 307, 3, 307, 3, 307, 3, 307, 5, 307, 6459,
	10, 307, 3, 307, 3, 307, 5, 307, 6463, 10, 307, 3, 307, 3, 307, 3, 307,
	5, 307, 6468, 10, 307, 3, 307, 3, 307, 3, 307, 5, 307, 6473, 10, 307, 3,
	307, 3, 307, 3, 307, 5, 307, 6478, 10, 307, 3, 307, 3, 307, 3, 307, 3,
	307, 3, 307, 3, 307, 7, 307, 6486, 10, 307, 12, 307, 14, 307, 6489, 11,
	307, 5, 307, 6491, 10, 307, 3, 307, 3, 307, 5, 307, 6495, 10, 307, 3, 307,
	3, 307, 5, 307, 6499, 10, 307, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308,
	5, 308, 6506, 10, 308, 3, 308, 3, 308, 5, 308, 6510, 10, 308, 3, 308, 3,
	308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3,
	308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3,
	308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 5, 308, 6539,
	10, 308, 3, 309, 3, 309, 3, 309, 5, 309, 6544, 10, 309, 3, 309, 3, 309,
	5, 309, 6548, 10, 309, 3, 310, 5, 310, 6551, 10, 310, 3, 310, 5, 310, 6554,
	10, 310, 3, 310, 5, 310, 6557, 10, 310, 3, 310, 5, 310, 6560, 10, 310,
	3, 311, 3, 311, 3, 312, 3, 312, 3, 312, 3, 313, 3, 313, 3, 314, 3, 314,
	5, 314, 6571, 10, 314, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 3, 316,
	3, 316, 3, 316, 3, 316, 3, 316, 3, 316, 3, 316, 5, 316, 6585, 10, 316,
	3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 7, 317, 6592, 10, 317, 12, 317,
	14, 317, 6595, 11, 317, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318,
	3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318,
	3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3, 318, 5, 318,
	6620, 10, 318, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 320, 3, 320,
	3, 320, 3, 320, 5, 320, 6631, 10, 320, 3, 320, 3, 320, 3, 320, 3, 320,
	3, 320, 5, 320, 6638, 10, 320, 7, 320, 6640, 10, 320, 12, 320, 14, 320,
	6643, 11, 320, 3, 321, 3, 321, 3, 321, 3, 321, 5, 321, 6649, 10, 321, 3,
	322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 5, 322, 6657, 10, 322, 3,
	322, 3, 322, 3, 322, 5, 322, 6662, 10, 322, 3, 322, 3, 322, 3, 322, 3,
	322, 7, 322, 6668, 10, 322, 12, 322, 14, 322, 6671, 11, 322, 3, 323, 3,
	323, 3, 323, 5, 323, 6676, 10, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3,
	323, 3, 323, 3, 323, 3, 323, 5, 323, 6686, 10, 323, 3, 323, 3, 323, 3,
	323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 5,
	323, 6699, 10, 323, 3, 323, 3, 323, 3, 323, 3, 323, 5, 323, 6705, 10, 323,
	3, 323, 3, 323, 3, 323, 3, 323, 5, 323, 6711, 10, 323, 3, 323, 3, 323,
	3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323,
	3, 323, 3, 323, 3, 323, 5, 323, 6727, 10, 323, 3, 323, 3, 323, 3, 323,
	3, 323, 5, 323, 6733, 10, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323,
	3, 323, 3, 323, 7, 323, 6742, 10, 323, 12, 323, 14, 323, 6745, 11, 323,
	3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324,
	3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 7, 324, 6761, 10, 324, 12, 324,
	14, 324, 6764, 11, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324,
	3, 324, 6, 324, 6773, 10, 324, 13, 324, 14, 324, 6774, 3, 324, 3, 324,
	3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324,
	3, 324, 3, 324, 3, 324, 3, 324, 5, 324, 6792, 10, 324, 3, 324, 3, 324,
	3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 3, 324,
	3, 324, 3, 324, 3, 324, 3, 324, 7, 324, 6809, 10, 324, 12, 324, 14, 324,
	6812, 11, 324, 3, 325, 3, 325, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326,
	3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326, 3, 326,
	5, 326, 6830, 10, 326, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327,
	3, 327, 5, 327, 6839, 10, 327, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328,
	3, 328, 3, 328, 5, 328, 6848, 10, 328, 3, 329, 3, 329, 3, 330, 3, 330,
	3, 330, 3, 330, 3, 330, 5, 330, 6857, 10, 330, 3, 331, 3, 331, 3, 332,
	3, 332, 3, 333, 3, 333, 3, 334, 3, 334, 3, 335, 3, 335, 3, 336, 3, 336,
	3, 337, 3, 337, 3, 337, 2, 5, 642, 644, 646, 338, 2, 4, 6, 8, 10, 12, 14,
	16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50,
	52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
	88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
	120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148,
	150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178,
	180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208,
	210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238,
	240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268,
	270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298,
	300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388,
	390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418,
	420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448,
	450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
	510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538,
	540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568,
	570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598,
	600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628,
	630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658,
	660, 662, 664, 666, 668, 670, 672, 2, 140, 4, 2, 39, 39, 146, 146, 4, 2,
	511, 511, 517, 517, 5, 2, 68, 68, 153, 153, 174, 174, 7, 2, 42, 42, 374,
	374, 438, 438, 442, 442, 506, 506, 6, 2, 42, 42, 406, 406, 509, 509, 585,
	585, 4, 2, 498, 498, 1113, 1113, 4, 2, 77, 77, 137, 137, 4, 2, 16, 16,
	324, 324, 5, 2, 44, 44, 84, 84, 177, 177, 4, 2, 420, 420, 535, 535, 5,
	2, 490, 490, 624, 624, 632, 632, 4, 2, 381, 381, 444, 444, 4, 2, 342, 342,
	458, 458, 5, 2, 340, 340, 429, 429, 578, 578, 4, 2, 443, 443, 647, 647,
	4, 2, 505, 505, 657, 657, 5, 2, 79, 79, 83, 83, 121, 121, 5, 2, 42, 42,
	391, 391, 417, 417, 5, 2, 42, 42, 387, 387, 759, 759, 4, 2, 611, 611, 646,
	646, 4, 2, 80, 80, 90, 90, 5, 2, 422, 422, 526, 526, 587, 587, 4, 2, 68,
	68, 153, 153, 3, 2, 346, 347, 3, 2, 1103, 1104, 4, 2, 1113, 1113, 1121,
	1121, 5, 2, 416, 416, 453, 453, 505, 505, 4, 2, 42, 42, 1103, 1104, 9,
	2, 42, 42, 360, 360, 362, 362, 391, 391, 417, 417, 550, 550, 1121, 1121,
	4, 2, 498, 498, 510, 510, 3, 2, 1104, 1105, 4, 2, 7, 7, 51, 51, 6, 2, 42,
	42, 374, 374, 438, 438, 442, 442, 4, 2, 27, 27, 31, 31, 4, 2, 14, 14, 168,
	168, 4, 2, 185, 185, 651, 651, 5, 2, 42, 42, 374, 374, 438, 438, 4, 2,
	22, 22, 140, 140, 5, 2, 43, 43, 74, 74, 103, 103, 4, 2, 103, 103, 364,
	364, 4, 2, 355, 355, 413, 413, 4, 2, 99, 99, 576, 576, 4, 2, 43, 43, 103,
	103, 4, 2, 8, 8, 49, 49, 4, 2, 181, 181, 643, 643, 6, 2, 416, 416, 453,
	453, 504, 504, 539, 539, 4, 2, 416, 416, 504, 504, 4, 2, 15, 15, 45, 45,
	5, 2, 65, 65, 77, 77, 179, 179, 4, 2, 35, 35, 82, 82, 4, 2, 95, 95, 144,
	144, 4, 2, 8, 8, 49, 50, 3, 2, 600, 601, 4, 2, 425, 425, 583, 583, 4, 2,
	219, 219, 461, 461, 7, 2, 104, 104, 466, 467, 469, 469, 473, 481, 552,
	552, 6, 2, 463, 464, 468, 468, 470, 471, 553, 553, 5, 2, 105, 105, 462,
	462, 472, 472, 4, 2, 446, 446, 602, 602, 4, 2, 596, 596, 598, 598, 4, 2,
	334, 334, 603, 603, 4, 2, 89, 89, 567, 567, 4, 2, 51, 51, 379, 379, 5,
	2, 32, 32, 60, 60, 172, 172, 5, 2, 127, 127, 165, 165, 423, 423, 4, 2,
	101, 101, 175, 175, 4, 2, 350, 350, 588, 588, 4, 2, 40, 40, 645, 645, 4,
	2, 111, 111, 458, 458, 4, 2, 165, 165, 671, 671, 4, 2, 409, 409, 545, 545,
	6, 2, 199, 199, 201, 201, 207, 207, 612, 612, 4, 2, 1073, 1073, 1089, 1089,
	4, 2, 335, 335, 554, 554, 4, 2, 67, 67, 79, 79, 8, 2, 127, 127, 165, 165,
	170, 170, 402, 402, 423, 423, 645, 645, 4, 2, 497, 497, 608, 608, 4, 2,
	399, 399, 649, 649, 4, 2, 127, 127, 423, 423, 5, 2, 80, 80, 91, 91, 436,
	436, 5, 2, 425, 425, 458, 458, 583, 583, 4, 2, 608, 608, 644, 644, 4, 2,
	366, 366, 544, 544, 8, 2, 219, 219, 396, 396, 398, 398, 424, 424, 551,
	551, 589, 589, 4, 2, 45, 46, 61, 61, 5, 2, 409, 409, 528, 528, 852, 852,
	4, 2, 450, 450, 626, 626, 12, 2, 349, 349, 357, 357, 368, 370, 376, 376,
	491, 491, 499, 499, 613, 613, 620, 620, 803, 803, 971, 971, 4, 2, 36, 36,
	162, 162, 4, 2, 113, 113, 962, 962, 13, 2, 349, 349, 357, 357, 368, 370,
	376, 376, 491, 491, 499, 499, 568, 568, 613, 613, 620, 620, 803, 803, 971,
	971, 6, 2, 694, 694, 1113, 1113, 1121, 1121, 1123, 1123, 3, 2, 1125, 1126,
	6, 2, 365, 365, 754, 765, 1113, 1113, 1121, 1122, 5, 2, 1103, 1105, 1114,
	1114, 1116, 1116, 4, 2, 62, 62, 171, 171, 4, 2, 112, 112, 1117, 1117, 7,
	2, 26, 26, 215, 217, 224, 224, 226, 229, 502, 502, 4, 2, 26, 26, 216, 216,
	4, 2, 26, 26, 215, 215, 3, 2, 189, 200, 5, 2, 176, 176, 188, 188, 586,
	586, 4, 2, 204, 209, 417, 417, 8, 2, 210, 210, 221, 221, 223, 223, 225,
	225, 232, 232, 338, 339, 6, 2, 211, 214, 219, 220, 222, 222, 336, 336,
	4, 2, 149, 149, 230, 230, 4, 2, 450, 450, 770, 778, 4, 2, 219, 219, 502,
	502, 7, 2, 193, 193, 199, 199, 210, 211, 213, 213, 450, 450, 4, 2, 176,
	176, 586, 586, 4, 2, 305, 306, 312, 312, 4, 2, 37, 37, 303, 306, 3, 2,
	315, 316, 5, 2, 18, 18, 93, 93, 169, 169, 4, 2, 215, 215, 219, 219, 4,
	2, 210, 211, 213, 213, 5, 2, 15, 15, 45, 45, 960, 960, 5, 2, 276, 276,
	288, 289, 299, 299, 5, 2, 277, 279, 295, 298, 300, 302, 4, 2, 285, 285,
	287, 287, 4, 2, 283, 283, 286, 286, 4, 2, 281, 282, 292, 294, 4, 2, 129,
	129, 576, 576, 4, 2, 419, 419, 536, 536, 4, 2, 515, 515, 529, 529, 4, 2,
	110, 110, 1092, 1092, 5, 2, 62, 62, 171, 171, 636, 636, 4, 2, 133, 133,
	145, 145, 5, 2, 8, 8, 327, 327, 592, 592, 5, 2, 110, 110, 1085, 1086, 1092,
	1093, 3, 2, 1082, 1088, 4, 2, 219, 219, 713, 753, 3, 2, 766, 769, 3, 2,
	671, 679, 3, 2, 663, 670, 5, 2, 210, 214, 227, 227, 230, 230, 36, 2, 36,
	36, 48, 48, 58, 58, 72, 72, 78, 78, 113, 113, 117, 117, 120, 120, 162,
	162, 232, 232, 276, 280, 284, 284, 288, 289, 295, 302, 322, 418, 420, 442,
	444, 535, 537, 568, 570, 610, 612, 621, 623, 630, 632, 645, 648, 649, 651,
	656, 658, 662, 681, 689, 694, 696, 698, 704, 706, 712, 759, 759, 803, 803,
	842, 842, 966, 966, 971, 971, 24, 2, 39, 39, 95, 95, 144, 144, 146, 146,
	210, 212, 214, 214, 244, 275, 280, 283, 285, 287, 290, 294, 314, 314, 443,
	443, 647, 647, 663, 670, 706, 706, 770, 770, 773, 802, 804, 841, 843, 965,
	967, 970, 972, 1072, 1088, 1088, 2, 8076, 2, 675, 3, 2, 2, 2, 4, 694, 3,
	2, 2, 2, 6, 715, 3, 2, 2, 2, 8, 717, 3, 2, 2, 2, 10, 754, 3, 2, 2, 2, 12,
	766, 3, 2, 2, 2, 14, 777, 3, 2, 2, 2, 16, 794, 3, 2, 2, 2, 18, 799, 3,
	2, 2, 2, 20, 811, 3, 2, 2, 2, 22, 838, 3, 2, 2, 2, 24, 847, 3, 2, 2, 2,
	26, 849, 3, 2, 2, 2, 28, 861, 3, 2, 2, 2, 30, 891, 3, 2, 2, 2, 32, 941,
	3, 2, 2, 2, 34, 992, 3, 2, 2, 2, 36, 1018, 3, 2, 2, 2, 38, 1048, 3, 2,
	2, 2, 40, 1145, 3, 2, 2, 2, 42, 1147, 3, 2, 2, 2, 44, 1165, 3, 2, 2, 2,
	46, 1226, 3, 2, 2, 2, 48, 1249, 3, 2, 2, 2, 50, 1255, 3, 2, 2, 2, 52, 1277,
	3, 2, 2, 2, 54, 1279, 3, 2, 2, 2, 56, 1281, 3, 2, 2, 2, 58, 1339, 3, 2,
	2, 2, 60, 1346, 3, 2, 2, 2, 62, 1348, 3, 2, 2, 2, 64, 1392, 3, 2, 2, 2,
	66, 1398, 3, 2, 2, 2, 68, 1400, 3, 2, 2, 2, 70, 1421, 3, 2, 2, 2, 72, 1428,
	3, 2, 2, 2, 74, 1430, 3, 2, 2, 2, 76, 1463, 3, 2, 2, 2, 78, 1466, 3, 2,
	2, 2, 80, 1471, 3, 2, 2, 2, 82, 1497, 3, 2, 2, 2, 84, 1513, 3, 2, 2, 2,
	86, 1515, 3, 2, 2, 2, 88, 1531, 3, 2, 2, 2, 90, 1533, 3, 2, 2, 2, 92, 1593,
	3, 2, 2, 2, 94, 1664, 3, 2, 2, 2, 96, 1666, 3, 2, 2, 2, 98, 1694, 3, 2,
	2, 2, 100, 1702, 3, 2, 2, 2, 102, 1732, 3, 2, 2, 2, 104, 1879, 3, 2, 2,
	2, 106, 1881, 3, 2, 2, 2, 108, 1883, 3, 2, 2, 2, 110, 1886, 3, 2, 2, 2,
	112, 1960, 3, 2, 2, 2, 114, 1983, 3, 2, 2, 2, 116, 2131, 3, 2, 2, 2, 118,
	2136, 3, 2, 2, 2, 120, 2138, 3, 2, 2, 2, 122, 2148, 3, 2, 2, 2, 124, 2204,
	3, 2, 2, 2, 126, 2224, 3, 2, 2, 2, 128, 2226, 3, 2, 2, 2, 130, 2261, 3,
	2, 2, 2, 132, 2270, 3, 2, 2, 2, 134, 2277, 3, 2, 2, 2, 136, 2300, 3, 2,
	2, 2, 138, 2309, 3, 2, 2, 2, 140, 2324, 3, 2, 2, 2, 142, 2346, 3, 2, 2,
	2, 144, 2366, 3, 2, 2, 2, 146, 2764, 3, 2, 2, 2, 148, 2766, 3, 2, 2, 2,
	150, 2773, 3, 2, 2, 2, 152, 2780, 3, 2, 2, 2, 154, 2803, 3, 2, 2, 2, 156,
	2811, 3, 2, 2, 2, 158, 2818, 3, 2, 2, 2, 160, 2825, 3, 2, 2, 2, 162, 2832,
	3, 2, 2, 2, 164, 2844, 3, 2, 2, 2, 166, 2854, 3, 2, 2, 2, 168, 2861, 3,
	2, 2, 2, 170, 2877, 3, 2, 2, 2, 172, 2887, 3, 2, 2, 2, 174, 2891, 3, 2,
	2, 2, 176, 2897, 3, 2, 2, 2, 178, 2909, 3, 2, 2, 2, 180, 2911, 3, 2, 2,
	2, 182, 2918, 3, 2, 2, 2, 184, 2920, 3, 2, 2, 2, 186, 2971, 3, 2, 2, 2,
	188, 3045, 3, 2, 2, 2, 190, 3104, 3, 2, 2, 2, 192, 3192, 3, 2, 2, 2, 194,
	3196, 3, 2, 2, 2, 196, 3216, 3, 2, 2, 2, 198, 3218, 3, 2, 2, 2, 200, 3226,
	3, 2, 2, 2, 202, 3234, 3, 2, 2, 2, 204, 3236, 3, 2, 2, 2, 206, 3266, 3,
	2, 2, 2, 208, 3321, 3, 2, 2, 2, 210, 3330, 3, 2, 2, 2, 212, 3350, 3, 2,
	2, 2, 214, 3362, 3, 2, 2, 2, 216, 3366, 3, 2, 2, 2, 218, 3399, 3, 2, 2,
	2, 220, 3420, 3, 2, 2, 2, 222, 3430, 3, 2, 2, 2, 224, 3434, 3, 2, 2, 2,
	226, 3459, 3, 2, 2, 2, 228, 3501, 3, 2, 2, 2, 230, 3503, 3, 2, 2, 2, 232,
	3518, 3, 2, 2, 2, 234, 3564, 3, 2, 2, 2, 236, 3574, 3, 2, 2, 2, 238, 3584,
	3, 2, 2, 2, 240, 3644, 3, 2, 2, 2, 242, 3646, 3, 2, 2, 2, 244, 3672, 3,
	2, 2, 2, 246, 3678, 3, 2, 2, 2, 248, 3694, 3, 2, 2, 2, 250, 3698, 3, 2,
	2, 2, 252, 3736, 3, 2, 2, 2, 254, 3774, 3, 2, 2, 2, 256, 3788, 3, 2, 2,
	2, 258, 3796, 3, 2, 2, 2, 260, 3800, 3, 2, 2, 2, 262, 3806, 3, 2, 2, 2,
	264, 3820, 3, 2, 2, 2, 266, 3823, 3, 2, 2, 2, 268, 3841, 3, 2, 2, 2, 270,
	3845, 3, 2, 2, 2, 272, 3861, 3, 2, 2, 2, 274, 3863, 3, 2, 2, 2, 276, 3875,
	3, 2, 2, 2, 278, 3879, 3, 2, 2, 2, 280, 3896, 3, 2, 2, 2, 282, 3913, 3,
	2, 2, 2, 284, 3916, 3, 2, 2, 2, 286, 3926, 3, 2, 2, 2, 288, 3930, 3, 2,
	2, 2, 290, 3940, 3, 2, 2, 2, 292, 3943, 3, 2, 2, 2, 294, 3948, 3, 2, 2,
	2, 296, 3968, 3, 2, 2, 2, 298, 3970, 3, 2, 2, 2, 300, 3987, 3, 2, 2, 2,
	302, 3996, 3, 2, 2, 2, 304, 4005, 3, 2, 2, 2, 306, 4007, 3, 2, 2, 2, 308,
	4021, 3, 2, 2, 2, 310, 4032, 3, 2, 2, 2, 312, 4041, 3, 2, 2, 2, 314, 4044,
	3, 2, 2, 2, 316, 4052, 3, 2, 2, 2, 318, 4077, 3, 2, 2, 2, 320, 4089, 3,
	2, 2, 2, 322, 4092, 3, 2, 2, 2, 324, 4124, 3, 2, 2, 2, 326, 4126, 3, 2,
	2, 2, 328, 4128, 3, 2, 2, 2, 330, 4130, 3, 2, 2, 2, 332, 4132, 3, 2, 2,
	2, 334, 4185, 3, 2, 2, 2, 336, 4187, 3, 2, 2, 2, 338, 4193, 3, 2, 2, 2,
	340, 4213, 3, 2, 2, 2, 342, 4227, 3, 2, 2, 2, 344, 4238, 3, 2, 2, 2, 346,
	4240, 3, 2, 2, 2, 348, 4246, 3, 2, 2, 2, 350, 4256, 3, 2, 2, 2, 352, 4260,
	3, 2, 2, 2, 354, 4267, 3, 2, 2, 2, 356, 4271, 3, 2, 2, 2, 358, 4277, 3,
	2, 2, 2, 360, 4284, 3, 2, 2, 2, 362, 4290, 3, 2, 2, 2, 364, 4296, 3, 2,
	2, 2, 366, 4301, 3, 2, 2, 2, 368, 4348, 3, 2, 2, 2, 370, 4369, 3, 2, 2,
	2, 372, 4394, 3, 2, 2, 2, 374, 4397, 3, 2, 2, 2, 376, 4403, 3, 2, 2, 2,
	378, 4419, 3, 2, 2, 2, 380, 4434, 3, 2, 2, 2, 382, 4440, 3, 2, 2, 2, 384,
	4470, 3, 2, 2, 2, 386, 4472, 3, 2, 2, 2, 388, 4479, 3, 2, 2, 2, 390, 4491,
	3, 2, 2, 2, 392, 4497, 3, 2, 2, 2, 394, 4522, 3, 2, 2, 2, 396, 4526, 3,
	2, 2, 2, 398, 4530, 3, 2, 2, 2, 400, 4541, 3, 2, 2, 2, 402, 4603, 3, 2,
	2, 2, 404, 4659, 3, 2, 2, 2, 406, 4661, 3, 2, 2, 2, 408, 4767, 3, 2, 2,
	2, 410, 4791, 3, 2, 2, 2, 412, 4793, 3, 2, 2, 2, 414, 4811, 3, 2, 2, 2,
	416, 4885, 3, 2, 2, 2, 418, 4887, 3, 2, 2, 2, 420, 4900, 3, 2, 2, 2, 422,
	4911, 3, 2, 2, 2, 424, 4942, 3, 2, 2, 2, 426, 4952, 3, 2, 2, 2, 428, 4962,
	3, 2, 2, 2, 430, 4964, 3, 2, 2, 2, 432, 4974, 3, 2, 2, 2, 434, 4977, 3,
	2, 2, 2, 436, 5063, 3, 2, 2, 2, 438, 5081, 3, 2, 2, 2, 440, 5083, 3, 2,
	2, 2, 442, 5087, 3, 2, 2, 2, 444, 5125, 3, 2, 2, 2, 446, 5134, 3, 2, 2,
	2, 448, 5140, 3, 2, 2, 2, 450, 5147, 3, 2, 2, 2, 452, 5169, 3, 2, 2, 2,
	454, 5171, 3, 2, 2, 2, 456, 5182, 3, 2, 2, 2, 458, 5188, 3, 2, 2, 2, 460,
	5244, 3, 2, 2, 2, 462, 5399, 3, 2, 2, 2, 464, 5411, 3, 2, 2, 2, 466, 5426,
	3, 2, 2, 2, 468, 5432, 3, 2, 2, 2, 470, 5451, 3, 2, 2, 2, 472, 5461, 3,
	2, 2, 2, 474, 5475, 3, 2, 2, 2, 476, 5477, 3, 2, 2, 2, 478, 5480, 3, 2,
	2, 2, 480, 5502, 3, 2, 2, 2, 482, 5514, 3, 2, 2, 2, 484, 5523, 3, 2, 2,
	2, 486, 5535, 3, 2, 2, 2, 488, 5539, 3, 2, 2, 2, 490, 5541, 3, 2, 2, 2,
	492, 5583, 3, 2, 2, 2, 494, 5590, 3, 2, 2, 2, 496, 5592, 3, 2, 2, 2, 498,
	5615, 3, 2, 2, 2, 500, 5621, 3, 2, 2, 2, 502, 5629, 3, 2, 2, 2, 504, 5632,
	3, 2, 2, 2, 506, 5635, 3, 2, 2, 2, 508, 5656, 3, 2, 2, 2, 510, 5677, 3,
	2, 2, 2, 512, 5685, 3, 2, 2, 2, 514, 5723, 3, 2, 2, 2, 516, 5735, 3, 2,
	2, 2, 518, 5737, 3, 2, 2, 2, 520, 5743, 3, 2, 2, 2, 522, 5757, 3, 2, 2,
	2, 524, 5770, 3, 2, 2, 2, 526, 5775, 3, 2, 2, 2, 528, 5777, 3, 2, 2, 2,
	530, 5783, 3, 2, 2, 2, 532, 5787, 3, 2, 2, 2, 534, 5789, 3, 2, 2, 2, 536,
	5791, 3, 2, 2, 2, 538, 5809, 3, 2, 2, 2, 540, 5825, 3, 2, 2, 2, 542, 5829,
	3, 2, 2, 2, 544, 5834, 3, 2, 2, 2, 546, 5845, 3, 2, 2, 2, 548, 5850, 3,
	2, 2, 2, 550, 5852, 3, 2, 2, 2, 552, 5856, 3, 2, 2, 2, 554, 5881, 3, 2,
	2, 2, 556, 5883, 3, 2, 2, 2, 558, 5886, 3, 2, 2, 2, 560, 5891, 3, 2, 2,
	2, 562, 5907, 3, 2, 2, 2, 564, 6031, 3, 2, 2, 2, 566, 6033, 3, 2, 2, 2,
	568, 6066, 3, 2, 2, 2, 570, 6071, 3, 2, 2, 2, 572, 6075, 3, 2, 2, 2, 574,
	6081, 3, 2, 2, 2, 576, 6089, 3, 2, 2, 2, 578, 6097, 3, 2, 2, 2, 580, 6105,
	3, 2, 2, 2, 582, 6116, 3, 2, 2, 2, 584, 6124, 3, 2, 2, 2, 586, 6132, 3,
	2, 2, 2, 588, 6140, 3, 2, 2, 2, 590, 6148, 3, 2, 2, 2, 592, 6166, 3, 2,
	2, 2, 594, 6187, 3, 2, 2, 2, 596, 6191, 3, 2, 2, 2, 598, 6193, 3, 2, 2,
	2, 600, 6196, 3, 2, 2, 2, 602, 6218, 3, 2, 2, 2, 604, 6412, 3, 2, 2, 2,
	606, 6414, 3, 2, 2, 2, 608, 6433, 3, 2, 2, 2, 610, 6435, 3, 2, 2, 2, 612,
	6498, 3, 2, 2, 2, 614, 6538, 3, 2, 2, 2, 616, 6540, 3, 2, 2, 2, 618, 6550,
	3, 2, 2, 2, 620, 6561, 3, 2, 2, 2, 622, 6563, 3, 2, 2, 2, 624, 6566, 3,
	2, 2, 2, 626, 6570, 3, 2, 2, 2, 628, 6572, 3, 2, 2, 2, 630, 6584, 3, 2,
	2, 2, 632, 6586, 3, 2, 2, 2, 634, 6619, 3, 2, 2, 2, 636, 6621, 3, 2, 2,
	2, 638, 6630, 3, 2, 2, 2, 640, 6648, 3, 2, 2, 2, 642, 6661, 3, 2, 2, 2,
	644, 6672, 3, 2, 2, 2, 646, 6791, 3, 2, 2, 2, 648, 6813, 3, 2, 2, 2, 650,
	6829, 3, 2, 2, 2, 652, 6838, 3, 2, 2, 2, 654, 6847, 3, 2, 2, 2, 656, 6849,
	3, 2, 2, 2, 658, 6856, 3, 2, 2, 2, 660, 6858, 3, 2, 2, 2, 662, 6860, 3,
	2, 2, 2, 664, 6862, 3, 2, 2, 2, 666, 6864, 3, 2, 2, 2, 668, 6866, 3, 2,
	2, 2, 670, 6868, 3, 2, 2, 2, 672, 6870, 3, 2, 2, 2, 674, 676, 5, 4, 3,
	2, 675, 674, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 679, 3, 2, 2, 2, 677,
	678, 7, 1086, 2, 2, 678, 680, 7, 1086, 2, 2, 679, 677, 3, 2, 2, 2, 679,
	680, 3, 2, 2, 2, 680, 681, 3, 2, 2, 2, 681, 682, 7, 2, 2, 3, 682, 3, 3,
	2, 2, 2, 683, 686, 5, 6, 4, 2, 684, 685, 7, 1086, 2, 2, 685, 687, 7, 1086,
	2, 2, 686, 684, 3, 2, 2, 2, 686, 687, 3, 2, 2, 2, 687, 689, 3, 2, 2, 2,
	688, 690, 7, 1101, 2, 2, 689, 688, 3, 2, 2, 2, 689, 690, 3, 2, 2, 2, 690,
	693, 3, 2, 2, 2, 691, 693, 5, 8, 5, 2, 692, 683, 3, 2, 2, 2, 692, 691,
	3, 2, 2, 2, 693, 696, 3, 2, 2, 2, 694, 692, 3, 2, 2, 2, 694, 695, 3, 2,
	2, 2, 695, 706, 3, 2, 2, 2, 696, 694, 3, 2, 2, 2, 697, 703, 5, 6, 4, 2,
	698, 699, 7, 1086, 2, 2, 699, 701, 7, 1086, 2, 2, 700, 698, 3, 2, 2, 2,
	700, 701, 3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 704, 7, 1101, 2, 2, 703,
	700, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 707, 3, 2, 2, 2, 705, 707,
	5, 8, 5, 2, 706, 697, 3, 2, 2, 2, 706, 705, 3, 2, 2, 2, 707, 5, 3, 2, 2,
	2, 708, 716, 5, 10, 6, 2, 709, 716, 5, 12, 7, 2, 710, 716, 5, 14, 8, 2,
	711, 716, 5, 16, 9, 2, 712, 716, 5, 18, 10, 2, 713, 716, 5, 22, 12, 2,
	714, 716, 5, 24, 13, 2, 715, 708, 3, 2, 2, 2, 715, 709, 3, 2, 2, 2, 715,
	710, 3, 2, 2, 2, 715, 711, 3, 2, 2, 2, 715, 712, 3, 2, 2, 2, 715, 713,
	3, 2, 2, 2, 715, 714, 3, 2, 2, 2, 716, 7, 3, 2, 2, 2, 717, 718, 7, 1101,
	2, 2, 718, 9, 3, 2, 2, 2, 719, 755, 5, 26, 14, 2, 720, 755, 5, 28, 15,
	2, 721, 755, 5, 30, 16, 2, 722, 755, 5, 32, 17, 2, 723, 755, 5, 34, 18,
	2, 724, 755, 5, 36, 19, 2, 725, 755, 5, 38, 20, 2, 726, 755, 5, 40, 21,
	2, 727, 755, 5, 42, 22, 2, 728, 755, 5, 44, 23, 2, 729, 755, 5, 46, 24,
	2, 730, 755, 5, 56, 29, 2, 731, 755, 5, 126, 64, 2, 732, 755, 5, 128, 65,
	2, 733, 755, 5, 130, 66, 2, 734, 755, 5, 132, 67, 2, 735, 755, 5, 134,
	68, 2, 736, 755, 5, 136, 69, 2, 737, 755, 5, 138, 70, 2, 738, 755, 5, 140,
	71, 2, 739, 755, 5, 142, 72, 2, 740, 755, 5, 144, 73, 2, 741, 755, 5, 148,
	75, 2, 742, 755, 5, 150, 76, 2, 743, 755, 5, 152, 77, 2, 744, 755, 5, 154,
	78, 2, 745, 755, 5, 156, 79, 2, 746, 755, 5, 158, 80, 2, 747, 755, 5, 160,
	81, 2, 748, 755, 5, 162, 82, 2, 749, 755, 5, 164, 83, 2, 750, 755, 5, 166,
	84, 2, 751, 755, 5, 168, 85, 2, 752, 755, 5, 170, 86, 2, 753, 755, 5, 174,
	88, 2, 754, 719, 3, 2, 2, 2, 754, 720, 3, 2, 2, 2, 754, 721, 3, 2, 2, 2,
	754, 722, 3, 2, 2, 2, 754, 723, 3, 2, 2, 2, 754, 724, 3, 2, 2, 2, 754,
	725, 3, 2, 2, 2, 754, 726, 3, 2, 2, 2, 754, 727, 3, 2, 2, 2, 754, 728,
	3, 2, 2, 2, 754, 729, 3, 2, 2, 2, 754, 730, 3, 2, 2, 2, 754, 731, 3, 2,
	2, 2, 754, 732, 3, 2, 2, 2, 754, 733, 3, 2, 2, 2, 754, 734, 3, 2, 2, 2,
	754, 735, 3, 2, 2, 2, 754, 736, 3, 2, 2, 2, 754, 737, 3, 2, 2, 2, 754,
	738, 3, 2, 2, 2, 754, 739, 3, 2, 2, 2, 754, 740, 3, 2, 2, 2, 754, 741,
	3, 2, 2, 2, 754, 742, 3, 2, 2, 2, 754, 743, 3, 2, 2, 2, 754, 744, 3, 2,
	2, 2, 754, 745, 3, 2, 2, 2, 754, 746, 3, 2, 2, 2, 754, 747, 3, 2, 2, 2,
	754, 748, 3, 2, 2, 2, 754, 749, 3, 2, 2, 2, 754, 750, 3, 2, 2, 2, 754,
	751, 3, 2, 2, 2, 754, 752, 3, 2, 2, 2, 754, 753, 3, 2, 2, 2, 755, 11, 3,
	2, 2, 2, 756, 767, 5, 192, 97, 2, 757, 767, 5, 184, 93, 2, 758, 767, 5,
	194, 98, 2, 759, 767, 5, 178, 90, 2, 760, 767, 5, 190, 96, 2, 761, 767,
	5, 176, 89, 2, 762, 767, 5, 186, 94, 2, 763, 767, 5, 188, 95, 2, 764, 767,
	5, 180, 91, 2, 765, 767, 5, 182, 92, 2, 766, 756, 3, 2, 2, 2, 766, 757,
	3, 2, 2, 2, 766, 758, 3, 2, 2, 2, 766, 759, 3, 2, 2, 2, 766, 760, 3, 2,
	2, 2, 766, 761, 3, 2, 2, 2, 766, 762, 3, 2, 2, 2, 766, 763, 3, 2, 2, 2,
	766, 764, 3, 2, 2, 2, 766, 765, 3, 2, 2, 2, 767, 13, 3, 2, 2, 2, 768, 778,
	5, 274, 138, 2, 769, 778, 5, 276, 139, 2, 770, 778, 5, 278, 140, 2, 771,
	778, 5, 280, 141, 2, 772, 778, 5, 282, 142, 2, 773, 778, 5, 284, 143, 2,
	774, 778, 5, 286, 144, 2, 775, 778, 5, 288, 145, 2, 776, 778, 5, 290, 146,
	2, 777, 768, 3, 2, 2, 2, 777, 769, 3, 2, 2, 2, 777, 770, 3, 2, 2, 2, 777,
	771, 3, 2, 2, 2, 777, 772, 3, 2, 2, 2, 777, 773, 3, 2, 2, 2, 777, 774,
	3, 2, 2, 2, 777, 775, 3, 2, 2, 2, 777, 776, 3, 2, 2, 2, 778, 15, 3, 2,
	2, 2, 779, 795, 5, 306, 154, 2, 780, 795, 5, 308, 155, 2, 781, 795, 5,
	310, 156, 2, 782, 795, 5, 312, 157, 2, 783, 795, 5, 314, 158, 2, 784, 795,
	5, 316, 159, 2, 785, 795, 5, 318, 160, 2, 786, 795, 5, 320, 161, 2, 787,
	795, 5, 322, 162, 2, 788, 795, 5, 346, 174, 2, 789, 795, 5, 348, 175, 2,
	790, 795, 5, 350, 176, 2, 791, 795, 5, 352, 177, 2, 792, 795, 5, 354, 178,
	2, 793, 795, 5, 356, 179, 2, 794, 779, 3, 2, 2, 2, 794, 780, 3, 2, 2, 2,
	794, 781, 3, 2, 2, 2, 794, 782, 3, 2, 2, 2, 794, 783, 3, 2, 2, 2, 794,
	784, 3, 2, 2, 2, 794, 785, 3, 2, 2, 2, 794, 786, 3, 2, 2, 2, 794, 787,
	3, 2, 2, 2, 794, 788, 3, 2, 2, 2, 794, 789, 3, 2, 2, 2, 794, 790, 3, 2,
	2, 2, 794, 791, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794, 793, 3, 2, 2, 2,
	795, 17, 3, 2, 2, 2, 796, 800, 5, 358, 180, 2, 797, 800, 5, 360, 181, 2,
	798, 800, 5, 362, 182, 2, 799, 796, 3, 2, 2, 2, 799, 797, 3, 2, 2, 2, 799,
	798, 3, 2, 2, 2, 800, 19, 3, 2, 2, 2, 801, 812, 5, 366, 184, 2, 802, 812,
	5, 368, 185, 2, 803, 812, 5, 370, 186, 2, 804, 812, 5, 374, 188, 2, 805,
	812, 5, 376, 189, 2, 806, 812, 5, 378, 190, 2, 807, 812, 5, 382, 192, 2,
	808, 812, 5, 372, 187, 2, 809, 812, 5, 380, 191, 2, 810, 812, 5, 384, 193,
	2, 811, 801, 3, 2, 2, 2, 811, 802, 3, 2, 2, 2, 811, 803, 3, 2, 2, 2, 811,
	804, 3, 2, 2, 2, 811, 805, 3, 2, 2, 2, 811, 806, 3, 2, 2, 2, 811, 807,
	3, 2, 2, 2, 811, 808, 3, 2, 2, 2, 811, 809, 3, 2, 2, 2, 811, 810, 3, 2,
	2, 2, 812, 21, 3, 2, 2, 2, 813, 839, 5, 402, 202, 2, 814, 839, 5, 404,
	203, 2, 815, 839, 5, 406, 204, 2, 816, 839, 5, 408, 205, 2, 817, 839, 5,
	412, 207, 2, 818, 839, 5, 414, 208, 2, 819, 839, 5, 416, 209, 2, 820, 839,
	5, 418, 210, 2, 821, 839, 5, 442, 222, 2, 822, 839, 5, 444, 223, 2, 823,
	839, 5, 446, 224, 2, 824, 839, 5, 448, 225, 2, 825, 839, 5, 450, 226, 2,
	826, 839, 5, 454, 228, 2, 827, 839, 5, 456, 229, 2, 828, 839, 5, 458, 230,
	2, 829, 839, 5, 460, 231, 2, 830, 839, 5, 462, 232, 2, 831, 839, 5, 476,
	239, 2, 832, 839, 5, 478, 240, 2, 833, 839, 5, 480, 241, 2, 834, 839, 5,
	482, 242, 2, 835, 839, 5, 484, 243, 2, 836, 839, 5, 486, 244, 2, 837, 839,
	5, 488, 245, 2, 838, 813, 3, 2, 2, 2, 838, 814, 3, 2, 2, 2, 838, 815, 3,
	2, 2, 2, 838, 816, 3, 2, 2, 2, 838, 817, 3, 2, 2, 2, 838, 818, 3, 2, 2,
	2, 838, 819, 3, 2, 2, 2, 838, 820, 3, 2, 2, 2, 838, 821, 3, 2, 2, 2, 838,
	822, 3, 2, 2, 2, 838, 823, 3, 2, 2, 2, 838, 824, 3, 2, 2, 2, 838, 825,
	3, 2, 2, 2, 838, 826, 3, 2, 2, 2, 838, 827, 3, 2, 2, 2, 838, 828, 3, 2,
	2, 2, 838, 829, 3, 2, 2, 2, 838, 830, 3, 2, 2, 2, 838, 831, 3, 2, 2, 2,
	838, 832, 3, 2, 2, 2, 838, 833, 3, 2, 2, 2, 838, 834, 3, 2, 2, 2, 838,
	835, 3, 2, 2, 2, 838, 836, 3, 2, 2, 2, 838, 837, 3, 2, 2, 2, 839, 23, 3,
	2, 2, 2, 840, 848, 5, 498, 250, 2, 841, 848, 5, 500, 251, 2, 842, 848,
	5, 502, 252, 2, 843, 848, 5, 504, 253, 2, 844, 848, 5, 506, 254, 2, 845,
	848, 5, 508, 255, 2, 846, 848, 5, 512, 257, 2, 847, 840, 3, 2, 2, 2, 847,
	841, 3, 2, 2, 2, 847, 842, 3, 2, 2, 2, 847, 843, 3, 2, 2, 2, 847, 844,
	3, 2, 2, 2, 847, 845, 3, 2, 2, 2, 847, 846, 3, 2, 2, 2, 848, 25, 3, 2,
	2, 2, 849, 850, 7, 34, 2, 2, 850, 852, 9, 2, 2, 2, 851, 853, 5, 600, 301,
	2, 852, 851, 3, 2, 2, 2, 852, 853, 3, 2, 2, 2, 853, 854, 3, 2, 2, 2, 854,
	858, 5, 544, 273, 2, 855, 857, 5, 58, 30, 2, 856, 855, 3, 2, 2, 2, 857,
	860, 3, 2, 2, 2, 858, 856, 3, 2, 2, 2, 858, 859, 3, 2, 2, 2, 859, 27, 3,
	2, 2, 2, 860, 858, 3, 2, 2, 2, 861, 863, 7, 34, 2, 2, 862, 864, 5, 62,
	32, 2, 863, 862, 3, 2, 2, 2, 863, 864, 3, 2, 2, 2, 864, 865, 3, 2, 2, 2,
	865, 867, 7, 402, 2, 2, 866, 868, 5, 600, 301, 2, 867, 866, 3, 2, 2, 2,
	867, 868, 3, 2, 2, 2, 868, 869, 3, 2, 2, 2, 869, 870, 5, 518, 260, 2, 870,
	871, 7, 114, 2, 2, 871, 872, 7, 580, 2, 2, 872, 879, 5, 64, 33, 2, 873,
	874, 7, 114, 2, 2, 874, 876, 7, 361, 2, 2, 875, 877, 7, 110, 2, 2, 876,
	875, 3, 2, 2, 2, 876, 877, 3, 2, 2, 2, 877, 878, 3, 2, 2, 2, 878, 880,
	7, 538, 2, 2, 879, 873, 3, 2, 2, 2, 879, 880, 3, 2, 2, 2, 880, 882, 3,
	2, 2, 2, 881, 883, 5, 72, 37, 2, 882, 881, 3, 2, 2, 2, 882, 883, 3, 2,
	2, 2, 883, 886, 3, 2, 2, 2, 884, 885, 7, 358, 2, 2, 885, 887, 7, 1113,
	2, 2, 886, 884, 3, 2, 2, 2, 886, 887, 3, 2, 2, 2, 887, 888, 3, 2, 2, 2,
	888, 889, 7, 388, 2, 2, 889, 890, 5, 364, 183, 2, 890, 29, 3, 2, 2, 2,
	891, 894, 7, 34, 2, 2, 892, 893, 7, 119, 2, 2, 893, 895, 7, 137, 2, 2,
	894, 892, 3, 2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 897, 3, 2, 2, 2, 896,
	898, 9, 3, 2, 2, 897, 896, 3, 2, 2, 2, 897, 898, 3, 2, 2, 2, 898, 900,
	3, 2, 2, 2, 899, 901, 9, 4, 2, 2, 900, 899, 3, 2, 2, 2, 900, 901, 3, 2,
	2, 2, 901, 902, 3, 2, 2, 2, 902, 906, 7, 80, 2, 2, 903, 904, 7, 76, 2,
	2, 904, 905, 7, 110, 2, 2, 905, 907, 7, 59, 2, 2, 906, 903, 3, 2, 2, 2,
	906, 907, 3, 2, 2, 2, 907, 908, 3, 2, 2, 2, 908, 910, 5, 544, 273, 2, 909,
	911, 5, 74, 38, 2, 910, 909, 3, 2, 2, 2, 910, 911, 3, 2, 2, 2, 911, 912,
	3, 2, 2, 2, 912, 913, 7, 114, 2, 2, 913, 914, 5, 520, 261, 2, 914, 918,
	5, 580, 291, 2, 915, 916, 7, 648, 2, 2, 916, 919, 5, 550, 276, 2, 917,
	919, 7, 507, 2, 2, 918, 915, 3, 2, 2, 2, 918, 917, 3, 2, 2, 2, 918, 919,
	3, 2, 2, 2, 919, 923, 3, 2, 2, 2, 920, 922, 5, 76, 39, 2, 921, 920, 3,
	2, 2, 2, 922, 925, 3, 2, 2, 2, 923, 921, 3, 2, 2, 2, 923, 924, 3, 2, 2,
	2, 924, 938, 3, 2, 2, 2, 925, 923, 3, 2, 2, 2, 926, 928, 7, 326, 2, 2,
	927, 929, 7, 1089, 2, 2, 928, 927, 3, 2, 2, 2, 928, 929, 3, 2, 2, 2, 929,
	930, 3, 2, 2, 2, 930, 937, 9, 5, 2, 2, 931, 933, 7, 101, 2, 2, 932, 934,
	7, 1089, 2, 2, 933, 932, 3, 2, 2, 2, 933, 934, 3, 2, 2, 2, 934, 935, 3,
	2, 2, 2, 935, 937, 9, 6, 2, 2, 936, 926, 3, 2, 2, 2, 936, 931, 3, 2, 2,
	2, 937, 940, 3, 2, 2, 2, 938, 936, 3, 2, 2, 2, 938, 939, 3, 2, 2, 2, 939,
	31, 3, 2, 2, 2, 940, 938, 3, 2, 2, 2, 941, 942, 7, 34, 2, 2, 942, 943,
	7, 459, 2, 2, 943, 944, 7, 72, 2, 2, 944, 945, 5, 544, 273, 2, 945, 946,
	7, 7, 2, 2, 946, 947, 7, 633, 2, 2, 947, 953, 7, 1113, 2, 2, 948, 950,
	7, 437, 2, 2, 949, 951, 7, 1089, 2, 2, 950, 949, 3, 2, 2, 2, 950, 951,
	3, 2, 2, 2, 951, 952, 3, 2, 2, 2, 952, 954, 5, 552, 277, 2, 953, 948, 3,
	2, 2, 2, 953, 954, 3, 2, 2, 2, 954, 960, 3, 2, 2, 2, 955, 957, 7, 634,
	2, 2, 956, 958, 7, 1089, 2, 2, 957, 956, 3, 2, 2, 2, 957, 958, 3, 2, 2,
	2, 958, 959, 3, 2, 2, 2, 959, 961, 5, 552, 277, 2, 960, 955, 3, 2, 2, 2,
	960, 961, 3, 2, 2, 2, 961, 967, 3, 2, 2, 2, 962, 964, 7, 549, 2, 2, 963,
	965, 7, 1089, 2, 2, 964, 963, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965, 966,
	3, 2, 2, 2, 966, 968, 5, 552, 277, 2, 967, 962, 3, 2, 2, 2, 967, 968, 3,
	2, 2, 2, 968, 974, 3, 2, 2, 2, 969, 971, 7, 508, 2, 2, 970, 972, 7, 1089,
	2, 2, 971, 970, 3, 2, 2, 2, 971, 972, 3, 2, 2, 2, 972, 973, 3, 2, 2, 2,
	973, 975, 5, 544, 273, 2, 974, 969, 3, 2, 2, 2, 974, 975, 3, 2, 2, 2, 975,
	977, 3, 2, 2, 2, 976, 978, 7, 648, 2, 2, 977, 976, 3, 2, 2, 2, 977, 978,
	3, 2, 2, 2, 978, 984, 3, 2, 2, 2, 979, 981, 7, 358, 2, 2, 980, 982, 7,
	1089, 2, 2, 981, 980, 3, 2, 2, 2, 981, 982, 3, 2, 2, 2, 982, 983, 3, 2,
	2, 2, 983, 985, 7, 1113, 2, 2, 984, 979, 3, 2, 2, 2, 984, 985, 3, 2, 2,
	2, 985, 986, 3, 2, 2, 2, 986, 988, 7, 396, 2, 2, 987, 989, 7, 1089, 2,
	2, 988, 987, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2, 989, 990, 3, 2, 2, 2, 990,
	991, 5, 534, 268, 2, 991, 33, 3, 2, 2, 2, 992, 994, 7, 34, 2, 2, 993, 995,
	5, 62, 32, 2, 994, 993, 3, 2, 2, 2, 994, 995, 3, 2, 2, 2, 995, 996, 3,
	2, 2, 2, 996, 997, 7, 127, 2, 2, 997, 998, 5, 518, 260, 2, 998, 1000, 7,
	1098, 2, 2, 999, 1001, 5, 78, 40, 2, 1000, 999, 3, 2, 2, 2, 1000, 1001,
	3, 2, 2, 2, 1001, 1006, 3, 2, 2, 2, 1002, 1003, 7, 1100, 2, 2, 1003, 1005,
	5, 78, 40, 2, 1004, 1002, 3, 2, 2, 2, 1005, 1008, 3, 2, 2, 2, 1006, 1004,
	3, 2, 2, 2, 1006, 1007, 3, 2, 2, 2, 1007, 1009, 3, 2, 2, 2, 1008, 1006,
	3, 2, 2, 2, 1009, 1013, 7, 1099, 2, 2, 1010, 1012, 5, 82, 42, 2, 1011,
	1010, 3, 2, 2, 2, 1012, 1015, 3, 2, 2, 2, 1013, 1011, 3, 2, 2, 2, 1013,
	1014, 3, 2, 2, 2, 1014, 1016, 3, 2, 2, 2, 1015, 1013, 3, 2, 2, 2, 1016,
	1017, 5, 364, 183, 2, 1017, 35, 3, 2, 2, 2, 1018, 1020, 7, 34, 2, 2, 1019,
	1021, 5, 62, 32, 2, 1020, 1019, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021,
	1022, 3, 2, 2, 2, 1022, 1023, 7, 423, 2, 2, 1023, 1024, 5, 518, 260, 2,
	1024, 1026, 7, 1098, 2, 2, 1025, 1027, 5, 80, 41, 2, 1026, 1025, 3, 2,
	2, 2, 1026, 1027, 3, 2, 2, 2, 1027, 1032, 3, 2, 2, 2, 1028, 1029, 7, 1100,
	2, 2, 1029, 1031, 5, 80, 41, 2, 1030, 1028, 3, 2, 2, 2, 1031, 1034, 3,
	2, 2, 2, 1032, 1030, 3, 2, 2, 2, 1032, 1033, 3, 2, 2, 2, 1033, 1035, 3,
	2, 2, 2, 1034, 1032, 3, 2, 2, 2, 1035, 1036, 7, 1099, 2, 2, 1036, 1037,
	7, 570, 2, 2, 1037, 1041, 5, 564, 283, 2, 1038, 1040, 5, 82, 42, 2, 1039,
	1038, 3, 2, 2, 2, 1040, 1043, 3, 2, 2, 2, 1041, 1039, 3, 2, 2, 2, 1041,
	1042, 3, 2, 2, 2, 1042, 1046, 3, 2, 2, 2, 1043, 1041, 3, 2, 2, 2, 1044,
	1047, 5, 364, 183, 2, 1045, 1047, 5, 380, 191, 2, 1046, 1044, 3, 2, 2,
	2, 1046, 1045, 3, 2, 2, 2, 1047, 37, 3, 2, 2, 2, 1048, 1049, 7, 34, 2,
	2, 1049, 1050, 7, 582, 2, 2, 1050, 1051, 5, 544, 273, 2, 1051, 1052, 7,
	66, 2, 2, 1052, 1053, 7, 377, 2, 2, 1053, 1054, 7, 653, 2, 2, 1054, 1055,
	9, 7, 2, 2, 1055, 1056, 7, 521, 2, 2, 1056, 1057, 7, 1098, 2, 2, 1057,
	1062, 5, 84, 43, 2, 1058, 1059, 7, 1100, 2, 2, 1059, 1061, 5, 84, 43, 2,
	1060, 1058, 3, 2, 2, 2, 1061, 1064, 3, 2, 2, 2, 1062, 1060, 3, 2, 2, 2,
	1062, 1063, 3, 2, 2, 2, 1063, 1065, 3, 2, 2, 2, 1064, 1062, 3, 2, 2, 2,
	1065, 1066, 7, 1099, 2, 2, 1066, 39, 3, 2, 2, 2, 1067, 1069, 7, 34, 2,
	2, 1068, 1070, 7, 623, 2, 2, 1069, 1068, 3, 2, 2, 2, 1069, 1070, 3, 2,
	2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1073, 7, 165, 2, 2, 1072, 1074, 5,
	600, 301, 2, 1073, 1072, 3, 2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1075,
	3, 2, 2, 2, 1075, 1083, 5, 520, 261, 2, 1076, 1077, 7, 96, 2, 2, 1077,
	1084, 5, 520, 261, 2, 1078, 1079, 7, 1098, 2, 2, 1079, 1080, 7, 96, 2,
	2, 1080, 1081, 5, 520, 261, 2, 1081, 1082, 7, 1099, 2, 2, 1082, 1084, 3,
	2, 2, 2, 1083, 1076, 3, 2, 2, 2, 1083, 1078, 3, 2, 2, 2, 1084, 1146, 3,
	2, 2, 2, 1085, 1087, 7, 34, 2, 2, 1086, 1088, 7, 623, 2, 2, 1087, 1086,
	3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088, 1089, 3, 2, 2, 2, 1089, 1091,
	7, 165, 2, 2, 1090, 1092, 5, 600, 301, 2, 1091, 1090, 3, 2, 2, 2, 1091,
	1092, 3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1095, 5, 520, 261, 2, 1094,
	1096, 5, 86, 44, 2, 1095, 1094, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096,
	1107, 3, 2, 2, 2, 1097, 1104, 5, 104, 53, 2, 1098, 1100, 7, 1100, 2, 2,
	1099, 1098, 3, 2, 2, 2, 1099, 1100, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2,
	1101, 1103, 5, 104, 53, 2, 1102, 1099, 3, 2, 2, 2, 1103, 1106, 3, 2, 2,
	2, 1104, 1102, 3, 2, 2, 2, 1104, 1105, 3, 2, 2, 2, 1105, 1108, 3, 2, 2,
	2, 1106, 1104, 3, 2, 2, 2, 1107, 1097, 3, 2, 2, 2, 1107, 1108, 3, 2, 2,
	2, 1108, 1110, 3, 2, 2, 2, 1109, 1111, 5, 110, 56, 2, 1110, 1109, 3, 2,
	2, 2, 1110, 1111, 3, 2, 2, 2, 1111, 1113, 3, 2, 2, 2, 1112, 1114, 9, 8,
	2, 2, 1113, 1112, 3, 2, 2, 2, 1113, 1114, 3, 2, 2, 2, 1114, 1116, 3, 2,
	2, 2, 1115, 1117, 7, 14, 2, 2, 1116, 1115, 3, 2, 2, 2, 1116, 1117, 3, 2,
	2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1119, 5, 192, 97, 2, 1119, 1146, 3,
	2, 2, 2, 1120, 1122, 7, 34, 2, 2, 1121, 1123, 7, 623, 2, 2, 1122, 1121,
	3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123, 1124, 3, 2, 2, 2, 1124, 1126,
	7, 165, 2, 2, 1125, 1127, 5, 600, 301, 2, 1126, 1125, 3, 2, 2, 2, 1126,
	1127, 3, 2, 2, 2, 1127, 1128, 3, 2, 2, 2, 1128, 1129, 5, 520, 261, 2, 1129,
	1140, 5, 86, 44, 2, 1130, 1137, 5, 104, 53, 2, 1131, 1133, 7, 1100, 2,
	2, 1132, 1131, 3, 2, 2, 2, 1132, 1133, 3, 2, 2, 2, 1133, 1134, 3, 2, 2,
	2, 1134, 1136, 5, 104, 53, 2, 1135, 1132, 3, 2, 2, 2, 1136, 1139, 3, 2,
	2, 2, 1137, 1135, 3, 2, 2, 2, 1137, 1138, 3, 2, 2, 2, 1138, 1141, 3, 2,
	2, 2, 1139, 1137, 3, 2, 2, 2, 1140, 1130, 3, 2, 2, 2, 1140, 1141, 3, 2,
	2, 2, 1141, 1143, 3, 2, 2, 2, 1142, 1144, 5, 110, 56, 2, 1143, 1142, 3,
	2, 2, 2, 1143, 1144, 3, 2, 2, 2, 1144, 1146, 3, 2, 2, 2, 1145, 1067, 3,
	2, 2, 2, 1145, 1085, 3, 2, 2, 2, 1145, 1120, 3, 2, 2, 2, 1146, 41, 3, 2,
	2, 2, 1147, 1148, 7, 34, 2, 2, 1148, 1149, 7, 621, 2, 2, 1149, 1150, 5,
	544, 273, 2, 1150, 1151, 7, 7, 2, 2, 1151, 1152, 7, 378, 2, 2, 1152, 1156,
	7, 1113, 2, 2, 1153, 1154, 7, 414, 2, 2, 1154, 1155, 7, 1089, 2, 2, 1155,
	1157, 5, 552, 277, 2, 1156, 1153, 3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2, 1157,
	1163, 3, 2, 2, 2, 1158, 1160, 7, 396, 2, 2, 1159, 1161, 7, 1089, 2, 2,
	1160, 1159, 3, 2, 2, 2, 1160, 1161, 3, 2, 2, 2, 1161, 1162, 3, 2, 2, 2,
	1162, 1164, 5, 534, 268, 2, 1163, 1158, 3, 2, 2, 2, 1163, 1164, 3, 2, 2,
	2, 1164, 43, 3, 2, 2, 2, 1165, 1166, 7, 34, 2, 2, 1166, 1167, 7, 621, 2,
	2, 1167, 1168, 5, 544, 273, 2, 1168, 1169, 7, 7, 2, 2, 1169, 1170, 7, 378,
	2, 2, 1170, 1171, 7, 1113, 2, 2, 1171, 1172, 7, 179, 2, 2, 1172, 1173,
	7, 459, 2, 2, 1173, 1174, 7, 72, 2, 2, 1174, 1180, 5, 544, 273, 2, 1175,
	1177, 7, 410, 2, 2, 1176, 1178, 7, 1089, 2, 2, 1177, 1176, 3, 2, 2, 2,
	1177, 1178, 3, 2, 2, 2, 1178, 1179, 3, 2, 2, 2, 1179, 1181, 5, 552, 277,
	2, 1180, 1175, 3, 2, 2, 2, 1180, 1181, 3, 2, 2, 2, 1181, 1187, 3, 2, 2,
	2, 1182, 1184, 7, 437, 2, 2, 1183, 1185, 7, 1089, 2, 2, 1184, 1183, 3,
	2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185, 1186, 3, 2, 2, 2, 1186, 1188, 5,
	552, 277, 2, 1187, 1182, 3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1194,
	3, 2, 2, 2, 1189, 1191, 7, 331, 2, 2, 1190, 1192, 7, 1089, 2, 2, 1191,
	1190, 3, 2, 2, 2, 1191, 1192, 3, 2, 2, 2, 1192, 1193, 3, 2, 2, 2, 1193,
	1195, 5, 552, 277, 2, 1194, 1189, 3, 2, 2, 2, 1194, 1195, 3, 2, 2, 2, 1195,
	1201, 3, 2, 2, 2, 1196, 1198, 7, 485, 2, 2, 1197, 1199, 7, 1089, 2, 2,
	1198, 1197, 3, 2, 2, 2, 1198, 1199, 3, 2, 2, 2, 1199, 1200, 3, 2, 2, 2,
	1200, 1202, 5, 552, 277, 2, 1201, 1196, 3, 2, 2, 2, 1201, 1202, 3, 2, 2,
	2, 1202, 1208, 3, 2, 2, 2, 1203, 1205, 7, 508, 2, 2, 1204, 1206, 7, 1089,
	2, 2, 1205, 1204, 3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 1206, 1207, 3, 2,
	2, 2, 1207, 1209, 5, 544, 273, 2, 1208, 1203, 3, 2, 2, 2, 1208, 1209, 3,
	2, 2, 2, 1209, 1211, 3, 2, 2, 2, 1210, 1212, 7, 648, 2, 2, 1211, 1210,
	3, 2, 2, 2, 1211, 1212, 3, 2, 2, 2, 1212, 1218, 3, 2, 2, 2, 1213, 1215,
	7, 358, 2, 2, 1214, 1216, 7, 1089, 2, 2, 1215, 1214, 3, 2, 2, 2, 1215,
	1216, 3, 2, 2, 2, 1216, 1217, 3, 2, 2, 2, 1217, 1219, 7, 1113, 2, 2, 1218,
	1213, 3, 2, 2, 2, 1218, 1219, 3, 2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220,
	1222, 7, 396, 2, 2, 1221, 1223, 7, 1089, 2, 2, 1222, 1221, 3, 2, 2, 2,
	1222, 1223, 3, 2, 2, 2, 1223, 1224, 3, 2, 2, 2, 1224, 1225, 5, 534, 268,
	2, 1225, 45, 3, 2, 2, 2, 1226, 1229, 7, 34, 2, 2, 1227, 1228, 7, 119, 2,
	2, 1228, 1230, 7, 137, 2, 2, 1229, 1227, 3, 2, 2, 2, 1229, 1230, 3, 2,
	2, 2, 1230, 1232, 3, 2, 2, 2, 1231, 1233, 5, 62, 32, 2, 1232, 1231, 3,
	2, 2, 2, 1232, 1233, 3, 2, 2, 2, 1233, 1234, 3, 2, 2, 2, 1234, 1235, 7,
	170, 2, 2, 1235, 1236, 5, 518, 260, 2, 1236, 1237, 9, 9, 2, 2, 1237, 1238,
	9, 10, 2, 2, 1238, 1239, 7, 114, 2, 2, 1239, 1240, 5, 520, 261, 2, 1240,
	1241, 7, 64, 2, 2, 1241, 1242, 7, 52, 2, 2, 1242, 1245, 7, 575, 2, 2, 1243,
	1244, 9, 11, 2, 2, 1244, 1246, 5, 518, 260, 2, 1245, 1243, 3, 2, 2, 2,
	1245, 1246, 3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247, 1248, 5, 364, 183,
	2, 1248, 47, 3, 2, 2, 2, 1249, 1251, 7, 185, 2, 2, 1250, 1252, 7, 548,
	2, 2, 1251, 1250, 3, 2, 2, 2, 1251, 1252, 3, 2, 2, 2, 1252, 1253, 3, 2,
	2, 2, 1253, 1254, 5, 50, 26, 2, 1254, 49, 3, 2, 2, 2, 1255, 1267, 5, 52,
	27, 2, 1256, 1257, 7, 1098, 2, 2, 1257, 1262, 5, 54, 28, 2, 1258, 1259,
	7, 1100, 2, 2, 1259, 1261, 5, 54, 28, 2, 1260, 1258, 3, 2, 2, 2, 1261,
	1264, 3, 2, 2, 2, 1262, 1260, 3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263,
	1265, 3, 2, 2, 2, 1264, 1262, 3, 2, 2, 2, 1265, 1266, 7, 1099, 2, 2, 1266,
	1268, 3, 2, 2, 2, 1267, 1256, 3, 2, 2, 2, 1267, 1268, 3, 2, 2, 2, 1268,
	1269, 3, 2, 2, 2, 1269, 1270, 7, 14, 2, 2, 1270, 1271, 7, 1098, 2, 2, 1271,
	1272, 5, 12, 7, 2, 1272, 1275, 7, 1099, 2, 2, 1273, 1274, 7, 1100, 2, 2,
	1274, 1276, 5, 50, 26, 2, 1275, 1273, 3, 2, 2, 2, 1275, 1276, 3, 2, 2,
	2, 1276, 51, 3, 2, 2, 2, 1277, 1278, 5, 544, 273, 2, 1278, 53, 3, 2, 2,
	2, 1279, 1280, 5, 544, 273, 2, 1280, 55, 3, 2, 2, 2, 1281, 1284, 7, 34,
	2, 2, 1282, 1283, 7, 119, 2, 2, 1283, 1285, 7, 137, 2, 2, 1284, 1282, 3,
	2, 2, 2, 1284, 1285, 3, 2, 2, 2, 1285, 1289, 3, 2, 2, 2, 1286, 1287, 7,
	326, 2, 2, 1287, 1288, 7, 1089, 2, 2, 1288, 1290, 9, 12, 2, 2, 1289, 1286,
	3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1292, 3, 2, 2, 2, 1291, 1293,
	5, 62, 32, 2, 1292, 1291, 3, 2, 2, 2, 1292, 1293, 3, 2, 2, 2, 1293, 1297,
	3, 2, 2, 2, 1294, 1295, 7, 154, 2, 2, 1295, 1296, 7, 581, 2, 2, 1296, 1298,
	9, 13, 2, 2, 1297, 1294, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299,
	3, 2, 2, 2, 1299, 1300, 7, 645, 2, 2, 1300, 1305, 5, 518, 260, 2, 1301,
	1302, 7, 1098, 2, 2, 1302, 1303, 5, 576, 289, 2, 1303, 1304, 7, 1099, 2,
	2, 1304, 1306, 3, 2, 2, 2, 1305, 1301, 3, 2, 2, 2, 1305, 1306, 3, 2, 2,
	2, 1306, 1307, 3, 2, 2, 2, 1307, 1309, 7, 14, 2, 2, 1308, 1310, 5, 48,
	25, 2, 1309, 1308, 3, 2, 2, 2, 1309, 1310, 3, 2, 2, 2, 1310, 1311, 3, 2,
	2, 2, 1311, 1318, 5, 192, 97, 2, 1312, 1314, 7, 185, 2, 2, 1313, 1315,
	9, 14, 2, 2, 1314, 1313, 3, 2, 2, 2, 1314, 1315, 3, 2, 2, 2, 1315, 1316,
	3, 2, 2, 2, 1316, 1317, 7, 27, 2, 2, 1317, 1319, 7, 116, 2, 2, 1318, 1312,
	3, 2, 2, 2, 1318, 1319, 3, 2, 2, 2, 1319, 57, 3, 2, 2, 2, 1320, 1322, 7,
	42, 2, 2, 1321, 1320, 3, 2, 2, 2, 1321, 1322, 3, 2, 2, 2, 1322, 1323, 3,
	2, 2, 2, 1323, 1325, 5, 60, 31, 2, 1324, 1326, 7, 1089, 2, 2, 1325, 1324,
	3, 2, 2, 2, 1325, 1326, 3, 2, 2, 2, 1326, 1329, 3, 2, 2, 2, 1327, 1330,
	5, 530, 266, 2, 1328, 1330, 7, 42, 2, 2, 1329, 1327, 3, 2, 2, 2, 1329,
	1328, 3, 2, 2, 2, 1330, 1340, 3, 2, 2, 2, 1331, 1333, 7, 42, 2, 2, 1332,
	1331, 3, 2, 2, 2, 1332, 1333, 3, 2, 2, 2, 1333, 1334, 3, 2, 2, 2, 1334,
	1336, 7, 28, 2, 2, 1335, 1337, 7, 1089, 2, 2, 1336, 1335, 3, 2, 2, 2, 1336,
	1337, 3, 2, 2, 2, 1337, 1338, 3, 2, 2, 2, 1338, 1340, 5, 532, 267, 2, 1339,
	1321, 3, 2, 2, 2, 1339, 1332, 3, 2, 2, 2, 1340, 59, 3, 2, 2, 2, 1341, 1342,
	7, 26, 2, 2, 1342, 1347, 7, 149, 2, 2, 1343, 1347, 7, 808, 2, 2, 1344,
	1345, 7, 215, 2, 2, 1345, 1347, 7, 149, 2, 2, 1346, 1341, 3, 2, 2, 2, 1346,
	1343, 3, 2, 2, 2, 1346, 1344, 3, 2, 2, 2, 1347, 61, 3, 2, 2, 2, 1348, 1349,
	7, 381, 2, 2, 1349, 1356, 7, 1089, 2, 2, 1350, 1357, 5, 526, 264, 2, 1351,
	1354, 7, 37, 2, 2, 1352, 1353, 7, 1098, 2, 2, 1353, 1355, 7, 1099, 2, 2,
	1354, 1352, 3, 2, 2, 2, 1354, 1355, 3, 2, 2, 2, 1355, 1357, 3, 2, 2, 2,
	1356, 1350, 3, 2, 2, 2, 1356, 1351, 3, 2, 2, 2, 1357, 63, 3, 2, 2, 2, 1358,
	1359, 7, 328, 2, 2, 1359, 1363, 5, 66, 34, 2, 1360, 1362, 5, 68, 35, 2,
	1361, 1360, 3, 2, 2, 2, 1362, 1365, 3, 2, 2, 2, 1363, 1361, 3, 2, 2, 2,
	1363, 1364, 3, 2, 2, 2, 1364, 1393, 3, 2, 2, 2, 1365, 1363, 3, 2, 2, 2,
	1366, 1369, 7, 404, 2, 2, 1367, 1370, 5, 550, 276, 2, 1368, 1370, 5, 642,
	322, 2, 1369, 1367, 3, 2, 2, 2, 1369, 1368, 3, 2, 2, 2, 1370, 1371, 3,
	2, 2, 2, 1371, 1380, 5, 70, 36, 2, 1372, 1373, 7, 604, 2, 2, 1373, 1377,
	5, 66, 34, 2, 1374, 1376, 5, 68, 35, 2, 1375, 1374, 3, 2, 2, 2, 1376, 1379,
	3, 2, 2, 2, 1377, 1375, 3, 2, 2, 2, 1377, 1378, 3, 2, 2, 2, 1378, 1381,
	3, 2, 2, 2, 1379, 1377, 3, 2, 2, 2, 1380, 1372, 3, 2, 2, 2, 1380, 1381,
	3, 2, 2, 2, 1381, 1390, 3, 2, 2, 2, 1382, 1383, 7, 395, 2, 2, 1383, 1387,
	5, 66, 34, 2, 1384, 1386, 5, 68, 35, 2, 1385, 1384, 3, 2, 2, 2, 1386, 1389,
	3, 2, 2, 2, 1387, 1385, 3, 2, 2, 2, 1387, 1388, 3, 2, 2, 2, 1388, 1391,
	3, 2, 2, 2, 1389, 1387, 3, 2, 2, 2, 1390, 1382, 3, 2, 2, 2, 1390, 1391,
	3, 2, 2, 2, 1391, 1393, 3, 2, 2, 2, 1392, 1358, 3, 2, 2, 2, 1392, 1366,
	3, 2, 2, 2, 1393, 65, 3, 2, 2, 2, 1394, 1399, 7, 305, 2, 2, 1395, 1399,
	5, 554, 278, 2, 1396, 1399, 5, 550, 276, 2, 1397, 1399, 5, 642, 322, 2,
	1398, 1394, 3, 2, 2, 2, 1398, 1395, 3, 2, 2, 2, 1398, 1396, 3, 2, 2, 2,
	1398, 1397, 3, 2, 2, 2, 1399, 67, 3, 2, 2, 2, 1400, 1401, 7, 1085, 2, 2,
	1401, 1404, 7, 85, 2, 2, 1402, 1405, 5, 550, 276, 2, 1403, 1405, 5, 642,
	322, 2, 1404, 1402, 3, 2, 2, 2, 1404, 1403, 3, 2, 2, 2, 1405, 1406, 3,
	2, 2, 2, 1406, 1407, 5, 70, 36, 2, 1407, 69, 3, 2, 2, 2, 1408, 1422, 5,
	666, 334, 2, 1409, 1422, 7, 214, 2, 2, 1410, 1422, 7, 233, 2, 2, 1411,
	1422, 7, 234, 2, 2, 1412, 1422, 7, 235, 2, 2, 1413, 1422, 7, 236, 2, 2,
	1414, 1422, 7, 237, 2, 2, 1415, 1422, 7, 238, 2, 2, 1416, 1422, 7, 239,
	2, 2, 1417, 1422, 7, 240, 2, 2, 1418, 1422, 7, 241, 2, 2, 1419, 1422, 7,
	242, 2, 2, 1420, 1422, 7, 243, 2, 2, 1421, 1408, 3, 2, 2, 2, 1421, 1409,
	3, 2, 2, 2, 1421, 1410, 3, 2, 2, 2, 1421, 1411, 3, 2, 2, 2, 1421, 1412,
	3, 2, 2, 2, 1421, 1413, 3, 2, 2, 2, 1421, 1414, 3, 2, 2, 2, 1421, 1415,
	3, 2, 2, 2, 1421, 1416, 3, 2, 2, 2, 1421, 1417, 3, 2, 2, 2, 1421, 1418,
	3, 2, 2, 2, 1421, 1419, 3, 2, 2, 2, 1421, 1420, 3, 2, 2, 2, 1422, 71, 3,
	2, 2, 2, 1423, 1429, 7, 392, 2, 2, 1424, 1429, 7, 385, 2, 2, 1425, 1426,
	7, 385, 2, 2, 1426, 1427, 7, 114, 2, 2, 1427, 1429, 7, 588, 2, 2, 1428,
	1423, 3, 2, 2, 2, 1428, 1424, 3, 2, 2, 2, 1428, 1425, 3, 2, 2, 2, 1429,
	73, 3, 2, 2, 2, 1430, 1431, 7, 180, 2, 2, 1431, 1432, 9, 15, 2, 2, 1432,
	75, 3, 2, 2, 2, 1433, 1435, 7, 451, 2, 2, 1434, 1436, 7, 1089, 2, 2, 1435,
	1434, 3, 2, 2, 2, 1435, 1436, 3, 2, 2, 2, 1436, 1437, 3, 2, 2, 2, 1437,
	1464, 5, 552, 277, 2, 1438, 1464, 5, 74, 38, 2, 1439, 1440, 7, 185, 2,
	2, 1440, 1441, 7, 525, 2, 2, 1441, 1464, 5, 544, 273, 2, 1442, 1443, 7,
	358, 2, 2, 1443, 1464, 7, 1113, 2, 2, 1444, 1464, 9, 16, 2, 2, 1445, 1447,
	7, 842, 2, 2, 1446, 1448, 7, 1089, 2, 2, 1447, 1446, 3, 2, 2, 2, 1447,
	1448, 3, 2, 2, 2, 1448, 1449, 3, 2, 2, 2, 1449, 1464, 7, 1113, 2, 2, 1450,
	1452, 7, 966, 2, 2, 1451, 1453, 7, 1089, 2, 2, 1452, 1451, 3, 2, 2, 2,
	1452, 1453, 3, 2, 2, 2, 1453, 1454, 3, 2, 2, 2, 1454, 1464, 7, 1113, 2,
	2, 1455, 1456, 7, 352, 2, 2, 1456, 1457, 7, 1089, 2, 2, 1457, 1464, 9,
	17, 2, 2, 1458, 1462, 7, 78, 2, 2, 1459, 1460, 7, 110, 2, 2, 1460, 1462,
	7, 78, 2, 2, 1461, 1458, 3, 2, 2, 2, 1461, 1459, 3, 2, 2, 2, 1462, 1464,
	3, 2, 2, 2, 1463, 1433, 3, 2, 2, 2, 1463, 1438, 3, 2, 2, 2, 1463, 1439,
	3, 2, 2, 2, 1463, 1442, 3, 2, 2, 2, 1463, 1444, 3, 2, 2, 2, 1463, 1445,
	3, 2, 2, 2, 1463, 1450, 3, 2, 2, 2, 1463, 1455, 3, 2, 2, 2, 1463, 1461,
	3, 2, 2, 2, 1464, 77, 3, 2, 2, 2, 1465, 1467, 9, 18, 2, 2, 1466, 1465,
	3, 2, 2, 2, 1466, 1467, 3, 2, 2, 2, 1467, 1468, 3, 2, 2, 2, 1468, 1469,
	5, 544, 273, 2, 1469, 1470, 5, 564, 283, 2, 1470, 79, 3, 2, 2, 2, 1471,
	1472, 5, 544, 273, 2, 1472, 1473, 5, 564, 283, 2, 1473, 81, 3, 2, 2, 2,
	1474, 1475, 7, 358, 2, 2, 1475, 1498, 7, 1113, 2, 2, 1476, 1477, 7, 452,
	2, 2, 1477, 1498, 7, 154, 2, 2, 1478, 1480, 7, 110, 2, 2, 1479, 1478, 3,
	2, 2, 2, 1479, 1480, 3, 2, 2, 2, 1480, 1481, 3, 2, 2, 2, 1481, 1498, 7,
	47, 2, 2, 1482, 1483, 7, 371, 2, 2, 1483, 1493, 7, 154, 2, 2, 1484, 1485,
	7, 505, 2, 2, 1485, 1493, 7, 154, 2, 2, 1486, 1487, 7, 131, 2, 2, 1487,
	1488, 7, 154, 2, 2, 1488, 1493, 7, 377, 2, 2, 1489, 1490, 7, 108, 2, 2,
	1490, 1491, 7, 154, 2, 2, 1491, 1493, 7, 377, 2, 2, 1492, 1482, 3, 2, 2,
	2, 1492, 1484, 3, 2, 2, 2, 1492, 1486, 3, 2, 2, 2, 1492, 1489, 3, 2, 2,
	2, 1493, 1498, 3, 2, 2, 2, 1494, 1495, 7, 154, 2, 2, 1495, 1496, 7, 581,
	2, 2, 1496, 1498, 9, 13, 2, 2, 1497, 1474, 3, 2, 2, 2, 1497, 1476, 3, 2,
	2, 2, 1497, 1479, 3, 2, 2, 2, 1497, 1492, 3, 2, 2, 2, 1497, 1494, 3, 2,
	2, 2, 1498, 83, 3, 2, 2, 2, 1499, 1500, 7, 431, 2, 2, 1500, 1514, 7, 1113,
	2, 2, 1501, 1502, 7, 39, 2, 2, 1502, 1514, 7, 1113, 2, 2, 1503, 1504, 7,
	639, 2, 2, 1504, 1514, 7, 1113, 2, 2, 1505, 1506, 7, 529, 2, 2, 1506, 1514,
	7, 1113, 2, 2, 1507, 1508, 7, 591, 2, 2, 1508, 1514, 7, 1113, 2, 2, 1509,
	1510, 7, 522, 2, 2, 1510, 1514, 7, 1113, 2, 2, 1511, 1512, 7, 534, 2, 2,
	1512, 1514, 5, 550, 276, 2, 1513, 1499, 3, 2, 2, 2, 1513, 1501, 3, 2, 2,
	2, 1513, 1503, 3, 2, 2, 2, 1513, 1505, 3, 2, 2, 2, 1513, 1507, 3, 2, 2,
	2, 1513, 1509, 3, 2, 2, 2, 1513, 1511, 3, 2, 2, 2, 1514, 85, 3, 2, 2, 2,
	1515, 1516, 7, 1098, 2, 2, 1516, 1521, 5, 88, 45, 2, 1517, 1518, 7, 1100,
	2, 2, 1518, 1520, 5, 88, 45, 2, 1519, 1517, 3, 2, 2, 2, 1520, 1523, 3,
	2, 2, 2, 1521, 1519, 3, 2, 2, 2, 1521, 1522, 3, 2, 2, 2, 1522, 1524, 3,
	2, 2, 2, 1523, 1521, 3, 2, 2, 2, 1524, 1525, 7, 1099, 2, 2, 1525, 87, 3,
	2, 2, 2, 1526, 1527, 5, 544, 273, 2, 1527, 1528, 5, 90, 46, 2, 1528, 1532,
	3, 2, 2, 2, 1529, 1532, 5, 94, 48, 2, 1530, 1532, 5, 102, 52, 2, 1531,
	1526, 3, 2, 2, 2, 1531, 1529, 3, 2, 2, 2, 1531, 1530, 3, 2, 2, 2, 1532,
	89, 3, 2, 2, 2, 1533, 1537, 5, 564, 283, 2, 1534, 1536, 5, 92, 47, 2, 1535,
	1534, 3, 2, 2, 2, 1536, 1539, 3, 2, 2, 2, 1537, 1535, 3, 2, 2, 2, 1537,
	1538, 3, 2, 2, 2, 1538, 91, 3, 2, 2, 2, 1539, 1537, 3, 2, 2, 2, 1540, 1594,
	5, 560, 281, 2, 1541, 1542, 7, 42, 2, 2, 1542, 1594, 5, 592, 297, 2, 1543,
	1594, 7, 647, 2, 2, 1544, 1594, 7, 443, 2, 2, 1545, 1550, 7, 332, 2, 2,
	1546, 1547, 7, 114, 2, 2, 1547, 1548, 7, 177, 2, 2, 1548, 1550, 5, 594,
	298, 2, 1549, 1545, 3, 2, 2, 2, 1549, 1546, 3, 2, 2, 2, 1550, 1594, 3,
	2, 2, 2, 1551, 1553, 7, 126, 2, 2, 1552, 1551, 3, 2, 2, 2, 1552, 1553,
	3, 2, 2, 2, 1553, 1554, 3, 2, 2, 2, 1554, 1594, 7, 90, 2, 2, 1555, 1557,
	7, 174, 2, 2, 1556, 1558, 7, 90, 2, 2, 1557, 1556, 3, 2, 2, 2, 1557, 1558,
	3, 2, 2, 2, 1558, 1594, 3, 2, 2, 2, 1559, 1560, 7, 358, 2, 2, 1560, 1594,
	7, 1113, 2, 2, 1561, 1562, 7, 356, 2, 2, 1562, 1594, 9, 19, 2, 2, 1563,
	1564, 7, 610, 2, 2, 1564, 1594, 9, 20, 2, 2, 1565, 1594, 5, 96, 49, 2,
	1566, 1567, 7, 28, 2, 2, 1567, 1594, 5, 532, 267, 2, 1568, 1569, 7, 69,
	2, 2, 1569, 1571, 7, 10, 2, 2, 1570, 1568, 3, 2, 2, 2, 1570, 1571, 3, 2,
	2, 2, 1571, 1572, 3, 2, 2, 2, 1572, 1573, 7, 14, 2, 2, 1573, 1574, 7, 1098,
	2, 2, 1574, 1575, 5, 642, 322, 2, 1575, 1577, 7, 1099, 2, 2, 1576, 1578,
	9, 21, 2, 2, 1577, 1576, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578, 1594,
	3, 2, 2, 2, 1579, 1580, 7, 232, 2, 2, 1580, 1581, 7, 42, 2, 2, 1581, 1594,
	7, 643, 2, 2, 1582, 1584, 7, 31, 2, 2, 1583, 1585, 5, 544, 273, 2, 1584,
	1583, 3, 2, 2, 2, 1584, 1585, 3, 2, 2, 2, 1585, 1587, 3, 2, 2, 2, 1586,
	1582, 3, 2, 2, 2, 1586, 1587, 3, 2, 2, 2, 1587, 1588, 3, 2, 2, 2, 1588,
	1589, 7, 27, 2, 2, 1589, 1590, 7, 1098, 2, 2, 1590, 1591, 5, 642, 322,
	2, 1591, 1592, 7, 1099, 2, 2, 1592, 1594, 3, 2, 2, 2, 1593, 1540, 3, 2,
	2, 2, 1593, 1541, 3, 2, 2, 2, 1593, 1543, 3, 2, 2, 2, 1593, 1544, 3, 2,
	2, 2, 1593, 1549, 3, 2, 2, 2, 1593, 1552, 3, 2, 2, 2, 1593, 1555, 3, 2,
	2, 2, 1593, 1559, 3, 2, 2, 2, 1593, 1561, 3, 2, 2, 2, 1593, 1563, 3, 2,
	2, 2, 1593, 1565, 3, 2, 2, 2, 1593, 1566, 3, 2, 2, 2, 1593, 1570, 3, 2,
	2, 2, 1593, 1579, 3, 2, 2, 2, 1593, 1586, 3, 2, 2, 2, 1594, 93, 3, 2, 2,
	2, 1595, 1597, 7, 31, 2, 2, 1596, 1598, 5, 544, 273, 2, 1597, 1596, 3,
	2, 2, 2, 1597, 1598, 3, 2, 2, 2, 1598, 1600, 3, 2, 2, 2, 1599, 1595, 3,
	2, 2, 2, 1599, 1600, 3, 2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 1602, 7,
	126, 2, 2, 1602, 1604, 7, 90, 2, 2, 1603, 1605, 5, 544, 273, 2, 1604, 1603,
	3, 2, 2, 2, 1604, 1605, 3, 2, 2, 2, 1605, 1607, 3, 2, 2, 2, 1606, 1608,
	5, 74, 38, 2, 1607, 1606, 3, 2, 2, 2, 1607, 1608, 3, 2, 2, 2, 1608, 1609,
	3, 2, 2, 2, 1609, 1613, 5, 580, 291, 2, 1610, 1612, 5, 76, 39, 2, 1611,
	1610, 3, 2, 2, 2, 1612, 1615, 3, 2, 2, 2, 1613, 1611, 3, 2, 2, 2, 1613,
	1614, 3, 2, 2, 2, 1614, 1665, 3, 2, 2, 2, 1615, 1613, 3, 2, 2, 2, 1616,
	1618, 7, 31, 2, 2, 1617, 1619, 5, 544, 273, 2, 1618, 1617, 3, 2, 2, 2,
	1618, 1619, 3, 2, 2, 2, 1619, 1621, 3, 2, 2, 2, 1620, 1616, 3, 2, 2, 2,
	1620, 1621, 3, 2, 2, 2, 1621, 1622, 3, 2, 2, 2, 1622, 1624, 7, 174, 2,
	2, 1623, 1625, 9, 22, 2, 2, 1624, 1623, 3, 2, 2, 2, 1624, 1625, 3, 2, 2,
	2, 1625, 1627, 3, 2, 2, 2, 1626, 1628, 5, 544, 273, 2, 1627, 1626, 3, 2,
	2, 2, 1627, 1628, 3, 2, 2, 2, 1628, 1630, 3, 2, 2, 2, 1629, 1631, 5, 74,
	38, 2, 1630, 1629, 3, 2, 2, 2, 1630, 1631, 3, 2, 2, 2, 1631, 1632, 3, 2,
	2, 2, 1632, 1636, 5, 580, 291, 2, 1633, 1635, 5, 76, 39, 2, 1634, 1633,
	3, 2, 2, 2, 1635, 1638, 3, 2, 2, 2, 1636, 1634, 3, 2, 2, 2, 1636, 1637,
	3, 2, 2, 2, 1637, 1665, 3, 2, 2, 2, 1638, 1636, 3, 2, 2, 2, 1639, 1641,
	7, 31, 2, 2, 1640, 1642, 5, 544, 273, 2, 1641, 1640, 3, 2, 2, 2, 1641,
	1642, 3, 2, 2, 2, 1642, 1644, 3, 2, 2, 2, 1643, 1639, 3, 2, 2, 2, 1643,
	1644, 3, 2, 2, 2, 1644, 1645, 3, 2, 2, 2, 1645, 1646, 7, 66, 2, 2, 1646,
	1648, 7, 90, 2, 2, 1647, 1649, 5, 544, 273, 2, 1648, 1647, 3, 2, 2, 2,
	1648, 1649, 3, 2, 2, 2, 1649, 1650, 3, 2, 2, 2, 1650, 1651, 5, 580, 291,
	2, 1651, 1652, 5, 96, 49, 2, 1652, 1665, 3, 2, 2, 2, 1653, 1655, 7, 31,
	2, 2, 1654, 1656, 5, 544, 273, 2, 1655, 1654, 3, 2, 2, 2, 1655, 1656, 3,
	2, 2, 2, 1656, 1658, 3, 2, 2, 2, 1657, 1653, 3, 2, 2, 2, 1657, 1658, 3,
	2, 2, 2, 1658, 1659, 3, 2, 2, 2, 1659, 1660, 7, 27, 2, 2, 1660, 1661, 7,
	1098, 2, 2, 1661, 1662, 5, 642, 322, 2, 1662, 1663, 7, 1099, 2, 2, 1663,
	1665, 3, 2, 2, 2, 1664, 1599, 3, 2, 2, 2, 1664, 1620, 3, 2, 2, 2, 1664,
	1643, 3, 2, 2, 2, 1664, 1657, 3, 2, 2, 2, 1665, 95, 3, 2, 2, 2, 1666, 1667,
	7, 132, 2, 2, 1667, 1669, 5, 520, 261, 2, 1668, 1670, 5, 580, 291, 2, 1669,
	1668, 3, 2, 2, 2, 1669, 1670, 3, 2, 2, 2, 1670, 1673, 3, 2, 2, 2, 1671,
	1672, 7, 106, 2, 2, 1672, 1674, 9, 23, 2, 2, 1673, 1671, 3, 2, 2, 2, 1673,
	1674, 3, 2, 2, 2, 1674, 1676, 3, 2, 2, 2, 1675, 1677, 5, 98, 50, 2, 1676,
	1675, 3, 2, 2, 2, 1676, 1677, 3, 2, 2, 2, 1677, 97, 3, 2, 2, 2, 1678, 1679,
	7, 114, 2, 2, 1679, 1680, 7, 44, 2, 2, 1680, 1684, 5, 100, 51, 2, 1681,
	1682, 7, 114, 2, 2, 1682, 1683, 7, 177, 2, 2, 1683, 1685, 5, 100, 51, 2,
	1684, 1681, 3, 2, 2, 2, 1684, 1685, 3, 2, 2, 2, 1685, 1695, 3, 2, 2, 2,
	1686, 1687, 7, 114, 2, 2, 1687, 1688, 7, 177, 2, 2, 1688, 1692, 5, 100,
	51, 2, 1689, 1690, 7, 114, 2, 2, 1690, 1691, 7, 44, 2, 2, 1691, 1693, 5,
	100, 51, 2, 1692, 1689, 3, 2, 2, 2, 1692, 1693, 3, 2, 2, 2, 1693, 1695,
	3, 2, 2, 2, 1694, 1678, 3, 2, 2, 2, 1694, 1686, 3, 2, 2, 2, 1695, 99, 3,
	2, 2, 2, 1696, 1703, 7, 140, 2, 2, 1697, 1703, 7, 22, 2, 2, 1698, 1699,
	7, 149, 2, 2, 1699, 1703, 7, 112, 2, 2, 1700, 1701, 7, 505, 2, 2, 1701,
	1703, 7, 323, 2, 2, 1702, 1696, 3, 2, 2, 2, 1702, 1697, 3, 2, 2, 2, 1702,
	1698, 3, 2, 2, 2, 1702, 1700, 3, 2, 2, 2, 1703, 101, 3, 2, 2, 2, 1704,
	1706, 9, 22, 2, 2, 1705, 1707, 5, 544, 273, 2, 1706, 1705, 3, 2, 2, 2,
	1706, 1707, 3, 2, 2, 2, 1707, 1709, 3, 2, 2, 2, 1708, 1710, 5, 74, 38,
	2, 1709, 1708, 3, 2, 2, 2, 1709, 1710, 3, 2, 2, 2, 1710, 1711, 3, 2, 2,
	2, 1711, 1715, 5, 580, 291, 2, 1712, 1714, 5, 76, 39, 2, 1713, 1712, 3,
	2, 2, 2, 1714, 1717, 3, 2, 2, 2, 1715, 1713, 3, 2, 2, 2, 1715, 1716, 3,
	2, 2, 2, 1716, 1733, 3, 2, 2, 2, 1717, 1715, 3, 2, 2, 2, 1718, 1720, 9,
	24, 2, 2, 1719, 1721, 9, 22, 2, 2, 1720, 1719, 3, 2, 2, 2, 1720, 1721,
	3, 2, 2, 2, 1721, 1723, 3, 2, 2, 2, 1722, 1724, 5, 544, 273, 2, 1723, 1722,
	3, 2, 2, 2, 1723, 1724, 3, 2, 2, 2, 1724, 1725, 3, 2, 2, 2, 1725, 1729,
	5, 580, 291, 2, 1726, 1728, 5, 76, 39, 2, 1727, 1726, 3, 2, 2, 2, 1728,
	1731, 3, 2, 2, 2, 1729, 1727, 3, 2, 2, 2, 1729, 1730, 3, 2, 2, 2, 1730,
	1733, 3, 2, 2, 2, 1731, 1729, 3, 2, 2, 2, 1732, 1704, 3, 2, 2, 2, 1732,
	1718, 3, 2, 2, 2, 1733, 103, 3, 2, 2, 2, 1734, 1736, 7, 396, 2, 2, 1735,
	1737, 7, 1089, 2, 2, 1736, 1735, 3, 2, 2, 2, 1736, 1737, 3, 2, 2, 2, 1737,
	1739, 3, 2, 2, 2, 1738, 1740, 5, 534, 268, 2, 1739, 1738, 3, 2, 2, 2, 1739,
	1740, 3, 2, 2, 2, 1740, 1880, 3, 2, 2, 2, 1741, 1743, 7, 332, 2, 2, 1742,
	1744, 7, 1089, 2, 2, 1743, 1742, 3, 2, 2, 2, 1743, 1744, 3, 2, 2, 2, 1744,
	1745, 3, 2, 2, 2, 1745, 1880, 5, 550, 276, 2, 1746, 1748, 7, 333, 2, 2,
	1747, 1749, 7, 1089, 2, 2, 1748, 1747, 3, 2, 2, 2, 1748, 1749, 3, 2, 2,
	2, 1749, 1750, 3, 2, 2, 2, 1750, 1880, 5, 550, 276, 2, 1751, 1753, 7, 42,
	2, 2, 1752, 1751, 3, 2, 2, 2, 1752, 1753, 3, 2, 2, 2, 1753, 1754, 3, 2,
	2, 2, 1754, 1756, 5, 60, 31, 2, 1755, 1757, 7, 1089, 2, 2, 1756, 1755,
	3, 2, 2, 2, 1756, 1757, 3, 2, 2, 2, 1757, 1760, 3, 2, 2, 2, 1758, 1761,
	5, 530, 266, 2, 1759, 1761, 7, 42, 2, 2, 1760, 1758, 3, 2, 2, 2, 1760,
	1759, 3, 2, 2, 2, 1761, 1880, 3, 2, 2, 2, 1762, 1764, 9, 25, 2, 2, 1763,
	1765, 7, 1089, 2, 2, 1764, 1763, 3, 2, 2, 2, 1764, 1765, 3, 2, 2, 2, 1765,
	1766, 3, 2, 2, 2, 1766, 1880, 9, 26, 2, 2, 1767, 1769, 7, 42, 2, 2, 1768,
	1767, 3, 2, 2, 2, 1768, 1769, 3, 2, 2, 2, 1769, 1770, 3, 2, 2, 2, 1770,
	1772, 7, 28, 2, 2, 1771, 1773, 7, 1089, 2, 2, 1772, 1771, 3, 2, 2, 2, 1772,
	1773, 3, 2, 2, 2, 1773, 1774, 3, 2, 2, 2, 1774, 1880, 5, 532, 267, 2, 1775,
	1777, 7, 358, 2, 2, 1776, 1778, 7, 1089, 2, 2, 1777, 1776, 3, 2, 2, 2,
	1777, 1778, 3, 2, 2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1880, 7, 1113, 2,
	2, 1780, 1782, 7, 363, 2, 2, 1781, 1783, 7, 1089, 2, 2, 1782, 1781, 3,
	2, 2, 2, 1782, 1783, 3, 2, 2, 2, 1783, 1784, 3, 2, 2, 2, 1784, 1880, 9,
	27, 2, 2, 1785, 1787, 7, 366, 2, 2, 1786, 1788, 7, 1089, 2, 2, 1787, 1786,
	3, 2, 2, 2, 1787, 1788, 3, 2, 2, 2, 1788, 1789, 3, 2, 2, 2, 1789, 1880,
	7, 1113, 2, 2, 1790, 1791, 7, 377, 2, 2, 1791, 1793, 7, 384, 2, 2, 1792,
	1794, 7, 1089, 2, 2, 1793, 1792, 3, 2, 2, 2, 1793, 1794, 3, 2, 2, 2, 1794,
	1795, 3, 2, 2, 2, 1795, 1880, 7, 1113, 2, 2, 1796, 1798, 7, 382, 2, 2,
	1797, 1799, 7, 1089, 2, 2, 1798, 1797, 3, 2, 2, 2, 1798, 1799, 3, 2, 2,
	2, 1799, 1800, 3, 2, 2, 2, 1800, 1880, 9, 26, 2, 2, 1801, 1803, 7, 393,
	2, 2, 1802, 1804, 7, 1089, 2, 2, 1803, 1802, 3, 2, 2, 2, 1803, 1804, 3,
	2, 2, 2, 1804, 1805, 3, 2, 2, 2, 1805, 1880, 7, 1113, 2, 2, 1806, 1807,
	7, 80, 2, 2, 1807, 1809, 7, 384, 2, 2, 1808, 1810, 7, 1089, 2, 2, 1809,
	1808, 3, 2, 2, 2, 1809, 1810, 3, 2, 2, 2, 1810, 1811, 3, 2, 2, 2, 1811,
	1880, 7, 1113, 2, 2, 1812, 1814, 7, 439, 2, 2, 1813, 1815, 7, 1089, 2,
	2, 1814, 1813, 3, 2, 2, 2, 1814, 1815, 3, 2, 2, 2, 1815, 1816, 3, 2, 2,
	2, 1816, 1880, 9, 28, 2, 2, 1817, 1819, 7, 451, 2, 2, 1818, 1820, 7, 1089,
	2, 2, 1819, 1818, 3, 2, 2, 2, 1819, 1820, 3, 2, 2, 2, 1820, 1821, 3, 2,
	2, 2, 1821, 1880, 5, 552, 277, 2, 1822, 1824, 7, 484, 2, 2, 1823, 1825,
	7, 1089, 2, 2, 1824, 1823, 3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1826,
	3, 2, 2, 2, 1826, 1880, 5, 550, 276, 2, 1827, 1829, 7, 494, 2, 2, 1828,
	1830, 7, 1089, 2, 2, 1829, 1828, 3, 2, 2, 2, 1829, 1830, 3, 2, 2, 2, 1830,
	1831, 3, 2, 2, 2, 1831, 1880, 5, 550, 276, 2, 1832, 1834, 7, 523, 2, 2,
	1833, 1835, 7, 1089, 2, 2, 1834, 1833, 3, 2, 2, 2, 1834, 1835, 3, 2, 2,
	2, 1835, 1836, 3, 2, 2, 2, 1836, 1880, 9, 29, 2, 2, 1837, 1839, 7, 529,
	2, 2, 1838, 1840, 7, 1089, 2, 2, 1839, 1838, 3, 2, 2, 2, 1839, 1840, 3,
	2, 2, 2, 1840, 1841, 3, 2, 2, 2, 1841, 1880, 7, 1113, 2, 2, 1842, 1844,
	7, 577, 2, 2, 1843, 1845, 7, 1089, 2, 2, 1844, 1843, 3, 2, 2, 2, 1844,
	1845, 3, 2, 2, 2, 1845, 1846, 3, 2, 2, 2, 1846, 1880, 9, 30, 2, 2, 1847,
	1849, 7, 605, 2, 2, 1848, 1850, 7, 1089, 2, 2, 1849, 1848, 3, 2, 2, 2,
	1849, 1850, 3, 2, 2, 2, 1850, 1851, 3, 2, 2, 2, 1851, 1880, 9, 29, 2, 2,
	1852, 1854, 7, 606, 2, 2, 1853, 1855, 7, 1089, 2, 2, 1854, 1853, 3, 2,
	2, 2, 1854, 1855, 3, 2, 2, 2, 1855, 1856, 3, 2, 2, 2, 1856, 1880, 9, 29,
	2, 2, 1857, 1859, 7, 607, 2, 2, 1858, 1860, 7, 1089, 2, 2, 1859, 1858,
	3, 2, 2, 2, 1859, 1860, 3, 2, 2, 2, 1860, 1861, 3, 2, 2, 2, 1861, 1880,
	5, 550, 276, 2, 1862, 1863, 7, 621, 2, 2, 1863, 1865, 5, 544, 273, 2, 1864,
	1866, 5, 108, 55, 2, 1865, 1864, 3, 2, 2, 2, 1865, 1866, 3, 2, 2, 2, 1866,
	1880, 3, 2, 2, 2, 1867, 1868, 7, 622, 2, 2, 1868, 1869, 7, 1089, 2, 2,
	1869, 1880, 5, 106, 54, 2, 1870, 1880, 5, 108, 55, 2, 1871, 1873, 7, 173,
	2, 2, 1872, 1874, 7, 1089, 2, 2, 1873, 1872, 3, 2, 2, 2, 1873, 1874, 3,
	2, 2, 2, 1874, 1875, 3, 2, 2, 2, 1875, 1876, 7, 1098, 2, 2, 1876, 1877,
	5, 578, 290, 2, 1877, 1878, 7, 1099, 2, 2, 1878, 1880, 3, 2, 2, 2, 1879,
	1734, 3, 2, 2, 2, 1879, 1741, 3, 2, 2, 2, 1879, 1746, 3, 2, 2, 2, 1879,
	1752, 3, 2, 2, 2, 1879, 1762, 3, 2, 2, 2, 1879, 1768, 3, 2, 2, 2, 1879,
	1775, 3, 2, 2, 2, 1879, 1780, 3, 2, 2, 2, 1879, 1785, 3, 2, 2, 2, 1879,
	1790, 3, 2, 2, 2, 1879, 1796, 3, 2, 2, 2, 1879, 1801, 3, 2, 2, 2, 1879,
	1806, 3, 2, 2, 2, 1879, 1812, 3, 2, 2, 2, 1879, 1817, 3, 2, 2, 2, 1879,
	1822, 3, 2, 2, 2, 1879, 1827, 3, 2, 2, 2, 1879, 1832, 3, 2, 2, 2, 1879,
	1837, 3, 2, 2, 2, 1879, 1842, 3, 2, 2, 2, 1879, 1847, 3, 2, 2, 2, 1879,
	1852, 3, 2, 2, 2, 1879, 1857, 3, 2, 2, 2, 1879, 1862, 3, 2, 2, 2, 1879,
	1867, 3, 2, 2, 2, 1879, 1870, 3, 2, 2, 2, 1879, 1871, 3, 2, 2, 2, 1880,
	105, 3, 2, 2, 2, 1881, 1882, 9, 31, 2, 2, 1882, 107, 3, 2, 2, 2, 1883,
	1884, 7, 610, 2, 2, 1884, 1885, 9, 20, 2, 2, 1885, 109, 3, 2, 2, 2, 1886,
	1887, 7, 125, 2, 2, 1887, 1888, 7, 20, 2, 2, 1888, 1891, 5, 112, 57, 2,
	1889, 1890, 7, 528, 2, 2, 1890, 1892, 5, 550, 276, 2, 1891, 1889, 3, 2,
	2, 2, 1891, 1892, 3, 2, 2, 2, 1892, 1900, 3, 2, 2, 2, 1893, 1894, 7, 615,
	2, 2, 1894, 1895, 7, 20, 2, 2, 1895, 1898, 5, 114, 58, 2, 1896, 1897, 7,
	616, 2, 2, 1897, 1899, 5, 550, 276, 2, 1898, 1896, 3, 2, 2, 2, 1898, 1899,
	3, 2, 2, 2, 1899, 1901, 3, 2, 2, 2, 1900, 1893, 3, 2, 2, 2, 1900, 1901,
	3, 2, 2, 2, 1901, 1913, 3, 2, 2, 2, 1902, 1903, 7, 1098, 2, 2, 1903, 1908,
	5, 116, 59, 2, 1904, 1905, 7, 1100, 2, 2, 1905, 1907, 5, 116, 59, 2, 1906,
	1904, 3, 2, 2, 2, 1907, 1910, 3, 2, 2, 2, 1908, 1906, 3, 2, 2, 2, 1908,
	1909, 3, 2, 2, 2, 1909, 1911, 3, 2, 2, 2, 1910, 1908, 3, 2, 2, 2, 1911,
	1912, 7, 1099, 2, 2, 1912, 1914, 3, 2, 2, 2, 1913, 1902, 3, 2, 2, 2, 1913,
	1914, 3, 2, 2, 2, 1914, 111, 3, 2, 2, 2, 1915, 1917, 7, 98, 2, 2, 1916,
	1915, 3, 2, 2, 2, 1916, 1917, 3, 2, 2, 2, 1917, 1918, 3, 2, 2, 2, 1918,
	1919, 7, 429, 2, 2, 1919, 1920, 7, 1098, 2, 2, 1920, 1921, 5, 642, 322,
	2, 1921, 1922, 7, 1099, 2, 2, 1922, 1961, 3, 2, 2, 2, 1923, 1925, 7, 98,
	2, 2, 1924, 1923, 3, 2, 2, 2, 1924, 1925, 3, 2, 2, 2, 1925, 1926, 3, 2,
	2, 2, 1926, 1930, 7, 90, 2, 2, 1927, 1928, 7, 326, 2, 2, 1928, 1929, 7,
	1089, 2, 2, 1929, 1931, 9, 32, 2, 2, 1930, 1927, 3, 2, 2, 2, 1930, 1931,
	3, 2, 2, 2, 1931, 1932, 3, 2, 2, 2, 1932, 1933, 7, 1098, 2, 2, 1933, 1934,
	5, 576, 289, 2, 1934, 1935, 7, 1099, 2, 2, 1935, 1961, 3, 2, 2, 2, 1936,
	1946, 7, 129, 2, 2, 1937, 1938, 7, 1098, 2, 2, 1938, 1939, 5, 642, 322,
	2, 1939, 1940, 7, 1099, 2, 2, 1940, 1947, 3, 2, 2, 2, 1941, 1942, 7, 355,
	2, 2, 1942, 1943, 7, 1098, 2, 2, 1943, 1944, 5, 576, 289, 2, 1944, 1945,
	7, 1099, 2, 2, 1945, 1947, 3, 2, 2, 2, 1946, 1937, 3, 2, 2, 2, 1946, 1941,
	3, 2, 2, 2, 1947, 1961, 3, 2, 2, 2, 1948, 1958, 7, 457, 2, 2, 1949, 1950,
	7, 1098, 2, 2, 1950, 1951, 5, 642, 322, 2, 1951, 1952, 7, 1099, 2, 2, 1952,
	1959, 3, 2, 2, 2, 1953, 1954, 7, 355, 2, 2, 1954, 1955, 7, 1098, 2, 2,
	1955, 1956, 5, 576, 289, 2, 1956, 1957, 7, 1099, 2, 2, 1957, 1959, 3, 2,
	2, 2, 1958, 1949, 3, 2, 2, 2, 1958, 1953, 3, 2, 2, 2, 1959, 1961, 3, 2,
	2, 2, 1960, 1916, 3, 2, 2, 2, 1960, 1924, 3, 2, 2, 2, 1960, 1936, 3, 2,
	2, 2, 1960, 1948, 3, 2, 2, 2, 1961, 113, 3, 2, 2, 2, 1962, 1964, 7, 98,
	2, 2, 1963, 1962, 3, 2, 2, 2, 1963, 1964, 3, 2, 2, 2, 1964, 1965, 3, 2,
	2, 2, 1965, 1966, 7, 429, 2, 2, 1966, 1967, 7, 1098, 2, 2, 1967, 1968,
	5, 642, 322, 2, 1968, 1969, 7, 1099, 2, 2, 1969, 1984, 3, 2, 2, 2, 1970,
	1972, 7, 98, 2, 2, 1971, 1970, 3, 2, 2, 2, 1971, 1972, 3, 2, 2, 2, 1972,
	1973, 3, 2, 2, 2, 1973, 1977, 7, 90, 2, 2, 1974, 1975, 7, 326, 2, 2, 1975,
	1976, 7, 1089, 2, 2, 1976, 1978, 9, 32, 2, 2, 1977, 1974, 3, 2, 2, 2, 1977,
	1978, 3, 2, 2, 2, 1978, 1979, 3, 2, 2, 2, 1979, 1980, 7, 1098, 2, 2, 1980,
	1981, 5, 576, 289, 2, 1981, 1982, 7, 1099, 2, 2, 1982, 1984, 3, 2, 2, 2,
	1983, 1963, 3, 2, 2, 2, 1983, 1971, 3, 2, 2, 2, 1984, 115, 3, 2, 2, 2,
	1985, 1986, 7, 125, 2, 2, 1986, 1987, 5, 544, 273, 2, 1987, 1988, 7, 181,
	2, 2, 1988, 1989, 7, 455, 2, 2, 1989, 1990, 7, 625, 2, 2, 1990, 1991, 7,
	1098, 2, 2, 1991, 1996, 5, 118, 60, 2, 1992, 1993, 7, 1100, 2, 2, 1993,
	1995, 5, 118, 60, 2, 1994, 1992, 3, 2, 2, 2, 1995, 1998, 3, 2, 2, 2, 1996,
	1994, 3, 2, 2, 2, 1996, 1997, 3, 2, 2, 2, 1997, 1999, 3, 2, 2, 2, 1998,
	1996, 3, 2, 2, 2, 1999, 2003, 7, 1099, 2, 2, 2000, 2002, 5, 124, 63, 2,
	2001, 2000, 3, 2, 2, 2, 2002, 2005, 3, 2, 2, 2, 2003, 2001, 3, 2, 2, 2,
	2003, 2004, 3, 2, 2, 2, 2004, 2017, 3, 2, 2, 2, 2005, 2003, 3, 2, 2, 2,
	2006, 2007, 7, 1098, 2, 2, 2007, 2012, 5, 122, 62, 2, 2008, 2009, 7, 1100,
	2, 2, 2009, 2011, 5, 122, 62, 2, 2010, 2008, 3, 2, 2, 2, 2011, 2014, 3,
	2, 2, 2, 2012, 2010, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013, 2015, 3,
	2, 2, 2, 2014, 2012, 3, 2, 2, 2, 2015, 2016, 7, 1099, 2, 2, 2016, 2018,
	3, 2, 2, 2, 2017, 2006, 3, 2, 2, 2, 2017, 2018, 3, 2, 2, 2, 2018, 2132,
	3, 2, 2, 2, 2019, 2020, 7, 125, 2, 2, 2020, 2021, 5, 544, 273, 2, 2021,
	2022, 7, 181, 2, 2, 2022, 2023, 7, 455, 2, 2, 2023, 2024, 7, 625, 2, 2,
	2024, 2028, 5, 118, 60, 2, 2025, 2027, 5, 124, 63, 2, 2026, 2025, 3, 2,
	2, 2, 2027, 2030, 3, 2, 2, 2, 2028, 2026, 3, 2, 2, 2, 2028, 2029, 3, 2,
	2, 2, 2029, 2042, 3, 2, 2, 2, 2030, 2028, 3, 2, 2, 2, 2031, 2032, 7, 1098,
	2, 2, 2032, 2037, 5, 122, 62, 2, 2033, 2034, 7, 1100, 2, 2, 2034, 2036,
	5, 122, 62, 2, 2035, 2033, 3, 2, 2, 2, 2036, 2039, 3, 2, 2, 2, 2037, 2035,
	3, 2, 2, 2, 2037, 2038, 3, 2, 2, 2, 2038, 2040, 3, 2, 2, 2, 2039, 2037,
	3, 2, 2, 2, 2040, 2041, 7, 1099, 2, 2, 2041, 2043, 3, 2, 2, 2, 2042, 2031,
	3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043, 2132, 3, 2, 2, 2, 2044, 2045,
	7, 125, 2, 2, 2045, 2046, 5, 544, 273, 2, 2046, 2047, 7, 181, 2, 2, 2047,
	2048, 7, 79, 2, 2, 2048, 2049, 7, 1098, 2, 2, 2049, 2054, 5, 118, 60, 2,
	2050, 2051, 7, 1100, 2, 2, 2051, 2053, 5, 118, 60, 2, 2052, 2050, 3, 2,
	2, 2, 2053, 2056, 3, 2, 2, 2, 2054, 2052, 3, 2, 2, 2, 2054, 2055, 3, 2,
	2, 2, 2055, 2057, 3, 2, 2, 2, 2056, 2054, 3, 2, 2, 2, 2057, 2061, 7, 1099,
	2, 2, 2058, 2060, 5, 124, 63, 2, 2059, 2058, 3, 2, 2, 2, 2060, 2063, 3,
	2, 2, 2, 2061, 2059, 3, 2, 2, 2, 2061, 2062, 3, 2, 2, 2, 2062, 2075, 3,
	2, 2, 2, 2063, 2061, 3, 2, 2, 2, 2064, 2065, 7, 1098, 2, 2, 2065, 2070,
	5, 122, 62, 2, 2066, 2067, 7, 1100, 2, 2, 2067, 2069, 5, 122, 62, 2, 2068,
	2066, 3, 2, 2, 2, 2069, 2072, 3, 2, 2, 2, 2070, 2068, 3, 2, 2, 2, 2070,
	2071, 3, 2, 2, 2, 2071, 2073, 3, 2, 2, 2, 2072, 2070, 3, 2, 2, 2, 2073,
	2074, 7, 1099, 2, 2, 2074, 2076, 3, 2, 2, 2, 2075, 2064, 3, 2, 2, 2, 2075,
	2076, 3, 2, 2, 2, 2076, 2132, 3, 2, 2, 2, 2077, 2078, 7, 125, 2, 2, 2078,
	2079, 5, 544, 273, 2, 2079, 2080, 7, 181, 2, 2, 2080, 2081, 7, 79, 2, 2,
	2081, 2082, 7, 1098, 2, 2, 2082, 2087, 5, 120, 61, 2, 2083, 2084, 7, 1100,
	2, 2, 2084, 2086, 5, 120, 61, 2, 2085, 2083, 3, 2, 2, 2, 2086, 2089, 3,
	2, 2, 2, 2087, 2085, 3, 2, 2, 2, 2087, 2088, 3, 2, 2, 2, 2088, 2090, 3,
	2, 2, 2, 2089, 2087, 3, 2, 2, 2, 2090, 2094, 7, 1099, 2, 2, 2091, 2093,
	5, 124, 63, 2, 2092, 2091, 3, 2, 2, 2, 2093, 2096, 3, 2, 2, 2, 2094, 2092,
	3, 2, 2, 2, 2094, 2095, 3, 2, 2, 2, 2095, 2108, 3, 2, 2, 2, 2096, 2094,
	3, 2, 2, 2, 2097, 2098, 7, 1098, 2, 2, 2098, 2103, 5, 122, 62, 2, 2099,
	2100, 7, 1100, 2, 2, 2100, 2102, 5, 122, 62, 2, 2101, 2099, 3, 2, 2, 2,
	2102, 2105, 3, 2, 2, 2, 2103, 2101, 3, 2, 2, 2, 2103, 2104, 3, 2, 2, 2,
	2104, 2106, 3, 2, 2, 2, 2105, 2103, 3, 2, 2, 2, 2106, 2107, 7, 1099, 2,
	2, 2107, 2109, 3, 2, 2, 2, 2108, 2097, 3, 2, 2, 2, 2108, 2109, 3, 2, 2,
	2, 2109, 2132, 3, 2, 2, 2, 2110, 2111, 7, 125, 2, 2, 2111, 2115, 5, 544,
	273, 2, 2112, 2114, 5, 124, 63, 2, 2113, 2112, 3, 2, 2, 2, 2114, 2117,
	3, 2, 2, 2, 2115, 2113, 3, 2, 2, 2, 2115, 2116, 3, 2, 2, 2, 2116, 2129,
	3, 2, 2, 2, 2117, 2115, 3, 2, 2, 2, 2118, 2119, 7, 1098, 2, 2, 2119, 2124,
	5, 122, 62, 2, 2120, 2121, 7, 1100, 2, 2, 2121, 2123, 5, 122, 62, 2, 2122,
	2120, 3, 2, 2, 2, 2123, 2126, 3, 2, 2, 2, 2124, 2122, 3, 2, 2, 2, 2124,
	2125, 3, 2, 2, 2, 2125, 2127, 3, 2, 2, 2, 2126, 2124, 3, 2, 2, 2, 2127,
	2128, 7, 1099, 2, 2, 2128, 2130, 3, 2, 2, 2, 2129, 2118, 3, 2, 2, 2, 2129,
	2130, 3, 2, 2, 2, 2130, 2132, 3, 2, 2, 2, 2131, 1985, 3, 2, 2, 2, 2131,
	2019, 3, 2, 2, 2, 2131, 2044, 3, 2, 2, 2, 2131, 2077, 3, 2, 2, 2, 2131,
	2110, 3, 2, 2, 2, 2132, 117, 3, 2, 2, 2, 2133, 2137, 5, 562, 282, 2, 2134,
	2137, 5, 642, 322, 2, 2135, 2137, 7, 107, 2, 2, 2136, 2133, 3, 2, 2, 2,
	2136, 2134, 3, 2, 2, 2, 2136, 2135, 3, 2, 2, 2, 2137, 119, 3, 2, 2, 2,
	2138, 2139, 7, 1098, 2, 2, 2139, 2142, 5, 118, 60, 2, 2140, 2141, 7, 1100,
	2, 2, 2141, 2143, 5, 118, 60, 2, 2142, 2140, 3, 2, 2, 2, 2143, 2144, 3,
	2, 2, 2, 2144, 2142, 3, 2, 2, 2, 2144, 2145, 3, 2, 2, 2, 2145, 2146, 3,
	2, 2, 2, 2146, 2147, 7, 1099, 2, 2, 2147, 121, 3, 2, 2, 2, 2148, 2149,
	7, 615, 2, 2, 2149, 2153, 5, 544, 273, 2, 2150, 2152, 5, 124, 63, 2, 2151,
	2150, 3, 2, 2, 2, 2152, 2155, 3, 2, 2, 2, 2153, 2151, 3, 2, 2, 2, 2153,
	2154, 3, 2, 2, 2, 2154, 123, 3, 2, 2, 2, 2155, 2153, 3, 2, 2, 2, 2156,
	2158, 7, 42, 2, 2, 2157, 2156, 3, 2, 2, 2, 2157, 2158, 3, 2, 2, 2, 2158,
	2160, 3, 2, 2, 2, 2159, 2161, 7, 610, 2, 2, 2160, 2159, 3, 2, 2, 2, 2160,
	2161, 3, 2, 2, 2, 2161, 2162, 3, 2, 2, 2, 2162, 2164, 7, 396, 2, 2, 2163,
	2165, 7, 1089, 2, 2, 2164, 2163, 3, 2, 2, 2, 2164, 2165, 3, 2, 2, 2, 2165,
	2166, 3, 2, 2, 2, 2166, 2205, 5, 534, 268, 2, 2167, 2169, 7, 358, 2, 2,
	2168, 2170, 7, 1089, 2, 2, 2169, 2168, 3, 2, 2, 2, 2169, 2170, 3, 2, 2,
	2, 2170, 2171, 3, 2, 2, 2, 2171, 2205, 7, 1113, 2, 2, 2172, 2173, 7, 377,
	2, 2, 2173, 2175, 7, 384, 2, 2, 2174, 2176, 7, 1089, 2, 2, 2175, 2174,
	3, 2, 2, 2, 2175, 2176, 3, 2, 2, 2, 2176, 2177, 3, 2, 2, 2, 2177, 2205,
	7, 1113, 2, 2, 2178, 2179, 7, 80, 2, 2, 2179, 2181, 7, 384, 2, 2, 2180,
	2182, 7, 1089, 2, 2, 2181, 2180, 3, 2, 2, 2, 2181, 2182, 3, 2, 2, 2, 2182,
	2183, 3, 2, 2, 2, 2183, 2205, 7, 1113, 2, 2, 2184, 2186, 7, 484, 2, 2,
	2185, 2187, 7, 1089, 2, 2, 2186, 2185, 3, 2, 2, 2, 2186, 2187, 3, 2, 2,
	2, 2187, 2188, 3, 2, 2, 2, 2188, 2205, 5, 550, 276, 2, 2189, 2191, 7, 494,
	2, 2, 2190, 2192, 7, 1089, 2, 2, 2191, 2190, 3, 2, 2, 2, 2191, 2192, 3,
	2, 2, 2, 2192, 2193, 3, 2, 2, 2, 2193, 2205, 5, 550, 276, 2, 2194, 2196,
	7, 621, 2, 2, 2195, 2197, 7, 1089, 2, 2, 2196, 2195, 3, 2, 2, 2, 2196,
	2197, 3, 2, 2, 2, 2197, 2198, 3, 2, 2, 2, 2198, 2205, 5, 544, 273, 2, 2199,
	2201, 7, 508, 2, 2, 2200, 2202, 7, 1089, 2, 2, 2201, 2200, 3, 2, 2, 2,
	2201, 2202, 3, 2, 2, 2, 2202, 2203, 3, 2, 2, 2, 2203, 2205, 5, 544, 273,
	2, 2204, 2157, 3, 2, 2, 2, 2204, 2167, 3, 2, 2, 2, 2204, 2172, 3, 2, 2,
	2, 2204, 2178, 3, 2, 2, 2, 2204, 2184, 3, 2, 2, 2, 2204, 2189, 3, 2, 2,
	2, 2204, 2194, 3, 2, 2, 2, 2204, 2199, 3, 2, 2, 2, 2205, 125, 3, 2, 2,
	2, 2206, 2207, 7, 9, 2, 2, 2207, 2209, 9, 2, 2, 2, 2208, 2210, 5, 544,
	273, 2, 2209, 2208, 3, 2, 2, 2, 2209, 2210, 3, 2, 2, 2, 2210, 2212, 3,
	2, 2, 2, 2211, 2213, 5, 58, 30, 2, 2212, 2211, 3, 2, 2, 2, 2213, 2214,
	3, 2, 2, 2, 2214, 2212, 3, 2, 2, 2, 2214, 2215, 3, 2, 2, 2, 2215, 2225,
	3, 2, 2, 2, 2216, 2217, 7, 9, 2, 2, 2217, 2218, 9, 2, 2, 2, 2218, 2219,
	5, 544, 273, 2, 2219, 2220, 7, 638, 2, 2, 2220, 2221, 7, 377, 2, 2, 2221,
	2222, 7, 384, 2, 2, 2222, 2223, 7, 500, 2, 2, 2223, 2225, 3, 2, 2, 2, 2224,
	2206, 3, 2, 2, 2, 2224, 2216, 3, 2, 2, 2, 2225, 127, 3, 2, 2, 2, 2226,
	2228, 7, 9, 2, 2, 2227, 2229, 5, 62, 32, 2, 2228, 2227, 3, 2, 2, 2, 2228,
	2229, 3, 2, 2, 2, 2229, 2230, 3, 2, 2, 2, 2230, 2231, 7, 402, 2, 2, 2231,
	2235, 5, 518, 260, 2, 2232, 2233, 7, 114, 2, 2, 2233, 2234, 7, 580, 2,
	2, 2234, 2236, 5, 64, 33, 2, 2235, 2232, 3, 2, 2, 2, 2235, 2236, 3, 2,
	2, 2, 2236, 2243, 3, 2, 2, 2, 2237, 2238, 7, 114, 2, 2, 2238, 2240, 7,
	361, 2, 2, 2239, 2241, 7, 110, 2, 2, 2240, 2239, 3, 2, 2, 2, 2240, 2241,
	3, 2, 2, 2, 2241, 2242, 3, 2, 2, 2, 2242, 2244, 7, 538, 2, 2, 2243, 2237,
	3, 2, 2, 2, 2243, 2244, 3, 2, 2, 2, 2244, 2248, 3, 2, 2, 2, 2245, 2246,
	7, 135, 2, 2, 2246, 2247, 7, 168, 2, 2, 2247, 2249, 5, 518, 260, 2, 2248,
	2245, 3, 2, 2, 2, 2248, 2249, 3, 2, 2, 2, 2249, 2251, 3, 2, 2, 2, 2250,
	2252, 5, 72, 37, 2, 2251, 2250, 3, 2, 2, 2, 2251, 2252, 3, 2, 2, 2, 2252,
	2255, 3, 2, 2, 2, 2253, 2254, 7, 358, 2, 2, 2254, 2256, 7, 1113, 2, 2,
	2255, 2253, 3, 2, 2, 2, 2255, 2256, 3, 2, 2, 2, 2256, 2259, 3, 2, 2, 2,
	2257, 2258, 7, 388, 2, 2, 2258, 2260, 5, 364, 183, 2, 2259, 2257, 3, 2,
	2, 2, 2259, 2260, 3, 2, 2, 2, 2260, 129, 3, 2, 2, 2, 2261, 2262, 7, 9,
	2, 2, 2262, 2263, 7, 423, 2, 2, 2263, 2267, 5, 518, 260, 2, 2264, 2266,
	5, 82, 42, 2, 2265, 2264, 3, 2, 2, 2, 2266, 2269, 3, 2, 2, 2, 2267, 2265,
	3, 2, 2, 2, 2267, 2268, 3, 2, 2, 2, 2268, 131, 3, 2, 2, 2, 2269, 2267,
	3, 2, 2, 2, 2270, 2271, 7, 9, 2, 2, 2271, 2272, 7, 441, 2, 2, 2272, 2273,
	7, 574, 2, 2, 2273, 2274, 7, 758, 2, 2, 2274, 2275, 7, 461, 2, 2, 2275,
	2276, 7, 90, 2, 2, 2276, 133, 3, 2, 2, 2, 2277, 2278, 7, 9, 2, 2, 2278,
	2279, 7, 459, 2, 2, 2279, 2280, 7, 72, 2, 2, 2280, 2281, 5, 544, 273, 2,
	2281, 2282, 7, 7, 2, 2, 2282, 2283, 7, 633, 2, 2, 2283, 2289, 7, 1113,
	2, 2, 2284, 2286, 7, 437, 2, 2, 2285, 2287, 7, 1089, 2, 2, 2286, 2285,
	3, 2, 2, 2, 2286, 2287, 3, 2, 2, 2, 2287, 2288, 3, 2, 2, 2, 2288, 2290,
	5, 552, 277, 2, 2289, 2284, 3, 2, 2, 2, 2289, 2290, 3, 2, 2, 2, 2290, 2292,
	3, 2, 2, 2, 2291, 2293, 7, 648, 2, 2, 2292, 2291, 3, 2, 2, 2, 2292, 2293,
	3, 2, 2, 2, 2293, 2294, 3, 2, 2, 2, 2294, 2296, 7, 396, 2, 2, 2295, 2297,
	7, 1089, 2, 2, 2296, 2295, 3, 2, 2, 2, 2296, 2297, 3, 2, 2, 2, 2297, 2298,
	3, 2, 2, 2, 2298, 2299, 5, 534, 268, 2, 2299, 135, 3, 2, 2, 2, 2300, 2301,
	7, 9, 2, 2, 2301, 2302, 7, 127, 2, 2, 2302, 2306, 5, 518, 260, 2, 2303,
	2305, 5, 82, 42, 2, 2304, 2303, 3, 2, 2, 2, 2305, 2308, 3, 2, 2, 2, 2306,
	2304, 3, 2, 2, 2, 2306, 2307, 3, 2, 2, 2, 2307, 137, 3, 2, 2, 2, 2308,
	2306, 3, 2, 2, 2, 2309, 2310, 7, 9, 2, 2, 2310, 2311, 7, 582, 2, 2, 2311,
	2312, 5, 544, 273, 2, 2312, 2313, 7, 521, 2, 2, 2313, 2314, 7, 1098, 2,
	2, 2314, 2319, 5, 84, 43, 2, 2315, 2316, 7, 1100, 2, 2, 2316, 2318, 5,
	84, 43, 2, 2317, 2315, 3, 2, 2, 2, 2318, 2321, 3, 2, 2, 2, 2319, 2317,
	3, 2, 2, 2, 2319, 2320, 3, 2, 2, 2, 2320, 2322, 3, 2, 2, 2, 2321, 2319,
	3, 2, 2, 2, 2322, 2323, 7, 1099, 2, 2, 2323, 139, 3, 2, 2, 2, 2324, 2326,
	7, 9, 2, 2, 2325, 2327, 9, 3, 2, 2, 2326, 2325, 3, 2, 2, 2, 2326, 2327,
	3, 2, 2, 2, 2327, 2329, 3, 2, 2, 2, 2328, 2330, 7, 77, 2, 2, 2329, 2328,
	3, 2, 2, 2, 2329, 2330, 3, 2, 2, 2, 2330, 2331, 3, 2, 2, 2, 2331, 2332,
	7, 165, 2, 2, 2332, 2341, 5, 520, 261, 2, 2333, 2338, 5, 146, 74, 2, 2334,
	2335, 7, 1100, 2, 2, 2335, 2337, 5, 146, 74, 2, 2336, 2334, 3, 2, 2, 2,
	2337, 2340, 3, 2, 2, 2, 2338, 2336, 3, 2, 2, 2, 2338, 2339, 3, 2, 2, 2,
	2339, 2342, 3, 2, 2, 2, 2340, 2338, 3, 2, 2, 2, 2341, 2333, 3, 2, 2, 2,
	2341, 2342, 3, 2, 2, 2, 2342, 2344, 3, 2, 2, 2, 2343, 2345, 5, 110, 56,
	2, 2344, 2343, 3, 2, 2, 2, 2344, 2345, 3, 2, 2, 2, 2345, 141, 3, 2, 2,
	2, 2346, 2347, 7, 9, 2, 2, 2347, 2348, 7, 621, 2, 2, 2348, 2349, 5, 544,
	273, 2, 2349, 2350, 9, 33, 2, 2, 2350, 2351, 7, 378, 2, 2, 2351, 2355,
	7, 1113, 2, 2, 2352, 2353, 7, 437, 2, 2, 2353, 2354, 7, 1089, 2, 2, 2354,
	2356, 5, 552, 277, 2, 2355, 2352, 3, 2, 2, 2, 2355, 2356, 3, 2, 2, 2, 2356,
	2358, 3, 2, 2, 2, 2357, 2359, 7, 648, 2, 2, 2358, 2357, 3, 2, 2, 2, 2358,
	2359, 3, 2, 2, 2, 2359, 2360, 3, 2, 2, 2, 2360, 2362, 7, 396, 2, 2, 2361,
	2363, 7, 1089, 2, 2, 2362, 2361, 3, 2, 2, 2, 2362, 2363, 3, 2, 2, 2, 2363,
	2364, 3, 2, 2, 2, 2364, 2365, 5, 534, 268, 2, 2365, 143, 3, 2, 2, 2, 2366,
	2370, 7, 9, 2, 2, 2367, 2368, 7, 326, 2, 2, 2368, 2369, 7, 1089, 2, 2,
	2369, 2371, 9, 12, 2, 2, 2370, 2367, 3, 2, 2, 2, 2370, 2371, 3, 2, 2, 2,
	2371, 2373, 3, 2, 2, 2, 2372, 2374, 5, 62, 32, 2, 2373, 2372, 3, 2, 2,
	2, 2373, 2374, 3, 2, 2, 2, 2374, 2378, 3, 2, 2, 2, 2375, 2376, 7, 154,
	2, 2, 2376, 2377, 7, 581, 2, 2, 2377, 2379, 9, 13, 2, 2, 2378, 2375, 3,
	2, 2, 2, 2378, 2379, 3, 2, 2, 2, 2379, 2380, 3, 2, 2, 2, 2380, 2381, 7,
	645, 2, 2, 2381, 2386, 5, 518, 260, 2, 2382, 2383, 7, 1098, 2, 2, 2383,
	2384, 5, 576, 289, 2, 2384, 2385, 7, 1099, 2, 2, 2385, 2387, 3, 2, 2, 2,
	2386, 2382, 3, 2, 2, 2, 2386, 2387, 3, 2, 2, 2, 2387, 2388, 3, 2, 2, 2,
	2388, 2389, 7, 14, 2, 2, 2389, 2396, 5, 192, 97, 2, 2390, 2392, 7, 185,
	2, 2, 2391, 2393, 9, 14, 2, 2, 2392, 2391, 3, 2, 2, 2, 2392, 2393, 3, 2,
	2, 2, 2393, 2394, 3, 2, 2, 2, 2394, 2395, 7, 27, 2, 2, 2395, 2397, 7, 116,
	2, 2, 2396, 2390, 3, 2, 2, 2, 2396, 2397, 3, 2, 2, 2, 2397, 145, 3, 2,
	2, 2, 2398, 2405, 5, 104, 53, 2, 2399, 2401, 7, 1100, 2, 2, 2400, 2399,
	3, 2, 2, 2, 2400, 2401, 3, 2, 2, 2, 2401, 2402, 3, 2, 2, 2, 2402, 2404,
	5, 104, 53, 2, 2403, 2400, 3, 2, 2, 2, 2404, 2407, 3, 2, 2, 2, 2405, 2403,
	3, 2, 2, 2, 2405, 2406, 3, 2, 2, 2, 2406, 2765, 3, 2, 2, 2, 2407, 2405,
	3, 2, 2, 2, 2408, 2410, 7, 7, 2, 2, 2409, 2411, 7, 29, 2, 2, 2410, 2409,
	3, 2, 2, 2, 2410, 2411, 3, 2, 2, 2, 2411, 2412, 3, 2, 2, 2, 2412, 2413,
	5, 544, 273, 2, 2413, 2417, 5, 90, 46, 2, 2414, 2418, 7, 416, 2, 2, 2415,
	2416, 7, 324, 2, 2, 2416, 2418, 5, 544, 273, 2, 2417, 2414, 3, 2, 2, 2,
	2417, 2415, 3, 2, 2, 2, 2417, 2418, 3, 2, 2, 2, 2418, 2765, 3, 2, 2, 2,
	2419, 2421, 7, 7, 2, 2, 2420, 2422, 7, 29, 2, 2, 2421, 2420, 3, 2, 2, 2,
	2421, 2422, 3, 2, 2, 2, 2422, 2423, 3, 2, 2, 2, 2423, 2424, 7, 1098, 2,
	2, 2424, 2425, 5, 544, 273, 2, 2425, 2432, 5, 90, 46, 2, 2426, 2427, 7,
	1100, 2, 2, 2427, 2428, 5, 544, 273, 2, 2428, 2429, 5, 90, 46, 2, 2429,
	2431, 3, 2, 2, 2, 2430, 2426, 3, 2, 2, 2, 2431, 2434, 3, 2, 2, 2, 2432,
	2430, 3, 2, 2, 2, 2432, 2433, 3, 2, 2, 2, 2433, 2435, 3, 2, 2, 2, 2434,
	2432, 3, 2, 2, 2, 2435, 2436, 7, 1099, 2, 2, 2436, 2765, 3, 2, 2, 2, 2437,
	2438, 7, 7, 2, 2, 2438, 2440, 9, 22, 2, 2, 2439, 2441, 5, 544, 273, 2,
	2440, 2439, 3, 2, 2, 2, 2440, 2441, 3, 2, 2, 2, 2441, 2443, 3, 2, 2, 2,
	2442, 2444, 5, 74, 38, 2, 2443, 2442, 3, 2, 2, 2, 2443, 2444, 3, 2, 2,
	2, 2444, 2445, 3, 2, 2, 2, 2445, 2449, 5, 580, 291, 2, 2446, 2448, 5, 76,
	39, 2, 2447, 2446, 3, 2, 2, 2, 2448, 2451, 3, 2, 2, 2, 2449, 2447, 3, 2,
	2, 2, 2449, 2450, 3, 2, 2, 2, 2450, 2765, 3, 2, 2, 2, 2451, 2449, 3, 2,
	2, 2, 2452, 2457, 7, 7, 2, 2, 2453, 2455, 7, 31, 2, 2, 2454, 2456, 5, 544,
	273, 2, 2455, 2454, 3, 2, 2, 2, 2455, 2456, 3, 2, 2, 2, 2456, 2458, 3,
	2, 2, 2, 2457, 2453, 3, 2, 2, 2, 2457, 2458, 3, 2, 2, 2, 2458, 2459, 3,
	2, 2, 2, 2459, 2460, 7, 126, 2, 2, 2460, 2462, 7, 90, 2, 2, 2461, 2463,
	5, 544, 273, 2, 2462, 2461, 3, 2, 2, 2, 2462, 2463, 3, 2, 2, 2, 2463, 2465,
	3, 2, 2, 2, 2464, 2466, 5, 74, 38, 2, 2465, 2464, 3, 2, 2, 2, 2465, 2466,
	3, 2, 2, 2, 2466, 2467, 3, 2, 2, 2, 2467, 2471, 5, 580, 291, 2, 2468, 2470,
	5, 76, 39, 2, 2469, 2468, 3, 2, 2, 2, 2470, 2473, 3, 2, 2, 2, 2471, 2469,
	3, 2, 2, 2, 2471, 2472, 3, 2, 2, 2, 2472, 2765, 3, 2, 2, 2, 2473, 2471,
	3, 2, 2, 2, 2474, 2479, 7, 7, 2, 2, 2475, 2477, 7, 31, 2, 2, 2476, 2478,
	5, 544, 273, 2, 2477, 2476, 3, 2, 2, 2, 2477, 2478, 3, 2, 2, 2, 2478, 2480,
	3, 2, 2, 2, 2479, 2475, 3, 2, 2, 2, 2479, 2480, 3, 2, 2, 2, 2480, 2481,
	3, 2, 2, 2, 2481, 2483, 7, 174, 2, 2, 2482, 2484, 9, 22, 2, 2, 2483, 2482,
	3, 2, 2, 2, 2483, 2484, 3, 2, 2, 2, 2484, 2486, 3, 2, 2, 2, 2485, 2487,
	5, 544, 273, 2, 2486, 2485, 3, 2, 2, 2, 2486, 2487, 3, 2, 2, 2, 2487, 2489,
	3, 2, 2, 2, 2488, 2490, 5, 74, 38, 2, 2489, 2488, 3, 2, 2, 2, 2489, 2490,
	3, 2, 2, 2, 2490, 2491, 3, 2, 2, 2, 2491, 2495, 5, 580, 291, 2, 2492, 2494,
	5, 76, 39, 2, 2493, 2492, 3, 2, 2, 2, 2494, 2497, 3, 2, 2, 2, 2495, 2493,
	3, 2, 2, 2, 2495, 2496, 3, 2, 2, 2, 2496, 2765, 3, 2, 2, 2, 2497, 2495,
	3, 2, 2, 2, 2498, 2499, 7, 7, 2, 2, 2499, 2501, 9, 24, 2, 2, 2500, 2502,
	9, 22, 2, 2, 2501, 2500, 3, 2, 2, 2, 2501, 2502, 3, 2, 2, 2, 2502, 2504,
	3, 2, 2, 2, 2503, 2505, 5, 544, 273, 2, 2504, 2503, 3, 2, 2, 2, 2504, 2505,
	3, 2, 2, 2, 2505, 2506, 3, 2, 2, 2, 2506, 2510, 5, 580, 291, 2, 2507, 2509,
	5, 76, 39, 2, 2508, 2507, 3, 2, 2, 2, 2509, 2512, 3, 2, 2, 2, 2510, 2508,
	3, 2, 2, 2, 2510, 2511, 3, 2, 2, 2, 2511, 2765, 3, 2, 2, 2, 2512, 2510,
	3, 2, 2, 2, 2513, 2518, 7, 7, 2, 2, 2514, 2516, 7, 31, 2, 2, 2515, 2517,
	5, 544, 273, 2, 2516, 2515, 3, 2, 2, 2, 2516, 2517, 3, 2, 2, 2, 2517, 2519,
	3, 2, 2, 2, 2518, 2514, 3, 2, 2, 2, 2518, 2519, 3, 2, 2, 2, 2519, 2520,
	3, 2, 2, 2, 2520, 2521, 7, 66, 2, 2, 2521, 2523, 7, 90, 2, 2, 2522, 2524,
	5, 544, 273, 2, 2523, 2522, 3, 2, 2, 2, 2523, 2524, 3, 2, 2, 2, 2524, 2525,
	3, 2, 2, 2, 2525, 2526, 5, 580, 291, 2, 2526, 2527, 5, 96, 49, 2, 2527,
	2765, 3, 2, 2, 2, 2528, 2533, 7, 7, 2, 2, 2529, 2531, 7, 31, 2, 2, 2530,
	2532, 5, 544, 273, 2, 2531, 2530, 3, 2, 2, 2, 2531, 2532, 3, 2, 2, 2, 2532,
	2534, 3, 2, 2, 2, 2533, 2529, 3, 2, 2, 2, 2533, 2534, 3, 2, 2, 2, 2534,
	2535, 3, 2, 2, 2, 2535, 2536, 7, 27, 2, 2, 2536, 2537, 7, 1098, 2, 2, 2537,
	2538, 5, 642, 322, 2, 2538, 2539, 7, 1099, 2, 2, 2539, 2765, 3, 2, 2, 2,
	2540, 2542, 7, 326, 2, 2, 2541, 2543, 7, 1089, 2, 2, 2542, 2541, 3, 2,
	2, 2, 2542, 2543, 3, 2, 2, 2, 2543, 2544, 3, 2, 2, 2, 2544, 2765, 9, 34,
	2, 2, 2545, 2547, 7, 9, 2, 2, 2546, 2548, 7, 29, 2, 2, 2547, 2546, 3, 2,
	2, 2, 2547, 2548, 3, 2, 2, 2, 2548, 2549, 3, 2, 2, 2, 2549, 2555, 5, 544,
	273, 2, 2550, 2551, 7, 149, 2, 2, 2551, 2552, 7, 42, 2, 2, 2552, 2556,
	5, 592, 297, 2, 2553, 2554, 7, 51, 2, 2, 2554, 2556, 7, 42, 2, 2, 2555,
	2550, 3, 2, 2, 2, 2555, 2553, 3, 2, 2, 2, 2556, 2765, 3, 2, 2, 2, 2557,
	2559, 7, 25, 2, 2, 2558, 2560, 7, 29, 2, 2, 2559, 2558, 3, 2, 2, 2, 2559,
	2560, 3, 2, 2, 2, 2560, 2561, 3, 2, 2, 2, 2561, 2562, 5, 544, 273, 2, 2562,
	2563, 5, 544, 273, 2, 2563, 2567, 5, 90, 46, 2, 2564, 2568, 7, 416, 2,
	2, 2565, 2566, 7, 324, 2, 2, 2566, 2568, 5, 544, 273, 2, 2567, 2564, 3,
	2, 2, 2, 2567, 2565, 3, 2, 2, 2, 2567, 2568, 3, 2, 2, 2, 2568, 2765, 3,
	2, 2, 2, 2569, 2570, 7, 135, 2, 2, 2570, 2571, 7, 29, 2, 2, 2571, 2572,
	5, 544, 273, 2, 2572, 2573, 7, 168, 2, 2, 2573, 2574, 5, 544, 273, 2, 2574,
	2765, 3, 2, 2, 2, 2575, 2577, 7, 101, 2, 2, 2576, 2578, 7, 1089, 2, 2,
	2577, 2576, 3, 2, 2, 2, 2577, 2578, 3, 2, 2, 2, 2578, 2579, 3, 2, 2, 2,
	2579, 2765, 9, 6, 2, 2, 2580, 2582, 7, 496, 2, 2, 2581, 2583, 7, 29, 2,
	2, 2582, 2581, 3, 2, 2, 2, 2582, 2583, 3, 2, 2, 2, 2583, 2584, 3, 2, 2,
	2, 2584, 2585, 5, 544, 273, 2, 2585, 2589, 5, 90, 46, 2, 2586, 2590, 7,
	416, 2, 2, 2587, 2588, 7, 324, 2, 2, 2588, 2590, 5, 544, 273, 2, 2589,
	2586, 3, 2, 2, 2, 2589, 2587, 3, 2, 2, 2, 2589, 2590, 3, 2, 2, 2, 2590,
	2765, 3, 2, 2, 2, 2591, 2593, 7, 51, 2, 2, 2592, 2594, 7, 29, 2, 2, 2593,
	2592, 3, 2, 2, 2, 2593, 2594, 3, 2, 2, 2, 2594, 2595, 3, 2, 2, 2, 2595,
	2597, 5, 544, 273, 2, 2596, 2598, 7, 140, 2, 2, 2597, 2596, 3, 2, 2, 2,
	2597, 2598, 3, 2, 2, 2, 2598, 2765, 3, 2, 2, 2, 2599, 2600, 7, 51, 2, 2,
	2600, 2601, 9, 35, 2, 2, 2601, 2765, 5, 544, 273, 2, 2602, 2603, 7, 51,
	2, 2, 2603, 2604, 7, 126, 2, 2, 2604, 2765, 7, 90, 2, 2, 2605, 2606, 7,
	135, 2, 2, 2606, 2607, 9, 22, 2, 2, 2607, 2608, 5, 544, 273, 2, 2608, 2609,
	7, 168, 2, 2, 2609, 2610, 5, 544, 273, 2, 2610, 2765, 3, 2, 2, 2, 2611,
	2612, 7, 9, 2, 2, 2612, 2613, 7, 80, 2, 2, 2613, 2614, 5, 544, 273, 2,
	2614, 2615, 9, 16, 2, 2, 2615, 2765, 3, 2, 2, 2, 2616, 2617, 7, 51, 2,
	2, 2617, 2618, 9, 22, 2, 2, 2618, 2765, 5, 544, 273, 2, 2619, 2620, 7,
	51, 2, 2, 2620, 2621, 7, 66, 2, 2, 2621, 2622, 7, 90, 2, 2, 2622, 2765,
	5, 544, 273, 2, 2623, 2624, 7, 385, 2, 2, 2624, 2765, 7, 91, 2, 2, 2625,
	2626, 7, 392, 2, 2, 2626, 2765, 7, 91, 2, 2, 2627, 2629, 7, 135, 2, 2,
	2628, 2630, 9, 36, 2, 2, 2629, 2628, 3, 2, 2, 2, 2629, 2630, 3, 2, 2, 2,
	2630, 2633, 3, 2, 2, 2, 2631, 2634, 5, 544, 273, 2, 2632, 2634, 5, 518,
	260, 2, 2633, 2631, 3, 2, 2, 2, 2633, 2632, 3, 2, 2, 2, 2634, 2765, 3,
	2, 2, 2, 2635, 2636, 7, 120, 2, 2, 2636, 2637, 7, 20, 2, 2, 2637, 2765,
	5, 576, 289, 2, 2638, 2639, 7, 33, 2, 2, 2639, 2640, 7, 168, 2, 2, 2640,
	2641, 7, 26, 2, 2, 2641, 2642, 7, 149, 2, 2, 2642, 2645, 5, 530, 266, 2,
	2643, 2644, 7, 28, 2, 2, 2644, 2646, 5, 532, 267, 2, 2645, 2643, 3, 2,
	2, 2, 2645, 2646, 3, 2, 2, 2, 2646, 2765, 3, 2, 2, 2, 2647, 2649, 7, 42,
	2, 2, 2648, 2647, 3, 2, 2, 2, 2648, 2649, 3, 2, 2, 2, 2649, 2650, 3, 2,
	2, 2, 2650, 2651, 7, 26, 2, 2, 2651, 2652, 7, 149, 2, 2, 2652, 2653, 7,
	1089, 2, 2, 2653, 2657, 5, 530, 266, 2, 2654, 2655, 7, 28, 2, 2, 2655,
	2656, 7, 1089, 2, 2, 2656, 2658, 5, 532, 267, 2, 2657, 2654, 3, 2, 2, 2,
	2657, 2658, 3, 2, 2, 2, 2658, 2765, 3, 2, 2, 2, 2659, 2660, 7, 386, 2,
	2, 2660, 2765, 7, 621, 2, 2, 2661, 2662, 7, 435, 2, 2, 2662, 2765, 7, 621,
	2, 2, 2663, 2765, 7, 65, 2, 2, 2664, 2665, 9, 37, 2, 2, 2665, 2765, 7,
	642, 2, 2, 2666, 2667, 7, 7, 2, 2, 2667, 2668, 7, 125, 2, 2, 2668, 2669,
	7, 1098, 2, 2, 2669, 2674, 5, 116, 59, 2, 2670, 2671, 7, 1100, 2, 2, 2671,
	2673, 5, 116, 59, 2, 2672, 2670, 3, 2, 2, 2, 2673, 2676, 3, 2, 2, 2, 2674,
	2672, 3, 2, 2, 2, 2674, 2675, 3, 2, 2, 2, 2675, 2677, 3, 2, 2, 2, 2676,
	2674, 3, 2, 2, 2, 2677, 2678, 7, 1099, 2, 2, 2678, 2765, 3, 2, 2, 2, 2679,
	2680, 7, 51, 2, 2, 2680, 2681, 7, 125, 2, 2, 2681, 2765, 5, 576, 289, 2,
	2682, 2683, 7, 386, 2, 2, 2683, 2686, 7, 125, 2, 2, 2684, 2687, 5, 576,
	289, 2, 2685, 2687, 7, 8, 2, 2, 2686, 2684, 3, 2, 2, 2, 2686, 2685, 3,
	2, 2, 2, 2687, 2688, 3, 2, 2, 2, 2688, 2765, 7, 621, 2, 2, 2689, 2690,
	7, 435, 2, 2, 2690, 2693, 7, 125, 2, 2, 2691, 2694, 5, 576, 289, 2, 2692,
	2694, 7, 8, 2, 2, 2693, 2691, 3, 2, 2, 2, 2693, 2692, 3, 2, 2, 2, 2694,
	2695, 3, 2, 2, 2, 2695, 2765, 7, 621, 2, 2, 2696, 2697, 7, 630, 2, 2, 2697,
	2700, 7, 125, 2, 2, 2698, 2701, 5, 576, 289, 2, 2699, 2701, 7, 8, 2, 2,
	2700, 2698, 3, 2, 2, 2, 2700, 2699, 3, 2, 2, 2, 2701, 2765, 3, 2, 2, 2,
	2702, 2703, 7, 353, 2, 2, 2703, 2704, 7, 125, 2, 2, 2704, 2765, 5, 550,
	276, 2, 2705, 2706, 7, 556, 2, 2, 2706, 2707, 7, 125, 2, 2, 2707, 2708,
	5, 576, 289, 2, 2708, 2709, 7, 86, 2, 2, 2709, 2710, 7, 1098, 2, 2, 2710,
	2715, 5, 116, 59, 2, 2711, 2712, 7, 1100, 2, 2, 2712, 2714, 5, 116, 59,
	2, 2713, 2711, 3, 2, 2, 2, 2714, 2717, 3, 2, 2, 2, 2715, 2713, 3, 2, 2,
	2, 2715, 2716, 3, 2, 2, 2, 2716, 2718, 3, 2, 2, 2, 2717, 2715, 3, 2, 2,
	2, 2718, 2719, 7, 1099, 2, 2, 2719, 2765, 3, 2, 2, 2, 2720, 2721, 7, 405,
	2, 2, 2721, 2722, 7, 125, 2, 2, 2722, 2723, 5, 544, 273, 2, 2723, 2724,
	7, 185, 2, 2, 2724, 2725, 7, 165, 2, 2, 2725, 2728, 5, 520, 261, 2, 2726,
	2727, 9, 37, 2, 2, 2727, 2729, 7, 642, 2, 2, 2728, 2726, 3, 2, 2, 2, 2728,
	2729, 3, 2, 2, 2, 2729, 2765, 3, 2, 2, 2, 2730, 2731, 7, 11, 2, 2, 2731,
	2734, 7, 125, 2, 2, 2732, 2735, 5, 576, 289, 2, 2733, 2735, 7, 8, 2, 2,
	2734, 2732, 3, 2, 2, 2, 2734, 2733, 3, 2, 2, 2, 2735, 2765, 3, 2, 2, 2,
	2736, 2737, 7, 27, 2, 2, 2737, 2740, 7, 125, 2, 2, 2738, 2741, 5, 576,
	289, 2, 2739, 2741, 7, 8, 2, 2, 2740, 2738, 3, 2, 2, 2, 2740, 2739, 3,
	2, 2, 2, 2741, 2765, 3, 2, 2, 2, 2742, 2743, 7, 115, 2, 2, 2743, 2746,
	7, 125, 2, 2, 2744, 2747, 5, 576, 289, 2, 2745, 2747, 7, 8, 2, 2, 2746,
	2744, 3, 2, 2, 2, 2746, 2745, 3, 2, 2, 2, 2747, 2765, 3, 2, 2, 2, 2748,
	2749, 7, 546, 2, 2, 2749, 2752, 7, 125, 2, 2, 2750, 2753, 5, 576, 289,
	2, 2751, 2753, 7, 8, 2, 2, 2752, 2750, 3, 2, 2, 2, 2752, 2751, 3, 2, 2,
	2, 2753, 2765, 3, 2, 2, 2, 2754, 2755, 7, 557, 2, 2, 2755, 2758, 7, 125,
	2, 2, 2756, 2759, 5, 576, 289, 2, 2757, 2759, 7, 8, 2, 2, 2758, 2756, 3,
	2, 2, 2, 2758, 2757, 3, 2, 2, 2, 2759, 2765, 3, 2, 2, 2, 2760, 2761, 7,
	555, 2, 2, 2761, 2765, 7, 527, 2, 2, 2762, 2763, 7, 638, 2, 2, 2763, 2765,
	7, 527, 2, 2, 2764, 2398, 3, 2, 2, 2, 2764, 2408, 3, 2, 2, 2, 2764, 2419,
	3, 2, 2, 2, 2764, 2437, 3, 2, 2, 2, 2764, 2452, 3, 2, 2, 2, 2764, 2474,
	3, 2, 2, 2, 2764, 2498, 3, 2, 2, 2, 2764, 2513, 3, 2, 2, 2, 2764, 2528,
	3, 2, 2, 2, 2764, 2540, 3, 2, 2, 2, 2764, 2545, 3, 2, 2, 2, 2764, 2557,
	3, 2, 2, 2, 2764, 2569, 3, 2, 2, 2, 2764, 2575, 3, 2, 2, 2, 2764, 2580,
	3, 2, 2, 2, 2764, 2591, 3, 2, 2, 2, 2764, 2599, 3, 2, 2, 2, 2764, 2602,
	3, 2, 2, 2, 2764, 2605, 3, 2, 2, 2, 2764, 2611, 3, 2, 2, 2, 2764, 2616,
	3, 2, 2, 2, 2764, 2619, 3, 2, 2, 2, 2764, 2623, 3, 2, 2, 2, 2764, 2625,
	3, 2, 2, 2, 2764, 2627, 3, 2, 2, 2, 2764, 2635, 3, 2, 2, 2, 2764, 2638,
	3, 2, 2, 2, 2764, 2648, 3, 2, 2, 2, 2764, 2659, 3, 2, 2, 2, 2764, 2661,
	3, 2, 2, 2, 2764, 2663, 3, 2, 2, 2, 2764, 2664, 3, 2, 2, 2, 2764, 2666,
	3, 2, 2, 2, 2764, 2679, 3, 2, 2, 2, 2764, 2682, 3, 2, 2, 2, 2764, 2689,
	3, 2, 2, 2, 2764, 2696, 3, 2, 2, 2, 2764, 2702, 3, 2, 2, 2, 2764, 2705,
	3, 2, 2, 2, 2764, 2720, 3, 2, 2, 2, 2764, 2730, 3, 2, 2, 2, 2764, 2736,
	3, 2, 2, 2, 2764, 2742, 3, 2, 2, 2, 2764, 2748, 3, 2, 2, 2, 2764, 2754,
	3, 2, 2, 2, 2764, 2760, 3, 2, 2, 2, 2764, 2762, 3, 2, 2, 2, 2765, 147,
	3, 2, 2, 2, 2766, 2767, 7, 51, 2, 2, 2767, 2769, 9, 2, 2, 2, 2768, 2770,
	5, 598, 300, 2, 2769, 2768, 3, 2, 2, 2, 2769, 2770, 3, 2, 2, 2, 2770, 2771,
	3, 2, 2, 2, 2771, 2772, 5, 544, 273, 2, 2772, 149, 3, 2, 2, 2, 2773, 2774,
	7, 51, 2, 2, 2774, 2776, 7, 402, 2, 2, 2775, 2777, 5, 598, 300, 2, 2776,
	2775, 3, 2, 2, 2, 2776, 2777, 3, 2, 2, 2, 2777, 2778, 3, 2, 2, 2, 2778,
	2779, 5, 518, 260, 2, 2779, 151, 3, 2, 2, 2, 2780, 2781, 7, 51, 2, 2, 2781,
	2783, 7, 80, 2, 2, 2782, 2784, 9, 3, 2, 2, 2783, 2782, 3, 2, 2, 2, 2783,
	2784, 3, 2, 2, 2, 2784, 2785, 3, 2, 2, 2, 2785, 2786, 5, 544, 273, 2, 2786,
	2787, 7, 114, 2, 2, 2787, 2800, 5, 520, 261, 2, 2788, 2790, 7, 326, 2,
	2, 2789, 2791, 7, 1089, 2, 2, 2790, 2789, 3, 2, 2, 2, 2790, 2791, 3, 2,
	2, 2, 2791, 2792, 3, 2, 2, 2, 2792, 2799, 9, 38, 2, 2, 2793, 2795, 7, 101,
	2, 2, 2794, 2796, 7, 1089, 2, 2, 2795, 2794, 3, 2, 2, 2, 2795, 2796, 3,
	2, 2, 2, 2796, 2797, 3, 2, 2, 2, 2797, 2799, 9, 6, 2, 2, 2798, 2788, 3,
	2, 2, 2, 2798, 2793, 3, 2, 2, 2, 2799, 2802, 3, 2, 2, 2, 2800, 2798, 3,
	2, 2, 2, 2800, 2801, 3, 2, 2, 2, 2801, 153, 3, 2, 2, 2, 2802, 2800, 3,
	2, 2, 2, 2803, 2804, 7, 51, 2, 2, 2804, 2805, 7, 459, 2, 2, 2805, 2806,
	7, 72, 2, 2, 2806, 2807, 5, 544, 273, 2, 2807, 2808, 7, 396, 2, 2, 2808,
	2809, 7, 1089, 2, 2, 2809, 2810, 5, 534, 268, 2, 2810, 155, 3, 2, 2, 2,
	2811, 2812, 7, 51, 2, 2, 2812, 2814, 7, 127, 2, 2, 2813, 2815, 5, 598,
	300, 2, 2814, 2813, 3, 2, 2, 2, 2814, 2815, 3, 2, 2, 2, 2815, 2816, 3,
	2, 2, 2, 2816, 2817, 5, 518, 260, 2, 2817, 157, 3, 2, 2, 2, 2818, 2819,
	7, 51, 2, 2, 2819, 2821, 7, 423, 2, 2, 2820, 2822, 5, 598, 300, 2, 2821,
	2820, 3, 2, 2, 2, 2821, 2822, 3, 2, 2, 2, 2822, 2823, 3, 2, 2, 2, 2823,
	2824, 5, 518, 260, 2, 2824, 159, 3, 2, 2, 2, 2825, 2826, 7, 51, 2, 2, 2826,
	2828, 7, 582, 2, 2, 2827, 2829, 5, 598, 300, 2, 2828, 2827, 3, 2, 2, 2,
	2828, 2829, 3, 2, 2, 2, 2829, 2830, 3, 2, 2, 2, 2830, 2831, 5, 544, 273,
	2, 2831, 161, 3, 2, 2, 2, 2832, 2834, 7, 51, 2, 2, 2833, 2835, 7, 623,
	2, 2, 2834, 2833, 3, 2, 2, 2, 2834, 2835, 3, 2, 2, 2, 2835, 2836, 3, 2,
	2, 2, 2836, 2838, 7, 165, 2, 2, 2837, 2839, 5, 598, 300, 2, 2838, 2837,
	3, 2, 2, 2, 2838, 2839, 3, 2, 2, 2, 2839, 2840, 3, 2, 2, 2, 2840, 2842,
	5, 578, 290, 2, 2841, 2843, 9, 39, 2, 2, 2842, 2841, 3, 2, 2, 2, 2842,
	2843, 3, 2, 2, 2, 2843, 163, 3, 2, 2, 2, 2844, 2845, 7, 51, 2, 2, 2845,
	2846, 7, 621, 2, 2, 2846, 2852, 5, 544, 273, 2, 2847, 2849, 7, 396, 2,
	2, 2848, 2850, 7, 1089, 2, 2, 2849, 2848, 3, 2, 2, 2, 2849, 2850, 3, 2,
	2, 2, 2850, 2851, 3, 2, 2, 2, 2851, 2853, 5, 534, 268, 2, 2852, 2847, 3,
	2, 2, 2, 2852, 2853, 3, 2, 2, 2, 2853, 165, 3, 2, 2, 2, 2854, 2855, 7,
	51, 2, 2, 2855, 2857, 7, 170, 2, 2, 2856, 2858, 5, 598, 300, 2, 2857, 2856,
	3, 2, 2, 2, 2857, 2858, 3, 2, 2, 2, 2858, 2859, 3, 2, 2, 2, 2859, 2860,
	5, 518, 260, 2, 2860, 167, 3, 2, 2, 2, 2861, 2862, 7, 51, 2, 2, 2862, 2864,
	7, 645, 2, 2, 2863, 2865, 5, 598, 300, 2, 2864, 2863, 3, 2, 2, 2, 2864,
	2865, 3, 2, 2, 2, 2865, 2866, 3, 2, 2, 2, 2866, 2871, 5, 518, 260, 2, 2867,
	2868, 7, 1100, 2, 2, 2868, 2870, 5, 518, 260, 2, 2869, 2867, 3, 2, 2, 2,
	2870, 2873, 3, 2, 2, 2, 2871, 2869, 3, 2, 2, 2, 2871, 2872, 3, 2, 2, 2,
	2872, 2875, 3, 2, 2, 2, 2873, 2871, 3, 2, 2, 2, 2874, 2876, 9, 39, 2, 2,
	2875, 2874, 3, 2, 2, 2, 2875, 2876, 3, 2, 2, 2, 2876, 169, 3, 2, 2, 2,
	2877, 2878, 7, 135, 2, 2, 2878, 2879, 7, 165, 2, 2, 2879, 2884, 5, 172,
	87, 2, 2880, 2881, 7, 1100, 2, 2, 2881, 2883, 5, 172, 87, 2, 2882, 2880,
	3, 2, 2, 2, 2883, 2886, 3, 2, 2, 2, 2884, 2882, 3, 2, 2, 2, 2884, 2885,
	3, 2, 2, 2, 2885, 171, 3, 2, 2, 2, 2886, 2884, 3, 2, 2, 2, 2887, 2888,
	5, 520, 261, 2, 2888, 2889, 7, 168, 2, 2, 2889, 2890, 5, 520, 261, 2, 2890,
	173, 3, 2, 2, 2, 2891, 2893, 7, 630, 2, 2, 2892, 2894, 7, 165, 2, 2, 2893,
	2892, 3, 2, 2, 2, 2893, 2894, 3, 2, 2, 2, 2894, 2895, 3, 2, 2, 2, 2895,
	2896, 5, 520, 261, 2, 2896, 175, 3, 2, 2, 2, 2897, 2898, 7, 21, 2, 2, 2898,
	2905, 5, 518, 260, 2, 2899, 2902, 7, 1098, 2, 2, 2900, 2903, 5, 586, 294,
	2, 2901, 2903, 5, 582, 292, 2, 2902, 2900, 3, 2, 2, 2, 2902, 2901, 3, 2,
	2, 2, 2902, 2903, 3, 2, 2, 2, 2903, 2904, 3, 2, 2, 2, 2904, 2906, 7, 1099,
	2, 2, 2905, 2899, 3, 2, 2, 2, 2905, 2906, 3, 2, 2, 2, 2906, 177, 3, 2,
	2, 2, 2907, 2910, 5, 204, 103, 2, 2908, 2910, 5, 206, 104, 2, 2909, 2907,
	3, 2, 2, 2, 2909, 2908, 3, 2, 2, 2, 2910, 179, 3, 2, 2, 2, 2911, 2912,
	7, 388, 2, 2, 2912, 2913, 5, 582, 292, 2, 2913, 181, 3, 2, 2, 2, 2914,
	2919, 5, 208, 105, 2, 2915, 2919, 5, 210, 106, 2, 2916, 2919, 5, 212, 107,
	2, 2917, 2919, 5, 214, 108, 2, 2918, 2914, 3, 2, 2, 2, 2918, 2915, 3, 2,
	2, 2, 2918, 2916, 3, 2, 2, 2, 2918, 2917, 3, 2, 2, 2, 2919, 183, 3, 2,
	2, 2, 2920, 2922, 7, 84, 2, 2, 2921, 2923, 9, 40, 2, 2, 2922, 2921, 3,
	2, 2, 2, 2922, 2923, 3, 2, 2, 2, 2923, 2925, 3, 2, 2, 2, 2924, 2926, 7,
	77, 2, 2, 2925, 2924, 3, 2, 2, 2, 2925, 2926, 3, 2, 2, 2, 2926, 2928, 3,
	2, 2, 2, 2927, 2929, 7, 86, 2, 2, 2928, 2927, 3, 2, 2, 2, 2928, 2929, 3,
	2, 2, 2, 2929, 2930, 3, 2, 2, 2, 2930, 2937, 5, 520, 261, 2, 2931, 2932,
	7, 125, 2, 2, 2932, 2934, 7, 1098, 2, 2, 2933, 2935, 5, 576, 289, 2, 2934,
	2933, 3, 2, 2, 2, 2934, 2935, 3, 2, 2, 2, 2935, 2936, 3, 2, 2, 2, 2936,
	2938, 7, 1099, 2, 2, 2937, 2931, 3, 2, 2, 2, 2937, 2938, 3, 2, 2, 2, 2938,
	2955, 3, 2, 2, 2, 2939, 2940, 7, 1098, 2, 2, 2940, 2941, 5, 576, 289, 2,
	2941, 2942, 7, 1099, 2, 2, 2942, 2944, 3, 2, 2, 2, 2943, 2939, 3, 2, 2,
	2, 2943, 2944, 3, 2, 2, 2, 2944, 2945, 3, 2, 2, 2, 2945, 2956, 5, 196,
	99, 2, 2946, 2947, 7, 149, 2, 2, 2947, 2952, 5, 198, 100, 2, 2948, 2949,
	7, 1100, 2, 2, 2949, 2951, 5, 198, 100, 2, 2950, 2948, 3, 2, 2, 2, 2951,
	2954, 3, 2, 2, 2, 2952, 2950, 3, 2, 2, 2, 2952, 2953, 3, 2, 2, 2, 2953,
	2956, 3, 2, 2, 2, 2954, 2952, 3, 2, 2, 2, 2955, 2943, 3, 2, 2, 2, 2955,
	2946, 3, 2, 2, 2, 2956, 2969, 3, 2, 2, 2, 2957, 2958, 7, 114, 2, 2, 2958,
	2959, 7, 390, 2, 2, 2959, 2960, 7, 90, 2, 2, 2960, 2961, 7, 177, 2, 2,
	2961, 2966, 5, 198, 100, 2, 2962, 2963, 7, 1100, 2, 2, 2963, 2965, 5, 198,
	100, 2, 2964, 2962, 3, 2, 2, 2, 2965, 2968, 3, 2, 2, 2, 2966, 2964, 3,
	2, 2, 2, 2966, 2967, 3, 2, 2, 2, 2967, 2970, 3, 2, 2, 2, 2968, 2966, 3,
	2, 2, 2, 2969, 2957, 3, 2, 2, 2, 2969, 2970, 3, 2, 2, 2, 2970, 185, 3,
	2, 2, 2, 2971, 2972, 7, 100, 2, 2, 2972, 2974, 7, 377, 2, 2, 2973, 2975,
	9, 41, 2, 2, 2974, 2973, 3, 2, 2, 2, 2974, 2975, 3, 2, 2, 2, 2975, 2977,
	3, 2, 2, 2, 2976, 2978, 7, 458, 2, 2, 2977, 2976, 3, 2, 2, 2, 2977, 2978,
	3, 2, 2, 2, 2978, 2979, 3, 2, 2, 2, 2979, 2980, 7, 81, 2, 2, 2980, 2982,
	7, 1113, 2, 2, 2981, 2983, 9, 8, 2, 2, 2982, 2981, 3, 2, 2, 2, 2982, 2983,
	3, 2, 2, 2, 2983, 2984, 3, 2, 2, 2, 2984, 2985, 7, 86, 2, 2, 2985, 2986,
	7, 165, 2, 2, 2986, 2992, 5, 520, 261, 2, 2987, 2988, 7, 125, 2, 2, 2988,
	2989, 7, 1098, 2, 2, 2989, 2990, 5, 576, 289, 2, 2990, 2991, 7, 1099, 2,
	2, 2991, 2993, 3, 2, 2, 2, 2992, 2987, 3, 2, 2, 2, 2992, 2993, 3, 2, 2,
	2, 2993, 2997, 3, 2, 2, 2, 2994, 2995, 7, 26, 2, 2, 2995, 2996, 7, 149,
	2, 2, 2996, 2998, 5, 530, 266, 2, 2997, 2994, 3, 2, 2, 2, 2997, 2998, 3,
	2, 2, 2, 2998, 3005, 3, 2, 2, 2, 2999, 3001, 9, 42, 2, 2, 3000, 3002, 5,
	256, 129, 2, 3001, 3000, 3, 2, 2, 2, 3002, 3003, 3, 2, 2, 2, 3003, 3001,
	3, 2, 2, 2, 3003, 3004, 3, 2, 2, 2, 3004, 3006, 3, 2, 2, 2, 3005, 2999,
	3, 2, 2, 2, 3005, 3006, 3, 2, 2, 2, 3006, 3013, 3, 2, 2, 2, 3007, 3009,
	7, 99, 2, 2, 3008, 3010, 5, 258, 130, 2, 3009, 3008, 3, 2, 2, 2, 3010,
	3011, 3, 2, 2, 2, 3011, 3009, 3, 2, 2, 2, 3011, 3012, 3, 2, 2, 2, 3012,
	3014, 3, 2, 2, 2, 3013, 3007, 3, 2, 2, 2, 3013, 3014, 3, 2, 2, 2, 3014,
	3019, 3, 2, 2, 2, 3015, 3016, 7, 77, 2, 2, 3016, 3017, 5, 550, 276, 2,
	3017, 3018, 9, 43, 2, 2, 3018, 3020, 3, 2, 2, 2, 3019, 3015, 3, 2, 2, 2,
	3019, 3020, 3, 2, 2, 2, 3020, 3032, 3, 2, 2, 2, 3021, 3022, 7, 1098, 2,
	2, 3022, 3027, 5, 200, 101, 2, 3023, 3024, 7, 1100, 2, 2, 3024, 3026, 5,
	200, 101, 2, 3025, 3023, 3, 2, 2, 2, 3026, 3029, 3, 2, 2, 2, 3027, 3025,
	3, 2, 2, 2, 3027, 3028, 3, 2, 2, 2, 3028, 3030, 3, 2, 2, 2, 3029, 3027,
	3, 2, 2, 2, 3030, 3031, 7, 1099, 2, 2, 3031, 3033, 3, 2, 2, 2, 3032, 3021,
	3, 2, 2, 2, 3032, 3033, 3, 2, 2, 2, 3033, 3043, 3, 2, 2, 2, 3034, 3035,
	7, 149, 2, 2, 3035, 3040, 5, 198, 100, 2, 3036, 3037, 7, 1100, 2, 2, 3037,
	3039, 5, 198, 100, 2, 3038, 3036, 3, 2, 2, 2, 3039, 3042, 3, 2, 2, 2, 3040,
	3038, 3, 2, 2, 2, 3040, 3041, 3, 2, 2, 2, 3041, 3044, 3, 2, 2, 2, 3042,
	3040, 3, 2, 2, 2, 3043, 3034, 3, 2, 2, 2, 3043, 3044, 3, 2, 2, 2, 3044,
	187, 3, 2, 2, 2, 3045, 3046, 7, 100, 2, 2, 3046, 3048, 7, 656, 2, 2, 3047,
	3049, 9, 41, 2, 2, 3048, 3047, 3, 2, 2, 2, 3048, 3049, 3, 2, 2, 2, 3049,
	3051, 3, 2, 2, 2, 3050, 3052, 7, 458, 2, 2, 3051, 3050, 3, 2, 2, 2, 3051,
	3052, 3, 2, 2, 2, 3052, 3053, 3, 2, 2, 2, 3053, 3054, 7, 81, 2, 2, 3054,
	3056, 7, 1113, 2, 2, 3055, 3057, 9, 8, 2, 2, 3056, 3055, 3, 2, 2, 2, 3056,
	3057, 3, 2, 2, 2, 3057, 3058, 3, 2, 2, 2, 3058, 3059, 7, 86, 2, 2, 3059,
	3060, 7, 165, 2, 2, 3060, 3064, 5, 520, 261, 2, 3061, 3062, 7, 26, 2, 2,
	3062, 3063, 7, 149, 2, 2, 3063, 3065, 5, 530, 266, 2, 3064, 3061, 3, 2,
	2, 2, 3064, 3065, 3, 2, 2, 2, 3065, 3072, 3, 2, 2, 2, 3066, 3067, 7, 576,
	2, 2, 3067, 3068, 7, 433, 2, 2, 3068, 3069, 7, 20, 2, 2, 3069, 3070, 7,
	1091, 2, 2, 3070, 3071, 7, 1113, 2, 2, 3071, 3073, 7, 1090, 2, 2, 3072,
	3066, 3, 2, 2, 2, 3072, 3073, 3, 2, 2, 2, 3073, 3078, 3, 2, 2, 2, 3074,
	3075, 7, 77, 2, 2, 3075, 3076, 5, 550, 276, 2, 3076, 3077, 9, 43, 2, 2,
	3077, 3079, 3, 2, 2, 2, 3078, 3074, 3, 2, 2, 2, 3078, 3079, 3, 2, 2, 2,
	3079, 3091, 3, 2, 2, 2, 3080, 3081, 7, 1098, 2, 2, 3081, 3086, 5, 200,
	101, 2, 3082, 3083, 7, 1100, 2, 2, 3083, 3085, 5, 200, 101, 2, 3084, 3082,
	3, 2, 2, 2, 3085, 3088, 3, 2, 2, 2, 3086, 3084, 3, 2, 2, 2, 3086, 3087,
	3, 2, 2, 2, 3087, 3089, 3, 2, 2, 2, 3088, 3086, 3, 2, 2, 2, 3089, 3090,
	7, 1099, 2, 2, 3090, 3092, 3, 2, 2, 2, 3091, 3080, 3, 2, 2, 2, 3091, 3092,
	3, 2, 2, 2, 3092, 3102, 3, 2, 2, 2, 3093, 3094, 7, 149, 2, 2, 3094, 3099,
	5, 198, 100, 2, 3095, 3096, 7, 1100, 2, 2, 3096, 3098, 5, 198, 100, 2,
	3097, 3095, 3, 2, 2, 2, 3098, 3101, 3, 2, 2, 2, 3099, 3097, 3, 2, 2, 2,
	3099, 3100, 3, 2, 2, 2, 3100, 3103, 3, 2, 2, 2, 3101, 3099, 3, 2, 2, 2,
	3102, 3093, 3, 2, 2, 2, 3102, 3103, 3, 2, 2, 2, 3103, 189, 3, 2, 2, 2,
	3104, 3106, 7, 137, 2, 2, 3105, 3107, 9, 44, 2, 2, 3106, 3105, 3, 2, 2,
	2, 3106, 3107, 3, 2, 2, 2, 3107, 3109, 3, 2, 2, 2, 3108, 3110, 7, 86, 2,
	2, 3109, 3108, 3, 2, 2, 2, 3109, 3110, 3, 2, 2, 2, 3110, 3111, 3, 2, 2,
	2, 3111, 3117, 5, 520, 261, 2, 3112, 3113, 7, 125, 2, 2, 3113, 3114, 7,
	1098, 2, 2, 3114, 3115, 5, 576, 289, 2, 3115, 3116, 7, 1099, 2, 2, 3116,
	3118, 3, 2, 2, 2, 3117, 3112, 3, 2, 2, 2, 3117, 3118, 3, 2, 2, 2, 3118,
	3135, 3, 2, 2, 2, 3119, 3120, 7, 1098, 2, 2, 3120, 3121, 5, 576, 289, 2,
	3121, 3122, 7, 1099, 2, 2, 3122, 3124, 3, 2, 2, 2, 3123, 3119, 3, 2, 2,
	2, 3123, 3124, 3, 2, 2, 2, 3124, 3125, 3, 2, 2, 2, 3125, 3136, 5, 196,
	99, 2, 3126, 3127, 7, 149, 2, 2, 3127, 3132, 5, 198, 100, 2, 3128, 3129,
	7, 1100, 2, 2, 3129, 3131, 5, 198, 100, 2, 3130, 3128, 3, 2, 2, 2, 3131,
	3134, 3, 2, 2, 2, 3132, 3130, 3, 2, 2, 2, 3132, 3133, 3, 2, 2, 2, 3133,
	3136, 3, 2, 2, 2, 3134, 3132, 3, 2, 2, 2, 3135, 3123, 3, 2, 2, 2, 3135,
	3126, 3, 2, 2, 2, 3136, 191, 3, 2, 2, 2, 3137, 3139, 5, 240, 121, 2, 3138,
	3140, 5, 202, 102, 2, 3139, 3138, 3, 2, 2, 2, 3139, 3140, 3, 2, 2, 2, 3140,
	3193, 3, 2, 2, 2, 3141, 3143, 5, 236, 119, 2, 3142, 3144, 5, 202, 102,
	2, 3143, 3142, 3, 2, 2, 2, 3143, 3144, 3, 2, 2, 2, 3144, 3193, 3, 2, 2,
	2, 3145, 3147, 5, 242, 122, 2, 3146, 3148, 5, 246, 124, 2, 3147, 3146,
	3, 2, 2, 2, 3148, 3149, 3, 2, 2, 2, 3149, 3147, 3, 2, 2, 2, 3149, 3150,
	3, 2, 2, 2, 3150, 3159, 3, 2, 2, 2, 3151, 3153, 7, 173, 2, 2, 3152, 3154,
	9, 45, 2, 2, 3153, 3152, 3, 2, 2, 2, 3153, 3154, 3, 2, 2, 2, 3154, 3157,
	3, 2, 2, 2, 3155, 3158, 5, 240, 121, 2, 3156, 3158, 5, 236, 119, 2, 3157,
	3155, 3, 2, 2, 2, 3157, 3156, 3, 2, 2, 2, 3158, 3160, 3, 2, 2, 2, 3159,
	3151, 3, 2, 2, 2, 3159, 3160, 3, 2, 2, 2, 3160, 3162, 3, 2, 2, 2, 3161,
	3163, 5, 220, 111, 2, 3162, 3161, 3, 2, 2, 2, 3162, 3163, 3, 2, 2, 2, 3163,
	3165, 3, 2, 2, 2, 3164, 3166, 5, 270, 136, 2, 3165, 3164, 3, 2, 2, 2, 3165,
	3166, 3, 2, 2, 2, 3166, 3168, 3, 2, 2, 2, 3167, 3169, 5, 202, 102, 2, 3168,
	3167, 3, 2, 2, 2, 3168, 3169, 3, 2, 2, 2, 3169, 3193, 3, 2, 2, 2, 3170,
	3172, 5, 238, 120, 2, 3171, 3173, 5, 244, 123, 2, 3172, 3171, 3, 2, 2,
	2, 3173, 3174, 3, 2, 2, 2, 3174, 3172, 3, 2, 2, 2, 3174, 3175, 3, 2, 2,
	2, 3175, 3181, 3, 2, 2, 2, 3176, 3178, 7, 173, 2, 2, 3177, 3179, 9, 45,
	2, 2, 3178, 3177, 3, 2, 2, 2, 3178, 3179, 3, 2, 2, 2, 3179, 3180, 3, 2,
	2, 2, 3180, 3182, 5, 236, 119, 2, 3181, 3176, 3, 2, 2, 2, 3181, 3182, 3,
	2, 2, 2, 3182, 3184, 3, 2, 2, 2, 3183, 3185, 5, 220, 111, 2, 3184, 3183,
	3, 2, 2, 2, 3184, 3185, 3, 2, 2, 2, 3185, 3187, 3, 2, 2, 2, 3186, 3188,
	5, 270, 136, 2, 3187, 3186, 3, 2, 2, 2, 3187, 3188, 3, 2, 2, 2, 3188, 3190,
	3, 2, 2, 2, 3189, 3191, 5, 202, 102, 2, 3190, 3189, 3, 2, 2, 2, 3190, 3191,
	3, 2, 2, 2, 3191, 3193, 3, 2, 2, 2, 3192, 3137, 3, 2, 2, 2, 3192, 3141,
	3, 2, 2, 2, 3192, 3145, 3, 2, 2, 2, 3192, 3170, 3, 2, 2, 2, 3193, 193,
	3, 2, 2, 2, 3194, 3197, 5, 216, 109, 2, 3195, 3197, 5, 218, 110, 2, 3196,
	3194, 3, 2, 2, 2, 3196, 3195, 3, 2, 2, 2, 3197, 195, 3, 2, 2, 2, 3198,
	3217, 5, 192, 97, 2, 3199, 3200, 9, 46, 2, 2, 3200, 3202, 7, 1098, 2, 2,
	3201, 3203, 5, 584, 293, 2, 3202, 3201, 3, 2, 2, 2, 3202, 3203, 3, 2, 2,
	2, 3203, 3204, 3, 2, 2, 2, 3204, 3213, 7, 1099, 2, 2, 3205, 3206, 7, 1100,
	2, 2, 3206, 3208, 7, 1098, 2, 2, 3207, 3209, 5, 584, 293, 2, 3208, 3207,
	3, 2, 2, 2, 3208, 3209, 3, 2, 2, 2, 3209, 3210, 3, 2, 2, 2, 3210, 3212,
	7, 1099, 2, 2, 3211, 3205, 3, 2, 2, 2, 3212, 3215, 3, 2, 2, 2, 3213, 3211,
	3, 2, 2, 2, 3213, 3214, 3, 2, 2, 2, 3214, 3217, 3, 2, 2, 2, 3215, 3213,
	3, 2, 2, 2, 3216, 3198, 3, 2, 2, 2, 3216, 3199, 3, 2, 2, 2, 3217, 197,
	3, 2, 2, 2, 3218, 3219, 5, 522, 262, 2, 3219, 3222, 7, 1089, 2, 2, 3220,
	3223, 5, 642, 322, 2, 3221, 3223, 7, 42, 2, 2, 3222, 3220, 3, 2, 2, 2,
	3222, 3221, 3, 2, 2, 2, 3223, 199, 3, 2, 2, 2, 3224, 3227, 5, 544, 273,
	2, 3225, 3227, 7, 1125, 2, 2, 3226, 3224, 3, 2, 2, 2, 3226, 3225, 3, 2,
	2, 2, 3227, 201, 3, 2, 2, 2, 3228, 3229, 7, 64, 2, 2, 3229, 3235, 7, 177,
	2, 2, 3230, 3231, 7, 101, 2, 2, 3231, 3232, 7, 79, 2, 2, 3232, 3233, 7,
	584, 2, 2, 3233, 3235, 7, 495, 2, 2, 3234, 3228, 3, 2, 2, 2, 3234, 3230,
	3, 2, 2, 2, 3235, 203, 3, 2, 2, 2, 3236, 3238, 7, 44, 2, 2, 3237, 3239,
	7, 103, 2, 2, 3238, 3237, 3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 3241,
	3, 2, 2, 2, 3240, 3242, 7, 545, 2, 2, 3241, 3240, 3, 2, 2, 2, 3241, 3242,
	3, 2, 2, 2, 3242, 3244, 3, 2, 2, 2, 3243, 3245, 7, 77, 2, 2, 3244, 3243,
	3, 2, 2, 2, 3244, 3245, 3, 2, 2, 2, 3245, 3246, 3, 2, 2, 2, 3246, 3247,
	7, 67, 2, 2, 3247, 3253, 5, 520, 261, 2, 3248, 3249, 7, 125, 2, 2, 3249,
	3250, 7, 1098, 2, 2, 3250, 3251, 5, 576, 289, 2, 3251, 3252, 7, 1099, 2,
	2, 3252, 3254, 3, 2, 2, 2, 3253, 3248, 3, 2, 2, 2, 3253, 3254, 3, 2, 2,
	2, 3254, 3257, 3, 2, 2, 2, 3255, 3256, 7, 183, 2, 2, 3256, 3258, 5, 642,
	322, 2, 3257, 3255, 3, 2, 2, 2, 3257, 3258, 3, 2, 2, 2, 3258, 3260, 3,
	2, 2, 2, 3259, 3261, 5, 220, 111, 2, 3260, 3259, 3, 2, 2, 2, 3260, 3261,
	3, 2, 2, 2, 3261, 3264, 3, 2, 2, 2, 3262, 3263, 7, 97, 2, 2, 3263, 3265,
	5, 272, 137, 2, 3264, 3262, 3, 2, 2, 2, 3264, 3265, 3, 2, 2, 2, 3265, 205,
	3, 2, 2, 2, 3266, 3268, 7, 44, 2, 2, 3267, 3269, 7, 103, 2, 2, 3268, 3267,
	3, 2, 2, 2, 3268, 3269, 3, 2, 2, 2, 3269, 3271, 3, 2, 2, 2, 3270, 3272,
	7, 545, 2, 2, 3271, 3270, 3, 2, 2, 2, 3271, 3272, 3, 2, 2, 2, 3272, 3274,
	3, 2, 2, 2, 3273, 3275, 7, 77, 2, 2, 3274, 3273, 3, 2, 2, 2, 3274, 3275,
	3, 2, 2, 2, 3275, 3315, 3, 2, 2, 2, 3276, 3279, 5, 520, 261, 2, 3277, 3278,
	7, 1097, 2, 2, 3278, 3280, 7, 1082, 2, 2, 3279, 3277, 3, 2, 2, 2, 3279,
	3280, 3, 2, 2, 2, 3280, 3289, 3, 2, 2, 2, 3281, 3282, 7, 1100, 2, 2, 3282,
	3285, 5, 520, 261, 2, 3283, 3284, 7, 1097, 2, 2, 3284, 3286, 7, 1082, 2,
	2, 3285, 3283, 3, 2, 2, 2, 3285, 3286, 3, 2, 2, 2, 3286, 3288, 3, 2, 2,
	2, 3287, 3281, 3, 2, 2, 2, 3288, 3291, 3, 2, 2, 2, 3289, 3287, 3, 2, 2,
	2, 3289, 3290, 3, 2, 2, 2, 3290, 3292, 3, 2, 2, 2, 3291, 3289, 3, 2, 2,
	2, 3292, 3293, 7, 67, 2, 2, 3293, 3294, 5, 224, 113, 2, 3294, 3316, 3,
	2, 2, 2, 3295, 3296, 7, 67, 2, 2, 3296, 3299, 5, 520, 261, 2, 3297, 3298,
	7, 1097, 2, 2, 3298, 3300, 7, 1082, 2, 2, 3299, 3297, 3, 2, 2, 2, 3299,
	3300, 3, 2, 2, 2, 3300, 3309, 3, 2, 2, 2, 3301, 3302, 7, 1100, 2, 2, 3302,
	3305, 5, 520, 261, 2, 3303, 3304, 7, 1097, 2, 2, 3304, 3306, 7, 1082, 2,
	2, 3305, 3303, 3, 2, 2, 2, 3305, 3306, 3, 2, 2, 2, 3306, 3308, 3, 2, 2,
	2, 3307, 3301, 3, 2, 2, 2, 3308, 3311, 3, 2, 2, 2, 3309, 3307, 3, 2, 2,
	2, 3309, 3310, 3, 2, 2, 2, 3310, 3312, 3, 2, 2, 2, 3311, 3309, 3, 2, 2,
	2, 3312, 3313, 7, 180, 2, 2, 3313, 3314, 5, 224, 113, 2, 3314, 3316, 3,
	2, 2, 2, 3315, 3276, 3, 2, 2, 2, 3315, 3295, 3, 2, 2, 2, 3316, 3319, 3,
	2, 2, 2, 3317, 3318, 7, 183, 2, 2, 3318, 3320, 5, 642, 322, 2, 3319, 3317,
	3, 2, 2, 2, 3319, 3320, 3, 2, 2, 2, 3320, 207, 3, 2, 2, 2, 3321, 3322,
	7, 428, 2, 2, 3322, 3323, 5, 520, 261, 2, 3323, 3328, 7, 519, 2, 2, 3324,
	3326, 7, 14, 2, 2, 3325, 3324, 3, 2, 2, 2, 3325, 3326, 3, 2, 2, 2, 3326,
	3327, 3, 2, 2, 2, 3327, 3329, 5, 544, 273, 2, 3328, 3325, 3, 2, 2, 2, 3328,
	3329, 3, 2, 2, 2, 3329, 209, 3, 2, 2, 2, 3330, 3331, 7, 428, 2, 2, 3331,
	3332, 5, 520, 261, 2, 3332, 3333, 7, 130, 2, 2, 3333, 3340, 5, 544, 273,
	2, 3334, 3335, 5, 650, 326, 2, 3335, 3336, 7, 1098, 2, 2, 3336, 3337, 5,
	586, 294, 2, 3337, 3338, 7, 1099, 2, 2, 3338, 3341, 3, 2, 2, 2, 3339, 3341,
	9, 47, 2, 2, 3340, 3334, 3, 2, 2, 2, 3340, 3339, 3, 2, 2, 2, 3341, 3344,
	3, 2, 2, 2, 3342, 3343, 7, 183, 2, 2, 3343, 3345, 5, 642, 322, 2, 3344,
	3342, 3, 2, 2, 2, 3344, 3345, 3, 2, 2, 2, 3345, 3348, 3, 2, 2, 2, 3346,
	3347, 7, 97, 2, 2, 3347, 3349, 5, 272, 137, 2, 3348, 3346, 3, 2, 2, 2,
	3348, 3349, 3, 2, 2, 2, 3349, 211, 3, 2, 2, 2, 3350, 3351, 7, 428, 2, 2,
	3351, 3352, 5, 520, 261, 2, 3352, 3353, 7, 130, 2, 2, 3353, 3356, 9, 48,
	2, 2, 3354, 3355, 7, 183, 2, 2, 3355, 3357, 5, 642, 322, 2, 3356, 3354,
	3, 2, 2, 2, 3356, 3357, 3, 2, 2, 2, 3357, 3360, 3, 2, 2, 2, 3358, 3359,
	7, 97, 2, 2, 3359, 3361, 5, 272, 137, 2, 3360, 3358, 3, 2, 2, 2, 3360,
	3361, 3, 2, 2, 2, 3361, 213, 3, 2, 2, 2, 3362, 3363, 7, 428, 2, 2, 3363,
	3364, 5, 520, 261, 2, 3364, 3365, 7, 351, 2, 2, 3365, 215, 3, 2, 2, 2,
	3366, 3368, 7, 177, 2, 2, 3367, 3369, 7, 103, 2, 2, 3368, 3367, 3, 2, 2,
	2, 3368, 3369, 3, 2, 2, 2, 3369, 3371, 3, 2, 2, 2, 3370, 3372, 7, 77, 2,
	2, 3371, 3370, 3, 2, 2, 2, 3371, 3372, 3, 2, 2, 2, 3372, 3373, 3, 2, 2,
	2, 3373, 3378, 5, 520, 261, 2, 3374, 3376, 7, 14, 2, 2, 3375, 3374, 3,
	2, 2, 2, 3375, 3376, 3, 2, 2, 2, 3376, 3377, 3, 2, 2, 2, 3377, 3379, 5,
	544, 273, 2, 3378, 3375, 3, 2, 2, 2, 3378, 3379, 3, 2, 2, 2, 3379, 3380,
	3, 2, 2, 2, 3380, 3381, 7, 149, 2, 2, 3381, 3386, 5, 198, 100, 2, 3382,
	3383, 7, 1100, 2, 2, 3383, 3385, 5, 198, 100, 2, 3384, 3382, 3, 2, 2, 2,
	3385, 3388, 3, 2, 2, 2, 3386, 3384, 3, 2, 2, 2, 3386, 3387, 3, 2, 2, 2,
	3387, 3391, 3, 2, 2, 2, 3388, 3386, 3, 2, 2, 2, 3389, 3390, 7, 183, 2,
	2, 3390, 3392, 5, 642, 322, 2, 3391, 3389, 3, 2, 2, 2, 3391, 3392, 3, 2,
	2, 2, 3392, 3394, 3, 2, 2, 2, 3393, 3395, 5, 220, 111, 2, 3394, 3393, 3,
	2, 2, 2, 3394, 3395, 3, 2, 2, 2, 3395, 3397, 3, 2, 2, 2, 3396, 3398, 5,
	270, 136, 2, 3397, 3396, 3, 2, 2, 2, 3397, 3398, 3, 2, 2, 2, 3398, 217,
	3, 2, 2, 2, 3399, 3401, 7, 177, 2, 2, 3400, 3402, 7, 103, 2, 2, 3401, 3400,
	3, 2, 2, 2, 3401, 3402, 3, 2, 2, 2, 3402, 3404, 3, 2, 2, 2, 3403, 3405,
	7, 77, 2, 2, 3404, 3403, 3, 2, 2, 2, 3404, 3405, 3, 2, 2, 2, 3405, 3406,
	3, 2, 2, 2, 3406, 3407, 5, 224, 113, 2, 3407, 3408, 7, 149, 2, 2, 3408,
	3413, 5, 198, 100, 2, 3409, 3410, 7, 1100, 2, 2, 3410, 3412, 5, 198, 100,
	2, 3411, 3409, 3, 2, 2, 2, 3412, 3415, 3, 2, 2, 2, 3413, 3411, 3, 2, 2,
	2, 3413, 3414, 3, 2, 2, 2, 3414, 3418, 3, 2, 2, 2, 3415, 3413, 3, 2, 2,
	2, 3416, 3417, 7, 183, 2, 2, 3417, 3419, 5, 642, 322, 2, 3418, 3416, 3,
	2, 2, 2, 3418, 3419, 3, 2, 2, 2, 3419, 219, 3, 2, 2, 2, 3420, 3421, 7,
	120, 2, 2, 3421, 3422, 7, 20, 2, 2, 3422, 3427, 5, 222, 112, 2, 3423, 3424,
	7, 1100, 2, 2, 3424, 3426, 5, 222, 112, 2, 3425, 3423, 3, 2, 2, 2, 3426,
	3429, 3, 2, 2, 2, 3427, 3425, 3, 2, 2, 2, 3427, 3428, 3, 2, 2, 2, 3428,
	221, 3, 2, 2, 2, 3429, 3427, 3, 2, 2, 2, 3430, 3432, 5, 642, 322, 2, 3431,
	3433, 9, 49, 2, 2, 3432, 3431, 3, 2, 2, 2, 3432, 3433, 3, 2, 2, 2, 3433,
	223, 3, 2, 2, 2, 3434, 3439, 5, 226, 114, 2, 3435, 3436, 7, 1100, 2, 2,
	3436, 3438, 5, 226, 114, 2, 3437, 3435, 3, 2, 2, 2, 3438, 3441, 3, 2, 2,
	2, 3439, 3437, 3, 2, 2, 2, 3439, 3440, 3, 2, 2, 2, 3440, 225, 3, 2, 2,
	2, 3441, 3439, 3, 2, 2, 2, 3442, 3446, 5, 228, 115, 2, 3443, 3445, 5, 234,
	118, 2, 3444, 3443, 3, 2, 2, 2, 3445, 3448, 3, 2, 2, 2, 3446, 3444, 3,
	2, 2, 2, 3446, 3447, 3, 2, 2, 2, 3447, 3460, 3, 2, 2, 2, 3448, 3446, 3,
	2, 2, 2, 3449, 3450, 7, 1098, 2, 2, 3450, 3454, 5, 228, 115, 2, 3451, 3453,
	5, 234, 118, 2, 3452, 3451, 3, 2, 2, 2, 3453, 3456, 3, 2, 2, 2, 3454, 3452,
	3, 2, 2, 2, 3454, 3455, 3, 2, 2, 2, 3455, 3457, 3, 2, 2, 2, 3456, 3454,
	3, 2, 2, 2, 3457, 3458, 7, 1099, 2, 2, 3458, 3460, 3, 2, 2, 2, 3459, 3442,
	3, 2, 2, 2, 3459, 3449, 3, 2, 2, 2, 3460, 227, 3, 2, 2, 2, 3461, 3467,
	5, 520, 261, 2, 3462, 3463, 7, 125, 2, 2, 3463, 3464, 7, 1098, 2, 2, 3464,
	3465, 5, 576, 289, 2, 3465, 3466, 7, 1099, 2, 2, 3466, 3468, 3, 2, 2, 2,
	3467, 3462, 3, 2, 2, 2, 3467, 3468, 3, 2, 2, 2, 3468, 3473, 3, 2, 2, 2,
	3469, 3471, 7, 14, 2, 2, 3470, 3469, 3, 2, 2, 2, 3470, 3471, 3, 2, 2, 2,
	3471, 3472, 3, 2, 2, 2, 3472, 3474, 5, 544, 273, 2, 3473, 3470, 3, 2, 2,
	2, 3473, 3474, 3, 2, 2, 2, 3474, 3483, 3, 2, 2, 2, 3475, 3480, 5, 230,
	116, 2, 3476, 3477, 7, 1100, 2, 2, 3477, 3479, 5, 230, 116, 2, 3478, 3476,
	3, 2, 2, 2, 3479, 3482, 3, 2, 2, 2, 3480, 3478, 3, 2, 2, 2, 3480, 3481,
	3, 2, 2, 2, 3481, 3484, 3, 2, 2, 2, 3482, 3480, 3, 2, 2, 2, 3483, 3475,
	3, 2, 2, 2, 3483, 3484, 3, 2, 2, 2, 3484, 3502, 3, 2, 2, 2, 3485, 3491,
	5, 192, 97, 2, 3486, 3487, 7, 1098, 2, 2, 3487, 3488, 5, 192, 97, 2, 3488,
	3489, 7, 1099, 2, 2, 3489, 3491, 3, 2, 2, 2, 3490, 3485, 3, 2, 2, 2, 3490,
	3486, 3, 2, 2, 2, 3491, 3493, 3, 2, 2, 2, 3492, 3494, 7, 14, 2, 2, 3493,
	3492, 3, 2, 2, 2, 3493, 3494, 3, 2, 2, 2, 3494, 3495, 3, 2, 2, 2, 3495,
	3496, 5, 544, 273, 2, 3496, 3502, 3, 2, 2, 2, 3497, 3498, 7, 1098, 2, 2,
	3498, 3499, 5, 224, 113, 2, 3499, 3500, 7, 1099, 2, 2, 3500, 3502, 3, 2,
	2, 2, 3501, 3461, 3, 2, 2, 2, 3501, 3490, 3, 2, 2, 2, 3501, 3497, 3, 2,
	2, 2, 3502, 229, 3, 2, 2, 2, 3503, 3504, 9, 50, 2, 2, 3504, 3507, 9, 22,
	2, 2, 3505, 3506, 7, 64, 2, 2, 3506, 3508, 5, 232, 117, 2, 3507, 3505,
	3, 2, 2, 2, 3507, 3508, 3, 2, 2, 2, 3508, 3509, 3, 2, 2, 2, 3509, 3510,
	7, 1098, 2, 2, 3510, 3511, 5, 576, 289, 2, 3511, 3512, 7, 1099, 2, 2, 3512,
	231, 3, 2, 2, 2, 3513, 3519, 7, 89, 2, 2, 3514, 3515, 7, 120, 2, 2, 3515,
	3519, 7, 20, 2, 2, 3516, 3517, 7, 72, 2, 2, 3517, 3519, 7, 20, 2, 2, 3518,
	3513, 3, 2, 2, 2, 3518, 3514, 3, 2, 2, 2, 3518, 3516, 3, 2, 2, 2, 3519,
	233, 3, 2, 2, 2, 3520, 3522, 9, 51, 2, 2, 3521, 3520, 3, 2, 2, 2, 3521,
	3522, 3, 2, 2, 2, 3522, 3523, 3, 2, 2, 2, 3523, 3524, 7, 89, 2, 2, 3524,
	3532, 5, 228, 115, 2, 3525, 3526, 7, 114, 2, 2, 3526, 3533, 5, 642, 322,
	2, 3527, 3528, 7, 180, 2, 2, 3528, 3529, 7, 1098, 2, 2, 3529, 3530, 5,
	576, 289, 2, 3530, 3531, 7, 1099, 2, 2, 3531, 3533, 3, 2, 2, 2, 3532, 3525,
	3, 2, 2, 2, 3532, 3527, 3, 2, 2, 2, 3532, 3533, 3, 2, 2, 2, 3533, 3565,
	3, 2, 2, 2, 3534, 3535, 7, 164, 2, 2, 3535, 3538, 5, 228, 115, 2, 3536,
	3537, 7, 114, 2, 2, 3537, 3539, 5, 642, 322, 2, 3538, 3536, 3, 2, 2, 2,
	3538, 3539, 3, 2, 2, 2, 3539, 3565, 3, 2, 2, 2, 3540, 3542, 9, 52, 2, 2,
	3541, 3543, 7, 123, 2, 2, 3542, 3541, 3, 2, 2, 2, 3542, 3543, 3, 2, 2,
	2, 3543, 3544, 3, 2, 2, 2, 3544, 3545, 7, 89, 2, 2, 3545, 3553, 5, 228,
	115, 2, 3546, 3547, 7, 114, 2, 2, 3547, 3554, 5, 642, 322, 2, 3548, 3549,
	7, 180, 2, 2, 3549, 3550, 7, 1098, 2, 2, 3550, 3551, 5, 576, 289, 2, 3551,
	3552, 7, 1099, 2, 2, 3552, 3554, 3, 2, 2, 2, 3553, 3546, 3, 2, 2, 2, 3553,
	3548, 3, 2, 2, 2, 3554, 3565, 3, 2, 2, 2, 3555, 3560, 7, 109, 2, 2, 3556,
	3558, 9, 52, 2, 2, 3557, 3559, 7, 123, 2, 2, 3558, 3557, 3, 2, 2, 2, 3558,
	3559, 3, 2, 2, 2, 3559, 3561, 3, 2, 2, 2, 3560, 3556, 3, 2, 2, 2, 3560,
	3561, 3, 2, 2, 2, 3561, 3562, 3, 2, 2, 2, 3562, 3563, 7, 89, 2, 2, 3563,
	3565, 5, 228, 115, 2, 3564, 3521, 3, 2, 2, 2, 3564, 3534, 3, 2, 2, 2, 3564,
	3540, 3, 2, 2, 2, 3564, 3555, 3, 2, 2, 2, 3565, 235, 3, 2, 2, 2, 3566,
	3567, 7, 1098, 2, 2, 3567, 3568, 5, 240, 121, 2, 3568, 3569, 7, 1099, 2,
	2, 3569, 3575, 3, 2, 2, 2, 3570, 3571, 7, 1098, 2, 2, 3571, 3572, 5, 236,
	119, 2, 3572, 3573, 7, 1099, 2, 2, 3573, 3575, 3, 2, 2, 2, 3574, 3566,
	3, 2, 2, 2, 3574, 3570, 3, 2, 2, 2, 3575, 237, 3, 2, 2, 2, 3576, 3577,
	7, 1098, 2, 2, 3577, 3578, 5, 242, 122, 2, 3578, 3579, 7, 1099, 2, 2, 3579,
	3585, 3, 2, 2, 2, 3580, 3581, 7, 1098, 2, 2, 3581, 3582, 5, 238, 120, 2,
	3582, 3583, 7, 1099, 2, 2, 3583, 3585, 3, 2, 2, 2, 3584, 3576, 3, 2, 2,
	2, 3584, 3580, 3, 2, 2, 2, 3585, 239, 3, 2, 2, 2, 3586, 3590, 7, 148, 2,
	2, 3587, 3589, 5, 248, 125, 2, 3588, 3587, 3, 2, 2, 2, 3589, 3592, 3, 2,
	2, 2, 3590, 3588, 3, 2, 2, 2, 3590, 3591, 3, 2, 2, 2, 3591, 3593, 3, 2,
	2, 2, 3592, 3590, 3, 2, 2, 2, 3593, 3595, 5, 250, 126, 2, 3594, 3596, 5,
	254, 128, 2, 3595, 3594, 3, 2, 2, 2, 3595, 3596, 3, 2, 2, 2, 3596, 3598,
	3, 2, 2, 2, 3597, 3599, 5, 260, 131, 2, 3598, 3597, 3, 2, 2, 2, 3598, 3599,
	3, 2, 2, 2, 3599, 3601, 3, 2, 2, 2, 3600, 3602, 5, 262, 132, 2, 3601, 3600,
	3, 2, 2, 2, 3601, 3602, 3, 2, 2, 2, 3602, 3604, 3, 2, 2, 2, 3603, 3605,
	5, 264, 133, 2, 3604, 3603, 3, 2, 2, 2, 3604, 3605, 3, 2, 2, 2, 3605, 3607,
	3, 2, 2, 2, 3606, 3608, 5, 266, 134, 2, 3607, 3606, 3, 2, 2, 2, 3607, 3608,
	3, 2, 2, 2, 3608, 3610, 3, 2, 2, 2, 3609, 3611, 5, 220, 111, 2, 3610, 3609,
	3, 2, 2, 2, 3610, 3611, 3, 2, 2, 2, 3611, 3613, 3, 2, 2, 2, 3612, 3614,
	5, 270, 136, 2, 3613, 3612, 3, 2, 2, 2, 3613, 3614, 3, 2, 2, 2, 3614, 3645,
	3, 2, 2, 2, 3615, 3619, 7, 148, 2, 2, 3616, 3618, 5, 248, 125, 2, 3617,
	3616, 3, 2, 2, 2, 3618, 3621, 3, 2, 2, 2, 3619, 3617, 3, 2, 2, 2, 3619,
	3620, 3, 2, 2, 2, 3620, 3622, 3, 2, 2, 2, 3621, 3619, 3, 2, 2, 2, 3622,
	3624, 5, 250, 126, 2, 3623, 3625, 5, 260, 131, 2, 3624, 3623, 3, 2, 2,
	2, 3624, 3625, 3, 2, 2, 2, 3625, 3627, 3, 2, 2, 2, 3626, 3628, 5, 262,
	132, 2, 3627, 3626, 3, 2, 2, 2, 3627, 3628, 3, 2, 2, 2, 3628, 3630, 3,
	2, 2, 2, 3629, 3631, 5, 264, 133, 2, 3630, 3629, 3, 2, 2, 2, 3630, 3631,
	3, 2, 2, 2, 3631, 3633, 3, 2, 2, 2, 3632, 3634, 5, 266, 134, 2, 3633, 3632,
	3, 2, 2, 2, 3633, 3634, 3, 2, 2, 2, 3634, 3636, 3, 2, 2, 2, 3635, 3637,
	5, 220, 111, 2, 3636, 3635, 3, 2, 2, 2, 3636, 3637, 3, 2, 2, 2, 3637, 3639,
	3, 2, 2, 2, 3638, 3640, 5, 270, 136, 2, 3639, 3638, 3, 2, 2, 2, 3639, 3640,
	3, 2, 2, 2, 3640, 3642, 3, 2, 2, 2, 3641, 3643, 5, 254, 128, 2, 3642, 3641,
	3, 2, 2, 2, 3642, 3643, 3, 2, 2, 2, 3643, 3645, 3, 2, 2, 2, 3644, 3586,
	3, 2, 2, 2, 3644, 3615, 3, 2, 2, 2, 3645, 241, 3, 2, 2, 2, 3646, 3650,
	7, 148, 2, 2, 3647, 3649, 5, 248, 125, 2, 3648, 3647, 3, 2, 2, 2, 3649,
	3652, 3, 2, 2, 2, 3650, 3648, 3, 2, 2, 2, 3650, 3651, 3, 2, 2, 2, 3651,
	3653, 3, 2, 2, 2, 3652, 3650, 3, 2, 2, 2, 3653, 3655, 5, 250, 126, 2, 3654,
	3656, 5, 260, 131, 2, 3655, 3654, 3, 2, 2, 2, 3655, 3656, 3, 2, 2, 2, 3656,
	3658, 3, 2, 2, 2, 3657, 3659, 5, 262, 132, 2, 3658, 3657, 3, 2, 2, 2, 3658,
	3659, 3, 2, 2, 2, 3659, 3661, 3, 2, 2, 2, 3660, 3662, 5, 264, 133, 2, 3661,
	3660, 3, 2, 2, 2, 3661, 3662, 3, 2, 2, 2, 3662, 3664, 3, 2, 2, 2, 3663,
	3665, 5, 266, 134, 2, 3664, 3663, 3, 2, 2, 2, 3664, 3665, 3, 2, 2, 2, 3665,
	3667, 3, 2, 2, 2, 3666, 3668, 5, 220, 111, 2, 3667, 3666, 3, 2, 2, 2, 3667,
	3668, 3, 2, 2, 2, 3668, 3670, 3, 2, 2, 2, 3669, 3671, 5, 270, 136, 2, 3670,
	3669, 3, 2, 2, 2, 3670, 3671, 3, 2, 2, 2, 3671, 243, 3, 2, 2, 2, 3672,
	3674, 7, 173, 2, 2, 3673, 3675, 9, 45, 2, 2, 3674, 3673, 3, 2, 2, 2, 3674,
	3675, 3, 2, 2, 2, 3675, 3676, 3, 2, 2, 2, 3676, 3677, 5, 238, 120, 2, 3677,
	245, 3, 2, 2, 2, 3678, 3680, 7, 173, 2, 2, 3679, 3681, 9, 45, 2, 2, 3680,
	3679, 3, 2, 2, 2, 3680, 3681, 3, 2, 2, 2, 3681, 3684, 3, 2, 2, 2, 3682,
	3685, 5, 242, 122, 2, 3683, 3685, 5, 238, 120, 2, 3684, 3682, 3, 2, 2,
	2, 3684, 3683, 3, 2, 2, 2, 3685, 247, 3, 2, 2, 2, 3686, 3695, 9, 53, 2,
	2, 3687, 3695, 7, 74, 2, 2, 3688, 3695, 7, 164, 2, 2, 3689, 3695, 7, 160,
	2, 2, 3690, 3695, 7, 158, 2, 2, 3691, 3695, 7, 599, 2, 2, 3692, 3695, 9,
	54, 2, 2, 3693, 3695, 7, 159, 2, 2, 3694, 3686, 3, 2, 2, 2, 3694, 3687,
	3, 2, 2, 2, 3694, 3688, 3, 2, 2, 2, 3694, 3689, 3, 2, 2, 2, 3694, 3690,
	3, 2, 2, 2, 3694, 3691, 3, 2, 2, 2, 3694, 3692, 3, 2, 2, 2, 3694, 3693,
	3, 2, 2, 2, 3695, 249, 3, 2, 2, 2, 3696, 3699, 7, 1082, 2, 2, 3697, 3699,
	5, 252, 127, 2, 3698, 3696, 3, 2, 2, 2, 3698, 3697, 3, 2, 2, 2, 3699, 3704,
	3, 2, 2, 2, 3700, 3701, 7, 1100, 2, 2, 3701, 3703, 5, 252, 127, 2, 3702,
	3700, 3, 2, 2, 2, 3703, 3706, 3, 2, 2, 2, 3704, 3702, 3, 2, 2, 2, 3704,
	3705, 3, 2, 2, 2, 3705, 251, 3, 2, 2, 2, 3706, 3704, 3, 2, 2, 2, 3707,
	3708, 5, 518, 260, 2, 3708, 3709, 7, 1097, 2, 2, 3709, 3710, 7, 1082, 2,
	2, 3710, 3737, 3, 2, 2, 2, 3711, 3716, 5, 522, 262, 2, 3712, 3714, 7, 14,
	2, 2, 3713, 3712, 3, 2, 2, 2, 3713, 3714, 3, 2, 2, 2, 3714, 3715, 3, 2,
	2, 2, 3715, 3717, 5, 544, 273, 2, 3716, 3713, 3, 2, 2, 2, 3716, 3717, 3,
	2, 2, 2, 3717, 3737, 3, 2, 2, 2, 3718, 3723, 5, 602, 302, 2, 3719, 3721,
	7, 14, 2, 2, 3720, 3719, 3, 2, 2, 2, 3720, 3721, 3, 2, 2, 2, 3721, 3722,
	3, 2, 2, 2, 3722, 3724, 5, 544, 273, 2, 3723, 3720, 3, 2, 2, 2, 3723, 3724,
	3, 2, 2, 2, 3724, 3737, 3, 2, 2, 2, 3725, 3726, 7, 1125, 2, 2, 3726, 3728,
	7, 1073, 2, 2, 3727, 3725, 3, 2, 2, 2, 3727, 3728, 3, 2, 2, 2, 3728, 3729,
	3, 2, 2, 2, 3729, 3734, 5, 642, 322, 2, 3730, 3732, 7, 14, 2, 2, 3731,
	3730, 3, 2, 2, 2, 3731, 3732, 3, 2, 2, 2, 3732, 3733, 3, 2, 2, 2, 3733,
	3735, 5, 544, 273, 2, 3734, 3731, 3, 2, 2, 2, 3734, 3735, 3, 2, 2, 2, 3735,
	3737, 3, 2, 2, 2, 3736, 3707, 3, 2, 2, 2, 3736, 3711, 3, 2, 2, 2, 3736,
	3718, 3, 2, 2, 2, 3736, 3727, 3, 2, 2, 2, 3737, 253, 3, 2, 2, 2, 3738,
	3739, 7, 86, 2, 2, 3739, 3744, 5, 200, 101, 2, 3740, 3741, 7, 1100, 2,
	2, 3741, 3743, 5, 200, 101, 2, 3742, 3740, 3, 2, 2, 2, 3743, 3746, 3, 2,
	2, 2, 3744, 3742, 3, 2, 2, 2, 3744, 3745, 3, 2, 2, 2, 3745, 3775, 3, 2,
	2, 2, 3746, 3744, 3, 2, 2, 2, 3747, 3748, 7, 86, 2, 2, 3748, 3749, 7, 389,
	2, 2, 3749, 3775, 7, 1113, 2, 2, 3750, 3751, 7, 86, 2, 2, 3751, 3752, 7,
	124, 2, 2, 3752, 3756, 7, 1113, 2, 2, 3753, 3754, 7, 26, 2, 2, 3754, 3755,
	7, 149, 2, 2, 3755, 3757, 5, 530, 266, 2, 3756, 3753, 3, 2, 2, 2, 3756,
	3757, 3, 2, 2, 2, 3757, 3764, 3, 2, 2, 2, 3758, 3760, 9, 42, 2, 2, 3759,
	3761, 5, 256, 129, 2, 3760, 3759, 3, 2, 2, 2, 3761, 3762, 3, 2, 2, 2, 3762,
	3760, 3, 2, 2, 2, 3762, 3763, 3, 2, 2, 2, 3763, 3765, 3, 2, 2, 2, 3764,
	3758, 3, 2, 2, 2, 3764, 3765, 3, 2, 2, 2, 3765, 3772, 3, 2, 2, 2, 3766,
	3768, 7, 99, 2, 2, 3767, 3769, 5, 258, 130, 2, 3768, 3767, 3, 2, 2, 2,
	3769, 3770, 3, 2, 2, 2, 3770, 3768, 3, 2, 2, 2, 3770, 3771, 3, 2, 2, 2,
	3771, 3773, 3, 2, 2, 2, 3772, 3766, 3, 2, 2, 2, 3772, 3773, 3, 2, 2, 2,
	3773, 3775, 3, 2, 2, 2, 3774, 3738, 3, 2, 2, 2, 3774, 3747, 3, 2, 2, 2,
	3774, 3750, 3, 2, 2, 2, 3775, 255, 3, 2, 2, 2, 3776, 3777, 7, 166, 2, 2,
	3777, 3778, 7, 20, 2, 2, 3778, 3789, 7, 1113, 2, 2, 3779, 3781, 7, 118,
	2, 2, 3780, 3779, 3, 2, 2, 2, 3780, 3781, 3, 2, 2, 2, 3781, 3782, 3, 2,
	2, 2, 3782, 3783, 7, 56, 2, 2, 3783, 3784, 7, 20, 2, 2, 3784, 3789, 7,
	1113, 2, 2, 3785, 3786, 7, 57, 2, 2, 3786, 3787, 7, 20, 2, 2, 3787, 3789,
	7, 1113, 2, 2, 3788, 3776, 3, 2, 2, 2, 3788, 3780, 3, 2, 2, 2, 3788, 3785,
	3, 2, 2, 2, 3789, 257, 3, 2, 2, 2, 3790, 3791, 7, 163, 2, 2, 3791, 3792,
	7, 20, 2, 2, 3792, 3797, 7, 1113, 2, 2, 3793, 3794, 7, 166, 2, 2, 3794,
	3795, 7, 20, 2, 2, 3795, 3797, 7, 1113, 2, 2, 3796, 3790, 3, 2, 2, 2, 3796,
	3793, 3, 2, 2, 2, 3797, 259, 3, 2, 2, 2, 3798, 3799, 7, 67, 2, 2, 3799,
	3801, 5, 224, 113, 2, 3800, 3798, 3, 2, 2, 2, 3800, 3801, 3, 2, 2, 2, 3801,
	3804, 3, 2, 2, 2, 3802, 3803, 7, 183, 2, 2, 3803, 3805, 5, 642, 322, 2,
	3804, 3802, 3, 2, 2, 2, 3804, 3805, 3, 2, 2, 2, 3805, 261, 3, 2, 2, 2,
	3806, 3807, 7, 72, 2, 2, 3807, 3808, 7, 20, 2, 2, 3808, 3813, 5, 268, 135,
	2, 3809, 3810, 7, 1100, 2, 2, 3810, 3812, 5, 268, 135, 2, 3811, 3809, 3,
	2, 2, 2, 3812, 3815, 3, 2, 2, 2, 3813, 3811, 3, 2, 2, 2, 3813, 3814, 3,
	2, 2, 2, 3814, 3818, 3, 2, 2, 2, 3815, 3813, 3, 2, 2, 2, 3816, 3817, 7,
	185, 2, 2, 3817, 3819, 7, 573, 2, 2, 3818, 3816, 3, 2, 2, 2, 3818, 3819,
	3, 2, 2, 2, 3819, 263, 3, 2, 2, 2, 3820, 3821, 7, 73, 2, 2, 3821, 3822,
	5, 642, 322, 2, 3822, 265, 3, 2, 2, 2, 3823, 3824, 7, 650, 2, 2, 3824,
	3825, 5, 620, 311, 2, 3825, 3826, 7, 14, 2, 2, 3826, 3827, 7, 1098, 2,
	2, 3827, 3828, 5, 618, 310, 2, 3828, 3838, 7, 1099, 2, 2, 3829, 3830, 7,
	1100, 2, 2, 3830, 3831, 5, 620, 311, 2, 3831, 3832, 7, 14, 2, 2, 3832,
	3833, 7, 1098, 2, 2, 3833, 3834, 5, 618, 310, 2, 3834, 3835, 7, 1099, 2,
	2, 3835, 3837, 3, 2, 2, 2, 3836, 3829, 3, 2, 2, 2, 3837, 3840, 3, 2, 2,
	2, 3838, 3836, 3, 2, 2, 2, 3838, 3839, 3, 2, 2, 2, 3839, 267, 3, 2, 2,
	2, 3840, 3838, 3, 2, 2, 2, 3841, 3843, 5, 642, 322, 2, 3842, 3844, 9, 49,
	2, 2, 3843, 3842, 3, 2, 2, 2, 3843, 3844, 3, 2, 2, 2, 3844, 269, 3, 2,
	2, 2, 3845, 3856, 7, 97, 2, 2, 3846, 3847, 5, 272, 137, 2, 3847, 3848,
	7, 1100, 2, 2, 3848, 3850, 3, 2, 2, 2, 3849, 3846, 3, 2, 2, 2, 3849, 3850,
	3, 2, 2, 2, 3850, 3851, 3, 2, 2, 2, 3851, 3857, 5, 272, 137, 2, 3852, 3853,
	5, 272, 137, 2, 3853, 3854, 7, 512, 2, 2, 3854, 3855, 5, 272, 137, 2, 3855,
	3857, 3, 2, 2, 2, 3856, 3849, 3, 2, 2, 2, 3856, 3852, 3, 2, 2, 2, 3857,
	271, 3, 2, 2, 2, 3858, 3862, 5, 550, 276, 2, 3859, 3862, 5, 528, 265, 2,
	3860, 3862, 5, 546, 274, 2, 3861, 3858, 3, 2, 2, 2, 3861, 3859, 3, 2, 2,
	2, 3861, 3860, 3, 2, 2, 2, 3862, 273, 3, 2, 2, 2, 3863, 3864, 7, 603, 2,
	2, 3864, 3873, 7, 627, 2, 2, 3865, 3870, 5, 296, 149, 2, 3866, 3867, 7,
	1100, 2, 2, 3867, 3869, 5, 296, 149, 2, 3868, 3866, 3, 2, 2, 2, 3869, 3872,
	3, 2, 2, 2, 3870, 3868, 3, 2, 2, 2, 3870, 3871, 3, 2, 2, 2, 3871, 3874,
	3, 2, 2, 2, 3872, 3870, 3, 2, 2, 2, 3873, 3865, 3, 2, 2, 2, 3873, 3874,
	3, 2, 2, 2, 3874, 275, 3, 2, 2, 2, 3875, 3877, 7, 334, 2, 2, 3876, 3878,
	7, 652, 2, 2, 3877, 3876, 3, 2, 2, 2, 3877, 3878, 3, 2, 2, 2, 3878, 277,
	3, 2, 2, 2, 3879, 3881, 7, 359, 2, 2, 3880, 3882, 7, 652, 2, 2, 3881, 3880,
	3, 2, 2, 2, 3881, 3882, 3, 2, 2, 2, 3882, 3888, 3, 2, 2, 2, 3883, 3885,
	7, 12, 2, 2, 3884, 3886, 7, 505, 2, 2, 3885, 3884, 3, 2, 2, 2, 3885, 3886,
	3, 2, 2, 2, 3886, 3887, 3, 2, 2, 2, 3887, 3889, 7, 343, 2, 2, 3888, 3883,
	3, 2, 2, 2, 3888, 3889, 3, 2, 2, 2, 3889, 3894, 3, 2, 2, 2, 3890, 3892,
	7, 505, 2, 2, 3891, 3890, 3, 2, 2, 2, 3891, 3892, 3, 2, 2, 2, 3892, 3893,
	3, 2, 2, 2, 3893, 3895, 7, 134, 2, 2, 3894, 3891, 3, 2, 2, 2, 3894, 3895,
	3, 2, 2, 2, 3895, 279, 3, 2, 2, 2, 3896, 3898, 7, 572, 2, 2, 3897, 3899,
	7, 652, 2, 2, 3898, 3897, 3, 2, 2, 2, 3898, 3899, 3, 2, 2, 2, 3899, 3905,
	3, 2, 2, 2, 3900, 3902, 7, 12, 2, 2, 3901, 3903, 7, 505, 2, 2, 3902, 3901,
	3, 2, 2, 2, 3902, 3903, 3, 2, 2, 2, 3903, 3904, 3, 2, 2, 2, 3904, 3906,
	7, 343, 2, 2, 3905, 3900, 3, 2, 2, 2, 3905, 3906, 3, 2, 2, 2, 3906, 3911,
	3, 2, 2, 2, 3907, 3909, 7, 505, 2, 2, 3908, 3907, 3, 2, 2, 2, 3908, 3909,
	3, 2, 2, 2, 3909, 3910, 3, 2, 2, 2, 3910, 3912, 7, 134, 2, 2, 3911, 3908,
	3, 2, 2, 2, 3911, 3912, 3, 2, 2, 2, 3912, 281, 3, 2, 2, 2, 3913, 3914,
	7, 579, 2, 2, 3914, 3915, 5, 544, 273, 2, 3915, 283, 3, 2, 2, 2, 3916,
	3918, 7, 572, 2, 2, 3917, 3919, 7, 652, 2, 2, 3918, 3917, 3, 2, 2, 2, 3918,
	3919, 3, 2, 2, 2, 3919, 3920, 3, 2, 2, 2, 3920, 3922, 7, 168, 2, 2, 3921,
	3923, 7, 579, 2, 2, 3922, 3921, 3, 2, 2, 2, 3922, 3923, 3, 2, 2, 2, 3923,
	3924, 3, 2, 2, 2, 3924, 3925, 5, 544, 273, 2, 3925, 285, 3, 2, 2, 2, 3926,
	3927, 7, 134, 2, 2, 3927, 3928, 7, 579, 2, 2, 3928, 3929, 5, 544, 273,
	2, 3929, 287, 3, 2, 2, 2, 3930, 3931, 7, 101, 2, 2, 3931, 3932, 7, 671,
	2, 2, 3932, 3937, 5, 298, 150, 2, 3933, 3934, 7, 1100, 2, 2, 3934, 3936,
	5, 298, 150, 2, 3935, 3933, 3, 2, 2, 2, 3936, 3939, 3, 2, 2, 2, 3937, 3935,
	3, 2, 2, 2, 3937, 3938, 3, 2, 2, 2, 3938, 289, 3, 2, 2, 2, 3939, 3937,
	3, 2, 2, 2, 3940, 3941, 7, 175, 2, 2, 3941, 3942, 7, 671, 2, 2, 3942, 291,
	3, 2, 2, 2, 3943, 3944, 7, 149, 2, 2, 3944, 3945, 7, 330, 2, 2, 3945, 3946,
	7, 1089, 2, 2, 3946, 3947, 9, 26, 2, 2, 3947, 293, 3, 2, 2, 2, 3948, 3950,
	7, 149, 2, 2, 3949, 3951, 9, 55, 2, 2, 3950, 3949, 3, 2, 2, 2, 3950, 3951,
	3, 2, 2, 2, 3951, 3952, 3, 2, 2, 2, 3952, 3953, 7, 627, 2, 2, 3953, 3958,
	5, 302, 152, 2, 3954, 3955, 7, 1100, 2, 2, 3955, 3957, 5, 302, 152, 2,
	3956, 3954, 3, 2, 2, 2, 3957, 3960, 3, 2, 2, 2, 3958, 3956, 3, 2, 2, 2,
	3958, 3959, 3, 2, 2, 2, 3959, 295, 3, 2, 2, 2, 3960, 3958, 3, 2, 2, 2,
	3961, 3962, 7, 185, 2, 2, 3962, 3963, 7, 367, 2, 2, 3963, 3969, 7, 590,
	2, 2, 3964, 3965, 7, 130, 2, 2, 3965, 3969, 7, 186, 2, 2, 3966, 3967, 7,
	130, 2, 2, 3967, 3969, 7, 518, 2, 2, 3968, 3961, 3, 2, 2, 2, 3968, 3964,
	3, 2, 2, 2, 3968, 3966, 3, 2, 2, 2, 3969, 297, 3, 2, 2, 2, 3970, 3975,
	5, 520, 261, 2, 3971, 3973, 7, 14, 2, 2, 3972, 3971, 3, 2, 2, 2, 3972,
	3973, 3, 2, 2, 2, 3973, 3974, 3, 2, 2, 2, 3974, 3976, 5, 544, 273, 2, 3975,
	3972, 3, 2, 2, 2, 3975, 3976, 3, 2, 2, 2, 3976, 3977, 3, 2, 2, 2, 3977,
	3978, 5, 300, 151, 2, 3978, 299, 3, 2, 2, 2, 3979, 3981, 7, 130, 2, 2,
	3980, 3982, 7, 458, 2, 2, 3981, 3980, 3, 2, 2, 2, 3981, 3982, 3, 2, 2,
	2, 3982, 3988, 3, 2, 2, 2, 3983, 3985, 7, 103, 2, 2, 3984, 3983, 3, 2,
	2, 2, 3984, 3985, 3, 2, 2, 2, 3985, 3986, 3, 2, 2, 2, 3986, 3988, 7, 186,
	2, 2, 3987, 3979, 3, 2, 2, 2, 3987, 3984, 3, 2, 2, 2, 3988, 301, 3, 2,
	2, 2, 3989, 3990, 7, 448, 2, 2, 3990, 3991, 7, 456, 2, 2, 3991, 3997, 5,
	304, 153, 2, 3992, 3993, 7, 130, 2, 2, 3993, 3997, 7, 186, 2, 2, 3994,
	3995, 7, 130, 2, 2, 3995, 3997, 7, 518, 2, 2, 3996, 3989, 3, 2, 2, 2, 3996,
	3992, 3, 2, 2, 2, 3996, 3994, 3, 2, 2, 2, 3997, 303, 3, 2, 2, 2, 3998,
	3999, 7, 766, 2, 2, 3999, 4006, 7, 130, 2, 2, 4000, 4001, 7, 130, 2, 2,
	4001, 4006, 7, 767, 2, 2, 4002, 4003, 7, 130, 2, 2, 4003, 4006, 7, 768,
	2, 2, 4004, 4006, 7, 769, 2, 2, 4005, 3998, 3, 2, 2, 2, 4005, 4000, 3,
	2, 2, 2, 4005, 4002, 3, 2, 2, 2, 4005, 4004, 3, 2, 2, 2, 4006, 305, 3,
	2, 2, 2, 4007, 4008, 7, 25, 2, 2, 4008, 4009, 7, 461, 2, 2, 4009, 4010,
	7, 168, 2, 2, 4010, 4015, 5, 324, 163, 2, 4011, 4012, 7, 1100, 2, 2, 4012,
	4014, 5, 324, 163, 2, 4013, 4011, 3, 2, 2, 2, 4014, 4017, 3, 2, 2, 2, 4015,
	4013, 3, 2, 2, 2, 4015, 4016, 3, 2, 2, 2, 4016, 4019, 3, 2, 2, 2, 4017,
	4015, 3, 2, 2, 2, 4018, 4020, 5, 332, 167, 2, 4019, 4018, 3, 2, 2, 2, 4019,
	4020, 3, 2, 2, 2, 4020, 307, 3, 2, 2, 2, 4021, 4022, 7, 25, 2, 2, 4022,
	4023, 7, 565, 2, 2, 4023, 4024, 7, 415, 2, 2, 4024, 4029, 5, 334, 168,
	2, 4025, 4026, 7, 1100, 2, 2, 4026, 4028, 5, 334, 168, 2, 4027, 4025, 3,
	2, 2, 2, 4028, 4031, 3, 2, 2, 2, 4029, 4027, 3, 2, 2, 2, 4029, 4030, 3,
	2, 2, 2, 4030, 309, 3, 2, 2, 2, 4031, 4029, 3, 2, 2, 2, 4032, 4033, 7,
	128, 2, 2, 4033, 4034, 9, 56, 2, 2, 4034, 4039, 7, 460, 2, 2, 4035, 4036,
	7, 168, 2, 2, 4036, 4040, 7, 1113, 2, 2, 4037, 4038, 7, 16, 2, 2, 4038,
	4040, 7, 1113, 2, 2, 4039, 4035, 3, 2, 2, 2, 4039, 4037, 3, 2, 2, 2, 4040,
	311, 3, 2, 2, 2, 4041, 4042, 7, 566, 2, 2, 4042, 4043, 7, 461, 2, 2, 4043,
	313, 3, 2, 2, 2, 4044, 4045, 7, 566, 2, 2, 4045, 4047, 7, 588, 2, 2, 4046,
	4048, 7, 8, 2, 2, 4047, 4046, 3, 2, 2, 2, 4047, 4048, 3, 2, 2, 2, 4048,
	4050, 3, 2, 2, 2, 4049, 4051, 5, 332, 167, 2, 4050, 4049, 3, 2, 2, 2, 4050,
	4051, 3, 2, 2, 2, 4051, 315, 3, 2, 2, 2, 4052, 4053, 7, 603, 2, 2, 4053,
	4062, 7, 588, 2, 2, 4054, 4059, 5, 338, 170, 2, 4055, 4056, 7, 1100, 2,
	2, 4056, 4058, 5, 338, 170, 2, 4057, 4055, 3, 2, 2, 2, 4058, 4061, 3, 2,
	2, 2, 4059, 4057, 3, 2, 2, 2, 4059, 4060, 3, 2, 2, 2, 4060, 4063, 3, 2,
	2, 2, 4061, 4059, 3, 2, 2, 2, 4062, 4054, 3, 2, 2, 2, 4062, 4063, 3, 2,
	2, 2, 4063, 4066, 3, 2, 2, 2, 4064, 4065, 7, 637, 2, 2, 4065, 4067, 5,
	340, 171, 2, 4066, 4064, 3, 2, 2, 2, 4066, 4067, 3, 2, 2, 2, 4067, 4071,
	3, 2, 2, 2, 4068, 4070, 5, 342, 172, 2, 4069, 4068, 3, 2, 2, 2, 4070, 4073,
	3, 2, 2, 2, 4071, 4069, 3, 2, 2, 2, 4071, 4072, 3, 2, 2, 2, 4072, 4075,
	3, 2, 2, 2, 4073, 4071, 3, 2, 2, 2, 4074, 4076, 5, 332, 167, 2, 4075, 4074,
	3, 2, 2, 2, 4075, 4076, 3, 2, 2, 2, 4076, 317, 3, 2, 2, 2, 4077, 4078,
	7, 609, 2, 2, 4078, 4087, 7, 588, 2, 2, 4079, 4084, 5, 338, 170, 2, 4080,
	4081, 7, 1100, 2, 2, 4081, 4083, 5, 338, 170, 2, 4082, 4080, 3, 2, 2, 2,
	4083, 4086, 3, 2, 2, 2, 4084, 4082, 3, 2, 2, 2, 4084, 4085, 3, 2, 2, 2,
	4085, 4088, 3, 2, 2, 2, 4086, 4084, 3, 2, 2, 2, 4087, 4079, 3, 2, 2, 2,
	4087, 4088, 3, 2, 2, 2, 4088, 319, 3, 2, 2, 2, 4089, 4090, 7, 603, 2, 2,
	4090, 4091, 7, 427, 2, 2, 4091, 321, 3, 2, 2, 2, 4092, 4093, 7, 609, 2,
	2, 4093, 4094, 7, 427, 2, 2, 4094, 323, 3, 2, 2, 2, 4095, 4096, 5, 326,
	164, 2, 4096, 4097, 7, 1089, 2, 2, 4097, 4098, 7, 1113, 2, 2, 4098, 4125,
	3, 2, 2, 2, 4099, 4100, 5, 328, 165, 2, 4100, 4101, 7, 1089, 2, 2, 4101,
	4102, 5, 550, 276, 2, 4102, 4125, 3, 2, 2, 2, 4103, 4104, 5, 330, 166,
	2, 4104, 4105, 7, 1089, 2, 2, 4105, 4106, 9, 26, 2, 2, 4106, 4125, 3, 2,
	2, 2, 4107, 4108, 7, 465, 2, 2, 4108, 4109, 7, 1089, 2, 2, 4109, 4125,
	7, 1116, 2, 2, 4110, 4111, 7, 434, 2, 2, 4111, 4112, 7, 1089, 2, 2, 4112,
	4121, 7, 1098, 2, 2, 4113, 4118, 5, 544, 273, 2, 4114, 4115, 7, 1100, 2,
	2, 4115, 4117, 5, 544, 273, 2, 4116, 4114, 3, 2, 2, 2, 4117, 4120, 3, 2,
	2, 2, 4118, 4116, 3, 2, 2, 2, 4118, 4119, 3, 2, 2, 2, 4119, 4122, 3, 2,
	2, 2, 4120, 4118, 3, 2, 2, 2, 4121, 4113, 3, 2, 2, 2, 4121, 4122, 3, 2,
	2, 2, 4122, 4123, 3, 2, 2, 2, 4123, 4125, 7, 1099, 2, 2, 4124, 4095, 3,
	2, 2, 2, 4124, 4099, 3, 2, 2, 2, 4124, 4103, 3, 2, 2, 2, 4124, 4107, 3,
	2, 2, 2, 4124, 4110, 3, 2, 2, 2, 4125, 325, 3, 2, 2, 2, 4126, 4127, 9,
	57, 2, 2, 4127, 327, 3, 2, 2, 2, 4128, 4129, 9, 58, 2, 2, 4129, 329, 3,
	2, 2, 2, 4130, 4131, 9, 59, 2, 2, 4131, 331, 3, 2, 2, 2, 4132, 4133, 7,
	64, 2, 2, 4133, 4134, 7, 345, 2, 2, 4134, 4135, 7, 1113, 2, 2, 4135, 333,
	3, 2, 2, 2, 4136, 4137, 7, 558, 2, 2, 4137, 4138, 7, 1089, 2, 2, 4138,
	4139, 7, 1098, 2, 2, 4139, 4140, 5, 576, 289, 2, 4140, 4141, 7, 1099, 2,
	2, 4141, 4186, 3, 2, 2, 2, 4142, 4143, 7, 560, 2, 2, 4143, 4144, 7, 1089,
	2, 2, 4144, 4145, 7, 1098, 2, 2, 4145, 4146, 5, 576, 289, 2, 4146, 4147,
	7, 1099, 2, 2, 4147, 4186, 3, 2, 2, 2, 4148, 4149, 7, 559, 2, 2, 4149,
	4150, 7, 1089, 2, 2, 4150, 4151, 7, 1098, 2, 2, 4151, 4152, 5, 578, 290,
	2, 4152, 4153, 7, 1099, 2, 2, 4153, 4186, 3, 2, 2, 2, 4154, 4155, 7, 561,
	2, 2, 4155, 4156, 7, 1089, 2, 2, 4156, 4157, 7, 1098, 2, 2, 4157, 4158,
	5, 578, 290, 2, 4158, 4159, 7, 1099, 2, 2, 4159, 4186, 3, 2, 2, 2, 4160,
	4161, 7, 563, 2, 2, 4161, 4162, 7, 1089, 2, 2, 4162, 4163, 7, 1098, 2,
	2, 4163, 4164, 5, 588, 295, 2, 4164, 4165, 7, 1099, 2, 2, 4165, 4186, 3,
	2, 2, 2, 4166, 4167, 7, 564, 2, 2, 4167, 4168, 7, 1089, 2, 2, 4168, 4169,
	7, 1098, 2, 2, 4169, 4170, 5, 588, 295, 2, 4170, 4171, 7, 1099, 2, 2, 4171,
	4186, 3, 2, 2, 2, 4172, 4173, 7, 562, 2, 2, 4173, 4174, 7, 1089, 2, 2,
	4174, 4175, 7, 1098, 2, 2, 4175, 4180, 5, 336, 169, 2, 4176, 4177, 7, 1100,
	2, 2, 4177, 4179, 5, 336, 169, 2, 4178, 4176, 3, 2, 2, 2, 4179, 4182, 3,
	2, 2, 2, 4180, 4178, 3, 2, 2, 2, 4180, 4181, 3, 2, 2, 2, 4181, 4183, 3,
	2, 2, 2, 4182, 4180, 3, 2, 2, 2, 4183, 4184, 7, 1099, 2, 2, 4184, 4186,
	3, 2, 2, 2, 4185, 4136, 3, 2, 2, 2, 4185, 4142, 3, 2, 2, 2, 4185, 4148,
	3, 2, 2, 2, 4185, 4154, 3, 2, 2, 2, 4185, 4160, 3, 2, 2, 2, 4185, 4166,
	3, 2, 2, 2, 4185, 4172, 3, 2, 2, 2, 4186, 335, 3, 2, 2, 2, 4187, 4188,
	7, 1098, 2, 2, 4188, 4189, 5, 520, 261, 2, 4189, 4190, 7, 1100, 2, 2, 4190,
	4191, 5, 520, 261, 2, 4191, 4192, 7, 1099, 2, 2, 4192, 337, 3, 2, 2, 2,
	4193, 4194, 9, 60, 2, 2, 4194, 339, 3, 2, 2, 2, 4195, 4196, 9, 61, 2, 2,
	4196, 4197, 7, 1089, 2, 2, 4197, 4214, 5, 344, 173, 2, 4198, 4199, 7, 467,
	2, 2, 4199, 4200, 7, 1089, 2, 2, 4200, 4201, 7, 1113, 2, 2, 4201, 4202,
	7, 1100, 2, 2, 4202, 4203, 7, 468, 2, 2, 4203, 4204, 7, 1089, 2, 2, 4204,
	4214, 5, 550, 276, 2, 4205, 4206, 7, 552, 2, 2, 4206, 4207, 7, 1089, 2,
	2, 4207, 4208, 7, 1113, 2, 2, 4208, 4209, 7, 1100, 2, 2, 4209, 4210, 7,
	553, 2, 2, 4210, 4211, 7, 1089, 2, 2, 4211, 4214, 5, 550, 276, 2, 4212,
	4214, 7, 597, 2, 2, 4213, 4195, 3, 2, 2, 2, 4213, 4198, 3, 2, 2, 2, 4213,
	4205, 3, 2, 2, 2, 4213, 4212, 3, 2, 2, 2, 4214, 341, 3, 2, 2, 2, 4215,
	4216, 7, 639, 2, 2, 4216, 4217, 7, 1089, 2, 2, 4217, 4228, 7, 1113, 2,
	2, 4218, 4219, 7, 529, 2, 2, 4219, 4220, 7, 1089, 2, 2, 4220, 4228, 7,
	1113, 2, 2, 4221, 4222, 7, 380, 2, 2, 4222, 4223, 7, 1089, 2, 2, 4223,
	4228, 7, 1113, 2, 2, 4224, 4225, 7, 532, 2, 2, 4225, 4226, 7, 1089, 2,
	2, 4226, 4228, 7, 1113, 2, 2, 4227, 4215, 3, 2, 2, 2, 4227, 4218, 3, 2,
	2, 2, 4227, 4221, 3, 2, 2, 2, 4227, 4224, 3, 2, 2, 2, 4228, 343, 3, 2,
	2, 2, 4229, 4234, 5, 536, 269, 2, 4230, 4231, 7, 1100, 2, 2, 4231, 4233,
	5, 536, 269, 2, 4232, 4230, 3, 2, 2, 2, 4233, 4236, 3, 2, 2, 2, 4234, 4232,
	3, 2, 2, 2, 4234, 4235, 3, 2, 2, 2, 4235, 4239, 3, 2, 2, 2, 4236, 4234,
	3, 2, 2, 2, 4237, 4239, 7, 1113, 2, 2, 4238, 4229, 3, 2, 2, 2, 4238, 4237,
	3, 2, 2, 2, 4239, 345, 3, 2, 2, 2, 4240, 4241, 7, 655, 2, 2, 4241, 4242,
	9, 62, 2, 2, 4242, 4244, 5, 538, 270, 2, 4243, 4245, 9, 63, 2, 2, 4244,
	4243, 3, 2, 2, 2, 4244, 4245, 3, 2, 2, 2, 4245, 347, 3, 2, 2, 2, 4246,
	4247, 7, 655, 2, 2, 4247, 4248, 7, 394, 2, 2, 4248, 4254, 5, 538, 270,
	2, 4249, 4252, 7, 617, 2, 2, 4250, 4251, 7, 64, 2, 2, 4251, 4253, 7, 493,
	2, 2, 4252, 4250, 3, 2, 2, 2, 4252, 4253, 3, 2, 2, 2, 4253, 4255, 3, 2,
	2, 2, 4254, 4249, 3, 2, 2, 2, 4254, 4255, 3, 2, 2, 2, 4255, 349, 3, 2,
	2, 2, 4256, 4257, 7, 655, 2, 2, 4257, 4258, 7, 537, 2, 2, 4258, 4259, 5,
	538, 270, 2, 4259, 351, 3, 2, 2, 2, 4260, 4261, 7, 655, 2, 2, 4261, 4262,
	7, 359, 2, 2, 4262, 4265, 5, 538, 270, 2, 4263, 4264, 7, 516, 2, 2, 4264,
	4266, 7, 530, 2, 2, 4265, 4263, 3, 2, 2, 2, 4265, 4266, 3, 2, 2, 2, 4266,
	353, 3, 2, 2, 2, 4267, 4268, 7, 655, 2, 2, 4268, 4269, 7, 572, 2, 2, 4269,
	4270, 5, 538, 270, 2, 4270, 355, 3, 2, 2, 2, 4271, 4272, 7, 655, 2, 2,
	4272, 4275, 7, 547, 2, 2, 4273, 4274, 7, 33, 2, 2, 4274, 4276, 5, 538,
	270, 2, 4275, 4273, 3, 2, 2, 2, 4275, 4276, 3, 2, 2, 2, 4276, 357, 3, 2,
	2, 2, 4277, 4278, 7, 537, 2, 2, 4278, 4279, 5, 544, 273, 2, 4279, 4282,
	7, 67, 2, 2, 4280, 4283, 7, 1113, 2, 2, 4281, 4283, 7, 1125, 2, 2, 4282,
	4280, 3, 2, 2, 2, 4282, 4281, 3, 2, 2, 2, 4283, 359, 3, 2, 2, 2, 4284,
	4285, 7, 673, 2, 2, 4285, 4288, 5, 544, 273, 2, 4286, 4287, 7, 180, 2,
	2, 4287, 4289, 5, 590, 296, 2, 4288, 4286, 3, 2, 2, 2, 4288, 4289, 3, 2,
	2, 2, 4289, 361, 3, 2, 2, 2, 4290, 4291, 9, 64, 2, 2, 4291, 4292, 7, 537,
	2, 2, 4292, 4293, 5, 544, 273, 2, 4293, 363, 3, 2, 2, 2, 4294, 4297, 5,
	366, 184, 2, 4295, 4297, 5, 6, 4, 2, 4296, 4294, 3, 2, 2, 2, 4296, 4295,
	3, 2, 2, 2, 4297, 365, 3, 2, 2, 2, 4298, 4299, 5, 544, 273, 2, 4299, 4300,
	7, 1109, 2, 2, 4300, 4302, 3, 2, 2, 2, 4301, 4298, 3, 2, 2, 2, 4301, 4302,
	3, 2, 2, 2, 4302, 4303, 3, 2, 2, 2, 4303, 4342, 7, 334, 2, 2, 4304, 4305,
	5, 386, 194, 2, 4305, 4306, 7, 1101, 2, 2, 4306, 4308, 3, 2, 2, 2, 4307,
	4304, 3, 2, 2, 2, 4308, 4311, 3, 2, 2, 2, 4309, 4307, 3, 2, 2, 2, 4309,
	4310, 3, 2, 2, 2, 4310, 4317, 3, 2, 2, 2, 4311, 4309, 3, 2, 2, 2, 4312,
	4313, 5, 388, 195, 2, 4313, 4314, 7, 1101, 2, 2, 4314, 4316, 3, 2, 2, 2,
	4315, 4312, 3, 2, 2, 2, 4316, 4319, 3, 2, 2, 2, 4317, 4315, 3, 2, 2, 2,
	4317, 4318, 3, 2, 2, 2, 4318, 4325, 3, 2, 2, 2, 4319, 4317, 3, 2, 2, 2,
	4320, 4321, 5, 390, 196, 2, 4321, 4322, 7, 1101, 2, 2, 4322, 4324, 3, 2,
	2, 2, 4323, 4320, 3, 2, 2, 2, 4324, 4327, 3, 2, 2, 2, 4325, 4323, 3, 2,
	2, 2, 4325, 4326, 3, 2, 2, 2, 4326, 4333, 3, 2, 2, 2, 4327, 4325, 3, 2,
	2, 2, 4328, 4329, 5, 392, 197, 2, 4329, 4330, 7, 1101, 2, 2, 4330, 4332,
	3, 2, 2, 2, 4331, 4328, 3, 2, 2, 2, 4332, 4335, 3, 2, 2, 2, 4333, 4331,
	3, 2, 2, 2, 4333, 4334, 3, 2, 2, 2, 4334, 4339, 3, 2, 2, 2, 4335, 4333,
	3, 2, 2, 2, 4336, 4338, 5, 396, 199, 2, 4337, 4336, 3, 2, 2, 2, 4338, 4341,
	3, 2, 2, 2, 4339, 4337, 3, 2, 2, 2, 4339, 4340, 3, 2, 2, 2, 4340, 4343,
	3, 2, 2, 2, 4341, 4339, 3, 2, 2, 2, 4342, 4309, 3, 2, 2, 2, 4342, 4343,
	3, 2, 2, 2, 4343, 4344, 3, 2, 2, 2, 4344, 4346, 7, 394, 2, 2, 4345, 4347,
	5, 544, 273, 2, 4346, 4345, 3, 2, 2, 2, 4346, 4347, 3, 2, 2, 2, 4347, 367,
	3, 2, 2, 2, 4348, 4351, 7, 23, 2, 2, 4349, 4352, 5, 544, 273, 2, 4350,
	4352, 5, 642, 322, 2, 4351, 4349, 3, 2, 2, 2, 4351, 4350, 3, 2, 2, 2, 4351,
	4352, 3, 2, 2, 2, 4352, 4354, 3, 2, 2, 2, 4353, 4355, 5, 398, 200, 2, 4354,
	4353, 3, 2, 2, 2, 4355, 4356, 3, 2, 2, 2, 4356, 4354, 3, 2, 2, 2, 4356,
	4357, 3, 2, 2, 2, 4357, 4364, 3, 2, 2, 2, 4358, 4360, 7, 53, 2, 2, 4359,
	4361, 5, 396, 199, 2, 4360, 4359, 3, 2, 2, 2, 4361, 4362, 3, 2, 2, 2, 4362,
	4360, 3, 2, 2, 2, 4362, 4363, 3, 2, 2, 2, 4363, 4365, 3, 2, 2, 2, 4364,
	4358, 3, 2, 2, 2, 4364, 4365, 3, 2, 2, 2, 4365, 4366, 3, 2, 2, 2, 4366,
	4367, 7, 394, 2, 2, 4367, 4368, 7, 23, 2, 2, 4368, 369, 3, 2, 2, 2, 4369,
	4370, 7, 76, 2, 2, 4370, 4371, 5, 642, 322, 2, 4371, 4373, 7, 167, 2, 2,
	4372, 4374, 5, 396, 199, 2, 4373, 4372, 3, 2, 2, 2, 4374, 4375, 3, 2, 2,
	2, 4375, 4373, 3, 2, 2, 2, 4375, 4376, 3, 2, 2, 2, 4376, 4380, 3, 2, 2,
	2, 4377, 4379, 5, 400, 201, 2, 4378, 4377, 3, 2, 2, 2, 4379, 4382, 3, 2,
	2, 2, 4380, 4378, 3, 2, 2, 2, 4380, 4381, 3, 2, 2, 2, 4381, 4389, 3, 2,
	2, 2, 4382, 4380, 3, 2, 2, 2, 4383, 4385, 7, 53, 2, 2, 4384, 4386, 5, 396,
	199, 2, 4385, 4384, 3, 2, 2, 2, 4386, 4387, 3, 2, 2, 2, 4387, 4385, 3,
	2, 2, 2, 4387, 4388, 3, 2, 2, 2, 4388, 4390, 3, 2, 2, 2, 4389, 4383, 3,
	2, 2, 2, 4389, 4390, 3, 2, 2, 2, 4390, 4391, 3, 2, 2, 2, 4391, 4392, 7,
	394, 2, 2, 4392, 4393, 7, 76, 2, 2, 4393, 371, 3, 2, 2, 2, 4394, 4395,
	7, 88, 2, 2, 4395, 4396, 5, 544, 273, 2, 4396, 373, 3, 2, 2, 2, 4397, 4398,
	7, 94, 2, 2, 4398, 4399, 5, 544, 273, 2, 4399, 375, 3, 2, 2, 2, 4400, 4401,
	5, 544, 273, 2, 4401, 4402, 7, 1109, 2, 2, 4402, 4404, 3, 2, 2, 2, 4403,
	4400, 3, 2, 2, 2, 4403, 4404, 3, 2, 2, 2, 4404, 4405, 3, 2, 2, 2, 4405,
	4407, 7, 102, 2, 2, 4406, 4408, 5, 396, 199, 2, 4407, 4406, 3, 2, 2, 2,
	4408, 4409, 3, 2, 2, 2, 4409, 4407, 3, 2, 2, 2, 4409, 4410, 3, 2, 2, 2,
	4410, 4411, 3, 2, 2, 2, 4411, 4412, 7, 394, 2, 2, 4412, 4414, 7, 102, 2,
	2, 4413, 4415, 5, 544, 273, 2, 4414, 4413, 3, 2, 2, 2, 4414, 4415, 3, 2,
	2, 2, 4415, 377, 3, 2, 2, 2, 4416, 4417, 5, 544, 273, 2, 4417, 4418, 7,
	1109, 2, 2, 4418, 4420, 3, 2, 2, 2, 4419, 4416, 3, 2, 2, 2, 4419, 4420,
	3, 2, 2, 2, 4420, 4421, 3, 2, 2, 2, 4421, 4423, 7, 136, 2, 2, 4422, 4424,
	5, 396, 199, 2, 4423, 4422, 3, 2, 2, 2, 4424, 4425, 3, 2, 2, 2, 4425, 4423,
	3, 2, 2, 2, 4425, 4426, 3, 2, 2, 2, 4426, 4427, 3, 2, 2, 2, 4427, 4428,
	7, 637, 2, 2, 4428, 4429, 5, 642, 322, 2, 4429, 4430, 7, 394, 2, 2, 4430,
	4432, 7, 136, 2, 2, 4431, 4433, 5, 544, 273, 2, 4432, 4431, 3, 2, 2, 2,
	4432, 4433, 3, 2, 2, 2, 4433, 379, 3, 2, 2, 2, 4434, 4435, 7, 142, 2, 2,
	4435, 4436, 5, 642, 322, 2, 4436, 381, 3, 2, 2, 2, 4437, 4438, 5, 544,
	273, 2, 4438, 4439, 7, 1109, 2, 2, 4439, 4441, 3, 2, 2, 2, 4440, 4437,
	3, 2, 2, 2, 4440, 4441, 3, 2, 2, 2, 4441, 4442, 3, 2, 2, 2, 4442, 4443,
	7, 184, 2, 2, 4443, 4444, 5, 642, 322, 2, 4444, 4446, 7, 388, 2, 2, 4445,
	4447, 5, 396, 199, 2, 4446, 4445, 3, 2, 2, 2, 4447, 4448, 3, 2, 2, 2, 4448,
	4446, 3, 2, 2, 2, 4448, 4449, 3, 2, 2, 2, 4449, 4450, 3, 2, 2, 2, 4450,
	4451, 7, 394, 2, 2, 4451, 4453, 7, 184, 2, 2, 4452, 4454, 5, 544, 273,
	2, 4453, 4452, 3, 2, 2, 2, 4453, 4454, 3, 2, 2, 2, 4454, 383, 3, 2, 2,
	2, 4455, 4456, 7, 351, 2, 2, 4456, 4471, 5, 544, 273, 2, 4457, 4462, 7,
	63, 2, 2, 4458, 4460, 7, 504, 2, 2, 4459, 4458, 3, 2, 2, 2, 4459, 4460,
	3, 2, 2, 2, 4460, 4461, 3, 2, 2, 2, 4461, 4463, 7, 67, 2, 2, 4462, 4459,
	3, 2, 2, 2, 4462, 4463, 3, 2, 2, 2, 4463, 4464, 3, 2, 2, 2, 4464, 4465,
	5, 544, 273, 2, 4465, 4466, 7, 86, 2, 2, 4466, 4467, 5, 576, 289, 2, 4467,
	4471, 3, 2, 2, 2, 4468, 4469, 7, 519, 2, 2, 4469, 4471, 5, 544, 273, 2,
	4470, 4455, 3, 2, 2, 2, 4470, 4457, 3, 2, 2, 2, 4470, 4468, 3, 2, 2, 2,
	4471, 385, 3, 2, 2, 2, 4472, 4473, 7, 41, 2, 2, 4473, 4474, 5, 576, 289,
	2, 4474, 4477, 5, 564, 283, 2, 4475, 4476, 7, 42, 2, 2, 4476, 4478, 5,
	642, 322, 2, 4477, 4475, 3, 2, 2, 2, 4477, 4478, 3, 2, 2, 2, 4478, 387,
	3, 2, 2, 2, 4479, 4480, 7, 41, 2, 2, 4480, 4481, 5, 544, 273, 2, 4481,
	4482, 7, 30, 2, 2, 4482, 4489, 7, 64, 2, 2, 4483, 4490, 5, 550, 276, 2,
	4484, 4486, 7, 156, 2, 2, 4485, 4487, 7, 643, 2, 2, 4486, 4485, 3, 2, 2,
	2, 4486, 4487, 3, 2, 2, 2, 4487, 4488, 3, 2, 2, 2, 4488, 4490, 7, 1113,
	2, 2, 4489, 4483, 3, 2, 2, 2, 4489, 4484, 3, 2, 2, 2, 4490, 389, 3, 2,
	2, 2, 4491, 4492, 7, 41, 2, 2, 4492, 4493, 5, 544, 273, 2, 4493, 4494,
	7, 38, 2, 2, 4494, 4495, 7, 64, 2, 2, 4495, 4496, 5, 192, 97, 2, 4496,
	391, 3, 2, 2, 2, 4497, 4498, 7, 41, 2, 2, 4498, 4499, 9, 65, 2, 2, 4499,
	4500, 7, 428, 2, 2, 4500, 4501, 7, 64, 2, 2, 4501, 4506, 5, 394, 198, 2,
	4502, 4503, 7, 1100, 2, 2, 4503, 4505, 5, 394, 198, 2, 4504, 4502, 3, 2,
	2, 2, 4505, 4508, 3, 2, 2, 2, 4506, 4504, 3, 2, 2, 2, 4506, 4507, 3, 2,
	2, 2, 4507, 4509, 3, 2, 2, 2, 4508, 4506, 3, 2, 2, 2, 4509, 4510, 5, 364,
	183, 2, 4510, 393, 3, 2, 2, 2, 4511, 4523, 5, 550, 276, 2, 4512, 4514,
	7, 156, 2, 2, 4513, 4515, 7, 643, 2, 2, 4514, 4513, 3, 2, 2, 2, 4514, 4515,
	3, 2, 2, 2, 4515, 4516, 3, 2, 2, 2, 4516, 4523, 7, 1113, 2, 2, 4517, 4523,
	5, 544, 273, 2, 4518, 4523, 7, 157, 2, 2, 4519, 4520, 7, 110, 2, 2, 4520,
	4523, 7, 421, 2, 2, 4521, 4523, 7, 155, 2, 2, 4522, 4511, 3, 2, 2, 2, 4522,
	4512, 3, 2, 2, 2, 4522, 4517, 3, 2, 2, 2, 4522, 4518, 3, 2, 2, 2, 4522,
	4519, 3, 2, 2, 2, 4522, 4521, 3, 2, 2, 2, 4523, 395, 3, 2, 2, 2, 4524,
	4527, 5, 20, 11, 2, 4525, 4527, 5, 6, 4, 2, 4526, 4524, 3, 2, 2, 2, 4526,
	4525, 3, 2, 2, 2, 4527, 4528, 3, 2, 2, 2, 4528, 4529, 7, 1101, 2, 2, 4529,
	397, 3, 2, 2, 2, 4530, 4533, 7, 182, 2, 2, 4531, 4534, 5, 562, 282, 2,
	4532, 4534, 5, 642, 322, 2, 4533, 4531, 3, 2, 2, 2, 4533, 4532, 3, 2, 2,
	2, 4534, 4535, 3, 2, 2, 2, 4535, 4537, 7, 167, 2, 2, 4536, 4538, 5, 396,
	199, 2, 4537, 4536, 3, 2, 2, 2, 4538, 4539, 3, 2, 2, 2, 4539, 4537, 3,
	2, 2, 2, 4539, 4540, 3, 2, 2, 2, 4540, 399, 3, 2, 2, 2, 4541, 4542, 7,
	54, 2, 2, 4542, 4543, 5, 642, 322, 2, 4543, 4545, 7, 167, 2, 2, 4544, 4546,
	5, 396, 199, 2, 4545, 4544, 3, 2, 2, 2, 4546, 4547, 3, 2, 2, 2, 4547, 4545,
	3, 2, 2, 2, 4547, 4548, 3, 2, 2, 2, 4548, 401, 3, 2, 2, 2, 4549, 4550,
	7, 9, 2, 2, 4550, 4551, 7, 639, 2, 2, 4551, 4556, 5, 422, 212, 2, 4552,
	4553, 7, 1100, 2, 2, 4553, 4555, 5, 422, 212, 2, 4554, 4552, 3, 2, 2, 2,
	4555, 4558, 3, 2, 2, 2, 4556, 4554, 3, 2, 2, 2, 4556, 4557, 3, 2, 2, 2,
	4557, 4604, 3, 2, 2, 2, 4558, 4556, 3, 2, 2, 2, 4559, 4560, 7, 9, 2, 2,
	4560, 4562, 7, 639, 2, 2, 4561, 4563, 5, 598, 300, 2, 4562, 4561, 3, 2,
	2, 2, 4562, 4563, 3, 2, 2, 2, 4563, 4564, 3, 2, 2, 2, 4564, 4569, 5, 424,
	213, 2, 4565, 4566, 7, 1100, 2, 2, 4566, 4568, 5, 424, 213, 2, 4567, 4565,
	3, 2, 2, 2, 4568, 4571, 3, 2, 2, 2, 4569, 4567, 3, 2, 2, 2, 4569, 4570,
	3, 2, 2, 2, 4570, 4586, 3, 2, 2, 2, 4571, 4569, 3, 2, 2, 2, 4572, 4584,
	7, 138, 2, 2, 4573, 4585, 7, 509, 2, 2, 4574, 4581, 5, 426, 214, 2, 4575,
	4577, 7, 12, 2, 2, 4576, 4575, 3, 2, 2, 2, 4576, 4577, 3, 2, 2, 2, 4577,
	4578, 3, 2, 2, 2, 4578, 4580, 5, 426, 214, 2, 4579, 4576, 3, 2, 2, 2, 4580,
	4583, 3, 2, 2, 2, 4581, 4579, 3, 2, 2, 2, 4581, 4582, 3, 2, 2, 2, 4582,
	4585, 3, 2, 2, 2, 4583, 4581, 3, 2, 2, 2, 4584, 4573, 3, 2, 2, 2, 4584,
	4574, 3, 2, 2, 2, 4585, 4587, 3, 2, 2, 2, 4586, 4572, 3, 2, 2, 2, 4586,
	4587, 3, 2, 2, 2, 4587, 4594, 3, 2, 2, 2, 4588, 4590, 7, 185, 2, 2, 4589,
	4591, 5, 428, 215, 2, 4590, 4589, 3, 2, 2, 2, 4591, 4592, 3, 2, 2, 2, 4592,
	4590, 3, 2, 2, 2, 4592, 4593, 3, 2, 2, 2, 4593, 4595, 3, 2, 2, 2, 4594,
	4588, 3, 2, 2, 2, 4594, 4595, 3, 2, 2, 2, 4595, 4600, 3, 2, 2, 2, 4596,
	4599, 5, 430, 216, 2, 4597, 4599, 5, 432, 217, 2, 4598, 4596, 3, 2, 2,
	2, 4598, 4597, 3, 2, 2, 2, 4599, 4602, 3, 2, 2, 2, 4600, 4598, 3, 2, 2,
	2, 4600, 4601, 3, 2, 2, 2, 4601, 4604, 3, 2, 2, 2, 4602, 4600, 3, 2, 2,
	2, 4603, 4549, 3, 2, 2, 2, 4603, 4559, 3, 2, 2, 2, 4604, 403, 3, 2, 2,
	2, 4605, 4606, 7, 34, 2, 2, 4606, 4607, 7, 639, 2, 2, 4607, 4612, 5, 424,
	213, 2, 4608, 4609, 7, 1100, 2, 2, 4609, 4611, 5, 424, 213, 2, 4610, 4608,
	3, 2, 2, 2, 4611, 4614, 3, 2, 2, 2, 4612, 4610, 3, 2, 2, 2, 4612, 4613,
	3, 2, 2, 2, 4613, 4660, 3, 2, 2, 2, 4614, 4612, 3, 2, 2, 2, 4615, 4616,
	7, 34, 2, 2, 4616, 4618, 7, 639, 2, 2, 4617, 4619, 5, 600, 301, 2, 4618,
	4617, 3, 2, 2, 2, 4618, 4619, 3, 2, 2, 2, 4619, 4620, 3, 2, 2, 2, 4620,
	4625, 5, 424, 213, 2, 4621, 4622, 7, 1100, 2, 2, 4622, 4624, 5, 424, 213,
	2, 4623, 4621, 3, 2, 2, 2, 4624, 4627, 3, 2, 2, 2, 4625, 4623, 3, 2, 2,
	2, 4625, 4626, 3, 2, 2, 2, 4626, 4642, 3, 2, 2, 2, 4627, 4625, 3, 2, 2,
	2, 4628, 4640, 7, 138, 2, 2, 4629, 4641, 7, 509, 2, 2, 4630, 4637, 5, 426,
	214, 2, 4631, 4633, 7, 12, 2, 2, 4632, 4631, 3, 2, 2, 2, 4632, 4633, 3,
	2, 2, 2, 4633, 4634, 3, 2, 2, 2, 4634, 4636, 5, 426, 214, 2, 4635, 4632,
	3, 2, 2, 2, 4636, 4639, 3, 2, 2, 2, 4637, 4635, 3, 2, 2, 2, 4637, 4638,
	3, 2, 2, 2, 4638, 4641, 3, 2, 2, 2, 4639, 4637, 3, 2, 2, 2, 4640, 4629,
	3, 2, 2, 2, 4640, 4630, 3, 2, 2, 2, 4641, 4643, 3, 2, 2, 2, 4642, 4628,
	3, 2, 2, 2, 4642, 4643, 3, 2, 2, 2, 4643, 4650, 3, 2, 2, 2, 4644, 4646,
	7, 185, 2, 2, 4645, 4647, 5, 428, 215, 2, 4646, 4645, 3, 2, 2, 2, 4647,
	4648, 3, 2, 2, 2, 4648, 4646, 3, 2, 2, 2, 4648, 4649, 3, 2, 2, 2, 4649,
	4651, 3, 2, 2, 2, 4650, 4644, 3, 2, 2, 2, 4650, 4651, 3, 2, 2, 2, 4651,
	4656, 3, 2, 2, 2, 4652, 4655, 5, 430, 216, 2, 4653, 4655, 5, 432, 217,
	2, 4654, 4652, 3, 2, 2, 2, 4654, 4653, 3, 2, 2, 2, 4655, 4658, 3, 2, 2,
	2, 4656, 4654, 3, 2, 2, 2, 4656, 4657, 3, 2, 2, 2, 4657, 4660, 3, 2, 2,
	2, 4658, 4656, 3, 2, 2, 2, 4659, 4605, 3, 2, 2, 2, 4659, 4615, 3, 2, 2,
	2, 4660, 405, 3, 2, 2, 2, 4661, 4662, 7, 51, 2, 2, 4662, 4664, 7, 639,
	2, 2, 4663, 4665, 5, 598, 300, 2, 4664, 4663, 3, 2, 2, 2, 4664, 4665, 3,
	2, 2, 2, 4665, 4666, 3, 2, 2, 2, 4666, 4671, 5, 526, 264, 2, 4667, 4668,
	7, 1100, 2, 2, 4668, 4670, 5, 526, 264, 2, 4669, 4667, 3, 2, 2, 2, 4670,
	4673, 3, 2, 2, 2, 4671, 4669, 3, 2, 2, 2, 4671, 4672, 3, 2, 2, 2, 4672,
	407, 3, 2, 2, 2, 4673, 4671, 3, 2, 2, 2, 4674, 4675, 7, 71, 2, 2, 4675,
	4680, 5, 434, 218, 2, 4676, 4677, 7, 1100, 2, 2, 4677, 4679, 5, 434, 218,
	2, 4678, 4676, 3, 2, 2, 2, 4679, 4682, 3, 2, 2, 2, 4680, 4678, 3, 2, 2,
	2, 4680, 4681, 3, 2, 2, 2, 4681, 4683, 3, 2, 2, 2, 4682, 4680, 3, 2, 2,
	2, 4683, 4685, 7, 114, 2, 2, 4684, 4686, 9, 66, 2, 2, 4685, 4684, 3, 2,
	2, 2, 4685, 4686, 3, 2, 2, 2, 4686, 4687, 3, 2, 2, 2, 4687, 4688, 5, 438,
	220, 2, 4688, 4689, 7, 168, 2, 2, 4689, 4694, 5, 424, 213, 2, 4690, 4691,
	7, 1100, 2, 2, 4691, 4693, 5, 424, 213, 2, 4692, 4690, 3, 2, 2, 2, 4693,
	4696, 3, 2, 2, 2, 4694, 4692, 3, 2, 2, 2, 4694, 4695, 3, 2, 2, 2, 4695,
	4711, 3, 2, 2, 2, 4696, 4694, 3, 2, 2, 2, 4697, 4709, 7, 138, 2, 2, 4698,
	4710, 7, 509, 2, 2, 4699, 4706, 5, 426, 214, 2, 4700, 4702, 7, 12, 2, 2,
	4701, 4700, 3, 2, 2, 2, 4701, 4702, 3, 2, 2, 2, 4702, 4703, 3, 2, 2, 2,
	4703, 4705, 5, 426, 214, 2, 4704, 4701, 3, 2, 2, 2, 4705, 4708, 3, 2, 2,
	2, 4706, 4704, 3, 2, 2, 2, 4706, 4707, 3, 2, 2, 2, 4707, 4710, 3, 2, 2,
	2, 4708, 4706, 3, 2, 2, 2, 4709, 4698, 3, 2, 2, 2, 4709, 4699, 3, 2, 2,
	2, 4710, 4712, 3, 2, 2, 2, 4711, 4697, 3, 2, 2, 2, 4711, 4712, 3, 2, 2,
	2, 4712, 4722, 3, 2, 2, 2, 4713, 4719, 7, 185, 2, 2, 4714, 4715, 7, 71,
	2, 2, 4715, 4718, 7, 116, 2, 2, 4716, 4718, 5, 428, 215, 2, 4717, 4714,
	3, 2, 2, 2, 4717, 4716, 3, 2, 2, 2, 4718, 4721, 3, 2, 2, 2, 4719, 4717,
	3, 2, 2, 2, 4719, 4720, 3, 2, 2, 2, 4720, 4723, 3, 2, 2, 2, 4721, 4719,
	3, 2, 2, 2, 4722, 4713, 3, 2, 2, 2, 4722, 4723, 3, 2, 2, 2, 4723, 4730,
	3, 2, 2, 2, 4724, 4725, 7, 14, 2, 2, 4725, 4726, 5, 526, 264, 2, 4726,
	4727, 7, 185, 2, 2, 4727, 4728, 7, 571, 2, 2, 4728, 4729, 5, 410, 206,
	2, 4729, 4731, 3, 2, 2, 2, 4730, 4724, 3, 2, 2, 2, 4730, 4731, 3, 2, 2,
	2, 4731, 4768, 3, 2, 2, 2, 4732, 4735, 7, 71, 2, 2, 4733, 4736, 5, 526,
	264, 2, 4734, 4736, 5, 544, 273, 2, 4735, 4733, 3, 2, 2, 2, 4735, 4734,
	3, 2, 2, 2, 4736, 4744, 3, 2, 2, 2, 4737, 4740, 7, 1100, 2, 2, 4738, 4741,
	5, 526, 264, 2, 4739, 4741, 5, 544, 273, 2, 4740, 4738, 3, 2, 2, 2, 4740,
	4739, 3, 2, 2, 2, 4741, 4743, 3, 2, 2, 2, 4742, 4737, 3, 2, 2, 2, 4743,
	4746, 3, 2, 2, 2, 4744, 4742, 3, 2, 2, 2, 4744, 4745, 3, 2, 2, 2, 4745,
	4747, 3, 2, 2, 2, 4746, 4744, 3, 2, 2, 2, 4747, 4750, 7, 168, 2, 2, 4748,
	4751, 5, 526, 264, 2, 4749, 4751, 5, 544, 273, 2, 4750, 4748, 3, 2, 2,
	2, 4750, 4749, 3, 2, 2, 2, 4751, 4759, 3, 2, 2, 2, 4752, 4755, 7, 1100,
	2, 2, 4753, 4756, 5, 526, 264, 2, 4754, 4756, 5, 544, 273, 2, 4755, 4753,
	3, 2, 2, 2, 4755, 4754, 3, 2, 2, 2, 4756, 4758, 3, 2, 2, 2, 4757, 4752,
	3, 2, 2, 2, 4758, 4761, 3, 2, 2, 2, 4759, 4757, 3, 2, 2, 2, 4759, 4760,
	3, 2, 2, 2, 4760, 4765, 3, 2, 2, 2, 4761, 4759, 3, 2, 2, 2, 4762, 4763,
	7, 185, 2, 2, 4763, 4764, 7, 694, 2, 2, 4764, 4766, 7, 116, 2, 2, 4765,
	4762, 3, 2, 2, 2, 4765, 4766, 3, 2, 2, 2, 4766, 4768, 3, 2, 2, 2, 4767,
	4674, 3, 2, 2, 2, 4767, 4732, 3, 2, 2, 2, 4768, 409, 3, 2, 2, 2, 4769,
	4792, 7, 42, 2, 2, 4770, 4792, 7, 509, 2, 2, 4771, 4781, 7, 8, 2, 2, 4772,
	4773, 7, 58, 2, 2, 4773, 4778, 5, 526, 264, 2, 4774, 4775, 7, 1100, 2,
	2, 4775, 4777, 5, 526, 264, 2, 4776, 4774, 3, 2, 2, 2, 4777, 4780, 3, 2,
	2, 2, 4778, 4776, 3, 2, 2, 2, 4778, 4779, 3, 2, 2, 2, 4779, 4782, 3, 2,
	2, 2, 4780, 4778, 3, 2, 2, 2, 4781, 4772, 3, 2, 2, 2, 4781, 4782, 3, 2,
	2, 2, 4782, 4792, 3, 2, 2, 2, 4783, 4788, 5, 526, 264, 2, 4784, 4785, 7,
	1100, 2, 2, 4785, 4787, 5, 526, 264, 2, 4786, 4784, 3, 2, 2, 2, 4787, 4790,
	3, 2, 2, 2, 4788, 4786, 3, 2, 2, 2, 4788, 4789, 3, 2, 2, 2, 4789, 4792,
	3, 2, 2, 2, 4790, 4788, 3, 2, 2, 2, 4791, 4769, 3, 2, 2, 2, 4791, 4770,
	3, 2, 2, 2, 4791, 4771, 3, 2, 2, 2, 4791, 4783, 3, 2, 2, 2, 4792, 411,
	3, 2, 2, 2, 4793, 4794, 7, 71, 2, 2, 4794, 4795, 7, 543, 2, 2, 4795, 4796,
	7, 114, 2, 2, 4796, 4797, 5, 526, 264, 2, 4797, 4798, 7, 168, 2, 2, 4798,
	4803, 5, 526, 264, 2, 4799, 4800, 7, 1100, 2, 2, 4800, 4802, 5, 526, 264,
	2, 4801, 4799, 3, 2, 2, 2, 4802, 4805, 3, 2, 2, 2, 4803, 4801, 3, 2, 2,
	2, 4803, 4804, 3, 2, 2, 2, 4804, 4809, 3, 2, 2, 2, 4805, 4803, 3, 2, 2,
	2, 4806, 4807, 7, 185, 2, 2, 4807, 4808, 7, 71, 2, 2, 4808, 4810, 7, 116,
	2, 2, 4809, 4806, 3, 2, 2, 2, 4809, 4810, 3, 2, 2, 2, 4810, 413, 3, 2,
	2, 2, 4811, 4812, 7, 135, 2, 2, 4812, 4813, 7, 639, 2, 2, 4813, 4818, 5,
	440, 221, 2, 4814, 4815, 7, 1100, 2, 2, 4815, 4817, 5, 440, 221, 2, 4816,
	4814, 3, 2, 2, 2, 4817, 4820, 3, 2, 2, 2, 4818, 4816, 3, 2, 2, 2, 4818,
	4819, 3, 2, 2, 2, 4819, 415, 3, 2, 2, 2, 4820, 4818, 3, 2, 2, 2, 4821,
	4822, 7, 143, 2, 2, 4822, 4827, 5, 434, 218, 2, 4823, 4824, 7, 1100, 2,
	2, 4824, 4826, 5, 434, 218, 2, 4825, 4823, 3, 2, 2, 2, 4826, 4829, 3, 2,
	2, 2, 4827, 4825, 3, 2, 2, 2, 4827, 4828, 3, 2, 2, 2, 4828, 4830, 3, 2,
	2, 2, 4829, 4827, 3, 2, 2, 2, 4830, 4832, 7, 114, 2, 2, 4831, 4833, 9,
	66, 2, 2, 4832, 4831, 3, 2, 2, 2, 4832, 4833, 3, 2, 2, 2, 4833, 4834, 3,
	2, 2, 2, 4834, 4835, 5, 438, 220, 2, 4835, 4836, 7, 67, 2, 2, 4836, 4841,
	5, 526, 264, 2, 4837, 4838, 7, 1100, 2, 2, 4838, 4840, 5, 526, 264, 2,
	4839, 4837, 3, 2, 2, 2, 4840, 4843, 3, 2, 2, 2, 4841, 4839, 3, 2, 2, 2,
	4841, 4842, 3, 2, 2, 2, 4842, 4886, 3, 2, 2, 2, 4843, 4841, 3, 2, 2, 2,
	4844, 4845, 7, 143, 2, 2, 4845, 4847, 7, 8, 2, 2, 4846, 4848, 7, 679, 2,
	2, 4847, 4846, 3, 2, 2, 2, 4847, 4848, 3, 2, 2, 2, 4848, 4849, 3, 2, 2,
	2, 4849, 4850, 7, 1100, 2, 2, 4850, 4851, 7, 71, 2, 2, 4851, 4852, 7, 116,
	2, 2, 4852, 4853, 7, 67, 2, 2, 4853, 4858, 5, 526, 264, 2, 4854, 4855,
	7, 1100, 2, 2, 4855, 4857, 5, 526, 264, 2, 4856, 4854, 3, 2, 2, 2, 4857,
	4860, 3, 2, 2, 2, 4858, 4856, 3, 2, 2, 2, 4858, 4859, 3, 2, 2, 2, 4859,
	4886, 3, 2, 2, 2, 4860, 4858, 3, 2, 2, 2, 4861, 4862, 7, 143, 2, 2, 4862,
	4867, 5, 544, 273, 2, 4863, 4864, 7, 1100, 2, 2, 4864, 4866, 5, 544, 273,
	2, 4865, 4863, 3, 2, 2, 2, 4866, 4869, 3, 2, 2, 2, 4867, 4865, 3, 2, 2,
	2, 4867, 4868, 3, 2, 2, 2, 4868, 4870, 3, 2, 2, 2, 4869, 4867, 3, 2, 2,
	2, 4870, 4873, 7, 67, 2, 2, 4871, 4874, 5, 526, 264, 2, 4872, 4874, 5,
	544, 273, 2, 4873, 4871, 3, 2, 2, 2, 4873, 4872, 3, 2, 2, 2, 4874, 4882,
	3, 2, 2, 2, 4875, 4878, 7, 1100, 2, 2, 4876, 4879, 5, 526, 264, 2, 4877,
	4879, 5, 544, 273, 2, 4878, 4876, 3, 2, 2, 2, 4878, 4877, 3, 2, 2, 2, 4879,
	4881, 3, 2, 2, 2, 4880, 4875, 3, 2, 2, 2, 4881, 4884, 3, 2, 2, 2, 4882,
	4880, 3, 2, 2, 2, 4882, 4883, 3, 2, 2, 2, 4883, 4886, 3, 2, 2, 2, 4884,
	4882, 3, 2, 2, 2, 4885, 4821, 3, 2, 2, 2, 4885, 4844, 3, 2, 2, 2, 4885,
	4861, 3, 2, 2, 2, 4886, 417, 3, 2, 2, 2, 4887, 4888, 7, 143, 2, 2, 4888,
	4889, 7, 543, 2, 2, 4889, 4890, 7, 114, 2, 2, 4890, 4891, 5, 526, 264,
	2, 4891, 4892, 7, 67, 2, 2, 4892, 4897, 5, 526, 264, 2, 4893, 4894, 7,
	1100, 2, 2, 4894, 4896, 5, 526, 264, 2, 4895, 4893, 3, 2, 2, 2, 4896, 4899,
	3, 2, 2, 2, 4897, 4895, 3, 2, 2, 2, 4897, 4898, 3, 2, 2, 2, 4898, 419,
	3, 2, 2, 2, 4899, 4897, 3, 2, 2, 2, 4900, 4901, 7, 149, 2, 2, 4901, 4904,
	7, 529, 2, 2, 4902, 4903, 7, 64, 2, 2, 4903, 4905, 5, 526, 264, 2, 4904,
	4902, 3, 2, 2, 2, 4904, 4905, 3, 2, 2, 2, 4905, 4906, 3, 2, 2, 2, 4906,
	4909, 7, 1089, 2, 2, 4907, 4910, 5, 636, 319, 2, 4908, 4910, 7, 1113, 2,
	2, 4909, 4907, 3, 2, 2, 2, 4909, 4908, 3, 2, 2, 2, 4910, 421, 3, 2, 2,
	2, 4911, 4912, 5, 526, 264, 2, 4912, 4913, 5, 430, 216, 2, 4913, 423, 3,
	2, 2, 2, 4914, 4915, 5, 526, 264, 2, 4915, 4916, 7, 433, 2, 2, 4916, 4917,
	7, 20, 2, 2, 4917, 4918, 7, 529, 2, 2, 4918, 4919, 7, 1113, 2, 2, 4919,
	4943, 3, 2, 2, 2, 4920, 4921, 5, 526, 264, 2, 4921, 4924, 7, 433, 2, 2,
	4922, 4923, 7, 185, 2, 2, 4923, 4925, 5, 542, 272, 2, 4924, 4922, 3, 2,
	2, 2, 4924, 4925, 3, 2, 2, 2, 4925, 4926, 3, 2, 2, 2, 4926, 4927, 7, 20,
	2, 2, 4927, 4931, 7, 1113, 2, 2, 4928, 4929, 7, 141, 2, 2, 4929, 4930,
	7, 36, 2, 2, 4930, 4932, 7, 529, 2, 2, 4931, 4928, 3, 2, 2, 2, 4931, 4932,
	3, 2, 2, 2, 4932, 4943, 3, 2, 2, 2, 4933, 4934, 5, 526, 264, 2, 4934, 4935,
	7, 433, 2, 2, 4935, 4936, 7, 185, 2, 2, 4936, 4939, 5, 542, 272, 2, 4937,
	4938, 7, 14, 2, 2, 4938, 4940, 7, 1113, 2, 2, 4939, 4937, 3, 2, 2, 2, 4939,
	4940, 3, 2, 2, 2, 4940, 4943, 3, 2, 2, 2, 4941, 4943, 5, 526, 264, 2, 4942,
	4914, 3, 2, 2, 2, 4942, 4920, 3, 2, 2, 2, 4942, 4933, 3, 2, 2, 2, 4942,
	4941, 3, 2, 2, 2, 4943, 425, 3, 2, 2, 2, 4944, 4953, 7, 161, 2, 2, 4945,
	4953, 7, 654, 2, 2, 4946, 4947, 7, 348, 2, 2, 4947, 4953, 7, 1113, 2, 2,
	4948, 4949, 7, 449, 2, 2, 4949, 4953, 7, 1113, 2, 2, 4950, 4951, 7, 614,
	2, 2, 4951, 4953, 7, 1113, 2, 2, 4952, 4944, 3, 2, 2, 2, 4952, 4945, 3,
	2, 2, 2, 4952, 4946, 3, 2, 2, 2, 4952, 4948, 3, 2, 2, 2, 4952, 4950, 3,
	2, 2, 2, 4953, 427, 3, 2, 2, 2, 4954, 4955, 7, 483, 2, 2, 4955, 4963, 5,
	550, 276, 2, 4956, 4957, 7, 486, 2, 2, 4957, 4963, 5, 550, 276, 2, 4958,
	4959, 7, 482, 2, 2, 4959, 4963, 5, 550, 276, 2, 4960, 4961, 7, 487, 2,
	2, 4961, 4963, 5, 550, 276, 2, 4962, 4954, 3, 2, 2, 2, 4962, 4956, 3, 2,
	2, 2, 4962, 4958, 3, 2, 2, 2, 4962, 4960, 3, 2, 2, 2, 4963, 429, 3, 2,
	2, 2, 4964, 4965, 7, 529, 2, 2, 4965, 4972, 7, 407, 2, 2, 4966, 4973, 7,
	42, 2, 2, 4967, 4973, 7, 503, 2, 2, 4968, 4969, 7, 85, 2, 2, 4969, 4970,
	5, 550, 276, 2, 4970, 4971, 7, 665, 2, 2, 4971, 4973, 3, 2, 2, 2, 4972,
	4966, 3, 2, 2, 2, 4972, 4967, 3, 2, 2, 2, 4972, 4968, 3, 2, 2, 2, 4972,
	4973, 3, 2, 2, 2, 4973, 431, 3, 2, 2, 2, 4974, 4975, 7, 322, 2, 2, 4975,
	4976, 9, 67, 2, 2, 4976, 433, 3, 2, 2, 2, 4977, 4982, 5, 436, 219, 2, 4978,
	4979, 7, 1098, 2, 2, 4979, 4980, 5, 576, 289, 2, 4980, 4981, 7, 1099, 2,
	2, 4981, 4983, 3, 2, 2, 2, 4982, 4978, 3, 2, 2, 2, 4982, 4983, 3, 2, 2,
	2, 4983, 435, 3, 2, 2, 2, 4984, 4986, 7, 8, 2, 2, 4985, 4987, 7, 679, 2,
	2, 4986, 4985, 3, 2, 2, 2, 4986, 4987, 3, 2, 2, 2, 4987, 5064, 3, 2, 2,
	2, 4988, 4990, 7, 9, 2, 2, 4989, 4991, 7, 672, 2, 2, 4990, 4989, 3, 2,
	2, 2, 4990, 4991, 3, 2, 2, 2, 4991, 5064, 3, 2, 2, 2, 4992, 5000, 7, 34,
	2, 2, 4993, 4994, 7, 623, 2, 2, 4994, 5001, 7, 671, 2, 2, 4995, 5001, 7,
	672, 2, 2, 4996, 5001, 7, 645, 2, 2, 4997, 5001, 7, 639, 2, 2, 4998, 5001,
	7, 621, 2, 2, 4999, 5001, 7, 571, 2, 2, 5000, 4993, 3, 2, 2, 2, 5000, 4995,
	3, 2, 2, 2, 5000, 4996, 3, 2, 2, 2, 5000, 4997, 3, 2, 2, 2, 5000, 4998,
	3, 2, 2, 2, 5000, 4999, 3, 2, 2, 2, 5000, 5001, 3, 2, 2, 2, 5001, 5064,
	3, 2, 2, 2, 5002, 5064, 7, 44, 2, 2, 5003, 5005, 7, 51, 2, 2, 5004, 5006,
	7, 571, 2, 2, 5005, 5004, 3, 2, 2, 2, 5005, 5006, 3, 2, 2, 2, 5006, 5064,
	3, 2, 2, 2, 5007, 5064, 7, 402, 2, 2, 5008, 5064, 7, 673, 2, 2, 5009, 5064,
	7, 674, 2, 2, 5010, 5011, 7, 71, 2, 2, 5011, 5064, 7, 116, 2, 2, 5012,
	5064, 7, 80, 2, 2, 5013, 5064, 7, 84, 2, 2, 5014, 5015, 7, 101, 2, 2, 5015,
	5064, 7, 671, 2, 2, 5016, 5064, 7, 675, 2, 2, 5017, 5064, 7, 543, 2, 2,
	5018, 5064, 7, 132, 2, 2, 5019, 5064, 7, 676, 2, 2, 5020, 5021, 7, 565,
	2, 2, 5021, 5064, 9, 68, 2, 2, 5022, 5064, 7, 148, 2, 2, 5023, 5024, 7,
	151, 2, 2, 5024, 5064, 9, 69, 2, 2, 5025, 5064, 7, 677, 2, 2, 5026, 5064,
	7, 678, 2, 2, 5027, 5064, 7, 170, 2, 2, 5028, 5064, 7, 177, 2, 2, 5029,
	5064, 7, 178, 2, 2, 5030, 5064, 7, 680, 2, 2, 5031, 5064, 7, 681, 2, 2,
	5032, 5064, 7, 682, 2, 2, 5033, 5064, 7, 683, 2, 2, 5034, 5064, 7, 684,
	2, 2, 5035, 5064, 7, 685, 2, 2, 5036, 5064, 7, 686, 2, 2, 5037, 5064, 7,
	687, 2, 2, 5038, 5064, 7, 688, 2, 2, 5039, 5064, 7, 689, 2, 2, 5040, 5064,
	7, 690, 2, 2, 5041, 5064, 7, 691, 2, 2, 5042, 5064, 7, 692, 2, 2, 5043,
	5064, 7, 693, 2, 2, 5044, 5064, 7, 695, 2, 2, 5045, 5064, 7, 696, 2, 2,
	5046, 5064, 7, 697, 2, 2, 5047, 5064, 7, 698, 2, 2, 5048, 5064, 7, 699,
	2, 2, 5049, 5064, 7, 700, 2, 2, 5050, 5064, 7, 701, 2, 2, 5051, 5064, 7,
	702, 2, 2, 5052, 5064, 7, 703, 2, 2, 5053, 5064, 7, 704, 2, 2, 5054, 5064,
	7, 705, 2, 2, 5055, 5064, 7, 706, 2, 2, 5056, 5064, 7, 707, 2, 2, 5057,
	5064, 7, 708, 2, 2, 5058, 5064, 7, 1043, 2, 2, 5059, 5064, 7, 709, 2, 2,
	5060, 5064, 7, 710, 2, 2, 5061, 5064, 7, 711, 2, 2, 5062, 5064, 7, 712,
	2, 2, 5063, 4984, 3, 2, 2, 2, 5063, 4988, 3, 2, 2, 2, 5063, 4992, 3, 2,
	2, 2, 5063, 5002, 3, 2, 2, 2, 5063, 5003, 3, 2, 2, 2, 5063, 5007, 3, 2,
	2, 2, 5063, 5008, 3, 2, 2, 2, 5063, 5009, 3, 2, 2, 2, 5063, 5010, 3, 2,
	2, 2, 5063, 5012, 3, 2, 2, 2, 5063, 5013, 3, 2, 2, 2, 5063, 5014, 3, 2,
	2, 2, 5063, 5016, 3, 2, 2, 2, 5063, 5017, 3, 2, 2, 2, 5063, 5018, 3, 2,
	2, 2, 5063, 5019, 3, 2, 2, 2, 5063, 5020, 3, 2, 2, 2, 5063, 5022, 3, 2,
	2, 2, 5063, 5023, 3, 2, 2, 2, 5063, 5025, 3, 2, 2, 2, 5063, 5026, 3, 2,
	2, 2, 5063, 5027, 3, 2, 2, 2, 5063, 5028, 3, 2, 2, 2, 5063, 5029, 3, 2,
	2, 2, 5063, 5030, 3, 2, 2, 2, 5063, 5031, 3, 2, 2, 2, 5063, 5032, 3, 2,
	2, 2, 5063, 5033, 3, 2, 2, 2, 5063, 5034, 3, 2, 2, 2, 5063, 5035, 3, 2,
	2, 2, 5063, 5036, 3, 2, 2, 2, 5063, 5037, 3, 2, 2, 2, 5063, 5038, 3, 2,
	2, 2, 5063, 5039, 3, 2, 2, 2, 5063, 5040, 3, 2, 2, 2, 5063, 5041, 3, 2,
	2, 2, 5063, 5042, 3, 2, 2, 2, 5063, 5043, 3, 2, 2, 2, 5063, 5044, 3, 2,
	2, 2, 5063, 5045, 3, 2, 2, 2, 5063, 5046, 3, 2, 2, 2, 5063, 5047, 3, 2,
	2, 2, 5063, 5048, 3, 2, 2, 2, 5063, 5049, 3, 2, 2, 2, 5063, 5050, 3, 2,
	2, 2, 5063, 5051, 3, 2, 2, 2, 5063, 5052, 3, 2, 2, 2, 5063, 5053, 3, 2,
	2, 2, 5063, 5054, 3, 2, 2, 2, 5063, 5055, 3, 2, 2, 2, 5063, 5056, 3, 2,
	2, 2, 5063, 5057, 3, 2, 2, 2, 5063, 5058, 3, 2, 2, 2, 5063, 5059, 3, 2,
	2, 2, 5063, 5060, 3, 2, 2, 2, 5063, 5061, 3, 2, 2, 2, 5063, 5062, 3, 2,
	2, 2, 5064, 437, 3, 2, 2, 2, 5065, 5082, 7, 1082, 2, 2, 5066, 5067, 7,
	1082, 2, 2, 5067, 5068, 7, 1097, 2, 2, 5068, 5082, 7, 1082, 2, 2, 5069,
	5070, 5, 544, 273, 2, 5070, 5071, 7, 1097, 2, 2, 5071, 5072, 7, 1082, 2,
	2, 5072, 5082, 3, 2, 2, 2, 5073, 5074, 5, 544, 273, 2, 5074, 5075, 7, 1097,
	2, 2, 5075, 5076, 5, 544, 273, 2, 5076, 5082, 3, 2, 2, 2, 5077, 5078, 5,
	544, 273, 2, 5078, 5079, 5, 548, 275, 2, 5079, 5082, 3, 2, 2, 2, 5080,
	5082, 5, 544, 273, 2, 5081, 5065, 3, 2, 2, 2, 5081, 5066, 3, 2, 2, 2, 5081,
	5069, 3, 2, 2, 2, 5081, 5073, 3, 2, 2, 2, 5081, 5077, 3, 2, 2, 2, 5081,
	5080, 3, 2, 2, 2, 5082, 439, 3, 2, 2, 2, 5083, 5084, 5, 526, 264, 2, 5084,
	5085, 7, 168, 2, 2, 5085, 5086, 5, 526, 264, 2, 5086, 441, 3, 2, 2, 2,
	5087, 5089, 7, 11, 2, 2, 5088, 5090, 9, 70, 2, 2, 5089, 5088, 3, 2, 2,
	2, 5089, 5090, 3, 2, 2, 2, 5090, 5091, 3, 2, 2, 2, 5091, 5092, 9, 71, 2,
	2, 5092, 5110, 5, 578, 290, 2, 5093, 5094, 7, 177, 2, 2, 5094, 5095, 7,
	75, 2, 2, 5095, 5096, 7, 114, 2, 2, 5096, 5101, 5, 522, 262, 2, 5097, 5098,
	7, 1100, 2, 2, 5098, 5100, 5, 522, 262, 2, 5099, 5097, 3, 2, 2, 2, 5100,
	5103, 3, 2, 2, 2, 5101, 5099, 3, 2, 2, 2, 5101, 5102, 3, 2, 2, 2, 5102,
	5108, 3, 2, 2, 2, 5103, 5101, 3, 2, 2, 2, 5104, 5105, 7, 185, 2, 2, 5105,
	5106, 5, 550, 276, 2, 5106, 5107, 7, 19, 2, 2, 5107, 5109, 3, 2, 2, 2,
	5108, 5104, 3, 2, 2, 2, 5108, 5109, 3, 2, 2, 2, 5109, 5111, 3, 2, 2, 2,
	5110, 5093, 3, 2, 2, 2, 5110, 5111, 3, 2, 2, 2, 5111, 5123, 3, 2, 2, 2,
	5112, 5113, 7, 51, 2, 2, 5113, 5114, 7, 75, 2, 2, 5114, 5115, 7, 114, 2,
	2, 5115, 5120, 5, 522, 262, 2, 5116, 5117, 7, 1100, 2, 2, 5117, 5119, 5,
	522, 262, 2, 5118, 5116, 3, 2, 2, 2, 5119, 5122, 3, 2, 2, 2, 5120, 5118,
	3, 2, 2, 2, 5120, 5121, 3, 2, 2, 2, 5121, 5124, 3, 2, 2, 2, 5122, 5120,
	3, 2, 2, 2, 5123, 5112, 3, 2, 2, 2, 5123, 5124, 3, 2, 2, 2, 5124, 443,
	3, 2, 2, 2, 5125, 5126, 7, 27, 2, 2, 5126, 5127, 7, 165, 2, 2, 5127, 5131,
	5, 578, 290, 2, 5128, 5130, 5, 452, 227, 2, 5129, 5128, 3, 2, 2, 2, 5130,
	5133, 3, 2, 2, 2, 5131, 5129, 3, 2, 2, 2, 5131, 5132, 3, 2, 2, 2, 5132,
	445, 3, 2, 2, 2, 5133, 5131, 3, 2, 2, 2, 5134, 5135, 7, 346, 2, 2, 5135,
	5136, 7, 165, 2, 2, 5136, 5138, 5, 578, 290, 2, 5137, 5139, 9, 72, 2, 2,
	5138, 5137, 3, 2, 2, 2, 5138, 5139, 3, 2, 2, 2, 5139, 447, 3, 2, 2, 2,
	5140, 5142, 7, 115, 2, 2, 5141, 5143, 9, 70, 2, 2, 5142, 5141, 3, 2, 2,
	2, 5142, 5143, 3, 2, 2, 2, 5143, 5144, 3, 2, 2, 2, 5144, 5145, 9, 71, 2,
	2, 5145, 5146, 5, 578, 290, 2, 5146, 449, 3, 2, 2, 2, 5147, 5149, 7, 557,
	2, 2, 5148, 5150, 9, 70, 2, 2, 5149, 5148, 3, 2, 2, 2, 5149, 5150, 3, 2,
	2, 2, 5150, 5151, 3, 2, 2, 2, 5151, 5152, 7, 165, 2, 2, 5152, 5154, 5,
	578, 290, 2, 5153, 5155, 7, 545, 2, 2, 5154, 5153, 3, 2, 2, 2, 5154, 5155,
	3, 2, 2, 2, 5155, 5157, 3, 2, 2, 2, 5156, 5158, 7, 409, 2, 2, 5157, 5156,
	3, 2, 2, 2, 5157, 5158, 3, 2, 2, 2, 5158, 5160, 3, 2, 2, 2, 5159, 5161,
	7, 640, 2, 2, 5160, 5159, 3, 2, 2, 2, 5160, 5161, 3, 2, 2, 2, 5161, 451,
	3, 2, 2, 2, 5162, 5163, 7, 64, 2, 2, 5163, 5170, 7, 638, 2, 2, 5164, 5170,
	7, 545, 2, 2, 5165, 5170, 7, 411, 2, 2, 5166, 5170, 7, 488, 2, 2, 5167,
	5170, 7, 409, 2, 2, 5168, 5170, 7, 344, 2, 2, 5169, 5162, 3, 2, 2, 2, 5169,
	5164, 3, 2, 2, 2, 5169, 5165, 3, 2, 2, 2, 5169, 5166, 3, 2, 2, 2, 5169,
	5167, 3, 2, 2, 2, 5169, 5168, 3, 2, 2, 2, 5170, 453, 3, 2, 2, 2, 5171,
	5173, 7, 34, 2, 2, 5172, 5174, 7, 325, 2, 2, 5173, 5172, 3, 2, 2, 2, 5173,
	5174, 3, 2, 2, 2, 5174, 5175, 3, 2, 2, 2, 5175, 5176, 7, 423, 2, 2, 5176,
	5177, 5, 544, 273, 2, 5177, 5178, 7, 570, 2, 2, 5178, 5179, 9, 73, 2, 2,
	5179, 5180, 7, 593, 2, 2, 5180, 5181, 7, 1113, 2, 2, 5181, 455, 3, 2, 2,
	2, 5182, 5183, 7, 440, 2, 2, 5183, 5184, 7, 531, 2, 2, 5184, 5185, 5, 544,
	273, 2, 5185, 5186, 7, 593, 2, 2, 5186, 5187, 7, 1113, 2, 2, 5187, 457,
	3, 2, 2, 2, 5188, 5189, 7, 635, 2, 2, 5189, 5190, 7, 531, 2, 2, 5190, 5191,
	5, 544, 273, 2, 5191, 459, 3, 2, 2, 2, 5192, 5193, 7, 149, 2, 2, 5193,
	5194, 5, 464, 233, 2, 5194, 5197, 9, 74, 2, 2, 5195, 5198, 5, 642, 322,
	2, 5196, 5198, 7, 114, 2, 2, 5197, 5195, 3, 2, 2, 2, 5197, 5196, 3, 2,
	2, 2, 5198, 5208, 3, 2, 2, 2, 5199, 5200, 7, 1100, 2, 2, 5200, 5201, 5,
	464, 233, 2, 5201, 5204, 9, 74, 2, 2, 5202, 5205, 5, 642, 322, 2, 5203,
	5205, 7, 114, 2, 2, 5204, 5202, 3, 2, 2, 2, 5204, 5203, 3, 2, 2, 2, 5205,
	5207, 3, 2, 2, 2, 5206, 5199, 3, 2, 2, 2, 5207, 5210, 3, 2, 2, 2, 5208,
	5206, 3, 2, 2, 2, 5208, 5209, 3, 2, 2, 2, 5209, 5245, 3, 2, 2, 2, 5210,
	5208, 3, 2, 2, 2, 5211, 5212, 7, 149, 2, 2, 5212, 5215, 5, 60, 31, 2, 5213,
	5216, 5, 530, 266, 2, 5214, 5216, 7, 42, 2, 2, 5215, 5213, 3, 2, 2, 2,
	5215, 5214, 3, 2, 2, 2, 5216, 5245, 3, 2, 2, 2, 5217, 5218, 7, 149, 2,
	2, 5218, 5225, 7, 501, 2, 2, 5219, 5222, 5, 530, 266, 2, 5220, 5221, 7,
	28, 2, 2, 5221, 5223, 5, 532, 267, 2, 5222, 5220, 3, 2, 2, 2, 5222, 5223,
	3, 2, 2, 2, 5223, 5226, 3, 2, 2, 2, 5224, 5226, 7, 42, 2, 2, 5225, 5219,
	3, 2, 2, 2, 5225, 5224, 3, 2, 2, 2, 5226, 5245, 3, 2, 2, 2, 5227, 5245,
	5, 420, 211, 2, 5228, 5245, 5, 294, 148, 2, 5229, 5245, 5, 292, 147, 2,
	5230, 5231, 7, 149, 2, 2, 5231, 5232, 5, 518, 260, 2, 5232, 5233, 9, 74,
	2, 2, 5233, 5241, 5, 642, 322, 2, 5234, 5235, 7, 1100, 2, 2, 5235, 5236,
	5, 518, 260, 2, 5236, 5237, 9, 74, 2, 2, 5237, 5238, 5, 642, 322, 2, 5238,
	5240, 3, 2, 2, 2, 5239, 5234, 3, 2, 2, 2, 5240, 5243, 3, 2, 2, 2, 5241,
	5239, 3, 2, 2, 2, 5241, 5242, 3, 2, 2, 2, 5242, 5245, 3, 2, 2, 2, 5243,
	5241, 3, 2, 2, 2, 5244, 5192, 3, 2, 2, 2, 5244, 5211, 3, 2, 2, 2, 5244,
	5217, 3, 2, 2, 2, 5244, 5227, 3, 2, 2, 2, 5244, 5228, 3, 2, 2, 2, 5244,
	5229, 3, 2, 2, 2, 5244, 5230, 3, 2, 2, 2, 5245, 461, 3, 2, 2, 2, 5246,
	5247, 7, 151, 2, 2, 5247, 5248, 9, 56, 2, 2, 5248, 5400, 7, 460, 2, 2,
	5249, 5250, 7, 151, 2, 2, 5250, 5251, 9, 75, 2, 2, 5251, 5254, 7, 403,
	2, 2, 5252, 5253, 7, 79, 2, 2, 5253, 5255, 7, 1113, 2, 2, 5254, 5252, 3,
	2, 2, 2, 5254, 5255, 3, 2, 2, 2, 5255, 5258, 3, 2, 2, 2, 5256, 5257, 7,
	67, 2, 2, 5257, 5259, 5, 550, 276, 2, 5258, 5256, 3, 2, 2, 2, 5258, 5259,
	3, 2, 2, 2, 5259, 5267, 3, 2, 2, 2, 5260, 5264, 7, 97, 2, 2, 5261, 5262,
	5, 550, 276, 2, 5262, 5263, 7, 1100, 2, 2, 5263, 5265, 3, 2, 2, 2, 5264,
	5261, 3, 2, 2, 2, 5264, 5265, 3, 2, 2, 2, 5265, 5266, 3, 2, 2, 2, 5266,
	5268, 5, 550, 276, 2, 5267, 5260, 3, 2, 2, 2, 5267, 5268, 3, 2, 2, 2, 5268,
	5400, 3, 2, 2, 2, 5269, 5270, 7, 151, 2, 2, 5270, 5272, 5, 466, 234, 2,
	5271, 5273, 5, 468, 235, 2, 5272, 5271, 3, 2, 2, 2, 5272, 5273, 3, 2, 2,
	2, 5273, 5400, 3, 2, 2, 2, 5274, 5276, 7, 151, 2, 2, 5275, 5277, 7, 422,
	2, 2, 5276, 5275, 3, 2, 2, 2, 5276, 5277, 3, 2, 2, 2, 5277, 5278, 3, 2,
	2, 2, 5278, 5279, 9, 42, 2, 2, 5279, 5280, 9, 76, 2, 2, 5280, 5283, 5,
	520, 261, 2, 5281, 5282, 9, 76, 2, 2, 5282, 5284, 5, 544, 273, 2, 5283,
	5281, 3, 2, 2, 2, 5283, 5284, 3, 2, 2, 2, 5284, 5286, 3, 2, 2, 2, 5285,
	5287, 5, 468, 235, 2, 5286, 5285, 3, 2, 2, 2, 5286, 5287, 3, 2, 2, 2, 5287,
	5400, 3, 2, 2, 2, 5288, 5289, 7, 151, 2, 2, 5289, 5290, 7, 34, 2, 2, 5290,
	5292, 9, 2, 2, 2, 5291, 5293, 5, 600, 301, 2, 5292, 5291, 3, 2, 2, 2, 5292,
	5293, 3, 2, 2, 2, 5293, 5294, 3, 2, 2, 2, 5294, 5400, 5, 544, 273, 2, 5295,
	5296, 7, 151, 2, 2, 5296, 5297, 7, 34, 2, 2, 5297, 5298, 9, 77, 2, 2, 5298,
	5400, 5, 518, 260, 2, 5299, 5300, 7, 151, 2, 2, 5300, 5301, 7, 34, 2, 2,
	5301, 5302, 7, 639, 2, 2, 5302, 5400, 5, 526, 264, 2, 5303, 5304, 7, 151,
	2, 2, 5304, 5305, 7, 396, 2, 2, 5305, 5306, 5, 534, 268, 2, 5306, 5307,
	9, 78, 2, 2, 5307, 5400, 3, 2, 2, 2, 5308, 5309, 7, 151, 2, 2, 5309, 5400,
	5, 470, 236, 2, 5310, 5311, 7, 151, 2, 2, 5311, 5319, 9, 79, 2, 2, 5312,
	5316, 7, 97, 2, 2, 5313, 5314, 5, 550, 276, 2, 5314, 5315, 7, 1100, 2,
	2, 5315, 5317, 3, 2, 2, 2, 5316, 5313, 3, 2, 2, 2, 5316, 5317, 3, 2, 2,
	2, 5317, 5318, 3, 2, 2, 2, 5318, 5320, 5, 550, 276, 2, 5319, 5312, 3, 2,
	2, 2, 5319, 5320, 3, 2, 2, 2, 5320, 5400, 3, 2, 2, 2, 5321, 5322, 7, 151,
	2, 2, 5322, 5323, 7, 280, 2, 2, 5323, 5324, 7, 1098, 2, 2, 5324, 5325,
	7, 1082, 2, 2, 5325, 5326, 7, 1099, 2, 2, 5326, 5400, 9, 79, 2, 2, 5327,
	5328, 7, 151, 2, 2, 5328, 5331, 5, 472, 237, 2, 5329, 5330, 9, 76, 2, 2,
	5330, 5332, 5, 544, 273, 2, 5331, 5329, 3, 2, 2, 2, 5331, 5332, 3, 2, 2,
	2, 5332, 5334, 3, 2, 2, 2, 5333, 5335, 5, 468, 235, 2, 5334, 5333, 3, 2,
	2, 2, 5334, 5335, 3, 2, 2, 2, 5335, 5400, 3, 2, 2, 2, 5336, 5337, 7, 151,
	2, 2, 5337, 5338, 9, 80, 2, 2, 5338, 5339, 7, 354, 2, 2, 5339, 5400, 5,
	518, 260, 2, 5340, 5341, 7, 151, 2, 2, 5341, 5344, 7, 426, 2, 2, 5342,
	5343, 7, 64, 2, 2, 5343, 5345, 5, 526, 264, 2, 5344, 5342, 3, 2, 2, 2,
	5344, 5345, 3, 2, 2, 2, 5345, 5400, 3, 2, 2, 2, 5346, 5347, 7, 151, 2,
	2, 5347, 5348, 9, 81, 2, 2, 5348, 5349, 9, 76, 2, 2, 5349, 5352, 5, 520,
	261, 2, 5350, 5351, 9, 76, 2, 2, 5351, 5353, 5, 544, 273, 2, 5352, 5350,
	3, 2, 2, 2, 5352, 5353, 3, 2, 2, 2, 5353, 5356, 3, 2, 2, 2, 5354, 5355,
	7, 183, 2, 2, 5355, 5357, 5, 642, 322, 2, 5356, 5354, 3, 2, 2, 2, 5356,
	5357, 3, 2, 2, 2, 5357, 5400, 3, 2, 2, 2, 5358, 5359, 7, 151, 2, 2, 5359,
	5360, 7, 519, 2, 2, 5360, 5363, 7, 671, 2, 2, 5361, 5362, 9, 76, 2, 2,
	5362, 5364, 5, 544, 273, 2, 5363, 5361, 3, 2, 2, 2, 5363, 5364, 3, 2, 2,
	2, 5364, 5366, 3, 2, 2, 2, 5365, 5367, 5, 468, 235, 2, 5366, 5365, 3, 2,
	2, 2, 5366, 5367, 3, 2, 2, 2, 5367, 5400, 3, 2, 2, 2, 5368, 5369, 7, 151,
	2, 2, 5369, 5370, 7, 541, 2, 2, 5370, 5375, 5, 474, 238, 2, 5371, 5372,
	7, 1100, 2, 2, 5372, 5374, 5, 474, 238, 2, 5373, 5371, 3, 2, 2, 2, 5374,
	5377, 3, 2, 2, 2, 5375, 5373, 3, 2, 2, 2, 5375, 5376, 3, 2, 2, 2, 5376,
	5381, 3, 2, 2, 2, 5377, 5375, 3, 2, 2, 2, 5378, 5379, 7, 64, 2, 2, 5379,
	5380, 7, 544, 2, 2, 5380, 5382, 5, 550, 276, 2, 5381, 5378, 3, 2, 2, 2,
	5381, 5382, 3, 2, 2, 2, 5382, 5383, 3, 2, 2, 2, 5383, 5387, 7, 97, 2, 2,
	5384, 5385, 5, 550, 276, 2, 5385, 5386, 7, 1100, 2, 2, 5386, 5388, 3, 2,
	2, 2, 5387, 5384, 3, 2, 2, 2, 5387, 5388, 3, 2, 2, 2, 5388, 5389, 3, 2,
	2, 2, 5389, 5390, 5, 550, 276, 2, 5390, 5400, 3, 2, 2, 2, 5391, 5392, 7,
	151, 2, 2, 5392, 5393, 7, 588, 2, 2, 5393, 5397, 7, 608, 2, 2, 5394, 5395,
	7, 64, 2, 2, 5395, 5396, 7, 345, 2, 2, 5396, 5398, 7, 1113, 2, 2, 5397,
	5394, 3, 2, 2, 2, 5397, 5398, 3, 2, 2, 2, 5398, 5400, 3, 2, 2, 2, 5399,
	5246, 3, 2, 2, 2, 5399, 5249, 3, 2, 2, 2, 5399, 5269, 3, 2, 2, 2, 5399,
	5274, 3, 2, 2, 2, 5399, 5288, 3, 2, 2, 2, 5399, 5295, 3, 2, 2, 2, 5399,
	5299, 3, 2, 2, 2, 5399, 5303, 3, 2, 2, 2, 5399, 5308, 3, 2, 2, 2, 5399,
	5310, 3, 2, 2, 2, 5399, 5321, 3, 2, 2, 2, 5399, 5327, 3, 2, 2, 2, 5399,
	5336, 3, 2, 2, 2, 5399, 5340, 3, 2, 2, 2, 5399, 5346, 3, 2, 2, 2, 5399,
	5358, 3, 2, 2, 2, 5399, 5368, 3, 2, 2, 2, 5399, 5391, 3, 2, 2, 2, 5400,
	463, 3, 2, 2, 2, 5401, 5412, 7, 1125, 2, 2, 5402, 5412, 7, 1126, 2, 2,
	5403, 5404, 7, 1102, 2, 2, 5404, 5406, 7, 1102, 2, 2, 5405, 5403, 3, 2,
	2, 2, 5405, 5406, 3, 2, 2, 2, 5406, 5407, 3, 2, 2, 2, 5407, 5409, 9, 82,
	2, 2, 5408, 5405, 3, 2, 2, 2, 5408, 5409, 3, 2, 2, 2, 5409, 5410, 3, 2,
	2, 2, 5410, 5412, 5, 544, 273, 2, 5411, 5401, 3, 2, 2, 2, 5411, 5402, 3,
	2, 2, 2, 5411, 5408, 3, 2, 2, 2, 5412, 465, 3, 2, 2, 2, 5413, 5414, 7,
	26, 2, 2, 5414, 5427, 7, 149, 2, 2, 5415, 5427, 7, 811, 2, 2, 5416, 5427,
	7, 40, 2, 2, 5417, 5427, 7, 147, 2, 2, 5418, 5419, 7, 423, 2, 2, 5419,
	5427, 7, 608, 2, 2, 5420, 5421, 7, 127, 2, 2, 5421, 5427, 7, 608, 2, 2,
	5422, 5424, 9, 55, 2, 2, 5423, 5422, 3, 2, 2, 2, 5423, 5424, 3, 2, 2, 2,
	5424, 5425, 3, 2, 2, 2, 5425, 5427, 9, 83, 2, 2, 5426, 5413, 3, 2, 2, 2,
	5426, 5415, 3, 2, 2, 2, 5426, 5416, 3, 2, 2, 2, 5426, 5417, 3, 2, 2, 2,
	5426, 5418, 3, 2, 2, 2, 5426, 5420, 3, 2, 2, 2, 5426, 5423, 3, 2, 2, 2,
	5427, 467, 3, 2, 2, 2, 5428, 5429, 7, 96, 2, 2, 5429, 5433, 7, 1113, 2,
	2, 5430, 5431, 7, 183, 2, 2, 5431, 5433, 5, 642, 322, 2, 5432, 5428, 3,
	2, 2, 2, 5432, 5430, 3, 2, 2, 2, 5433, 469, 3, 2, 2, 2, 5434, 5436, 7,
	610, 2, 2, 5435, 5434, 3, 2, 2, 2, 5435, 5436, 3, 2, 2, 2, 5436, 5437,
	3, 2, 2, 2, 5437, 5452, 7, 397, 2, 2, 5438, 5439, 7, 461, 2, 2, 5439, 5452,
	7, 608, 2, 2, 5440, 5452, 7, 533, 2, 2, 5441, 5452, 7, 679, 2, 2, 5442,
	5444, 7, 422, 2, 2, 5443, 5442, 3, 2, 2, 2, 5443, 5444, 3, 2, 2, 2, 5444,
	5445, 3, 2, 2, 2, 5445, 5452, 7, 540, 2, 2, 5446, 5452, 7, 542, 2, 2, 5447,
	5448, 7, 588, 2, 2, 5448, 5452, 7, 432, 2, 2, 5449, 5452, 7, 329, 2, 2,
	5450, 5452, 7, 373, 2, 2, 5451, 5435, 3, 2, 2, 2, 5451, 5438, 3, 2, 2,
	2, 5451, 5440, 3, 2, 2, 2, 5451, 5441, 3, 2, 2, 2, 5451, 5443, 3, 2, 2,
	2, 5451, 5446, 3, 2, 2, 2, 5451, 5447, 3, 2, 2, 2, 5451, 5449, 3, 2, 2,
	2, 5451, 5450, 3, 2, 2, 2, 5452, 471, 3, 2, 2, 2, 5453, 5462, 7, 403, 2,
	2, 5454, 5455, 7, 165, 2, 2, 5455, 5462, 7, 608, 2, 2, 5456, 5458, 7, 422,
	2, 2, 5457, 5456, 3, 2, 2, 2, 5457, 5458, 3, 2, 2, 2, 5458, 5459, 3, 2,
	2, 2, 5459, 5462, 7, 671, 2, 2, 5460, 5462, 7, 629, 2, 2, 5461, 5453, 3,
	2, 2, 2, 5461, 5454, 3, 2, 2, 2, 5461, 5457, 3, 2, 2, 2, 5461, 5460, 3,
	2, 2, 2, 5462, 473, 3, 2, 2, 2, 5463, 5476, 7, 8, 2, 2, 5464, 5465, 7,
	337, 2, 2, 5465, 5476, 7, 445, 2, 2, 5466, 5467, 7, 372, 2, 2, 5467, 5476,
	7, 619, 2, 2, 5468, 5476, 7, 375, 2, 2, 5469, 5476, 7, 447, 2, 2, 5470,
	5476, 7, 759, 2, 2, 5471, 5472, 7, 524, 2, 2, 5472, 5476, 7, 412, 2, 2,
	5473, 5476, 7, 595, 2, 2, 5474, 5476, 7, 618, 2, 2, 5475, 5463, 3, 2, 2,
	2, 5475, 5464, 3, 2, 2, 2, 5475, 5466, 3, 2, 2, 2, 5475, 5468, 3, 2, 2,
	2, 5475, 5469, 3, 2, 2, 2, 5475, 5470, 3, 2, 2, 2, 5475, 5471, 3, 2, 2,
	2, 5475, 5473, 3, 2, 2, 2, 5475, 5474, 3, 2, 2, 2, 5476, 475, 3, 2, 2,
	2, 5477, 5478, 7, 335, 2, 2, 5478, 5479, 7, 1113, 2, 2, 5479, 477, 3, 2,
	2, 2, 5480, 5481, 7, 341, 2, 2, 5481, 5482, 7, 80, 2, 2, 5482, 5487, 5,
	490, 246, 2, 5483, 5484, 7, 1100, 2, 2, 5484, 5486, 5, 490, 246, 2, 5485,
	5483, 3, 2, 2, 2, 5486, 5489, 3, 2, 2, 2, 5487, 5485, 3, 2, 2, 2, 5487,
	5488, 3, 2, 2, 2, 5488, 5497, 3, 2, 2, 2, 5489, 5487, 3, 2, 2, 2, 5490,
	5491, 7, 125, 2, 2, 5491, 5494, 7, 1098, 2, 2, 5492, 5495, 5, 576, 289,
	2, 5493, 5495, 7, 8, 2, 2, 5494, 5492, 3, 2, 2, 2, 5494, 5493, 3, 2, 2,
	2, 5495, 5496, 3, 2, 2, 2, 5496, 5498, 7, 1099, 2, 2, 5497, 5490, 3, 2,
	2, 2, 5497, 5498, 3, 2, 2, 2, 5498, 5499, 3, 2, 2, 2, 5499, 5500, 7, 79,
	2, 2, 5500, 5501, 5, 544, 273, 2, 5501, 479, 3, 2, 2, 2, 5502, 5504, 7,
	418, 2, 2, 5503, 5505, 9, 70, 2, 2, 5504, 5503, 3, 2, 2, 2, 5504, 5505,
	3, 2, 2, 2, 5505, 5506, 3, 2, 2, 2, 5506, 5511, 5, 492, 247, 2, 5507, 5508,
	7, 1100, 2, 2, 5508, 5510, 5, 492, 247, 2, 5509, 5507, 3, 2, 2, 2, 5510,
	5513, 3, 2, 2, 2, 5511, 5509, 3, 2, 2, 2, 5511, 5512, 3, 2, 2, 2, 5512,
	481, 3, 2, 2, 2, 5513, 5511, 3, 2, 2, 2, 5514, 5516, 7, 92, 2, 2, 5515,
	5517, 9, 84, 2, 2, 5516, 5515, 3, 2, 2, 2, 5516, 5517, 3, 2, 2, 2, 5517,
	5519, 3, 2, 2, 2, 5518, 5520, 5, 550, 276, 2, 5519, 5518, 3, 2, 2, 2, 5520,
	5521, 3, 2, 2, 2, 5521, 5519, 3, 2, 2, 2, 5521, 5522, 3, 2, 2, 2, 5522,
	483, 3, 2, 2, 2, 5523, 5524, 7, 100, 2, 2, 5524, 5525, 7, 80, 2, 2, 5525,
	5526, 7, 86, 2, 2, 5526, 5527, 7, 341, 2, 2, 5527, 5532, 5, 496, 249, 2,
	5528, 5529, 7, 1100, 2, 2, 5529, 5531, 5, 496, 249, 2, 5530, 5528, 3, 2,
	2, 2, 5531, 5534, 3, 2, 2, 2, 5532, 5530, 3, 2, 2, 2, 5532, 5533, 3, 2,
	2, 2, 5533, 485, 3, 2, 2, 2, 5534, 5532, 3, 2, 2, 2, 5535, 5536, 7, 566,
	2, 2, 5536, 5537, 7, 544, 2, 2, 5537, 5538, 7, 341, 2, 2, 5538, 487, 3,
	2, 2, 2, 5539, 5540, 7, 677, 2, 2, 5540, 489, 3, 2, 2, 2, 5541, 5549, 5,
	520, 261, 2, 5542, 5544, 9, 22, 2, 2, 5543, 5542, 3, 2, 2, 2, 5543, 5544,
	3, 2, 2, 2, 5544, 5545, 3, 2, 2, 2, 5545, 5546, 7, 1098, 2, 2, 5546, 5547,
	5, 576, 289, 2, 5547, 5548, 7, 1099, 2, 2, 5548, 5550, 3, 2, 2, 2, 5549,
	5543, 3, 2, 2, 2, 5549, 5550, 3, 2, 2, 2, 5550, 491, 3, 2, 2, 2, 5551,
	5570, 7, 383, 2, 2, 5552, 5570, 7, 432, 2, 2, 5553, 5555, 9, 85, 2, 2,
	5554, 5553, 3, 2, 2, 2, 5554, 5555, 3, 2, 2, 2, 5555, 5556, 3, 2, 2, 2,
	5556, 5570, 7, 460, 2, 2, 5557, 5570, 7, 520, 2, 2, 5558, 5570, 7, 679,
	2, 2, 5559, 5560, 7, 544, 2, 2, 5560, 5570, 7, 341, 2, 2, 5561, 5570, 7,
	608, 2, 2, 5562, 5570, 7, 641, 2, 2, 5563, 5567, 7, 671, 2, 2, 5564, 5565,
	7, 185, 2, 2, 5565, 5566, 7, 130, 2, 2, 5566, 5568, 7, 101, 2, 2, 5567,
	5564, 3, 2, 2, 2, 5567, 5568, 3, 2, 2, 2, 5568, 5570, 3, 2, 2, 2, 5569,
	5551, 3, 2, 2, 2, 5569, 5552, 3, 2, 2, 2, 5569, 5554, 3, 2, 2, 2, 5569,
	5557, 3, 2, 2, 2, 5569, 5558, 3, 2, 2, 2, 5569, 5559, 3, 2, 2, 2, 5569,
	5561, 3, 2, 2, 2, 5569, 5562, 3, 2, 2, 2, 5569, 5563, 3, 2, 2, 2, 5570,
	5584, 3, 2, 2, 2, 5571, 5572, 7, 551, 2, 2, 5572, 5574, 7, 460, 2, 2, 5573,
	5575, 5, 332, 167, 2, 5574, 5573, 3, 2, 2, 2, 5574, 5575, 3, 2, 2, 2, 5575,
	5584, 3, 2, 2, 2, 5576, 5578, 9, 71, 2, 2, 5577, 5579, 5, 578, 290, 2,
	5578, 5577, 3, 2, 2, 2, 5578, 5579, 3, 2, 2, 2, 5579, 5581, 3, 2, 2, 2,
	5580, 5582, 5, 494, 248, 2, 5581, 5580, 3, 2, 2, 2, 5581, 5582, 3, 2, 2,
	2, 5582, 5584, 3, 2, 2, 2, 5583, 5569, 3, 2, 2, 2, 5583, 5571, 3, 2, 2,
	2, 5583, 5576, 3, 2, 2, 2, 5584, 493, 3, 2, 2, 2, 5585, 5586, 7, 185, 2,
	2, 5586, 5587, 7, 130, 2, 2, 5587, 5591, 7, 101, 2, 2, 5588, 5589, 7, 64,
	2, 2, 5589, 5591, 7, 408, 2, 2, 5590, 5585, 3, 2, 2, 2, 5590, 5588, 3,
	2, 2, 2, 5591, 495, 3, 2, 2, 2, 5592, 5600, 5, 520, 261, 2, 5593, 5594,
	7, 125, 2, 2, 5594, 5597, 7, 1098, 2, 2, 5595, 5598, 5, 576, 289, 2, 5596,
	5598, 7, 8, 2, 2, 5597, 5595, 3, 2, 2, 2, 5597, 5596, 3, 2, 2, 2, 5598,
	5599, 3, 2, 2, 2, 5599, 5601, 7, 1099, 2, 2, 5600, 5593, 3, 2, 2, 2, 5600,
	5601, 3, 2, 2, 2, 5601, 5609, 3, 2, 2, 2, 5602, 5604, 9, 22, 2, 2, 5603,
	5602, 3, 2, 2, 2, 5603, 5604, 3, 2, 2, 2, 5604, 5605, 3, 2, 2, 2, 5605,
	5606, 7, 1098, 2, 2, 5606, 5607, 5, 576, 289, 2, 5607, 5608, 7, 1099, 2,
	2, 5608, 5610, 3, 2, 2, 2, 5609, 5603, 3, 2, 2, 2, 5609, 5610, 3, 2, 2,
	2, 5610, 5613, 3, 2, 2, 2, 5611, 5612, 7, 77, 2, 2, 5612, 5614, 7, 454,
	2, 2, 5613, 5611, 3, 2, 2, 2, 5613, 5614, 3, 2, 2, 2, 5614, 497, 3, 2,
	2, 2, 5615, 5616, 9, 86, 2, 2, 5616, 5619, 5, 520, 261, 2, 5617, 5620,
	5, 544, 273, 2, 5618, 5620, 7, 1113, 2, 2, 5619, 5617, 3, 2, 2, 2, 5619,
	5618, 3, 2, 2, 2, 5619, 5620, 3, 2, 2, 2, 5620, 499, 3, 2, 2, 2, 5621,
	5625, 9, 86, 2, 2, 5622, 5623, 9, 87, 2, 2, 5623, 5624, 7, 1089, 2, 2,
	5624, 5626, 9, 88, 2, 2, 5625, 5622, 3, 2, 2, 2, 5625, 5626, 3, 2, 2, 2,
	5626, 5627, 3, 2, 2, 2, 5627, 5628, 5, 516, 259, 2, 5628, 501, 3, 2, 2,
	2, 5629, 5630, 7, 430, 2, 2, 5630, 5631, 7, 1113, 2, 2, 5631, 503, 3, 2,
	2, 2, 5632, 5633, 7, 179, 2, 2, 5633, 5634, 5, 544, 273, 2, 5634, 505,
	3, 2, 2, 2, 5635, 5643, 7, 152, 2, 2, 5636, 5638, 7, 156, 2, 2, 5637, 5639,
	7, 643, 2, 2, 5638, 5637, 3, 2, 2, 2, 5638, 5639, 3, 2, 2, 2, 5639, 5640,
	3, 2, 2, 2, 5640, 5644, 5, 554, 278, 2, 5641, 5644, 7, 1121, 2, 2, 5642,
	5644, 7, 1122, 2, 2, 5643, 5636, 3, 2, 2, 2, 5643, 5641, 3, 2, 2, 2, 5643,
	5642, 3, 2, 2, 2, 5644, 5654, 3, 2, 2, 2, 5645, 5646, 7, 149, 2, 2, 5646,
	5651, 5, 510, 256, 2, 5647, 5648, 7, 1100, 2, 2, 5648, 5650, 5, 510, 256,
	2, 5649, 5647, 3, 2, 2, 2, 5650, 5653, 3, 2, 2, 2, 5651, 5649, 3, 2, 2,
	2, 5651, 5652, 3, 2, 2, 2, 5652, 5655, 3, 2, 2, 2, 5653, 5651, 3, 2, 2,
	2, 5654, 5645, 3, 2, 2, 2, 5654, 5655, 3, 2, 2, 2, 5655, 507, 3, 2, 2,
	2, 5656, 5664, 7, 139, 2, 2, 5657, 5659, 7, 156, 2, 2, 5658, 5660, 7, 643,
	2, 2, 5659, 5658, 3, 2, 2, 2, 5659, 5660, 3, 2, 2, 2, 5660, 5661, 3, 2,
	2, 2, 5661, 5665, 5, 554, 278, 2, 5662, 5665, 7, 1121, 2, 2, 5663, 5665,
	7, 1122, 2, 2, 5664, 5657, 3, 2, 2, 2, 5664, 5662, 3, 2, 2, 2, 5664, 5663,
	3, 2, 2, 2, 5664, 5665, 3, 2, 2, 2, 5665, 5675, 3, 2, 2, 2, 5666, 5667,
	7, 149, 2, 2, 5667, 5672, 5, 510, 256, 2, 5668, 5669, 7, 1100, 2, 2, 5669,
	5671, 5, 510, 256, 2, 5670, 5668, 3, 2, 2, 2, 5671, 5674, 3, 2, 2, 2, 5672,
	5670, 3, 2, 2, 2, 5672, 5673, 3, 2, 2, 2, 5673, 5676, 3, 2, 2, 2, 5674,
	5672, 3, 2, 2, 2, 5675, 5666, 3, 2, 2, 2, 5675, 5676, 3, 2, 2, 2, 5676,
	509, 3, 2, 2, 2, 5677, 5678, 9, 89, 2, 2, 5678, 5683, 7, 1089, 2, 2, 5679,
	5684, 5, 554, 278, 2, 5680, 5684, 7, 1114, 2, 2, 5681, 5684, 5, 528, 265,
	2, 5682, 5684, 5, 546, 274, 2, 5683, 5679, 3, 2, 2, 2, 5683, 5680, 3, 2,
	2, 2, 5683, 5681, 3, 2, 2, 2, 5683, 5682, 3, 2, 2, 2, 5684, 511, 3, 2,
	2, 2, 5685, 5687, 7, 70, 2, 2, 5686, 5688, 9, 90, 2, 2, 5687, 5686, 3,
	2, 2, 2, 5687, 5688, 3, 2, 2, 2, 5688, 5689, 3, 2, 2, 2, 5689, 5721, 7,
	48, 2, 2, 5690, 5691, 5, 464, 233, 2, 5691, 5692, 7, 1089, 2, 2, 5692,
	5700, 9, 91, 2, 2, 5693, 5694, 7, 1100, 2, 2, 5694, 5695, 5, 464, 233,
	2, 5695, 5696, 7, 1089, 2, 2, 5696, 5697, 9, 91, 2, 2, 5697, 5699, 3, 2,
	2, 2, 5698, 5693, 3, 2, 2, 2, 5699, 5702, 3, 2, 2, 2, 5700, 5698, 3, 2,
	2, 2, 5700, 5701, 3, 2, 2, 2, 5701, 5722, 3, 2, 2, 2, 5702, 5700, 3, 2,
	2, 2, 5703, 5706, 7, 30, 2, 2, 5704, 5707, 5, 550, 276, 2, 5705, 5707,
	5, 464, 233, 2, 5706, 5704, 3, 2, 2, 2, 5706, 5705, 3, 2, 2, 2, 5707, 5708,
	3, 2, 2, 2, 5708, 5709, 5, 464, 233, 2, 5709, 5710, 7, 1089, 2, 2, 5710,
	5718, 5, 514, 258, 2, 5711, 5712, 7, 1100, 2, 2, 5712, 5713, 5, 464, 233,
	2, 5713, 5714, 7, 1089, 2, 2, 5714, 5715, 5, 514, 258, 2, 5715, 5717, 3,
	2, 2, 2, 5716, 5711, 3, 2, 2, 2, 5717, 5720, 3, 2, 2, 2, 5718, 5716, 3,
	2, 2, 2, 5718, 5719, 3, 2, 2, 2, 5719, 5722, 3, 2, 2, 2, 5720, 5718, 3,
	2, 2, 2, 5721, 5690, 3, 2, 2, 2, 5721, 5703, 3, 2, 2, 2, 5722, 513, 3,
	2, 2, 2, 5723, 5724, 9, 92, 2, 2, 5724, 515, 3, 2, 2, 2, 5725, 5731, 5,
	192, 97, 2, 5726, 5731, 5, 178, 90, 2, 5727, 5731, 5, 184, 93, 2, 5728,
	5731, 5, 190, 96, 2, 5729, 5731, 5, 194, 98, 2, 5730, 5725, 3, 2, 2, 2,
	5730, 5726, 3, 2, 2, 2, 5730, 5727, 3, 2, 2, 2, 5730, 5728, 3, 2, 2, 2,
	5730, 5729, 3, 2, 2, 2, 5731, 5736, 3, 2, 2, 2, 5732, 5733, 7, 64, 2, 2,
	5733, 5734, 7, 366, 2, 2, 5734, 5736, 5, 544, 273, 2, 5735, 5730, 3, 2,
	2, 2, 5735, 5732, 3, 2, 2, 2, 5736, 517, 3, 2, 2, 2, 5737, 5741, 5, 544,
	273, 2, 5738, 5742, 7, 1120, 2, 2, 5739, 5740, 7, 1097, 2, 2, 5740, 5742,
	5, 544, 273, 2, 5741, 5738, 3, 2, 2, 2, 5741, 5739, 3, 2, 2, 2, 5741, 5742,
	3, 2, 2, 2, 5742, 519, 3, 2, 2, 2, 5743, 5744, 5, 518, 260, 2, 5744, 521,
	3, 2, 2, 2, 5745, 5750, 5, 544, 273, 2, 5746, 5748, 5, 548, 275, 2, 5747,
	5749, 5, 548, 275, 2, 5748, 5747, 3, 2, 2, 2, 5748, 5749, 3, 2, 2, 2, 5749,
	5751, 3, 2, 2, 2, 5750, 5746, 3, 2, 2, 2, 5750, 5751, 3, 2, 2, 2, 5751,
	5758, 3, 2, 2, 2, 5752, 5753, 11, 2, 2, 2, 5753, 5755, 5, 548, 275, 2,
	5754, 5756, 5, 548, 275, 2, 5755, 5754, 3, 2, 2, 2, 5755, 5756, 3, 2, 2,
	2, 5756, 5758, 3, 2, 2, 2, 5757, 5745, 3, 2, 2, 2, 5757, 5752, 3, 2, 2,
	2, 5758, 523, 3, 2, 2, 2, 5759, 5762, 5, 544, 273, 2, 5760, 5762, 7, 1113,
	2, 2, 5761, 5759, 3, 2, 2, 2, 5761, 5760, 3, 2, 2, 2, 5762, 5767, 3, 2,
	2, 2, 5763, 5764, 7, 1098, 2, 2, 5764, 5765, 5, 550, 276, 2, 5765, 5766,
	7, 1099, 2, 2, 5766, 5768, 3, 2, 2, 2, 5767, 5763, 3, 2, 2, 2, 5767, 5768,
	3, 2, 2, 2, 5768, 5771, 3, 2, 2, 2, 5769, 5771, 5, 642, 322, 2, 5770, 5761,
	3, 2, 2, 2, 5770, 5769, 3, 2, 2, 2, 5771, 5773, 3, 2, 2, 2, 5772, 5774,
	9, 49, 2, 2, 5773, 5772, 3, 2, 2, 2, 5773, 5774, 3, 2, 2, 2, 5774, 525,
	3, 2, 2, 2, 5775, 5776, 9, 93, 2, 2, 5776, 527, 3, 2, 2, 2, 5777, 5778,
	9, 94, 2, 2, 5778, 529, 3, 2, 2, 2, 5779, 5784, 7, 219, 2, 2, 5780, 5784,
	5, 660, 331, 2, 5781, 5784, 7, 1113, 2, 2, 5782, 5784, 7, 1110, 2, 2, 5783,
	5779, 3, 2, 2, 2, 5783, 5780, 3, 2, 2, 2, 5783, 5781, 3, 2, 2, 2, 5783,
	5782, 3, 2, 2, 2, 5784, 531, 3, 2, 2, 2, 5785, 5788, 5, 544, 273, 2, 5786,
	5788, 7, 1113, 2, 2, 5787, 5785, 3, 2, 2, 2, 5787, 5786, 3, 2, 2, 2, 5788,
	533, 3, 2, 2, 2, 5789, 5790, 9, 95, 2, 2, 5790, 535, 3, 2, 2, 2, 5791,
	5792, 5, 550, 276, 2, 5792, 5793, 7, 1086, 2, 2, 5793, 5794, 5, 550, 276,
	2, 5794, 5795, 7, 1086, 2, 2, 5795, 5796, 5, 550, 276, 2, 5796, 5797, 7,
	1086, 2, 2, 5797, 5798, 5, 550, 276, 2, 5798, 5799, 7, 1086, 2, 2, 5799,
	5805, 5, 550, 276, 2, 5800, 5801, 7, 1109, 2, 2, 5801, 5802, 5, 550, 276,
	2, 5802, 5803, 7, 1086, 2, 2, 5803, 5804, 5, 550, 276, 2, 5804, 5806, 3,
	2, 2, 2, 5805, 5800, 3, 2, 2, 2, 5806, 5807, 3, 2, 2, 2, 5807, 5805, 3,
	2, 2, 2, 5807, 5808, 3, 2, 2, 2, 5808, 537, 3, 2, 2, 2, 5809, 5816, 5,
	540, 271, 2, 5810, 5811, 7, 1100, 2, 2, 5811, 5814, 5, 540, 271, 2, 5812,
	5813, 7, 1100, 2, 2, 5813, 5815, 5, 550, 276, 2, 5814, 5812, 3, 2, 2, 2,
	5814, 5815, 3, 2, 2, 2, 5815, 5817, 3, 2, 2, 2, 5816, 5810, 3, 2, 2, 2,
	5816, 5817, 3, 2, 2, 2, 5817, 539, 3, 2, 2, 2, 5818, 5826, 7, 1113, 2,
	2, 5819, 5826, 7, 1118, 2, 2, 5820, 5822, 7, 1115, 2, 2, 5821, 5820, 3,
	2, 2, 2, 5822, 5823, 3, 2, 2, 2, 5823, 5821, 3, 2, 2, 2, 5823, 5824, 3,
	2, 2, 2, 5824, 5826, 3, 2, 2, 2, 5825, 5818, 3, 2, 2, 2, 5825, 5819, 3,
	2, 2, 2, 5825, 5821, 3, 2, 2, 2, 5826, 541, 3, 2, 2, 2, 5827, 5830, 5,
	544, 273, 2, 5828, 5830, 7, 1113, 2, 2, 5829, 5827, 3, 2, 2, 2, 5829, 5828,
	3, 2, 2, 2, 5830, 543, 3, 2, 2, 2, 5831, 5835, 5, 546, 274, 2, 5832, 5835,
	7, 1122, 2, 2, 5833, 5835, 7, 1110, 2, 2, 5834, 5831, 3, 2, 2, 2, 5834,
	5832, 3, 2, 2, 2, 5834, 5833, 3, 2, 2, 2, 5835, 545, 3, 2, 2, 2, 5836,
	5846, 7, 1121, 2, 2, 5837, 5846, 5, 660, 331, 2, 5838, 5846, 5, 662, 332,
	2, 5839, 5846, 5, 534, 268, 2, 5840, 5846, 5, 664, 333, 2, 5841, 5846,
	5, 666, 334, 2, 5842, 5846, 5, 668, 335, 2, 5843, 5846, 5, 670, 336, 2,
	5844, 5846, 5, 672, 337, 2, 5845, 5836, 3, 2, 2, 2, 5845, 5837, 3, 2, 2,
	2, 5845, 5838, 3, 2, 2, 2, 5845, 5839, 3, 2, 2, 2, 5845, 5840, 3, 2, 2,
	2, 5845, 5841, 3, 2, 2, 2, 5845, 5842, 3, 2, 2, 2, 5845, 5843, 3, 2, 2,
	2, 5845, 5844, 3, 2, 2, 2, 5846, 547, 3, 2, 2, 2, 5847, 5851, 7, 1120,
	2, 2, 5848, 5849, 7, 1097, 2, 2, 5849, 5851, 5, 544, 273, 2, 5850, 5847,
	3, 2, 2, 2, 5850, 5848, 3, 2, 2, 2, 5851, 549, 3, 2, 2, 2, 5852, 5853,
	9, 96, 2, 2, 5853, 551, 3, 2, 2, 2, 5854, 5857, 7, 1111, 2, 2, 5855, 5857,
	5, 550, 276, 2, 5856, 5854, 3, 2, 2, 2, 5856, 5855, 3, 2, 2, 2, 5857, 553,
	3, 2, 2, 2, 5858, 5860, 7, 1119, 2, 2, 5859, 5858, 3, 2, 2, 2, 5859, 5860,
	3, 2, 2, 2, 5860, 5861, 3, 2, 2, 2, 5861, 5864, 7, 1113, 2, 2, 5862, 5864,
	7, 1112, 2, 2, 5863, 5859, 3, 2, 2, 2, 5863, 5862, 3, 2, 2, 2, 5864, 5866,
	3, 2, 2, 2, 5865, 5867, 7, 1113, 2, 2, 5866, 5865, 3, 2, 2, 2, 5867, 5868,
	3, 2, 2, 2, 5868, 5866, 3, 2, 2, 2, 5868, 5869, 3, 2, 2, 2, 5869, 5882,
	3, 2, 2, 2, 5870, 5872, 7, 1119, 2, 2, 5871, 5870, 3, 2, 2, 2, 5871, 5872,
	3, 2, 2, 2, 5872, 5873, 3, 2, 2, 2, 5873, 5876, 7, 1113, 2, 2, 5874, 5876,
	7, 1112, 2, 2, 5875, 5871, 3, 2, 2, 2, 5875, 5874, 3, 2, 2, 2, 5876, 5879,
	3, 2, 2, 2, 5877, 5878, 7, 28, 2, 2, 5878, 5880, 5, 532, 267, 2, 5879,
	5877, 3, 2, 2, 2, 5879, 5880, 3, 2, 2, 2, 5880, 5882, 3, 2, 2, 2, 5881,
	5863, 3, 2, 2, 2, 5881, 5875, 3, 2, 2, 2, 5882, 555, 3, 2, 2, 2, 5883,
	5884, 9, 97, 2, 2, 5884, 557, 3, 2, 2, 2, 5885, 5887, 7, 1119, 2, 2, 5886,
	5885, 3, 2, 2, 2, 5886, 5887, 3, 2, 2, 2, 5887, 5888, 3, 2, 2, 2, 5888,
	5889, 7, 1115, 2, 2, 5889, 559, 3, 2, 2, 2, 5890, 5892, 7, 110, 2, 2, 5891,
	5890, 3, 2, 2, 2, 5891, 5892, 3, 2, 2, 2, 5892, 5893, 3, 2, 2, 2, 5893,
	5894, 9, 98, 2, 2, 5894, 561, 3, 2, 2, 2, 5895, 5908, 5, 554, 278, 2, 5896,
	5908, 5, 550, 276, 2, 5897, 5898, 7, 1086, 2, 2, 5898, 5908, 5, 550, 276,
	2, 5899, 5908, 5, 558, 280, 2, 5900, 5908, 5, 556, 279, 2, 5901, 5908,
	7, 1116, 2, 2, 5902, 5908, 7, 1118, 2, 2, 5903, 5905, 7, 110, 2, 2, 5904,
	5903, 3, 2, 2, 2, 5904, 5905, 3, 2, 2, 2, 5905, 5906, 3, 2, 2, 2, 5906,
	5908, 9, 98, 2, 2, 5907, 5895, 3, 2, 2, 2, 5907, 5896, 3, 2, 2, 2, 5907,
	5897, 3, 2, 2, 2, 5907, 5899, 3, 2, 2, 2, 5907, 5900, 3, 2, 2, 2, 5907,
	5901, 3, 2, 2, 2, 5907, 5902, 3, 2, 2, 2, 5907, 5904, 3, 2, 2, 2, 5908,
	563, 3, 2, 2, 2, 5909, 5911, 9, 99, 2, 2, 5910, 5912, 7, 231, 2, 2, 5911,
	5910, 3, 2, 2, 2, 5911, 5912, 3, 2, 2, 2, 5912, 5914, 3, 2, 2, 2, 5913,
	5915, 5, 570, 286, 2, 5914, 5913, 3, 2, 2, 2, 5914, 5915, 3, 2, 2, 2, 5915,
	5917, 3, 2, 2, 2, 5916, 5918, 7, 219, 2, 2, 5917, 5916, 3, 2, 2, 2, 5917,
	5918, 3, 2, 2, 2, 5918, 5922, 3, 2, 2, 2, 5919, 5920, 5, 60, 31, 2, 5920,
	5921, 5, 530, 266, 2, 5921, 5923, 3, 2, 2, 2, 5922, 5919, 3, 2, 2, 2, 5922,
	5923, 3, 2, 2, 2, 5923, 5927, 3, 2, 2, 2, 5924, 5925, 7, 28, 2, 2, 5925,
	5928, 5, 532, 267, 2, 5926, 5928, 7, 219, 2, 2, 5927, 5924, 3, 2, 2, 2,
	5927, 5926, 3, 2, 2, 2, 5927, 5928, 3, 2, 2, 2, 5928, 6032, 3, 2, 2, 2,
	5929, 5930, 7, 218, 2, 2, 5930, 5932, 9, 100, 2, 2, 5931, 5933, 5, 570,
	286, 2, 5932, 5931, 3, 2, 2, 2, 5932, 5933, 3, 2, 2, 2, 5933, 5935, 3,
	2, 2, 2, 5934, 5936, 7, 219, 2, 2, 5935, 5934, 3, 2, 2, 2, 5935, 5936,
	3, 2, 2, 2, 5936, 6032, 3, 2, 2, 2, 5937, 5938, 7, 502, 2, 2, 5938, 5940,
	7, 216, 2, 2, 5939, 5941, 5, 570, 286, 2, 5940, 5939, 3, 2, 2, 2, 5940,
	5941, 3, 2, 2, 2, 5941, 5943, 3, 2, 2, 2, 5942, 5944, 7, 219, 2, 2, 5943,
	5942, 3, 2, 2, 2, 5943, 5944, 3, 2, 2, 2, 5944, 6032, 3, 2, 2, 2, 5945,
	5946, 7, 218, 2, 2, 5946, 5947, 9, 101, 2, 2, 5947, 5949, 7, 231, 2, 2,
	5948, 5950, 5, 570, 286, 2, 5949, 5948, 3, 2, 2, 2, 5949, 5950, 3, 2, 2,
	2, 5950, 5952, 3, 2, 2, 2, 5951, 5953, 7, 219, 2, 2, 5952, 5951, 3, 2,
	2, 2, 5952, 5953, 3, 2, 2, 2, 5953, 6032, 3, 2, 2, 2, 5954, 5956, 9, 102,
	2, 2, 5955, 5957, 5, 570, 286, 2, 5956, 5955, 3, 2, 2, 2, 5956, 5957, 3,
	2, 2, 2, 5957, 5961, 3, 2, 2, 2, 5958, 5960, 9, 103, 2, 2, 5959, 5958,
	3, 2, 2, 2, 5960, 5963, 3, 2, 2, 2, 5961, 5959, 3, 2, 2, 2, 5961, 5962,
	3, 2, 2, 2, 5962, 6032, 3, 2, 2, 2, 5963, 5961, 3, 2, 2, 2, 5964, 5966,
	7, 201, 2, 2, 5965, 5967, 5, 572, 287, 2, 5966, 5965, 3, 2, 2, 2, 5966,
	5967, 3, 2, 2, 2, 5967, 5971, 3, 2, 2, 2, 5968, 5970, 9, 103, 2, 2, 5969,
	5968, 3, 2, 2, 2, 5970, 5973, 3, 2, 2, 2, 5971, 5969, 3, 2, 2, 2, 5971,
	5972, 3, 2, 2, 2, 5972, 6032, 3, 2, 2, 2, 5973, 5971, 3, 2, 2, 2, 5974,
	5976, 7, 202, 2, 2, 5975, 5977, 7, 203, 2, 2, 5976, 5975, 3, 2, 2, 2, 5976,
	5977, 3, 2, 2, 2, 5977, 5979, 3, 2, 2, 2, 5978, 5980, 5, 572, 287, 2, 5979,
	5978, 3, 2, 2, 2, 5979, 5980, 3, 2, 2, 2, 5980, 5984, 3, 2, 2, 2, 5981,
	5983, 9, 103, 2, 2, 5982, 5981, 3, 2, 2, 2, 5983, 5986, 3, 2, 2, 2, 5984,
	5982, 3, 2, 2, 2, 5984, 5985, 3, 2, 2, 2, 5985, 6032, 3, 2, 2, 2, 5986,
	5984, 3, 2, 2, 2, 5987, 5989, 9, 104, 2, 2, 5988, 5990, 5, 574, 288, 2,
	5989, 5988, 3, 2, 2, 2, 5989, 5990, 3, 2, 2, 2, 5990, 5994, 3, 2, 2, 2,
	5991, 5993, 9, 103, 2, 2, 5992, 5991, 3, 2, 2, 2, 5993, 5996, 3, 2, 2,
	2, 5994, 5992, 3, 2, 2, 2, 5994, 5995, 3, 2, 2, 2, 5995, 6032, 3, 2, 2,
	2, 5996, 5994, 3, 2, 2, 2, 5997, 6032, 9, 105, 2, 2, 5998, 6000, 9, 106,
	2, 2, 5999, 6001, 5, 570, 286, 2, 6000, 5999, 3, 2, 2, 2, 6000, 6001, 3,
	2, 2, 2, 6001, 6032, 3, 2, 2, 2, 6002, 6003, 9, 107, 2, 2, 6003, 6005,
	5, 566, 284, 2, 6004, 6006, 7, 219, 2, 2, 6005, 6004, 3, 2, 2, 2, 6005,
	6006, 3, 2, 2, 2, 6006, 6010, 3, 2, 2, 2, 6007, 6008, 5, 60, 31, 2, 6008,
	6009, 5, 530, 266, 2, 6009, 6011, 3, 2, 2, 2, 6010, 6007, 3, 2, 2, 2, 6010,
	6011, 3, 2, 2, 2, 6011, 6032, 3, 2, 2, 2, 6012, 6032, 9, 108, 2, 2, 6013,
	6015, 7, 224, 2, 2, 6014, 6016, 7, 216, 2, 2, 6015, 6014, 3, 2, 2, 2, 6015,
	6016, 3, 2, 2, 2, 6016, 6018, 3, 2, 2, 2, 6017, 6019, 7, 219, 2, 2, 6018,
	6017, 3, 2, 2, 2, 6018, 6019, 3, 2, 2, 2, 6019, 6023, 3, 2, 2, 2, 6020,
	6021, 5, 60, 31, 2, 6021, 6022, 5, 530, 266, 2, 6022, 6024, 3, 2, 2, 2,
	6023, 6020, 3, 2, 2, 2, 6023, 6024, 3, 2, 2, 2, 6024, 6027, 3, 2, 2, 2,
	6025, 6026, 7, 28, 2, 2, 6026, 6028, 5, 532, 267, 2, 6027, 6025, 3, 2,
	2, 2, 6027, 6028, 3, 2, 2, 2, 6028, 6032, 3, 2, 2, 2, 6029, 6030, 7, 224,
	2, 2, 6030, 6032, 7, 220, 2, 2, 6031, 5909, 3, 2, 2, 2, 6031, 5929, 3,
	2, 2, 2, 6031, 5937, 3, 2, 2, 2, 6031, 5945, 3, 2, 2, 2, 6031, 5954, 3,
	2, 2, 2, 6031, 5964, 3, 2, 2, 2, 6031, 5974, 3, 2, 2, 2, 6031, 5987, 3,
	2, 2, 2, 6031, 5997, 3, 2, 2, 2, 6031, 5998, 3, 2, 2, 2, 6031, 6002, 3,
	2, 2, 2, 6031, 6012, 3, 2, 2, 2, 6031, 6013, 3, 2, 2, 2, 6031, 6029, 3,
	2, 2, 2, 6032, 565, 3, 2, 2, 2, 6033, 6034, 7, 1098, 2, 2, 6034, 6039,
	7, 1113, 2, 2, 6035, 6036, 7, 1100, 2, 2, 6036, 6038, 7, 1113, 2, 2, 6037,
	6035, 3, 2, 2, 2, 6038, 6041, 3, 2, 2, 2, 6039, 6037, 3, 2, 2, 2, 6039,
	6040, 3, 2, 2, 2, 6040, 6042, 3, 2, 2, 2, 6041, 6039, 3, 2, 2, 2, 6042,
	6043, 7, 1099, 2, 2, 6043, 567, 3, 2, 2, 2, 6044, 6046, 9, 109, 2, 2, 6045,
	6047, 5, 570, 286, 2, 6046, 6045, 3, 2, 2, 2, 6046, 6047, 3, 2, 2, 2, 6047,
	6067, 3, 2, 2, 2, 6048, 6050, 7, 215, 2, 2, 6049, 6051, 5, 570, 286, 2,
	6050, 6049, 3, 2, 2, 2, 6050, 6051, 3, 2, 2, 2, 6051, 6055, 3, 2, 2, 2,
	6052, 6053, 5, 60, 31, 2, 6053, 6054, 5, 530, 266, 2, 6054, 6056, 3, 2,
	2, 2, 6055, 6052, 3, 2, 2, 2, 6055, 6056, 3, 2, 2, 2, 6056, 6067, 3, 2,
	2, 2, 6057, 6067, 9, 110, 2, 2, 6058, 6060, 7, 207, 2, 2, 6059, 6061, 5,
	574, 288, 2, 6060, 6059, 3, 2, 2, 2, 6060, 6061, 3, 2, 2, 2, 6061, 6067,
	3, 2, 2, 2, 6062, 6064, 9, 111, 2, 2, 6063, 6065, 7, 199, 2, 2, 6064, 6063,
	3, 2, 2, 2, 6064, 6065, 3, 2, 2, 2, 6065, 6067, 3, 2, 2, 2, 6066, 6044,
	3, 2, 2, 2, 6066, 6048, 3, 2, 2, 2, 6066, 6057, 3, 2, 2, 2, 6066, 6058,
	3, 2, 2, 2, 6066, 6062, 3, 2, 2, 2, 6067, 6069, 3, 2, 2, 2, 6068, 6070,
	7, 13, 2, 2, 6069, 6068, 3, 2, 2, 2, 6069, 6070, 3, 2, 2, 2, 6070, 569,
	3, 2, 2, 2, 6071, 6072, 7, 1098, 2, 2, 6072, 6073, 5, 550, 276, 2, 6073,
	6074, 7, 1099, 2, 2, 6074, 571, 3, 2, 2, 2, 6075, 6076, 7, 1098, 2, 2,
	6076, 6077, 5, 550, 276, 2, 6077, 6078, 7, 1100, 2, 2, 6078, 6079, 5, 550,
	276, 2, 6079, 6080, 7, 1099, 2, 2, 6080, 573, 3, 2, 2, 2, 6081, 6082, 7,
	1098, 2, 2, 6082, 6085, 5, 550, 276, 2, 6083, 6084, 7, 1100, 2, 2, 6084,
	6086, 5, 550, 276, 2, 6085, 6083, 3, 2, 2, 2, 6085, 6086, 3, 2, 2, 2, 6086,
	6087, 3, 2, 2, 2, 6087, 6088, 7, 1099, 2, 2, 6088, 575, 3, 2, 2, 2, 6089,
	6094, 5, 544, 273, 2, 6090, 6091, 7, 1100, 2, 2, 6091, 6093, 5, 544, 273,
	2, 6092, 6090, 3, 2, 2, 2, 6093, 6096, 3, 2, 2, 2, 6094, 6092, 3, 2, 2,
	2, 6094, 6095, 3, 2, 2, 2, 6095, 577, 3, 2, 2, 2, 6096, 6094, 3, 2, 2,
	2, 6097, 6102, 5, 520, 261, 2, 6098, 6099, 7, 1100, 2, 2, 6099, 6101, 5,
	520, 261, 2, 6100, 6098, 3, 2, 2, 2, 6101, 6104, 3, 2, 2, 2, 6102, 6100,
	3, 2, 2, 2, 6102, 6103, 3, 2, 2, 2, 6103, 579, 3, 2, 2, 2, 6104, 6102,
	3, 2, 2, 2, 6105, 6106, 7, 1098, 2, 2, 6106, 6111, 5, 524, 263, 2, 6107,
	6108, 7, 1100, 2, 2, 6108, 6110, 5, 524, 263, 2, 6109, 6107, 3, 2, 2, 2,
	6110, 6113, 3, 2, 2, 2, 6111, 6109, 3, 2, 2, 2, 6111, 6112, 3, 2, 2, 2,
	6112, 6114, 3, 2, 2, 2, 6113, 6111, 3, 2, 2, 2, 6114, 6115, 7, 1099, 2,
	2, 6115, 581, 3, 2, 2, 2, 6116, 6121, 5, 642, 322, 2, 6117, 6118, 7, 1100,
	2, 2, 6118, 6120, 5, 642, 322, 2, 6119, 6117, 3, 2, 2, 2, 6120, 6123, 3,
	2, 2, 2, 6121, 6119, 3, 2, 2, 2, 6121, 6122, 3, 2, 2, 2, 6122, 583, 3,
	2, 2, 2, 6123, 6121, 3, 2, 2, 2, 6124, 6129, 5, 596, 299, 2, 6125, 6126,
	7, 1100, 2, 2, 6126, 6128, 5, 596, 299, 2, 6127, 6125, 3, 2, 2, 2, 6128,
	6131, 3, 2, 2, 2, 6129, 6127, 3, 2, 2, 2, 6129, 6130, 3, 2, 2, 2, 6130,
	585, 3, 2, 2, 2, 6131, 6129, 3, 2, 2, 2, 6132, 6137, 5, 562, 282, 2, 6133,
	6134, 7, 1100, 2, 2, 6134, 6136, 5, 562, 282, 2, 6135, 6133, 3, 2, 2, 2,
	6136, 6139, 3, 2, 2, 2, 6137, 6135, 3, 2, 2, 2, 6137, 6138, 3, 2, 2, 2,
	6138, 587, 3, 2, 2, 2, 6139, 6137, 3, 2, 2, 2, 6140, 6145, 7, 1113, 2,
	2, 6141, 6142, 7, 1100, 2, 2, 6142, 6144, 7, 1113, 2, 2, 6143, 6141, 3,
	2, 2, 2, 6144, 6147, 3, 2, 2, 2, 6145, 6143, 3, 2, 2, 2, 6145, 6146, 3,
	2, 2, 2, 6146, 589, 3, 2, 2, 2, 6147, 6145, 3, 2, 2, 2, 6148, 6153, 7,
	1125, 2, 2, 6149, 6150, 7, 1100, 2, 2, 6150, 6152, 7, 1125, 2, 2, 6151,
	6149, 3, 2, 2, 2, 6152, 6155, 3, 2, 2, 2, 6153, 6151, 3, 2, 2, 2, 6153,
	6154, 3, 2, 2, 2, 6154, 591, 3, 2, 2, 2, 6155, 6153, 3, 2, 2, 2, 6156,
	6167, 7, 112, 2, 2, 6157, 6159, 5, 648, 325, 2, 6158, 6157, 3, 2, 2, 2,
	6158, 6159, 3, 2, 2, 2, 6159, 6160, 3, 2, 2, 2, 6160, 6167, 5, 562, 282,
	2, 6161, 6167, 5, 594, 298, 2, 6162, 6163, 7, 1098, 2, 2, 6163, 6164, 5,
	642, 322, 2, 6164, 6165, 7, 1099, 2, 2, 6165, 6167, 3, 2, 2, 2, 6166, 6156,
	3, 2, 2, 2, 6166, 6158, 3, 2, 2, 2, 6166, 6161, 3, 2, 2, 2, 6166, 6162,
	3, 2, 2, 2, 6167, 6171, 3, 2, 2, 2, 6168, 6169, 7, 114, 2, 2, 6169, 6170,
	7, 177, 2, 2, 6170, 6172, 5, 594, 298, 2, 6171, 6168, 3, 2, 2, 2, 6171,
	6172, 3, 2, 2, 2, 6172, 593, 3, 2, 2, 2, 6173, 6179, 9, 112, 2, 2, 6174,
	6176, 7, 1098, 2, 2, 6175, 6177, 5, 550, 276, 2, 6176, 6175, 3, 2, 2, 2,
	6176, 6177, 3, 2, 2, 2, 6177, 6178, 3, 2, 2, 2, 6178, 6180, 7, 1099, 2,
	2, 6179, 6174, 3, 2, 2, 2, 6179, 6180, 3, 2, 2, 2, 6180, 6188, 3, 2, 2,
	2, 6181, 6182, 7, 313, 2, 2, 6182, 6184, 7, 1098, 2, 2, 6183, 6185, 5,
	550, 276, 2, 6184, 6183, 3, 2, 2, 2, 6184, 6185, 3, 2, 2, 2, 6185, 6186,
	3, 2, 2, 2, 6186, 6188, 7, 1099, 2, 2, 6187, 6173, 3, 2, 2, 2, 6187, 6181,
	3, 2, 2, 2, 6188, 595, 3, 2, 2, 2, 6189, 6192, 5, 642, 322, 2, 6190, 6192,
	7, 42, 2, 2, 6191, 6189, 3, 2, 2, 2, 6191, 6190, 3, 2, 2, 2, 6192, 597,
	3, 2, 2, 2, 6193, 6194, 7, 76, 2, 2, 6194, 6195, 7, 59, 2, 2, 6195, 599,
	3, 2, 2, 2, 6196, 6197, 7, 76, 2, 2, 6197, 6198, 7, 110, 2, 2, 6198, 6199,
	7, 59, 2, 2, 6199, 601, 3, 2, 2, 2, 6200, 6219, 5, 604, 303, 2, 6201, 6219,
	5, 612, 307, 2, 6202, 6219, 5, 614, 308, 2, 6203, 6204, 5, 634, 318, 2,
	6204, 6206, 7, 1098, 2, 2, 6205, 6207, 5, 638, 320, 2, 6206, 6205, 3, 2,
	2, 2, 6206, 6207, 3, 2, 2, 2, 6207, 6208, 3, 2, 2, 2, 6208, 6209, 7, 1099,
	2, 2, 6209, 6219, 3, 2, 2, 2, 6210, 6211, 5, 518, 260, 2, 6211, 6213, 7,
	1098, 2, 2, 6212, 6214, 5, 638, 320, 2, 6213, 6212, 3, 2, 2, 2, 6213, 6214,
	3, 2, 2, 2, 6214, 6215, 3, 2, 2, 2, 6215, 6216, 7, 1099, 2, 2, 6216, 6219,
	3, 2, 2, 2, 6217, 6219, 5, 636, 319, 2, 6218, 6200, 3, 2, 2, 2, 6218, 6201,
	3, 2, 2, 2, 6218, 6202, 3, 2, 2, 2, 6218, 6203, 3, 2, 2, 2, 6218, 6210,
	3, 2, 2, 2, 6218, 6217, 3, 2, 2, 2, 6219, 603, 3, 2, 2, 2, 6220, 6223,
	9, 113, 2, 2, 6221, 6222, 7, 1098, 2, 2, 6222, 6224, 7, 1099, 2, 2, 6223,
	6221, 3, 2, 2, 2, 6223, 6224, 3, 2, 2, 2, 6224, 6413, 3, 2, 2, 2, 6225,
	6226, 7, 33, 2, 2, 6226, 6227, 7, 1098, 2, 2, 6227, 6228, 5, 642, 322,
	2, 6228, 6229, 7, 1100, 2, 2, 6229, 6230, 5, 568, 285, 2, 6230, 6231, 7,
	1099, 2, 2, 6231, 6413, 3, 2, 2, 2, 6232, 6233, 7, 33, 2, 2, 6233, 6234,
	7, 1098, 2, 2, 6234, 6235, 5, 642, 322, 2, 6235, 6236, 7, 180, 2, 2, 6236,
	6237, 5, 530, 266, 2, 6237, 6238, 7, 1099, 2, 2, 6238, 6413, 3, 2, 2, 2,
	6239, 6240, 7, 24, 2, 2, 6240, 6241, 7, 1098, 2, 2, 6241, 6242, 5, 642,
	322, 2, 6242, 6243, 7, 14, 2, 2, 6243, 6244, 5, 568, 285, 2, 6244, 6245,
	7, 1099, 2, 2, 6245, 6413, 3, 2, 2, 2, 6246, 6247, 7, 181, 2, 2, 6247,
	6248, 7, 1098, 2, 2, 6248, 6249, 5, 522, 262, 2, 6249, 6250, 7, 1099, 2,
	2, 6250, 6413, 3, 2, 2, 2, 6251, 6252, 7, 23, 2, 2, 6252, 6254, 5, 642,
	322, 2, 6253, 6255, 5, 606, 304, 2, 6254, 6253, 3, 2, 2, 2, 6255, 6256,
	3, 2, 2, 2, 6256, 6254, 3, 2, 2, 2, 6256, 6257, 3, 2, 2, 2, 6257, 6260,
	3, 2, 2, 2, 6258, 6259, 7, 53, 2, 2, 6259, 6261, 5, 640, 321, 2, 6260,
	6258, 3, 2, 2, 2, 6260, 6261, 3, 2, 2, 2, 6261, 6262, 3, 2, 2, 2, 6262,
	6263, 7, 394, 2, 2, 6263, 6413, 3, 2, 2, 2, 6264, 6266, 7, 23, 2, 2, 6265,
	6267, 5, 606, 304, 2, 6266, 6265, 3, 2, 2, 2, 6267, 6268, 3, 2, 2, 2, 6268,
	6266, 3, 2, 2, 2, 6268, 6269, 3, 2, 2, 2, 6269, 6272, 3, 2, 2, 2, 6270,
	6271, 7, 53, 2, 2, 6271, 6273, 5, 640, 321, 2, 6272, 6270, 3, 2, 2, 2,
	6272, 6273, 3, 2, 2, 2, 6273, 6274, 3, 2, 2, 2, 6274, 6275, 7, 394, 2,
	2, 6275, 6413, 3, 2, 2, 2, 6276, 6277, 7, 215, 2, 2, 6277, 6278, 7, 1098,
	2, 2, 6278, 6281, 5, 638, 320, 2, 6279, 6280, 7, 180, 2, 2, 6280, 6282,
	5, 530, 266, 2, 6281, 6279, 3, 2, 2, 2, 6281, 6282, 3, 2, 2, 2, 6282, 6283,
	3, 2, 2, 2, 6283, 6284, 7, 1099, 2, 2, 6284, 6413, 3, 2, 2, 2, 6285, 6286,
	7, 314, 2, 2, 6286, 6289, 7, 1098, 2, 2, 6287, 6290, 5, 554, 278, 2, 6288,
	6290, 5, 642, 322, 2, 6289, 6287, 3, 2, 2, 2, 6289, 6288, 3, 2, 2, 2, 6290,
	6291, 3, 2, 2, 2, 6291, 6294, 7, 79, 2, 2, 6292, 6295, 5, 554, 278, 2,
	6293, 6295, 5, 642, 322, 2, 6294, 6292, 3, 2, 2, 2, 6294, 6293, 3, 2, 2,
	2, 6295, 6296, 3, 2, 2, 2, 6296, 6297, 7, 1099, 2, 2, 6297, 6413, 3, 2,
	2, 2, 6298, 6299, 9, 114, 2, 2, 6299, 6302, 7, 1098, 2, 2, 6300, 6303,
	5, 554, 278, 2, 6301, 6303, 5, 642, 322, 2, 6302, 6300, 3, 2, 2, 2, 6302,
	6301, 3, 2, 2, 2, 6303, 6304, 3, 2, 2, 2, 6304, 6307, 7, 67, 2, 2, 6305,
	6308, 5, 550, 276, 2, 6306, 6308, 5, 642, 322, 2, 6307, 6305, 3, 2, 2,
	2, 6307, 6306, 3, 2, 2, 2, 6308, 6314, 3, 2, 2, 2, 6309, 6312, 7, 64, 2,
	2, 6310, 6313, 5, 550, 276, 2, 6311, 6313, 5, 642, 322, 2, 6312, 6310,
	3, 2, 2, 2, 6312, 6311, 3, 2, 2, 2, 6313, 6315, 3, 2, 2, 2, 6314, 6309,
	3, 2, 2, 2, 6314, 6315, 3, 2, 2, 2, 6315, 6316, 3, 2, 2, 2, 6316, 6317,
	7, 1099, 2, 2, 6317, 6413, 3, 2, 2, 2, 6318, 6319, 7, 318, 2, 2, 6319,
	6320, 7, 1098, 2, 2, 6320, 6323, 9, 115, 2, 2, 6321, 6324, 5, 554, 278,
	2, 6322, 6324, 5, 642, 322, 2, 6323, 6321, 3, 2, 2, 2, 6323, 6322, 3, 2,
	2, 2, 6323, 6324, 3, 2, 2, 2, 6324, 6325, 3, 2, 2, 2, 6325, 6328, 7, 67,
	2, 2, 6326, 6329, 5, 554, 278, 2, 6327, 6329, 5, 642, 322, 2, 6328, 6326,
	3, 2, 2, 2, 6328, 6327, 3, 2, 2, 2, 6329, 6330, 3, 2, 2, 2, 6330, 6331,
	7, 1099, 2, 2, 6331, 6413, 3, 2, 2, 2, 6332, 6333, 7, 318, 2, 2, 6333,
	6336, 7, 1098, 2, 2, 6334, 6337, 5, 554, 278, 2, 6335, 6337, 5, 642, 322,
	2, 6336, 6334, 3, 2, 2, 2, 6336, 6335, 3, 2, 2, 2, 6337, 6338, 3, 2, 2,
	2, 6338, 6341, 7, 67, 2, 2, 6339, 6342, 5, 554, 278, 2, 6340, 6342, 5,
	642, 322, 2, 6341, 6339, 3, 2, 2, 2, 6341, 6340, 3, 2, 2, 2, 6342, 6343,
	3, 2, 2, 2, 6343, 6344, 7, 1099, 2, 2, 6344, 6413, 3, 2, 2, 2, 6345, 6346,
	7, 1068, 2, 2, 6346, 6349, 7, 1098, 2, 2, 6347, 6350, 5, 554, 278, 2, 6348,
	6350, 5, 642, 322, 2, 6349, 6347, 3, 2, 2, 2, 6349, 6348, 3, 2, 2, 2, 6350,
	6357, 3, 2, 2, 2, 6351, 6352, 7, 14, 2, 2, 6352, 6353, 9, 116, 2, 2, 6353,
	6354, 7, 1098, 2, 2, 6354, 6355, 5, 550, 276, 2, 6355, 6356, 7, 1099, 2,
	2, 6356, 6358, 3, 2, 2, 2, 6357, 6351, 3, 2, 2, 2, 6357, 6358, 3, 2, 2,
	2, 6358, 6360, 3, 2, 2, 2, 6359, 6361, 5, 608, 305, 2, 6360, 6359, 3, 2,
	2, 2, 6360, 6361, 3, 2, 2, 2, 6361, 6362, 3, 2, 2, 2, 6362, 6363, 7, 1099,
	2, 2, 6363, 6413, 3, 2, 2, 2, 6364, 6365, 7, 311, 2, 2, 6365, 6366, 7,
	1098, 2, 2, 6366, 6367, 5, 70, 36, 2, 6367, 6370, 7, 67, 2, 2, 6368, 6371,
	5, 554, 278, 2, 6369, 6371, 5, 642, 322, 2, 6370, 6368, 3, 2, 2, 2, 6370,
	6369, 3, 2, 2, 2, 6371, 6372, 3, 2, 2, 2, 6372, 6373, 7, 1099, 2, 2, 6373,
	6413, 3, 2, 2, 2, 6374, 6375, 7, 867, 2, 2, 6375, 6376, 7, 1098, 2, 2,
	6376, 6377, 9, 117, 2, 2, 6377, 6378, 7, 1100, 2, 2, 6378, 6379, 5, 554,
	278, 2, 6379, 6380, 7, 1099, 2, 2, 6380, 6413, 3, 2, 2, 2, 6381, 6382,
	7, 253, 2, 2, 6382, 6383, 7, 1098, 2, 2, 6383, 6384, 5, 642, 322, 2, 6384,
	6385, 7, 1100, 2, 2, 6385, 6388, 5, 642, 322, 2, 6386, 6387, 7, 569, 2,
	2, 6387, 6389, 5, 568, 285, 2, 6388, 6386, 3, 2, 2, 2, 6388, 6389, 3, 2,
	2, 2, 6389, 6398, 3, 2, 2, 2, 6390, 6395, 7, 112, 2, 2, 6391, 6395, 7,
	398, 2, 2, 6392, 6393, 7, 42, 2, 2, 6393, 6395, 5, 592, 297, 2, 6394, 6390,
	3, 2, 2, 2, 6394, 6391, 3, 2, 2, 2, 6394, 6392, 3, 2, 2, 2, 6395, 6396,
	3, 2, 2, 2, 6396, 6397, 7, 114, 2, 2, 6397, 6399, 7, 55, 2, 2, 6398, 6394,
	3, 2, 2, 2, 6398, 6399, 3, 2, 2, 2, 6399, 6408, 3, 2, 2, 2, 6400, 6405,
	7, 112, 2, 2, 6401, 6405, 7, 398, 2, 2, 6402, 6403, 7, 42, 2, 2, 6403,
	6405, 5, 592, 297, 2, 6404, 6400, 3, 2, 2, 2, 6404, 6401, 3, 2, 2, 2, 6404,
	6402, 3, 2, 2, 2, 6405, 6406, 3, 2, 2, 2, 6406, 6407, 7, 114, 2, 2, 6407,
	6409, 7, 398, 2, 2, 6408, 6404, 3, 2, 2, 2, 6408, 6409, 3, 2, 2, 2, 6409,
	6410, 3, 2, 2, 2, 6410, 6411, 7, 1099, 2, 2, 6411, 6413, 3, 2, 2, 2, 6412,
	6220, 3, 2, 2, 2, 6412, 6225, 3, 2, 2, 2, 6412, 6232, 3, 2, 2, 2, 6412,
	6239, 3, 2, 2, 2, 6412, 6246, 3, 2, 2, 2, 6412, 6251, 3, 2, 2, 2, 6412,
	6264, 3, 2, 2, 2, 6412, 6276, 3, 2, 2, 2, 6412, 6285, 3, 2, 2, 2, 6412,
	6298, 3, 2, 2, 2, 6412, 6318, 3, 2, 2, 2, 6412, 6332, 3, 2, 2, 2, 6412,
	6345, 3, 2, 2, 2, 6412, 6364, 3, 2, 2, 2, 6412, 6374, 3, 2, 2, 2, 6412,
	6381, 3, 2, 2, 2, 6413, 605, 3, 2, 2, 2, 6414, 6415, 7, 182, 2, 2, 6415,
	6416, 5, 640, 321, 2, 6416, 6417, 7, 167, 2, 2, 6417, 6418, 5, 640, 321,
	2, 6418, 607, 3, 2, 2, 2, 6419, 6420, 7, 456, 2, 2, 6420, 6425, 5, 610,
	306, 2, 6421, 6422, 7, 1100, 2, 2, 6422, 6424, 5, 610, 306, 2, 6423, 6421,
	3, 2, 2, 2, 6424, 6427, 3, 2, 2, 2, 6425, 6423, 3, 2, 2, 2, 6425, 6426,
	3, 2, 2, 2, 6426, 6434, 3, 2, 2, 2, 6427, 6425, 3, 2, 2, 2, 6428, 6429,
	7, 456, 2, 2, 6429, 6430, 5, 550, 276, 2, 6430, 6431, 7, 1086, 2, 2, 6431,
	6432, 5, 550, 276, 2, 6432, 6434, 3, 2, 2, 2, 6433, 6419, 3, 2, 2, 2, 6433,
	6428, 3, 2, 2, 2, 6434, 609, 3, 2, 2, 2, 6435, 6437, 5, 550, 276, 2, 6436,
	6438, 9, 118, 2, 2, 6437, 6436, 3, 2, 2, 2, 6437, 6438, 3, 2, 2, 2, 6438,
	611, 3, 2, 2, 2, 6439, 6440, 9, 119, 2, 2, 6440, 6442, 7, 1098, 2, 2, 6441,
	6443, 9, 45, 2, 2, 6442, 6441, 3, 2, 2, 2, 6442, 6443, 3, 2, 2, 2, 6443,
	6444, 3, 2, 2, 2, 6444, 6445, 5, 640, 321, 2, 6445, 6447, 7, 1099, 2, 2,
	6446, 6448, 5, 616, 309, 2, 6447, 6446, 3, 2, 2, 2, 6447, 6448, 3, 2, 2,
	2, 6448, 6499, 3, 2, 2, 2, 6449, 6450, 7, 280, 2, 2, 6450, 6458, 7, 1098,
	2, 2, 6451, 6459, 7, 1082, 2, 2, 6452, 6454, 7, 8, 2, 2, 6453, 6452, 3,
	2, 2, 2, 6453, 6454, 3, 2, 2, 2, 6454, 6455, 3, 2, 2, 2, 6455, 6459, 5,
	640, 321, 2, 6456, 6457, 7, 49, 2, 2, 6457, 6459, 5, 638, 320, 2, 6458,
	6451, 3, 2, 2, 2, 6458, 6453, 3, 2, 2, 2, 6458, 6456, 3, 2, 2, 2, 6459,
	6460, 3, 2, 2, 2, 6460, 6462, 7, 1099, 2, 2, 6461, 6463, 5, 616, 309, 2,
	6462, 6461, 3, 2, 2, 2, 6462, 6463, 3, 2, 2, 2, 6463, 6499, 3, 2, 2, 2,
	6464, 6465, 9, 120, 2, 2, 6465, 6467, 7, 1098, 2, 2, 6466, 6468, 7, 8,
	2, 2, 6467, 6466, 3, 2, 2, 2, 6467, 6468, 3, 2, 2, 2, 6468, 6469, 3, 2,
	2, 2, 6469, 6470, 5, 640, 321, 2, 6470, 6472, 7, 1099, 2, 2, 6471, 6473,
	5, 616, 309, 2, 6472, 6471, 3, 2, 2, 2, 6472, 6473, 3, 2, 2, 2, 6473, 6499,
	3, 2, 2, 2, 6474, 6475, 7, 284, 2, 2, 6475, 6477, 7, 1098, 2, 2, 6476,
	6478, 7, 49, 2, 2, 6477, 6476, 3, 2, 2, 2, 6477, 6478, 3, 2, 2, 2, 6478,
	6479, 3, 2, 2, 2, 6479, 6490, 5, 638, 320, 2, 6480, 6481, 7, 120, 2, 2,
	6481, 6482, 7, 20, 2, 2, 6482, 6487, 5, 222, 112, 2, 6483, 6484, 7, 1100,
	2, 2, 6484, 6486, 5, 222, 112, 2, 6485, 6483, 3, 2, 2, 2, 6486, 6489, 3,
	2, 2, 2, 6487, 6485, 3, 2, 2, 2, 6487, 6488, 3, 2, 2, 2, 6488, 6491, 3,
	2, 2, 2, 6489, 6487, 3, 2, 2, 2, 6490, 6480, 3, 2, 2, 2, 6490, 6491, 3,
	2, 2, 2, 6491, 6494, 3, 2, 2, 2, 6492, 6493, 7, 150, 2, 2, 6493, 6495,
	7, 1113, 2, 2, 6494, 6492, 3, 2, 2, 2, 6494, 6495, 3, 2, 2, 2, 6495, 6496,
	3, 2, 2, 2, 6496, 6497, 7, 1099, 2, 2, 6497, 6499, 3, 2, 2, 2, 6498, 6439,
	3, 2, 2, 2, 6498, 6449, 3, 2, 2, 2, 6498, 6464, 3, 2, 2, 2, 6498, 6474,
	3, 2, 2, 2, 6499, 613, 3, 2, 2, 2, 6500, 6501, 9, 121, 2, 2, 6501, 6502,
	7, 1098, 2, 2, 6502, 6505, 5, 642, 322, 2, 6503, 6504, 7, 1100, 2, 2, 6504,
	6506, 5, 550, 276, 2, 6505, 6503, 3, 2, 2, 2, 6505, 6506, 3, 2, 2, 2, 6506,
	6509, 3, 2, 2, 2, 6507, 6508, 7, 1100, 2, 2, 6508, 6510, 5, 550, 276, 2,
	6509, 6507, 3, 2, 2, 2, 6509, 6510, 3, 2, 2, 2, 6510, 6511, 3, 2, 2, 2,
	6511, 6512, 7, 1099, 2, 2, 6512, 6513, 5, 616, 309, 2, 6513, 6539, 3, 2,
	2, 2, 6514, 6515, 9, 122, 2, 2, 6515, 6516, 7, 1098, 2, 2, 6516, 6517,
	5, 642, 322, 2, 6517, 6518, 7, 1099, 2, 2, 6518, 6519, 5, 616, 309, 2,
	6519, 6539, 3, 2, 2, 2, 6520, 6521, 9, 123, 2, 2, 6521, 6522, 7, 1098,
	2, 2, 6522, 6523, 7, 1099, 2, 2, 6523, 6539, 5, 616, 309, 2, 6524, 6525,
	7, 291, 2, 2, 6525, 6526, 7, 1098, 2, 2, 6526, 6527, 5, 642, 322, 2, 6527,
	6528, 7, 1100, 2, 2, 6528, 6529, 5, 550, 276, 2, 6529, 6530, 7, 1099, 2,
	2, 6530, 6531, 5, 616, 309, 2, 6531, 6539, 3, 2, 2, 2, 6532, 6533, 7, 290,
	2, 2, 6533, 6534, 7, 1098, 2, 2, 6534, 6535, 5, 550, 276, 2, 6535, 6536,
	7, 1099, 2, 2, 6536, 6537, 5, 616, 309, 2, 6537, 6539, 3, 2, 2, 2, 6538,
	6500, 3, 2, 2, 2, 6538, 6514, 3, 2, 2, 2, 6538, 6520, 3, 2, 2, 2, 6538,
	6524, 3, 2, 2, 2, 6538, 6532, 3, 2, 2, 2, 6539, 615, 3, 2, 2, 2, 6540,
	6547, 7, 122, 2, 2, 6541, 6543, 7, 1098, 2, 2, 6542, 6544, 5, 618, 310,
	2, 6543, 6542, 3, 2, 2, 2, 6543, 6544, 3, 2, 2, 2, 6544, 6545, 3, 2, 2,
	2, 6545, 6548, 7, 1099, 2, 2, 6546, 6548, 5, 620, 311, 2, 6547, 6541, 3,
	2, 2, 2, 6547, 6546, 3, 2, 2, 2, 6548, 617, 3, 2, 2, 2, 6549, 6551, 5,
	620, 311, 2, 6550, 6549, 3, 2, 2, 2, 6550, 6551, 3, 2, 2, 2, 6551, 6553,
	3, 2, 2, 2, 6552, 6554, 5, 632, 317, 2, 6553, 6552, 3, 2, 2, 2, 6553, 6554,
	3, 2, 2, 2, 6554, 6556, 3, 2, 2, 2, 6555, 6557, 5, 220, 111, 2, 6556, 6555,
	3, 2, 2, 2, 6556, 6557, 3, 2, 2, 2, 6557, 6559, 3, 2, 2, 2, 6558, 6560,
	5, 622, 312, 2, 6559, 6558, 3, 2, 2, 2, 6559, 6560, 3, 2, 2, 2, 6560, 619,
	3, 2, 2, 2, 6561, 6562, 5, 544, 273, 2, 6562, 621, 3, 2, 2, 2, 6563, 6564,
	5, 624, 313, 2, 6564, 6565, 5, 626, 314, 2, 6565, 623, 3, 2, 2, 2, 6566,
	6567, 9, 124, 2, 2, 6567, 625, 3, 2, 2, 2, 6568, 6571, 5, 630, 316, 2,
	6569, 6571, 5, 628, 315, 2, 6570, 6568, 3, 2, 2, 2, 6570, 6569, 3, 2, 2,
	2, 6571, 627, 3, 2, 2, 2, 6572, 6573, 7, 17, 2, 2, 6573, 6574, 5, 630,
	316, 2, 6574, 6575, 7, 12, 2, 2, 6575, 6576, 5, 630, 316, 2, 6576, 629,
	3, 2, 2, 2, 6577, 6578, 7, 36, 2, 2, 6578, 6585, 7, 575, 2, 2, 6579, 6580,
	7, 631, 2, 2, 6580, 6585, 9, 125, 2, 2, 6581, 6582, 5, 642, 322, 2, 6582,
	6583, 9, 125, 2, 2, 6583, 6585, 3, 2, 2, 2, 6584, 6577, 3, 2, 2, 2, 6584,
	6579, 3, 2, 2, 2, 6584, 6581, 3, 2, 2, 2, 6585, 631, 3, 2, 2, 2, 6586,
	6587, 7, 125, 2, 2, 6587, 6588, 7, 20, 2, 2, 6588, 6593, 5, 642, 322, 2,
	6589, 6590, 7, 1100, 2, 2, 6590, 6592, 5, 642, 322, 2, 6591, 6589, 3, 2,
	2, 2, 6592, 6595, 3, 2, 2, 2, 6593, 6591, 3, 2, 2, 2, 6593, 6594, 3, 2,
	2, 2, 6594, 633, 3, 2, 2, 2, 6595, 6593, 3, 2, 2, 2, 6596, 6620, 5, 672,
	337, 2, 6597, 6620, 7, 714, 2, 2, 6598, 6620, 7, 307, 2, 2, 6599, 6620,
	7, 303, 2, 2, 6600, 6620, 7, 304, 2, 2, 6601, 6620, 7, 305, 2, 2, 6602,
	6620, 7, 308, 2, 2, 6603, 6620, 7, 309, 2, 2, 6604, 6620, 7, 310, 2, 2,
	6605, 6620, 7, 76, 2, 2, 6606, 6620, 7, 84, 2, 2, 6607, 6620, 7, 306, 2,
	2, 6608, 6620, 7, 312, 2, 2, 6609, 6620, 7, 492, 2, 2, 6610, 6620, 7, 313,
	2, 2, 6611, 6620, 7, 137, 2, 2, 6612, 6620, 7, 315, 2, 2, 6613, 6620, 7,
	316, 2, 2, 6614, 6620, 7, 317, 2, 2, 6615, 6620, 7, 318, 2, 2, 6616, 6620,
	7, 319, 2, 2, 6617, 6620, 7, 320, 2, 2, 6618, 6620, 7, 321, 2, 2, 6619,
	6596, 3, 2, 2, 2, 6619, 6597, 3, 2, 2, 2, 6619, 6598, 3, 2, 2, 2, 6619,
	6599, 3, 2, 2, 2, 6619, 6600, 3, 2, 2, 2, 6619, 6601, 3, 2, 2, 2, 6619,
	6602, 3, 2, 2, 2, 6619, 6603, 3, 2, 2, 2, 6619, 6604, 3, 2, 2, 2, 6619,
	6605, 3, 2, 2, 2, 6619, 6606, 3, 2, 2, 2, 6619, 6607, 3, 2, 2, 2, 6619,
	6608, 3, 2, 2, 2, 6619, 6609, 3, 2, 2, 2, 6619, 6610, 3, 2, 2, 2, 6619,
	6611, 3, 2, 2, 2, 6619, 6612, 3, 2, 2, 2, 6619, 6613, 3, 2, 2, 2, 6619,
	6614, 3, 2, 2, 2, 6619, 6615, 3, 2, 2, 2, 6619, 6616, 3, 2, 2, 2, 6619,
	6617, 3, 2, 2, 2, 6619, 6618, 3, 2, 2, 2, 6620, 635, 3, 2, 2, 2, 6621,
	6622, 9, 126, 2, 2, 6622, 6623, 7, 1098, 2, 2, 6623, 6624, 5, 640, 321,
	2, 6624, 6625, 7, 1099, 2, 2, 6625, 637, 3, 2, 2, 2, 6626, 6631, 5, 562,
	282, 2, 6627, 6631, 5, 522, 262, 2, 6628, 6631, 5, 602, 302, 2, 6629, 6631,
	5, 642, 322, 2, 6630, 6626, 3, 2, 2, 2, 6630, 6627, 3, 2, 2, 2, 6630, 6628,
	3, 2, 2, 2, 6630, 6629, 3, 2, 2, 2, 6631, 6641, 3, 2, 2, 2, 6632, 6637,
	7, 1100, 2, 2, 6633, 6638, 5, 562, 282, 2, 6634, 6638, 5, 522, 262, 2,
	6635, 6638, 5, 602, 302, 2, 6636, 6638, 5, 642, 322, 2, 6637, 6633, 3,
	2, 2, 2, 6637, 6634, 3, 2, 2, 2, 6637, 6635, 3, 2, 2, 2, 6637, 6636, 3,
	2, 2, 2, 6638, 6640, 3, 2, 2, 2, 6639, 6632, 3, 2, 2, 2, 6640, 6643, 3,
	2, 2, 2, 6641, 6639, 3, 2, 2, 2, 6641, 6642, 3, 2, 2, 2, 6642, 639, 3,
	2, 2, 2, 6643, 6641, 3, 2, 2, 2, 6644, 6649, 5, 562, 282, 2, 6645, 6649,
	5, 522, 262, 2, 6646, 6649, 5, 602, 302, 2, 6647, 6649, 5, 642, 322, 2,
	6648, 6644, 3, 2, 2, 2, 6648, 6645, 3, 2, 2, 2, 6648, 6646, 3, 2, 2, 2,
	6648, 6647, 3, 2, 2, 2, 6649, 641, 3, 2, 2, 2, 6650, 6651, 8, 322, 1, 2,
	6651, 6652, 9, 127, 2, 2, 6652, 6662, 5, 642, 322, 6, 6653, 6654, 5, 644,
	323, 2, 6654, 6656, 7, 87, 2, 2, 6655, 6657, 7, 110, 2, 2, 6656, 6655,
	3, 2, 2, 2, 6656, 6657, 3, 2, 2, 2, 6657, 6658, 3, 2, 2, 2, 6658, 6659,
	9, 128, 2, 2, 6659, 6662, 3, 2, 2, 2, 6660, 6662, 5, 644, 323, 2, 6661,
	6650, 3, 2, 2, 2, 6661, 6653, 3, 2, 2, 2, 6661, 6660, 3, 2, 2, 2, 6662,
	6669, 3, 2, 2, 2, 6663, 6664, 12, 5, 2, 2, 6664, 6665, 5, 652, 327, 2,
	6665, 6666, 5, 642, 322, 6, 6666, 6668, 3, 2, 2, 2, 6667, 6663, 3, 2, 2,
	2, 6668, 6671, 3, 2, 2, 2, 6669, 6667, 3, 2, 2, 2, 6669, 6670, 3, 2, 2,
	2, 6670, 643, 3, 2, 2, 2, 6671, 6669, 3, 2, 2, 2, 6672, 6675, 8, 323, 1,
	2, 6673, 6674, 7, 1125, 2, 2, 6674, 6676, 7, 1073, 2, 2, 6675, 6673, 3,
	2, 2, 2, 6675, 6676, 3, 2, 2, 2, 6676, 6677, 3, 2, 2, 2, 6677, 6678, 5,
	646, 324, 2, 6678, 6743, 3, 2, 2, 2, 6679, 6680, 12, 10, 2, 2, 6680, 6681,
	5, 650, 326, 2, 6681, 6682, 5, 644, 323, 11, 6682, 6742, 3, 2, 2, 2, 6683,
	6685, 12, 8, 2, 2, 6684, 6686, 7, 110, 2, 2, 6685, 6684, 3, 2, 2, 2, 6685,
	6686, 3, 2, 2, 2, 6686, 6687, 3, 2, 2, 2, 6687, 6688, 7, 17, 2, 2, 6688,
	6689, 5, 644, 323, 2, 6689, 6690, 7, 12, 2, 2, 6690, 6691, 5, 644, 323,
	9, 6691, 6742, 3, 2, 2, 2, 6692, 6693, 12, 7, 2, 2, 6693, 6694, 7, 594,
	2, 2, 6694, 6695, 7, 96, 2, 2, 6695, 6742, 5, 644, 323, 8, 6696, 6698,
	12, 5, 2, 2, 6697, 6699, 7, 110, 2, 2, 6698, 6697, 3, 2, 2, 2, 6698, 6699,
	3, 2, 2, 2, 6699, 6700, 3, 2, 2, 2, 6700, 6701, 9, 129, 2, 2, 6701, 6742,
	5, 644, 323, 6, 6702, 6704, 12, 12, 2, 2, 6703, 6705, 7, 110, 2, 2, 6704,
	6703, 3, 2, 2, 2, 6704, 6705, 3, 2, 2, 2, 6705, 6706, 3, 2, 2, 2, 6706,
	6707, 7, 79, 2, 2, 6707, 6710, 7, 1098, 2, 2, 6708, 6711, 5, 192, 97, 2,
	6709, 6711, 5, 582, 292, 2, 6710, 6708, 3, 2, 2, 2, 6710, 6709, 3, 2, 2,
	2, 6711, 6712, 3, 2, 2, 2, 6712, 6713, 7, 1099, 2, 2, 6713, 6742, 3, 2,
	2, 2, 6714, 6715, 12, 11, 2, 2, 6715, 6716, 7, 87, 2, 2, 6716, 6742, 5,
	560, 281, 2, 6717, 6718, 12, 9, 2, 2, 6718, 6719, 5, 650, 326, 2, 6719,
	6720, 9, 130, 2, 2, 6720, 6721, 7, 1098, 2, 2, 6721, 6722, 5, 192, 97,
	2, 6722, 6723, 7, 1099, 2, 2, 6723, 6742, 3, 2, 2, 2, 6724, 6726, 12, 6,
	2, 2, 6725, 6727, 7, 110, 2, 2, 6726, 6725, 3, 2, 2, 2, 6726, 6727, 3,
	2, 2, 2, 6727, 6728, 3, 2, 2, 2, 6728, 6729, 7, 96, 2, 2, 6729, 6732, 5,
	644, 323, 2, 6730, 6731, 7, 400, 2, 2, 6731, 6733, 7, 1113, 2, 2, 6732,
	6730, 3, 2, 2, 2, 6732, 6733, 3, 2, 2, 2, 6733, 6742, 3, 2, 2, 2, 6734,
	6735, 12, 3, 2, 2, 6735, 6736, 7, 489, 2, 2, 6736, 6737, 7, 513, 2, 2,
	6737, 6738, 7, 1098, 2, 2, 6738, 6739, 5, 644, 323, 2, 6739, 6740, 7, 1099,
	2, 2, 6740, 6742, 3, 2, 2, 2, 6741, 6679, 3, 2, 2, 2, 6741, 6683, 3, 2,
	2, 2, 6741, 6692, 3, 2, 2, 2, 6741, 6696, 3, 2, 2, 2, 6741, 6702, 3, 2,
	2, 2, 6741, 6714, 3, 2, 2, 2, 6741, 6717, 3, 2, 2, 2, 6741, 6724, 3, 2,
	2, 2, 6741, 6734, 3, 2, 2, 2, 6742, 6745, 3, 2, 2, 2, 6743, 6741, 3, 2,
	2, 2, 6743, 6744, 3, 2, 2, 2, 6744, 645, 3, 2, 2, 2, 6745, 6743, 3, 2,
	2, 2, 6746, 6747, 8, 324, 1, 2, 6747, 6792, 5, 562, 282, 2, 6748, 6792,
	5, 522, 262, 2, 6749, 6792, 5, 602, 302, 2, 6750, 6792, 5, 528, 265, 2,
	6751, 6752, 5, 648, 325, 2, 6752, 6753, 5, 646, 324, 12, 6753, 6792, 3,
	2, 2, 2, 6754, 6755, 7, 219, 2, 2, 6755, 6792, 5, 646, 324, 11, 6756, 6757,
	7, 1098, 2, 2, 6757, 6762, 5, 642, 322, 2, 6758, 6759, 7, 1100, 2, 2, 6759,
	6761, 5, 642, 322, 2, 6760, 6758, 3, 2, 2, 2, 6761, 6764, 3, 2, 2, 2, 6762,
	6760, 3, 2, 2, 2, 6762, 6763, 3, 2, 2, 2, 6763, 6765, 3, 2, 2, 2, 6764,
	6762, 3, 2, 2, 2, 6765, 6766, 7, 1099, 2, 2, 6766, 6792, 3, 2, 2, 2, 6767,
	6768, 7, 575, 2, 2, 6768, 6769, 7, 1098, 2, 2, 6769, 6772, 5, 642, 322,
	2, 6770, 6771, 7, 1100, 2, 2, 6771, 6773, 5, 642, 322, 2, 6772, 6770, 3,
	2, 2, 2, 6773, 6774, 3, 2, 2, 2, 6774, 6772, 3, 2, 2, 2, 6774, 6775, 3,
	2, 2, 2, 6775, 6776, 3, 2, 2, 2, 6776, 6777, 7, 1099, 2, 2, 6777, 6792,
	3, 2, 2, 2, 6778, 6779, 7, 59, 2, 2, 6779, 6780, 7, 1098, 2, 2, 6780, 6781,
	5, 192, 97, 2, 6781, 6782, 7, 1099, 2, 2, 6782, 6792, 3, 2, 2, 2, 6783,
	6784, 7, 1098, 2, 2, 6784, 6785, 5, 192, 97, 2, 6785, 6786, 7, 1099, 2,
	2, 6786, 6792, 3, 2, 2, 2, 6787, 6788, 7, 85, 2, 2, 6788, 6789, 5, 642,
	322, 2, 6789, 6790, 5, 70, 36, 2, 6790, 6792, 3, 2, 2, 2, 6791, 6746, 3,
	2, 2, 2, 6791, 6748, 3, 2, 2, 2, 6791, 6749, 3, 2, 2, 2, 6791, 6750, 3,
	2, 2, 2, 6791, 6751, 3, 2, 2, 2, 6791, 6754, 3, 2, 2, 2, 6791, 6756, 3,
	2, 2, 2, 6791, 6767, 3, 2, 2, 2, 6791, 6778, 3, 2, 2, 2, 6791, 6783, 3,
	2, 2, 2, 6791, 6787, 3, 2, 2, 2, 6792, 6810, 3, 2, 2, 2, 6793, 6794, 12,
	5, 2, 2, 6794, 6795, 5, 654, 328, 2, 6795, 6796, 5, 646, 324, 6, 6796,
	6809, 3, 2, 2, 2, 6797, 6798, 12, 4, 2, 2, 6798, 6799, 5, 656, 329, 2,
	6799, 6800, 5, 646, 324, 5, 6800, 6809, 3, 2, 2, 2, 6801, 6802, 12, 3,
	2, 2, 6802, 6803, 5, 658, 330, 2, 6803, 6804, 5, 646, 324, 4, 6804, 6809,
	3, 2, 2, 2, 6805, 6806, 12, 14, 2, 2, 6806, 6807, 7, 28, 2, 2, 6807, 6809,
	5, 532, 267, 2, 6808, 6793, 3, 2, 2, 2, 6808, 6797, 3, 2, 2, 2, 6808, 6801,
	3, 2, 2, 2, 6808, 6805, 3, 2, 2, 2, 6809, 6812, 3, 2, 2, 2, 6810, 6808,
	3, 2, 2, 2, 6810, 6811, 3, 2, 2, 2, 6811, 647, 3, 2, 2, 2, 6812, 6810,
	3, 2, 2, 2, 6813, 6814, 9, 131, 2, 2, 6814, 649, 3, 2, 2, 2, 6815, 6830,
	7, 1089, 2, 2, 6816, 6830, 7, 1090, 2, 2, 6817, 6830, 7, 1091, 2, 2, 6818,
	6819, 7, 1091, 2, 2, 6819, 6830, 7, 1089, 2, 2, 6820, 6821, 7, 1090, 2,
	2, 6821, 6830, 7, 1089, 2, 2, 6822, 6823, 7, 1091, 2, 2, 6823, 6830, 7,
	1090, 2, 2, 6824, 6825, 7, 1092, 2, 2, 6825, 6830, 7, 1089, 2, 2, 6826,
	6827, 7, 1091, 2, 2, 6827, 6828, 7, 1089, 2, 2, 6828, 6830, 7, 1090, 2,
	2, 6829, 6815, 3, 2, 2, 2, 6829, 6816, 3, 2, 2, 2, 6829, 6817, 3, 2, 2,
	2, 6829, 6818, 3, 2, 2, 2, 6829, 6820, 3, 2, 2, 2, 6829, 6822, 3, 2, 2,
	2, 6829, 6824, 3, 2, 2, 2, 6829, 6826, 3, 2, 2, 2, 6830, 651, 3, 2, 2,
	2, 6831, 6839, 7, 12, 2, 2, 6832, 6833, 7, 1095, 2, 2, 6833, 6839, 7, 1095,
	2, 2, 6834, 6839, 7, 187, 2, 2, 6835, 6839, 7, 119, 2, 2, 6836, 6837, 7,
	1094, 2, 2, 6837, 6839, 7, 1094, 2, 2, 6838, 6831, 3, 2, 2, 2, 6838, 6832,
	3, 2, 2, 2, 6838, 6834, 3, 2, 2, 2, 6838, 6835, 3, 2, 2, 2, 6838, 6836,
	3, 2, 2, 2, 6839, 653, 3, 2, 2, 2, 6840, 6841, 7, 1091, 2, 2, 6841, 6848,
	7, 1091, 2, 2, 6842, 6843, 7, 1090, 2, 2, 6843, 6848, 7, 1090, 2, 2, 6844,
	6848, 7, 1095, 2, 2, 6845, 6848, 7, 1096, 2, 2, 6846, 6848, 7, 1094, 2,
	2, 6847, 6840, 3, 2, 2, 2, 6847, 6842, 3, 2, 2, 2, 6847, 6844, 3, 2, 2,
	2, 6847, 6845, 3, 2, 2, 2, 6847, 6846, 3, 2, 2, 2, 6848, 655, 3, 2, 2,
	2, 6849, 6850, 9, 132, 2, 2, 6850, 657, 3, 2, 2, 2, 6851, 6852, 7, 1086,
	2, 2, 6852, 6857, 7, 1090, 2, 2, 6853, 6854, 7, 1086, 2, 2, 6854, 6855,
	7, 1090, 2, 2, 6855, 6857, 7, 1090, 2, 2, 6856, 6851, 3, 2, 2, 2, 6856,
	6853, 3, 2, 2, 2, 6857, 659, 3, 2, 2, 2, 6858, 6859, 9, 133, 2, 2, 6859,
	661, 3, 2, 2, 2, 6860, 6861, 9, 134, 2, 2, 6861, 663, 3, 2, 2, 2, 6862,
	6863, 9, 135, 2, 2, 6863, 665, 3, 2, 2, 2, 6864, 6865, 9, 136, 2, 2, 6865,
	667, 3, 2, 2, 2, 6866, 6867, 9, 137, 2, 2, 6867, 669, 3, 2, 2, 2, 6868,
	6869, 9, 138, 2, 2, 6869, 671, 3, 2, 2, 2, 6870, 6871, 9, 139, 2, 2, 6871,
	673, 3, 2, 2, 2, 997, 675, 679, 686, 689, 692, 694, 700, 703, 706, 715,
	754, 766, 777, 794, 799, 811, 838, 847, 852, 858, 863, 867, 876, 879, 882,
	886, 894, 897, 900, 906, 910, 918, 923, 928, 933, 936, 938, 950, 953, 957,
	960, 964, 967, 971, 974, 977, 981, 984, 988, 994, 1000, 1006, 1013, 1020,
	1026, 1032, 1041, 1046, 1062, 1069, 1073, 1083, 1087, 1091, 1095, 1099,
	1104, 1107, 1110, 1113, 1116, 1122, 1126, 1132, 1137, 1140, 1143, 1145,
	1156, 1160, 1163, 1177, 1180, 1184, 1187, 1191, 1194, 1198, 1201, 1205,
	1208, 1211, 1215, 1218, 1222, 1229, 1232, 1245, 1251, 1262, 1267, 1275,
	1284, 1289, 1292, 1297, 1305, 1309, 1314, 1318, 1321, 1325, 1329, 1332,
	1336, 1339, 1346, 1354, 1356, 1363, 1369, 1377, 1380, 1387, 1390, 1392,
	1398, 1404, 1421, 1428, 1435, 1447, 1452, 1461, 1463, 1466, 1479, 1492,
	1497, 1513, 1521, 1531, 1537, 1549, 1552, 1557, 1570, 1577, 1584, 1586,
	1593, 1597, 1599, 1604, 1607, 1613, 1618, 1620, 1624, 1627, 1630, 1636,
	1641, 1643, 1648, 1655, 1657, 1664, 1669, 1673, 1676, 1684, 1692, 1694,
	1702, 1706, 1709, 1715, 1720, 1723, 1729, 1732, 1736, 1739, 1743, 1748,
	1752, 1756, 1760, 1764, 1768, 1772, 1777, 1782, 1787, 1793, 1798, 1803,
	1809, 1814, 1819, 1824, 1829, 1834, 1839, 1844, 1849, 1854, 1859, 1865,
	1873, 1879, 1891, 1898, 1900, 1908, 1913, 1916, 1924, 1930, 1946, 1958,
	1960, 1963, 1971, 1977, 1983, 1996, 2003, 2012, 2017, 2028, 2037, 2042,
	2054, 2061, 2070, 2075, 2087, 2094, 2103, 2108, 2115, 2124, 2129, 2131,
	2136, 2144, 2153, 2157, 2160, 2164, 2169, 2175, 2181, 2186, 2191, 2196,
	2201, 2204, 2209, 2214, 2224, 2228, 2235, 2240, 2243, 2248, 2251, 2255,
	2259, 2267, 2286, 2289, 2292, 2296, 2306, 2319, 2326, 2329, 2338, 2341,
	2344, 2355, 2358, 2362, 2370, 2373, 2378, 2386, 2392, 2396, 2400, 2405,
	2410, 2417, 2421, 2432, 2440, 2443, 2449, 2455, 2457, 2462, 2465, 2471,
	2477, 2479, 2483, 2486, 2489, 2495, 2501, 2504, 2510, 2516, 2518, 2523,
	2531, 2533, 2542, 2547, 2555, 2559, 2567, 2577, 2582, 2589, 2593, 2597,
	2629, 2633, 2645, 2648, 2657, 2674, 2686, 2693, 2700, 2715, 2728, 2734,
	2740, 2746, 2752, 2758, 2764, 2769, 2776, 2783, 2790, 2795, 2798, 2800,
	2814, 2821, 2828, 2834, 2838, 2842, 2849, 2852, 2857, 2864, 2871, 2875,
	2884, 2893, 2902, 2905, 2909, 2918, 2922, 2925, 2928, 2934, 2937, 2943,
	2952, 2955, 2966, 2969, 2974, 2977, 2982, 2992, 2997, 3003, 3005, 3011,
	3013, 3019, 3027, 3032, 3040, 3043, 3048, 3051, 3056, 3064, 3072, 3078,
	3086, 3091, 3099, 3102, 3106, 3109, 3117, 3123, 3132, 3135, 3139, 3143,
	3149, 3153, 3157, 3159, 3162, 3165, 3168, 3174, 3178, 3181, 3184, 3187,
	3190, 3192, 3196, 3202, 3208, 3213, 3216, 3222, 3226, 3234, 3238, 3241,
	3244, 3253, 3257, 3260, 3264, 3268, 3271, 3274, 3279, 3285, 3289, 3299,
	3305, 3309, 3315, 3319, 3325, 3328, 3340, 3344, 3348, 3356, 3360, 3368,
	3371, 3375, 3378, 3386, 3391, 3394, 3397, 3401, 3404, 3413, 3418, 3427,
	3432, 3439, 3446, 3454, 3459, 3467, 3470, 3473, 3480, 3483, 3490, 3493,
	3501, 3507, 3518, 3521, 3532, 3538, 3542, 3553, 3558, 3560, 3564, 3574,
	3584, 3590, 3595, 3598, 3601, 3604, 3607, 3610, 3613, 3619, 3624, 3627,
	3630, 3633, 3636, 3639, 3642, 3644, 3650, 3655, 3658, 3661, 3664, 3667,
	3670, 3674, 3680, 3684, 3694, 3698, 3704, 3713, 3716, 3720, 3723, 3727,
	3731, 3734, 3736, 3744, 3756, 3762, 3764, 3770, 3772, 3774, 3780, 3788,
	3796, 3800, 3804, 3813, 3818, 3838, 3843, 3849, 3856, 3861, 3870, 3873,
	3877, 3881, 3885, 3888, 3891, 3894, 3898, 3902, 3905, 3908, 3911, 3918,
	3922, 3937, 3950, 3958, 3968, 3972, 3975, 3981, 3984, 3987, 3996, 4005,
	4015, 4019, 4029, 4039, 4047, 4050, 4059, 4062, 4066, 4071, 4075, 4084,
	4087, 4118, 4121, 4124, 4180, 4185, 4213, 4227, 4234, 4238, 4244, 4252,
	4254, 4265, 4275, 4282, 4288, 4296, 4301, 4309, 4317, 4325, 4333, 4339,
	4342, 4346, 4351, 4356, 4362, 4364, 4375, 4380, 4387, 4389, 4403, 4409,
	4414, 4419, 4425, 4432, 4440, 4448, 4453, 4459, 4462, 4470, 4477, 4486,
	4489, 4506, 4514, 4522, 4526, 4533, 4539, 4547, 4556, 4562, 4569, 4576,
	4581, 4584, 4586, 4592, 4594, 4598, 4600, 4603, 4612, 4618, 4625, 4632,
	4637, 4640, 4642, 4648, 4650, 4654, 4656, 4659, 4664, 4671, 4680, 4685,
	4694, 4701, 4706, 4709, 4711, 4717, 4719, 4722, 4730, 4735, 4740, 4744,
	4750, 4755, 4759, 4765, 4767, 4778, 4781, 4788, 4791, 4803, 4809, 4818,
	4827, 4832, 4841, 4847, 4858, 4867, 4873, 4878, 4882, 4885, 4897, 4904,
	4909, 4924, 4931, 4939, 4942, 4952, 4962, 4972, 4982, 4986, 4990, 5000,
	5005, 5063, 5081, 5089, 5101, 5108, 5110, 5120, 5123, 5131, 5138, 5142,
	5149, 5154, 5157, 5160, 5169, 5173, 5197, 5204, 5208, 5215, 5222, 5225,
	5241, 5244, 5254, 5258, 5264, 5267, 5272, 5276, 5283, 5286, 5292, 5316,
	5319, 5331, 5334, 5344, 5352, 5356, 5363, 5366, 5375, 5381, 5387, 5397,
	5399, 5405, 5408, 5411, 5423, 5426, 5432, 5435, 5443, 5451, 5457, 5461,
	5475, 5487, 5494, 5497, 5504, 5511, 5516, 5521, 5532, 5543, 5549, 5554,
	5567, 5569, 5574, 5578, 5581, 5583, 5590, 5597, 5600, 5603, 5609, 5613,
	5619, 5625, 5638, 5643, 5651, 5654, 5659, 5664, 5672, 5675, 5683, 5687,
	5700, 5706, 5718, 5721, 5730, 5735, 5741, 5748, 5750, 5755, 5757, 5761,
	5767, 5770, 5773, 5783, 5787, 5807, 5814, 5816, 5823, 5825, 5829, 5834,
	5845, 5850, 5856, 5859, 5863, 5868, 5871, 5875, 5879, 5881, 5886, 5891,
	5904, 5907, 5911, 5914, 5917, 5922, 5927, 5932, 5935, 5940, 5943, 5949,
	5952, 5956, 5961, 5966, 5971, 5976, 5979, 5984, 5989, 5994, 6000, 6005,
	6010, 6015, 6018, 6023, 6027, 6031, 6039, 6046, 6050, 6055, 6060, 6064,
	6066, 6069, 6085, 6094, 6102, 6111, 6121, 6129, 6137, 6145, 6153, 6158,
	6166, 6171, 6176, 6179, 6184, 6187, 6191, 6206, 6213, 6218, 6223, 6256,
	6260, 6268, 6272, 6281, 6289, 6294, 6302, 6307, 6312, 6314, 6323, 6328,
	6336, 6341, 6349, 6357, 6360, 6370, 6388, 6394, 6398, 6404, 6408, 6412,
	6425, 6433, 6437, 6442, 6447, 6453, 6458, 6462, 6467, 6472, 6477, 6487,
	6490, 6494, 6498, 6505, 6509, 6538, 6543, 6547, 6550, 6553, 6556, 6559,
	6570, 6584, 6593, 6619, 6630, 6637, 6641, 6648, 6656, 6661, 6669, 6675,
	6685, 6698, 6704, 6710, 6726, 6732, 6741, 6743, 6762, 6774, 6791, 6808,
	6810, 6829, 6838, 6847, 6856,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'",
	"'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'",
	"'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'",
	"'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'",
	"'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'",
	"'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'",
	"'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'",
	"'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'",
	"'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'",
	"'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'",
	"'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'",
	"'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'",
	"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'",
	"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'",
	"'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'",
	"'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'",
	"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'",
	"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'",
	"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'",
	"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'",
	"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'",
	"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'",
	"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'",
	"'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'",
	"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'",
	"'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'",
	"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'",
	"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'",
	"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'",
	"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'",
	"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'",
	"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'",
	"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'",
	"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'",
	"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'",
	"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'",
	"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'",
	"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'",
	"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'",
	"'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'",
	"'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'",
	"'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'",
	"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'",
	"'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'",
	"'JSON_VALID'", "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'",
	"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'",
	"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'",
	"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'",
	"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'",
	"'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'",
	"'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'",
	"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'",
	"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'",
	"'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'",
	"'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'",
	"'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'",
	"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'",
	"'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'",
	"'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'",
	"'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'",
	"'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'",
	"'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'",
	"'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'",
	"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'",
	"'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'",
	"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'",
	"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'",
	"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'",
	"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'",
	"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'",
	"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'",
	"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'",
	"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'",
	"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'",
	"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'",
	"'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'",
	"'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'",
	"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'",
	"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'",
	"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'",
	"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'",
	"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'",
	"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'",
	"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'",
	"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'",
	"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'",
	"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'",
	"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'",
	"'NOCOPY'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'",
	"'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'",
	"'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'",
	"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'",
	"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'",
	"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'",
	"'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'",
	"'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'",
	"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'",
	"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'",
	"'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'",
	"'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'",
	"'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'",
	"'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'",
	"'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'",
	"'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'",
	"'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'",
	"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'",
	"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'",
	"'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'",
	"'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'",
	"'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'",
	"'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'",
	"'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'",
	"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'",
	"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'",
	"'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'",
	"'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", "'USA'",
	"'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'",
	"'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'",
	"'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'",
	"'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", "'BACKUP_ADMIN'",
	"'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'",
	"'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'",
	"'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'ADMIN'",
	"'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'",
	"'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'",
	"'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'",
	"'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", "", "'SET_USER_ID'", "'SHOW_ROUTINE'",
	"'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'",
	"'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'",
	"'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'",
	"'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'",
	"'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'",
	"'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'",
	"'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'",
	"'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'",
	"'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'",
	"'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'",
	"'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'",
	"'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'",
	"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'",
	"'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'",
	"'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'",
	"'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'",
	"'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", "'CEIL'",
	"'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'",
	"'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'",
	"'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'", "'COT'", "'CRC32'",
	"'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'",
	"'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", "'DAYNAME'",
	"'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'",
	"'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", "'DISJOINT'", "'ELT'",
	"'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", "'ENVELOPE'",
	"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'",
	"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'",
	"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'",
	"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'",
	"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'",
	"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'",
	"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'",
	"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'",
	"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'",
	"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'",
	"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'",
	"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'",
	"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'",
	"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'",
	"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'",
	"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'",
	"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'",
	"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'",
	"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'",
	"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'",
	"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'",
	"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'",
	"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'",
	"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'",
	"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'",
	"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", "'SESSION_USER'",
	"'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'",
	"'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'",
	"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'",
	"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'",
	"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'",
	"'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'",
	"'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'",
	"'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'",
	"'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'",
	"'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'",
	"'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'",
	"'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'",
	"'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'",
	"'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'",
	"'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", "'ST_SRID'",
	"'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'",
	"'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'",
	"'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'",
	"'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'",
	"'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", "'UNHEX'",
	"'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", "'UUID'", "'UUID_SHORT'",
	"'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'",
	"'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'",
	"'Y'", "'X'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='",
	"'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'",
	"'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'",
	"'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'",
}
var symbolicNames = []string{
	"", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD",
	"ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", "BEFORE",
	"BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", "CAST",
	"CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT",
	"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR",
	"DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC",
	"DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW",
	"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT",
	"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN",
	"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY",
	"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER",
	"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY",
	"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR",
	"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT",
	"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG",
	"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY",
	"OR", "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY",
	"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP",
	"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT",
	"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT",
	"SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION",
	"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT",
	"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN",
	"TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK",
	"UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE",
	"WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT",
	"MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER",
	"BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL",
	"DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR",
	"VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB",
	"MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT",
	"ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND",
	"HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND",
	"HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE",
	"JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS",
	"JSON_SEARCH", "JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT",
	"JSON_INSERT", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE",
	"JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH",
	"JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT", "JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE",
	"JSON_ARRAYAGG", "JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR",
	"COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG",
	"LAST_VALUE", "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK",
	"RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM",
	"VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP",
	"LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP",
	"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE",
	"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE",
	"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT",
	"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN",
	"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM",
	"PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING",
	"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT",
	"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT",
	"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU",
	"CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER",
	"DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK",
	"DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END",
	"ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT",
	"EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED",
	"EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER",
	"FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", "FULL", "FUNCTION",
	"GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH",
	"HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES",
	"INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT",
	"INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER",
	"JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL",
	"LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY",
	"MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE",
	"MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT",
	"MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT",
	"MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY",
	"MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR",
	"MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS",
	"MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS",
	"MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR",
	"NEVER", "NEXT", "NO", "NOCOPY", "NOWAIT", "NODEGROUP", "NONE", "ODBC",
	"OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY",
	"OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER",
	"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN",
	"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE",
	"PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK",
	"REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY",
	"RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE",
	"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB",
	"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE",
	"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE",
	"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW",
	"ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER",
	"SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT",
	"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
	"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD",
	"START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES",
	"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT",
	"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME",
	"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL",
	"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED",
	"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE",
	"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES",
	"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WINDOW", "WITHOUT",
	"WORK", "WRAPPER", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO",
	"INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND",
	"MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD",
	"SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN",
	"BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN",
	"CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", "FIREWALL_USER",
	"FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES",
	"ADMIN", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE",
	"NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER",
	"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER",
	"ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID",
	"SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN",
	"XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256",
	"CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR",
	"GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2",
	"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN",
	"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32",
	"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED",
	"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA",
	"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION",
	"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT",
	"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME",
	"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB",
	"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT",
	"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN",
	"BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING",
	"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY",
	"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV",
	"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY",
	"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT",
	"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES",
	"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE",
	"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP",
	"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR",
	"FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT",
	"GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB",
	"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT",
	"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET",
	"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON",
	"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY",
	"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED",
	"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH",
	"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB",
	"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM",
	"MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT",
	"MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN",
	"MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT",
	"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT",
	"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT",
	"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS",
	"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF",
	"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB",
	"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS",
	"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT",
	"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER",
	"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX",
	"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP",
	"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT",
	"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE",
	"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE",
	"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT",
	"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB",
	"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE",
	"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION",
	"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT",
	"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES",
	"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS",
	"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT",
	"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID",
	"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN",
	"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER",
	"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC",
	"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS",
	"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER",
	"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS",
	"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION",
	"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN",
	"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR",
	"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL",
	"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP",
	"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN",
	"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
	"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL",
	"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL",
	"REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME",
	"DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "LOCAL_ID",
	"GLOBAL_ID", "ERROR_RECONGNIGION",
}

var ruleNames = []string{
	"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement",
	"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement",
	"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase",
	"createEvent", "createIndex", "createLogfileGroup", "createProcedure",
	"createFunction", "createServer", "createTable", "createTablespaceInnodb",
	"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions",
	"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet",
	"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr",
	"intervalType", "enableType", "indexType", "indexOption", "procedureParameter",
	"functionParameter", "routineOption", "serverOption", "createDefinitions",
	"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint",
	"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition",
	"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions",
	"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition",
	"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition",
	"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance",
	"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace",
	"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex",
	"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable",
	"dropTablespace", "dropTrigger", "dropView", "renameTable", "renameTableClause",
	"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement",
	"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement",
	"selectStatement", "updateStatement", "insertStatementValue", "updatedElement",
	"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement",
	"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement",
	"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement",
	"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem",
	"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo",
	"querySpecification", "querySpecificationNointo", "unionParenthesis", "unionStatement",
	"selectSpec", "selectElements", "selectElement", "selectIntoExpression",
	"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", "havingClause",
	"windowClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction",
	"beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement",
	"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement",
	"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction",
	"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter",
	"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave",
	"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption",
	"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter",
	"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet",
	"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork",
	"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement",
	"deallocatePrepare", "routineBody", "blockStatement", "caseStatement",
	"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement",
	"returnStatement", "whileStatement", "cursorStatement", "declareVariable",
	"declareCondition", "declareCursor", "declareHandler", "handlerConditionValue",
	"procedureSqlStatement", "caseAlternative", "elifAlternative", "alterUser",
	"createUser", "dropUser", "grantStatement", "roleOption", "grantProxy",
	"renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement",
	"userSpecification", "userAuthOption", "tlsOption", "userResourceOption",
	"userPasswordOption", "userLockOption", "privelegeClause", "privilege",
	"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable",
	"optimizeTable", "repairTable", "checkTableOption", "createUdfunction",
	"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause",
	"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity",
	"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement",
	"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement",
	"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes",
	"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement",
	"signalStatement", "resignalStatement", "signalConditionInformation", "diagnosticsStatement",
	"diagnosticsConditionInformationName", "describeObjectClause", "fullId",
	"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable",
	"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId",
	"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral",
	"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull",
	"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension",
	"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables",
	"indexColumnNames", "expressions", "expressionsWithDefaults", "constants",
	"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", "expressionOrDefault",
	"ifExists", "ifNotExists", "functionCall", "specificFunction", "caseFuncAlternative",
	"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction",
	"nonAggregateWindowedFunction", "overClause", "windowSpec", "windowName",
	"frameClause", "frameUnits", "frameExtent", "frameBetween", "frameRange",
	"partitionClause", "scalarFunctionName", "passwordFunctionClause", "functionArgs",
	"functionArg", "expression", "predicate", "expressionAtom", "unaryOperator",
	"comparisonOperator", "logicalOperator", "bitOperator", "mathOperator",
	"jsonOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase",
	"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type MySqlParser struct {
	*antlr.BaseParser
}

func NewMySqlParser(input antlr.TokenStream) *MySqlParser {
	this := new(MySqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MySqlParser.g4"

	return this
}

// MySqlParser tokens.
const (
	MySqlParserEOF                               = antlr.TokenEOF
	MySqlParserSPACE                             = 1
	MySqlParserSPEC_MYSQL_COMMENT                = 2
	MySqlParserCOMMENT_INPUT                     = 3
	MySqlParserLINE_COMMENT                      = 4
	MySqlParserADD                               = 5
	MySqlParserALL                               = 6
	MySqlParserALTER                             = 7
	MySqlParserALWAYS                            = 8
	MySqlParserANALYZE                           = 9
	MySqlParserAND                               = 10
	MySqlParserARRAY                             = 11
	MySqlParserAS                                = 12
	MySqlParserASC                               = 13
	MySqlParserBEFORE                            = 14
	MySqlParserBETWEEN                           = 15
	MySqlParserBOTH                              = 16
	MySqlParserBUCKETS                           = 17
	MySqlParserBY                                = 18
	MySqlParserCALL                              = 19
	MySqlParserCASCADE                           = 20
	MySqlParserCASE                              = 21
	MySqlParserCAST                              = 22
	MySqlParserCHANGE                            = 23
	MySqlParserCHARACTER                         = 24
	MySqlParserCHECK                             = 25
	MySqlParserCOLLATE                           = 26
	MySqlParserCOLUMN                            = 27
	MySqlParserCONDITION                         = 28
	MySqlParserCONSTRAINT                        = 29
	MySqlParserCONTINUE                          = 30
	MySqlParserCONVERT                           = 31
	MySqlParserCREATE                            = 32
	MySqlParserCROSS                             = 33
	MySqlParserCURRENT                           = 34
	MySqlParserCURRENT_USER                      = 35
	MySqlParserCURSOR                            = 36
	MySqlParserDATABASE                          = 37
	MySqlParserDATABASES                         = 38
	MySqlParserDECLARE                           = 39
	MySqlParserDEFAULT                           = 40
	MySqlParserDELAYED                           = 41
	MySqlParserDELETE                            = 42
	MySqlParserDESC                              = 43
	MySqlParserDESCRIBE                          = 44
	MySqlParserDETERMINISTIC                     = 45
	MySqlParserDIAGNOSTICS                       = 46
	MySqlParserDISTINCT                          = 47
	MySqlParserDISTINCTROW                       = 48
	MySqlParserDROP                              = 49
	MySqlParserEACH                              = 50
	MySqlParserELSE                              = 51
	MySqlParserELSEIF                            = 52
	MySqlParserEMPTY                             = 53
	MySqlParserENCLOSED                          = 54
	MySqlParserESCAPED                           = 55
	MySqlParserEXCEPT                            = 56
	MySqlParserEXISTS                            = 57
	MySqlParserEXIT                              = 58
	MySqlParserEXPLAIN                           = 59
	MySqlParserFALSE                             = 60
	MySqlParserFETCH                             = 61
	MySqlParserFOR                               = 62
	MySqlParserFORCE                             = 63
	MySqlParserFOREIGN                           = 64
	MySqlParserFROM                              = 65
	MySqlParserFULLTEXT                          = 66
	MySqlParserGENERATED                         = 67
	MySqlParserGET                               = 68
	MySqlParserGRANT                             = 69
	MySqlParserGROUP                             = 70
	MySqlParserHAVING                            = 71
	MySqlParserHIGH_PRIORITY                     = 72
	MySqlParserHISTOGRAM                         = 73
	MySqlParserIF                                = 74
	MySqlParserIGNORE                            = 75
	MySqlParserIGNORED                           = 76
	MySqlParserIN                                = 77
	MySqlParserINDEX                             = 78
	MySqlParserINFILE                            = 79
	MySqlParserINNER                             = 80
	MySqlParserINOUT                             = 81
	MySqlParserINSERT                            = 82
	MySqlParserINTERVAL                          = 83
	MySqlParserINTO                              = 84
	MySqlParserIS                                = 85
	MySqlParserITERATE                           = 86
	MySqlParserJOIN                              = 87
	MySqlParserKEY                               = 88
	MySqlParserKEYS                              = 89
	MySqlParserKILL                              = 90
	MySqlParserLEADING                           = 91
	MySqlParserLEAVE                             = 92
	MySqlParserLEFT                              = 93
	MySqlParserLIKE                              = 94
	MySqlParserLIMIT                             = 95
	MySqlParserLINEAR                            = 96
	MySqlParserLINES                             = 97
	MySqlParserLOAD                              = 98
	MySqlParserLOCK                              = 99
	MySqlParserLOOP                              = 100
	MySqlParserLOW_PRIORITY                      = 101
	MySqlParserMASTER_BIND                       = 102
	MySqlParserMASTER_SSL_VERIFY_SERVER_CERT     = 103
	MySqlParserMATCH                             = 104
	MySqlParserMAXVALUE                          = 105
	MySqlParserMODIFIES                          = 106
	MySqlParserNATURAL                           = 107
	MySqlParserNOT                               = 108
	MySqlParserNO_WRITE_TO_BINLOG                = 109
	MySqlParserNULL_LITERAL                      = 110
	MySqlParserNUMBER                            = 111
	MySqlParserON                                = 112
	MySqlParserOPTIMIZE                          = 113
	MySqlParserOPTION                            = 114
	MySqlParserOPTIONAL                          = 115
	MySqlParserOPTIONALLY                        = 116
	MySqlParserOR                                = 117
	MySqlParserORDER                             = 118
	MySqlParserOUT                               = 119
	MySqlParserOVER                              = 120
	MySqlParserOUTER                             = 121
	MySqlParserOUTFILE                           = 122
	MySqlParserPARTITION                         = 123
	MySqlParserPRIMARY                           = 124
	MySqlParserPROCEDURE                         = 125
	MySqlParserPURGE                             = 126
	MySqlParserRANGE                             = 127
	MySqlParserREAD                              = 128
	MySqlParserREADS                             = 129
	MySqlParserREFERENCES                        = 130
	MySqlParserREGEXP                            = 131
	MySqlParserRELEASE                           = 132
	MySqlParserRENAME                            = 133
	MySqlParserREPEAT                            = 134
	MySqlParserREPLACE                           = 135
	MySqlParserREQUIRE                           = 136
	MySqlParserRESIGNAL                          = 137
	MySqlParserRESTRICT                          = 138
	MySqlParserRETAIN                            = 139
	MySqlParserRETURN                            = 140
	MySqlParserREVOKE                            = 141
	MySqlParserRIGHT                             = 142
	MySqlParserRLIKE                             = 143
	MySqlParserSCHEMA                            = 144
	MySqlParserSCHEMAS                           = 145
	MySqlParserSELECT                            = 146
	MySqlParserSET                               = 147
	MySqlParserSEPARATOR                         = 148
	MySqlParserSHOW                              = 149
	MySqlParserSIGNAL                            = 150
	MySqlParserSPATIAL                           = 151
	MySqlParserSQL                               = 152
	MySqlParserSQLEXCEPTION                      = 153
	MySqlParserSQLSTATE                          = 154
	MySqlParserSQLWARNING                        = 155
	MySqlParserSQL_BIG_RESULT                    = 156
	MySqlParserSQL_CALC_FOUND_ROWS               = 157
	MySqlParserSQL_SMALL_RESULT                  = 158
	MySqlParserSSL                               = 159
	MySqlParserSTACKED                           = 160
	MySqlParserSTARTING                          = 161
	MySqlParserSTRAIGHT_JOIN                     = 162
	MySqlParserTABLE                             = 163
	MySqlParserTERMINATED                        = 164
	MySqlParserTHEN                              = 165
	MySqlParserTO                                = 166
	MySqlParserTRAILING                          = 167
	MySqlParserTRIGGER                           = 168
	MySqlParserTRUE                              = 169
	MySqlParserUNDO                              = 170
	MySqlParserUNION                             = 171
	MySqlParserUNIQUE                            = 172
	MySqlParserUNLOCK                            = 173
	MySqlParserUNSIGNED                          = 174
	MySqlParserUPDATE                            = 175
	MySqlParserUSAGE                             = 176
	MySqlParserUSE                               = 177
	MySqlParserUSING                             = 178
	MySqlParserVALUES                            = 179
	MySqlParserWHEN                              = 180
	MySqlParserWHERE                             = 181
	MySqlParserWHILE                             = 182
	MySqlParserWITH                              = 183
	MySqlParserWRITE                             = 184
	MySqlParserXOR                               = 185
	MySqlParserZEROFILL                          = 186
	MySqlParserTINYINT                           = 187
	MySqlParserSMALLINT                          = 188
	MySqlParserMEDIUMINT                         = 189
	MySqlParserMIDDLEINT                         = 190
	MySqlParserINT                               = 191
	MySqlParserINT1                              = 192
	MySqlParserINT2                              = 193
	MySqlParserINT3                              = 194
	MySqlParserINT4                              = 195
	MySqlParserINT8                              = 196
	MySqlParserINTEGER                           = 197
	MySqlParserBIGINT                            = 198
	MySqlParserREAL                              = 199
	MySqlParserDOUBLE                            = 200
	MySqlParserPRECISION                         = 201
	MySqlParserFLOAT                             = 202
	MySqlParserFLOAT4                            = 203
	MySqlParserFLOAT8                            = 204
	MySqlParserDECIMAL                           = 205
	MySqlParserDEC                               = 206
	MySqlParserNUMERIC                           = 207
	MySqlParserDATE                              = 208
	MySqlParserTIME                              = 209
	MySqlParserTIMESTAMP                         = 210
	MySqlParserDATETIME                          = 211
	MySqlParserYEAR                              = 212
	MySqlParserCHAR                              = 213
	MySqlParserVARCHAR                           = 214
	MySqlParserNVARCHAR                          = 215
	MySqlParserNATIONAL                          = 216
	MySqlParserBINARY                            = 217
	MySqlParserVARBINARY                         = 218
	MySqlParserTINYBLOB                          = 219
	MySqlParserBLOB                              = 220
	MySqlParserMEDIUMBLOB                        = 221
	MySqlParserLONG                              = 222
	MySqlParserLONGBLOB                          = 223
	MySqlParserTINYTEXT                          = 224
	MySqlParserTEXT                              = 225
	MySqlParserMEDIUMTEXT                        = 226
	MySqlParserLONGTEXT                          = 227
	MySqlParserENUM                              = 228
	MySqlParserVARYING                           = 229
	MySqlParserSERIAL                            = 230
	MySqlParserYEAR_MONTH                        = 231
	MySqlParserDAY_HOUR                          = 232
	MySqlParserDAY_MINUTE                        = 233
	MySqlParserDAY_SECOND                        = 234
	MySqlParserHOUR_MINUTE                       = 235
	MySqlParserHOUR_SECOND                       = 236
	MySqlParserMINUTE_SECOND                     = 237
	MySqlParserSECOND_MICROSECOND                = 238
	MySqlParserMINUTE_MICROSECOND                = 239
	MySqlParserHOUR_MICROSECOND                  = 240
	MySqlParserDAY_MICROSECOND                   = 241
	MySqlParserJSON_ARRAY                        = 242
	MySqlParserJSON_OBJECT                       = 243
	MySqlParserJSON_QUOTE                        = 244
	MySqlParserJSON_CONTAINS                     = 245
	MySqlParserJSON_CONTAINS_PATH                = 246
	MySqlParserJSON_EXTRACT                      = 247
	MySqlParserJSON_KEYS                         = 248
	MySqlParserJSON_OVERLAPS                     = 249
	MySqlParserJSON_SEARCH                       = 250
	MySqlParserJSON_VALUE                        = 251
	MySqlParserJSON_ARRAY_APPEND                 = 252
	MySqlParserJSON_ARRAY_INSERT                 = 253
	MySqlParserJSON_INSERT                       = 254
	MySqlParserJSON_MERGE                        = 255
	MySqlParserJSON_MERGE_PATCH                  = 256
	MySqlParserJSON_MERGE_PRESERVE               = 257
	MySqlParserJSON_REMOVE                       = 258
	MySqlParserJSON_REPLACE                      = 259
	MySqlParserJSON_SET                          = 260
	MySqlParserJSON_UNQUOTE                      = 261
	MySqlParserJSON_DEPTH                        = 262
	MySqlParserJSON_LENGTH                       = 263
	MySqlParserJSON_TYPE                         = 264
	MySqlParserJSON_VALID                        = 265
	MySqlParserJSON_TABLE                        = 266
	MySqlParserJSON_SCHEMA_VALID                 = 267
	MySqlParserJSON_SCHEMA_VALIDATION_REPORT     = 268
	MySqlParserJSON_PRETTY                       = 269
	MySqlParserJSON_STORAGE_FREE                 = 270
	MySqlParserJSON_STORAGE_SIZE                 = 271
	MySqlParserJSON_ARRAYAGG                     = 272
	MySqlParserJSON_OBJECTAGG                    = 273
	MySqlParserAVG                               = 274
	MySqlParserBIT_AND                           = 275
	MySqlParserBIT_OR                            = 276
	MySqlParserBIT_XOR                           = 277
	MySqlParserCOUNT                             = 278
	MySqlParserCUME_DIST                         = 279
	MySqlParserDENSE_RANK                        = 280
	MySqlParserFIRST_VALUE                       = 281
	MySqlParserGROUP_CONCAT                      = 282
	MySqlParserLAG                               = 283
	MySqlParserLAST_VALUE                        = 284
	MySqlParserLEAD                              = 285
	MySqlParserMAX                               = 286
	MySqlParserMIN                               = 287
	MySqlParserNTILE                             = 288
	MySqlParserNTH_VALUE                         = 289
	MySqlParserPERCENT_RANK                      = 290
	MySqlParserRANK                              = 291
	MySqlParserROW_NUMBER                        = 292
	MySqlParserSTD                               = 293
	MySqlParserSTDDEV                            = 294
	MySqlParserSTDDEV_POP                        = 295
	MySqlParserSTDDEV_SAMP                       = 296
	MySqlParserSUM                               = 297
	MySqlParserVAR_POP                           = 298
	MySqlParserVAR_SAMP                          = 299
	MySqlParserVARIANCE                          = 300
	MySqlParserCURRENT_DATE                      = 301
	MySqlParserCURRENT_TIME                      = 302
	MySqlParserCURRENT_TIMESTAMP                 = 303
	MySqlParserLOCALTIME                         = 304
	MySqlParserCURDATE                           = 305
	MySqlParserCURTIME                           = 306
	MySqlParserDATE_ADD                          = 307
	MySqlParserDATE_SUB                          = 308
	MySqlParserEXTRACT                           = 309
	MySqlParserLOCALTIMESTAMP                    = 310
	MySqlParserNOW                               = 311
	MySqlParserPOSITION                          = 312
	MySqlParserSUBSTR                            = 313
	MySqlParserSUBSTRING                         = 314
	MySqlParserSYSDATE                           = 315
	MySqlParserTRIM                              = 316
	MySqlParserUTC_DATE                          = 317
	MySqlParserUTC_TIME                          = 318
	MySqlParserUTC_TIMESTAMP                     = 319
	MySqlParserACCOUNT                           = 320
	MySqlParserACTION                            = 321
	MySqlParserAFTER                             = 322
	MySqlParserAGGREGATE                         = 323
	MySqlParserALGORITHM                         = 324
	MySqlParserANY                               = 325
	MySqlParserAT                                = 326
	MySqlParserAUTHORS                           = 327
	MySqlParserAUTOCOMMIT                        = 328
	MySqlParserAUTOEXTEND_SIZE                   = 329
	MySqlParserAUTO_INCREMENT                    = 330
	MySqlParserAVG_ROW_LENGTH                    = 331
	MySqlParserBEGIN                             = 332
	MySqlParserBINLOG                            = 333
	MySqlParserBIT                               = 334
	MySqlParserBLOCK                             = 335
	MySqlParserBOOL                              = 336
	MySqlParserBOOLEAN                           = 337
	MySqlParserBTREE                             = 338
	MySqlParserCACHE                             = 339
	MySqlParserCASCADED                          = 340
	MySqlParserCHAIN                             = 341
	MySqlParserCHANGED                           = 342
	MySqlParserCHANNEL                           = 343
	MySqlParserCHECKSUM                          = 344
	MySqlParserPAGE_CHECKSUM                     = 345
	MySqlParserCIPHER                            = 346
	MySqlParserCLASS_ORIGIN                      = 347
	MySqlParserCLIENT                            = 348
	MySqlParserCLOSE                             = 349
	MySqlParserCLUSTERING                        = 350
	MySqlParserCOALESCE                          = 351
	MySqlParserCODE                              = 352
	MySqlParserCOLUMNS                           = 353
	MySqlParserCOLUMN_FORMAT                     = 354
	MySqlParserCOLUMN_NAME                       = 355
	MySqlParserCOMMENT                           = 356
	MySqlParserCOMMIT                            = 357
	MySqlParserCOMPACT                           = 358
	MySqlParserCOMPLETION                        = 359
	MySqlParserCOMPRESSED                        = 360
	MySqlParserCOMPRESSION                       = 361
	MySqlParserCONCURRENT                        = 362
	MySqlParserCONNECT                           = 363
	MySqlParserCONNECTION                        = 364
	MySqlParserCONSISTENT                        = 365
	MySqlParserCONSTRAINT_CATALOG                = 366
	MySqlParserCONSTRAINT_SCHEMA                 = 367
	MySqlParserCONSTRAINT_NAME                   = 368
	MySqlParserCONTAINS                          = 369
	MySqlParserCONTEXT                           = 370
	MySqlParserCONTRIBUTORS                      = 371
	MySqlParserCOPY                              = 372
	MySqlParserCPU                               = 373
	MySqlParserCURSOR_NAME                       = 374
	MySqlParserDATA                              = 375
	MySqlParserDATAFILE                          = 376
	MySqlParserDEALLOCATE                        = 377
	MySqlParserDEFAULT_AUTH                      = 378
	MySqlParserDEFINER                           = 379
	MySqlParserDELAY_KEY_WRITE                   = 380
	MySqlParserDES_KEY_FILE                      = 381
	MySqlParserDIRECTORY                         = 382
	MySqlParserDISABLE                           = 383
	MySqlParserDISCARD                           = 384
	MySqlParserDISK                              = 385
	MySqlParserDO                                = 386
	MySqlParserDUMPFILE                          = 387
	MySqlParserDUPLICATE                         = 388
	MySqlParserDYNAMIC                           = 389
	MySqlParserENABLE                            = 390
	MySqlParserENCRYPTION                        = 391
	MySqlParserEND                               = 392
	MySqlParserENDS                              = 393
	MySqlParserENGINE                            = 394
	MySqlParserENGINES                           = 395
	MySqlParserERROR                             = 396
	MySqlParserERRORS                            = 397
	MySqlParserESCAPE                            = 398
	MySqlParserEVEN                              = 399
	MySqlParserEVENT                             = 400
	MySqlParserEVENTS                            = 401
	MySqlParserEVERY                             = 402
	MySqlParserEXCHANGE                          = 403
	MySqlParserEXCLUSIVE                         = 404
	MySqlParserEXPIRE                            = 405
	MySqlParserEXPORT                            = 406
	MySqlParserEXTENDED                          = 407
	MySqlParserEXTENT_SIZE                       = 408
	MySqlParserFAST                              = 409
	MySqlParserFAULTS                            = 410
	MySqlParserFIELDS                            = 411
	MySqlParserFILE_BLOCK_SIZE                   = 412
	MySqlParserFILTER                            = 413
	MySqlParserFIRST                             = 414
	MySqlParserFIXED                             = 415
	MySqlParserFLUSH                             = 416
	MySqlParserFOLLOWING                         = 417
	MySqlParserFOLLOWS                           = 418
	MySqlParserFOUND                             = 419
	MySqlParserFULL                              = 420
	MySqlParserFUNCTION                          = 421
	MySqlParserGENERAL                           = 422
	MySqlParserGLOBAL                            = 423
	MySqlParserGRANTS                            = 424
	MySqlParserGROUP_REPLICATION                 = 425
	MySqlParserHANDLER                           = 426
	MySqlParserHASH                              = 427
	MySqlParserHELP                              = 428
	MySqlParserHOST                              = 429
	MySqlParserHOSTS                             = 430
	MySqlParserIDENTIFIED                        = 431
	MySqlParserIGNORE_SERVER_IDS                 = 432
	MySqlParserIMPORT                            = 433
	MySqlParserINDEXES                           = 434
	MySqlParserINITIAL_SIZE                      = 435
	MySqlParserINPLACE                           = 436
	MySqlParserINSERT_METHOD                     = 437
	MySqlParserINSTALL                           = 438
	MySqlParserINSTANCE                          = 439
	MySqlParserINSTANT                           = 440
	MySqlParserINVISIBLE                         = 441
	MySqlParserINVOKER                           = 442
	MySqlParserIO                                = 443
	MySqlParserIO_THREAD                         = 444
	MySqlParserIPC                               = 445
	MySqlParserISOLATION                         = 446
	MySqlParserISSUER                            = 447
	MySqlParserJSON                              = 448
	MySqlParserKEY_BLOCK_SIZE                    = 449
	MySqlParserLANGUAGE                          = 450
	MySqlParserLAST                              = 451
	MySqlParserLEAVES                            = 452
	MySqlParserLESS                              = 453
	MySqlParserLEVEL                             = 454
	MySqlParserLIST                              = 455
	MySqlParserLOCAL                             = 456
	MySqlParserLOGFILE                           = 457
	MySqlParserLOGS                              = 458
	MySqlParserMASTER                            = 459
	MySqlParserMASTER_AUTO_POSITION              = 460
	MySqlParserMASTER_CONNECT_RETRY              = 461
	MySqlParserMASTER_DELAY                      = 462
	MySqlParserMASTER_HEARTBEAT_PERIOD           = 463
	MySqlParserMASTER_HOST                       = 464
	MySqlParserMASTER_LOG_FILE                   = 465
	MySqlParserMASTER_LOG_POS                    = 466
	MySqlParserMASTER_PASSWORD                   = 467
	MySqlParserMASTER_PORT                       = 468
	MySqlParserMASTER_RETRY_COUNT                = 469
	MySqlParserMASTER_SSL                        = 470
	MySqlParserMASTER_SSL_CA                     = 471
	MySqlParserMASTER_SSL_CAPATH                 = 472
	MySqlParserMASTER_SSL_CERT                   = 473
	MySqlParserMASTER_SSL_CIPHER                 = 474
	MySqlParserMASTER_SSL_CRL                    = 475
	MySqlParserMASTER_SSL_CRLPATH                = 476
	MySqlParserMASTER_SSL_KEY                    = 477
	MySqlParserMASTER_TLS_VERSION                = 478
	MySqlParserMASTER_USER                       = 479
	MySqlParserMAX_CONNECTIONS_PER_HOUR          = 480
	MySqlParserMAX_QUERIES_PER_HOUR              = 481
	MySqlParserMAX_ROWS                          = 482
	MySqlParserMAX_SIZE                          = 483
	MySqlParserMAX_UPDATES_PER_HOUR              = 484
	MySqlParserMAX_USER_CONNECTIONS              = 485
	MySqlParserMEDIUM                            = 486
	MySqlParserMEMBER                            = 487
	MySqlParserMERGE                             = 488
	MySqlParserMESSAGE_TEXT                      = 489
	MySqlParserMID                               = 490
	MySqlParserMIGRATE                           = 491
	MySqlParserMIN_ROWS                          = 492
	MySqlParserMODE                              = 493
	MySqlParserMODIFY                            = 494
	MySqlParserMUTEX                             = 495
	MySqlParserMYSQL                             = 496
	MySqlParserMYSQL_ERRNO                       = 497
	MySqlParserNAME                              = 498
	MySqlParserNAMES                             = 499
	MySqlParserNCHAR                             = 500
	MySqlParserNEVER                             = 501
	MySqlParserNEXT                              = 502
	MySqlParserNO                                = 503
	MySqlParserNOCOPY                            = 504
	MySqlParserNOWAIT                            = 505
	MySqlParserNODEGROUP                         = 506
	MySqlParserNONE                              = 507
	MySqlParserODBC                              = 508
	MySqlParserOFFLINE                           = 509
	MySqlParserOFFSET                            = 510
	MySqlParserOF                                = 511
	MySqlParserOJ                                = 512
	MySqlParserOLD_PASSWORD                      = 513
	MySqlParserONE                               = 514
	MySqlParserONLINE                            = 515
	MySqlParserONLY                              = 516
	MySqlParserOPEN                              = 517
	MySqlParserOPTIMIZER_COSTS                   = 518
	MySqlParserOPTIONS                           = 519
	MySqlParserOWNER                             = 520
	MySqlParserPACK_KEYS                         = 521
	MySqlParserPAGE                              = 522
	MySqlParserPARSER                            = 523
	MySqlParserPARTIAL                           = 524
	MySqlParserPARTITIONING                      = 525
	MySqlParserPARTITIONS                        = 526
	MySqlParserPASSWORD                          = 527
	MySqlParserPHASE                             = 528
	MySqlParserPLUGIN                            = 529
	MySqlParserPLUGIN_DIR                        = 530
	MySqlParserPLUGINS                           = 531
	MySqlParserPORT                              = 532
	MySqlParserPRECEDES                          = 533
	MySqlParserPRECEDING                         = 534
	MySqlParserPREPARE                           = 535
	MySqlParserPRESERVE                          = 536
	MySqlParserPREV                              = 537
	MySqlParserPROCESSLIST                       = 538
	MySqlParserPROFILE                           = 539
	MySqlParserPROFILES                          = 540
	MySqlParserPROXY                             = 541
	MySqlParserQUERY                             = 542
	MySqlParserQUICK                             = 543
	MySqlParserREBUILD                           = 544
	MySqlParserRECOVER                           = 545
	MySqlParserRECURSIVE                         = 546
	MySqlParserREDO_BUFFER_SIZE                  = 547
	MySqlParserREDUNDANT                         = 548
	MySqlParserRELAY                             = 549
	MySqlParserRELAY_LOG_FILE                    = 550
	MySqlParserRELAY_LOG_POS                     = 551
	MySqlParserRELAYLOG                          = 552
	MySqlParserREMOVE                            = 553
	MySqlParserREORGANIZE                        = 554
	MySqlParserREPAIR                            = 555
	MySqlParserREPLICATE_DO_DB                   = 556
	MySqlParserREPLICATE_DO_TABLE                = 557
	MySqlParserREPLICATE_IGNORE_DB               = 558
	MySqlParserREPLICATE_IGNORE_TABLE            = 559
	MySqlParserREPLICATE_REWRITE_DB              = 560
	MySqlParserREPLICATE_WILD_DO_TABLE           = 561
	MySqlParserREPLICATE_WILD_IGNORE_TABLE       = 562
	MySqlParserREPLICATION                       = 563
	MySqlParserRESET                             = 564
	MySqlParserRESUME                            = 565
	MySqlParserRETURNED_SQLSTATE                 = 566
	MySqlParserRETURNING                         = 567
	MySqlParserRETURNS                           = 568
	MySqlParserROLE                              = 569
	MySqlParserROLLBACK                          = 570
	MySqlParserROLLUP                            = 571
	MySqlParserROTATE                            = 572
	MySqlParserROW                               = 573
	MySqlParserROWS                              = 574
	MySqlParserROW_FORMAT                        = 575
	MySqlParserRTREE                             = 576
	MySqlParserSAVEPOINT                         = 577
	MySqlParserSCHEDULE                          = 578
	MySqlParserSECURITY                          = 579
	MySqlParserSERVER                            = 580
	MySqlParserSESSION                           = 581
	MySqlParserSHARE                             = 582
	MySqlParserSHARED                            = 583
	MySqlParserSIGNED                            = 584
	MySqlParserSIMPLE                            = 585
	MySqlParserSLAVE                             = 586
	MySqlParserSLOW                              = 587
	MySqlParserSNAPSHOT                          = 588
	MySqlParserSOCKET                            = 589
	MySqlParserSOME                              = 590
	MySqlParserSONAME                            = 591
	MySqlParserSOUNDS                            = 592
	MySqlParserSOURCE                            = 593
	MySqlParserSQL_AFTER_GTIDS                   = 594
	MySqlParserSQL_AFTER_MTS_GAPS                = 595
	MySqlParserSQL_BEFORE_GTIDS                  = 596
	MySqlParserSQL_BUFFER_RESULT                 = 597
	MySqlParserSQL_CACHE                         = 598
	MySqlParserSQL_NO_CACHE                      = 599
	MySqlParserSQL_THREAD                        = 600
	MySqlParserSTART                             = 601
	MySqlParserSTARTS                            = 602
	MySqlParserSTATS_AUTO_RECALC                 = 603
	MySqlParserSTATS_PERSISTENT                  = 604
	MySqlParserSTATS_SAMPLE_PAGES                = 605
	MySqlParserSTATUS                            = 606
	MySqlParserSTOP                              = 607
	MySqlParserSTORAGE                           = 608
	MySqlParserSTORED                            = 609
	MySqlParserSTRING                            = 610
	MySqlParserSUBCLASS_ORIGIN                   = 611
	MySqlParserSUBJECT                           = 612
	MySqlParserSUBPARTITION                      = 613
	MySqlParserSUBPARTITIONS                     = 614
	MySqlParserSUSPEND                           = 615
	MySqlParserSWAPS                             = 616
	MySqlParserSWITCHES                          = 617
	MySqlParserTABLE_NAME                        = 618
	MySqlParserTABLESPACE                        = 619
	MySqlParserTABLE_TYPE                        = 620
	MySqlParserTEMPORARY                         = 621
	MySqlParserTEMPTABLE                         = 622
	MySqlParserTHAN                              = 623
	MySqlParserTRADITIONAL                       = 624
	MySqlParserTRANSACTION                       = 625
	MySqlParserTRANSACTIONAL                     = 626
	MySqlParserTRIGGERS                          = 627
	MySqlParserTRUNCATE                          = 628
	MySqlParserUNBOUNDED                         = 629
	MySqlParserUNDEFINED                         = 630
	MySqlParserUNDOFILE                          = 631
	MySqlParserUNDO_BUFFER_SIZE                  = 632
	MySqlParserUNINSTALL                         = 633
	MySqlParserUNKNOWN                           = 634
	MySqlParserUNTIL                             = 635
	MySqlParserUPGRADE                           = 636
	MySqlParserUSER                              = 637
	MySqlParserUSE_FRM                           = 638
	MySqlParserUSER_RESOURCES                    = 639
	MySqlParserVALIDATION                        = 640
	MySqlParserVALUE                             = 641
	MySqlParserVARIABLES                         = 642
	MySqlParserVIEW                              = 643
	MySqlParserVIRTUAL                           = 644
	MySqlParserVISIBLE                           = 645
	MySqlParserWAIT                              = 646
	MySqlParserWARNINGS                          = 647
	MySqlParserWINDOW                            = 648
	MySqlParserWITHOUT                           = 649
	MySqlParserWORK                              = 650
	MySqlParserWRAPPER                           = 651
	MySqlParserX509                              = 652
	MySqlParserXA                                = 653
	MySqlParserXML                               = 654
	MySqlParserYES                               = 655
	MySqlParserEUR                               = 656
	MySqlParserUSA                               = 657
	MySqlParserJIS                               = 658
	MySqlParserISO                               = 659
	MySqlParserINTERNAL                          = 660
	MySqlParserQUARTER                           = 661
	MySqlParserMONTH                             = 662
	MySqlParserDAY                               = 663
	MySqlParserHOUR                              = 664
	MySqlParserMINUTE                            = 665
	MySqlParserWEEK                              = 666
	MySqlParserSECOND                            = 667
	MySqlParserMICROSECOND                       = 668
	MySqlParserTABLES                            = 669
	MySqlParserROUTINE                           = 670
	MySqlParserEXECUTE                           = 671
	MySqlParserFILE                              = 672
	MySqlParserPROCESS                           = 673
	MySqlParserRELOAD                            = 674
	MySqlParserSHUTDOWN                          = 675
	MySqlParserSUPER                             = 676
	MySqlParserPRIVILEGES                        = 677
	MySqlParserAPPLICATION_PASSWORD_ADMIN        = 678
	MySqlParserAUDIT_ADMIN                       = 679
	MySqlParserBACKUP_ADMIN                      = 680
	MySqlParserBINLOG_ADMIN                      = 681
	MySqlParserBINLOG_ENCRYPTION_ADMIN           = 682
	MySqlParserCLONE_ADMIN                       = 683
	MySqlParserCONNECTION_ADMIN                  = 684
	MySqlParserENCRYPTION_KEY_ADMIN              = 685
	MySqlParserFIREWALL_ADMIN                    = 686
	MySqlParserFIREWALL_USER                     = 687
	MySqlParserFLUSH_OPTIMIZER_COSTS             = 688
	MySqlParserFLUSH_STATUS                      = 689
	MySqlParserFLUSH_TABLES                      = 690
	MySqlParserFLUSH_USER_RESOURCES              = 691
	MySqlParserADMIN                             = 692
	MySqlParserGROUP_REPLICATION_ADMIN           = 693
	MySqlParserINNODB_REDO_LOG_ARCHIVE           = 694
	MySqlParserINNODB_REDO_LOG_ENABLE            = 695
	MySqlParserNDB_STORED_USER                   = 696
	MySqlParserPERSIST_RO_VARIABLES_ADMIN        = 697
	MySqlParserREPLICATION_APPLIER               = 698
	MySqlParserREPLICATION_SLAVE_ADMIN           = 699
	MySqlParserRESOURCE_GROUP_ADMIN              = 700
	MySqlParserRESOURCE_GROUP_USER               = 701
	MySqlParserROLE_ADMIN                        = 702
	MySqlParserSERVICE_CONNECTION_ADMIN          = 703
	MySqlParserSESSION_VARIABLES_ADMIN           = 704
	MySqlParserSET_USER_ID                       = 705
	MySqlParserSHOW_ROUTINE                      = 706
	MySqlParserSYSTEM_VARIABLES_ADMIN            = 707
	MySqlParserTABLE_ENCRYPTION_ADMIN            = 708
	MySqlParserVERSION_TOKEN_ADMIN               = 709
	MySqlParserXA_RECOVER_ADMIN                  = 710
	MySqlParserARMSCII8                          = 711
	MySqlParserASCII                             = 712
	MySqlParserBIG5                              = 713
	MySqlParserCP1250                            = 714
	MySqlParserCP1251                            = 715
	MySqlParserCP1256                            = 716
	MySqlParserCP1257                            = 717
	MySqlParserCP850                             = 718
	MySqlParserCP852                             = 719
	MySqlParserCP866                             = 720
	MySqlParserCP932                             = 721
	MySqlParserDEC8                              = 722
	MySqlParserEUCJPMS                           = 723
	MySqlParserEUCKR                             = 724
	MySqlParserGB18030                           = 725
	MySqlParserGB2312                            = 726
	MySqlParserGBK                               = 727
	MySqlParserGEOSTD8                           = 728
	MySqlParserGREEK                             = 729
	MySqlParserHEBREW                            = 730
	MySqlParserHP8                               = 731
	MySqlParserKEYBCS2                           = 732
	MySqlParserKOI8R                             = 733
	MySqlParserKOI8U                             = 734
	MySqlParserLATIN1                            = 735
	MySqlParserLATIN2                            = 736
	MySqlParserLATIN5                            = 737
	MySqlParserLATIN7                            = 738
	MySqlParserMACCE                             = 739
	MySqlParserMACROMAN                          = 740
	MySqlParserSJIS                              = 741
	MySqlParserSWE7                              = 742
	MySqlParserTIS620                            = 743
	MySqlParserUCS2                              = 744
	MySqlParserUJIS                              = 745
	MySqlParserUTF16                             = 746
	MySqlParserUTF16LE                           = 747
	MySqlParserUTF32                             = 748
	MySqlParserUTF8                              = 749
	MySqlParserUTF8MB3                           = 750
	MySqlParserUTF8MB4                           = 751
	MySqlParserARCHIVE                           = 752
	MySqlParserBLACKHOLE                         = 753
	MySqlParserCSV                               = 754
	MySqlParserFEDERATED                         = 755
	MySqlParserINNODB                            = 756
	MySqlParserMEMORY                            = 757
	MySqlParserMRG_MYISAM                        = 758
	MySqlParserMYISAM                            = 759
	MySqlParserNDB                               = 760
	MySqlParserNDBCLUSTER                        = 761
	MySqlParserPERFORMANCE_SCHEMA                = 762
	MySqlParserTOKUDB                            = 763
	MySqlParserREPEATABLE                        = 764
	MySqlParserCOMMITTED                         = 765
	MySqlParserUNCOMMITTED                       = 766
	MySqlParserSERIALIZABLE                      = 767
	MySqlParserGEOMETRYCOLLECTION                = 768
	MySqlParserGEOMCOLLECTION                    = 769
	MySqlParserGEOMETRY                          = 770
	MySqlParserLINESTRING                        = 771
	MySqlParserMULTILINESTRING                   = 772
	MySqlParserMULTIPOINT                        = 773
	MySqlParserMULTIPOLYGON                      = 774
	MySqlParserPOINT                             = 775
	MySqlParserPOLYGON                           = 776
	MySqlParserABS                               = 777
	MySqlParserACOS                              = 778
	MySqlParserADDDATE                           = 779
	MySqlParserADDTIME                           = 780
	MySqlParserAES_DECRYPT                       = 781
	MySqlParserAES_ENCRYPT                       = 782
	MySqlParserAREA                              = 783
	MySqlParserASBINARY                          = 784
	MySqlParserASIN                              = 785
	MySqlParserASTEXT                            = 786
	MySqlParserASWKB                             = 787
	MySqlParserASWKT                             = 788
	MySqlParserASYMMETRIC_DECRYPT                = 789
	MySqlParserASYMMETRIC_DERIVE                 = 790
	MySqlParserASYMMETRIC_ENCRYPT                = 791
	MySqlParserASYMMETRIC_SIGN                   = 792
	MySqlParserASYMMETRIC_VERIFY                 = 793
	MySqlParserATAN                              = 794
	MySqlParserATAN2                             = 795
	MySqlParserBENCHMARK                         = 796
	MySqlParserBIN                               = 797
	MySqlParserBIT_COUNT                         = 798
	MySqlParserBIT_LENGTH                        = 799
	MySqlParserBUFFER                            = 800
	MySqlParserCATALOG_NAME                      = 801
	MySqlParserCEIL                              = 802
	MySqlParserCEILING                           = 803
	MySqlParserCENTROID                          = 804
	MySqlParserCHARACTER_LENGTH                  = 805
	MySqlParserCHARSET                           = 806
	MySqlParserCHAR_LENGTH                       = 807
	MySqlParserCOERCIBILITY                      = 808
	MySqlParserCOLLATION                         = 809
	MySqlParserCOMPRESS                          = 810
	MySqlParserCONCAT                            = 811
	MySqlParserCONCAT_WS                         = 812
	MySqlParserCONNECTION_ID                     = 813
	MySqlParserCONV                              = 814
	MySqlParserCONVERT_TZ                        = 815
	MySqlParserCOS                               = 816
	MySqlParserCOT                               = 817
	MySqlParserCRC32                             = 818
	MySqlParserCREATE_ASYMMETRIC_PRIV_KEY        = 819
	MySqlParserCREATE_ASYMMETRIC_PUB_KEY         = 820
	MySqlParserCREATE_DH_PARAMETERS              = 821
	MySqlParserCREATE_DIGEST                     = 822
	MySqlParserCROSSES                           = 823
	MySqlParserDATEDIFF                          = 824
	MySqlParserDATE_FORMAT                       = 825
	MySqlParserDAYNAME                           = 826
	MySqlParserDAYOFMONTH                        = 827
	MySqlParserDAYOFWEEK                         = 828
	MySqlParserDAYOFYEAR                         = 829
	MySqlParserDECODE                            = 830
	MySqlParserDEGREES                           = 831
	MySqlParserDES_DECRYPT                       = 832
	MySqlParserDES_ENCRYPT                       = 833
	MySqlParserDIMENSION                         = 834
	MySqlParserDISJOINT                          = 835
	MySqlParserELT                               = 836
	MySqlParserENCODE                            = 837
	MySqlParserENCRYPT                           = 838
	MySqlParserENDPOINT                          = 839
	MySqlParserENGINE_ATTRIBUTE                  = 840
	MySqlParserENVELOPE                          = 841
	MySqlParserEQUALS                            = 842
	MySqlParserEXP                               = 843
	MySqlParserEXPORT_SET                        = 844
	MySqlParserEXTERIORRING                      = 845
	MySqlParserEXTRACTVALUE                      = 846
	MySqlParserFIELD                             = 847
	MySqlParserFIND_IN_SET                       = 848
	MySqlParserFLOOR                             = 849
	MySqlParserFORMAT                            = 850
	MySqlParserFOUND_ROWS                        = 851
	MySqlParserFROM_BASE64                       = 852
	MySqlParserFROM_DAYS                         = 853
	MySqlParserFROM_UNIXTIME                     = 854
	MySqlParserGEOMCOLLFROMTEXT                  = 855
	MySqlParserGEOMCOLLFROMWKB                   = 856
	MySqlParserGEOMETRYCOLLECTIONFROMTEXT        = 857
	MySqlParserGEOMETRYCOLLECTIONFROMWKB         = 858
	MySqlParserGEOMETRYFROMTEXT                  = 859
	MySqlParserGEOMETRYFROMWKB                   = 860
	MySqlParserGEOMETRYN                         = 861
	MySqlParserGEOMETRYTYPE                      = 862
	MySqlParserGEOMFROMTEXT                      = 863
	MySqlParserGEOMFROMWKB                       = 864
	MySqlParserGET_FORMAT                        = 865
	MySqlParserGET_LOCK                          = 866
	MySqlParserGLENGTH                           = 867
	MySqlParserGREATEST                          = 868
	MySqlParserGTID_SUBSET                       = 869
	MySqlParserGTID_SUBTRACT                     = 870
	MySqlParserHEX                               = 871
	MySqlParserIFNULL                            = 872
	MySqlParserINET6_ATON                        = 873
	MySqlParserINET6_NTOA                        = 874
	MySqlParserINET_ATON                         = 875
	MySqlParserINET_NTOA                         = 876
	MySqlParserINSTR                             = 877
	MySqlParserINTERIORRINGN                     = 878
	MySqlParserINTERSECTS                        = 879
	MySqlParserISCLOSED                          = 880
	MySqlParserISEMPTY                           = 881
	MySqlParserISNULL                            = 882
	MySqlParserISSIMPLE                          = 883
	MySqlParserIS_FREE_LOCK                      = 884
	MySqlParserIS_IPV4                           = 885
	MySqlParserIS_IPV4_COMPAT                    = 886
	MySqlParserIS_IPV4_MAPPED                    = 887
	MySqlParserIS_IPV6                           = 888
	MySqlParserIS_USED_LOCK                      = 889
	MySqlParserLAST_INSERT_ID                    = 890
	MySqlParserLCASE                             = 891
	MySqlParserLEAST                             = 892
	MySqlParserLENGTH                            = 893
	MySqlParserLINEFROMTEXT                      = 894
	MySqlParserLINEFROMWKB                       = 895
	MySqlParserLINESTRINGFROMTEXT                = 896
	MySqlParserLINESTRINGFROMWKB                 = 897
	MySqlParserLN                                = 898
	MySqlParserLOAD_FILE                         = 899
	MySqlParserLOCATE                            = 900
	MySqlParserLOG                               = 901
	MySqlParserLOG10                             = 902
	MySqlParserLOG2                              = 903
	MySqlParserLOWER                             = 904
	MySqlParserLPAD                              = 905
	MySqlParserLTRIM                             = 906
	MySqlParserMAKEDATE                          = 907
	MySqlParserMAKETIME                          = 908
	MySqlParserMAKE_SET                          = 909
	MySqlParserMASTER_POS_WAIT                   = 910
	MySqlParserMBRCONTAINS                       = 911
	MySqlParserMBRDISJOINT                       = 912
	MySqlParserMBREQUAL                          = 913
	MySqlParserMBRINTERSECTS                     = 914
	MySqlParserMBROVERLAPS                       = 915
	MySqlParserMBRTOUCHES                        = 916
	MySqlParserMBRWITHIN                         = 917
	MySqlParserMD5                               = 918
	MySqlParserMLINEFROMTEXT                     = 919
	MySqlParserMLINEFROMWKB                      = 920
	MySqlParserMONTHNAME                         = 921
	MySqlParserMPOINTFROMTEXT                    = 922
	MySqlParserMPOINTFROMWKB                     = 923
	MySqlParserMPOLYFROMTEXT                     = 924
	MySqlParserMPOLYFROMWKB                      = 925
	MySqlParserMULTILINESTRINGFROMTEXT           = 926
	MySqlParserMULTILINESTRINGFROMWKB            = 927
	MySqlParserMULTIPOINTFROMTEXT                = 928
	MySqlParserMULTIPOINTFROMWKB                 = 929
	MySqlParserMULTIPOLYGONFROMTEXT              = 930
	MySqlParserMULTIPOLYGONFROMWKB               = 931
	MySqlParserNAME_CONST                        = 932
	MySqlParserNULLIF                            = 933
	MySqlParserNUMGEOMETRIES                     = 934
	MySqlParserNUMINTERIORRINGS                  = 935
	MySqlParserNUMPOINTS                         = 936
	MySqlParserOCT                               = 937
	MySqlParserOCTET_LENGTH                      = 938
	MySqlParserORD                               = 939
	MySqlParserOVERLAPS                          = 940
	MySqlParserPERIOD_ADD                        = 941
	MySqlParserPERIOD_DIFF                       = 942
	MySqlParserPI                                = 943
	MySqlParserPOINTFROMTEXT                     = 944
	MySqlParserPOINTFROMWKB                      = 945
	MySqlParserPOINTN                            = 946
	MySqlParserPOLYFROMTEXT                      = 947
	MySqlParserPOLYFROMWKB                       = 948
	MySqlParserPOLYGONFROMTEXT                   = 949
	MySqlParserPOLYGONFROMWKB                    = 950
	MySqlParserPOW                               = 951
	MySqlParserPOWER                             = 952
	MySqlParserQUOTE                             = 953
	MySqlParserRADIANS                           = 954
	MySqlParserRAND                              = 955
	MySqlParserRANDOM_BYTES                      = 956
	MySqlParserRELEASE_LOCK                      = 957
	MySqlParserREVERSE                           = 958
	MySqlParserROUND                             = 959
	MySqlParserROW_COUNT                         = 960
	MySqlParserRPAD                              = 961
	MySqlParserRTRIM                             = 962
	MySqlParserSEC_TO_TIME                       = 963
	MySqlParserSECONDARY_ENGINE_ATTRIBUTE        = 964
	MySqlParserSESSION_USER                      = 965
	MySqlParserSHA                               = 966
	MySqlParserSHA1                              = 967
	MySqlParserSHA2                              = 968
	MySqlParserSCHEMA_NAME                       = 969
	MySqlParserSIGN                              = 970
	MySqlParserSIN                               = 971
	MySqlParserSLEEP                             = 972
	MySqlParserSOUNDEX                           = 973
	MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS       = 974
	MySqlParserSQRT                              = 975
	MySqlParserSRID                              = 976
	MySqlParserSTARTPOINT                        = 977
	MySqlParserSTRCMP                            = 978
	MySqlParserSTR_TO_DATE                       = 979
	MySqlParserST_AREA                           = 980
	MySqlParserST_ASBINARY                       = 981
	MySqlParserST_ASTEXT                         = 982
	MySqlParserST_ASWKB                          = 983
	MySqlParserST_ASWKT                          = 984
	MySqlParserST_BUFFER                         = 985
	MySqlParserST_CENTROID                       = 986
	MySqlParserST_CONTAINS                       = 987
	MySqlParserST_CROSSES                        = 988
	MySqlParserST_DIFFERENCE                     = 989
	MySqlParserST_DIMENSION                      = 990
	MySqlParserST_DISJOINT                       = 991
	MySqlParserST_DISTANCE                       = 992
	MySqlParserST_ENDPOINT                       = 993
	MySqlParserST_ENVELOPE                       = 994
	MySqlParserST_EQUALS                         = 995
	MySqlParserST_EXTERIORRING                   = 996
	MySqlParserST_GEOMCOLLFROMTEXT               = 997
	MySqlParserST_GEOMCOLLFROMTXT                = 998
	MySqlParserST_GEOMCOLLFROMWKB                = 999
	MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT     = 1000
	MySqlParserST_GEOMETRYCOLLECTIONFROMWKB      = 1001
	MySqlParserST_GEOMETRYFROMTEXT               = 1002
	MySqlParserST_GEOMETRYFROMWKB                = 1003
	MySqlParserST_GEOMETRYN                      = 1004
	MySqlParserST_GEOMETRYTYPE                   = 1005
	MySqlParserST_GEOMFROMTEXT                   = 1006
	MySqlParserST_GEOMFROMWKB                    = 1007
	MySqlParserST_INTERIORRINGN                  = 1008
	MySqlParserST_INTERSECTION                   = 1009
	MySqlParserST_INTERSECTS                     = 1010
	MySqlParserST_ISCLOSED                       = 1011
	MySqlParserST_ISEMPTY                        = 1012
	MySqlParserST_ISSIMPLE                       = 1013
	MySqlParserST_LINEFROMTEXT                   = 1014
	MySqlParserST_LINEFROMWKB                    = 1015
	MySqlParserST_LINESTRINGFROMTEXT             = 1016
	MySqlParserST_LINESTRINGFROMWKB              = 1017
	MySqlParserST_NUMGEOMETRIES                  = 1018
	MySqlParserST_NUMINTERIORRING                = 1019
	MySqlParserST_NUMINTERIORRINGS               = 1020
	MySqlParserST_NUMPOINTS                      = 1021
	MySqlParserST_OVERLAPS                       = 1022
	MySqlParserST_POINTFROMTEXT                  = 1023
	MySqlParserST_POINTFROMWKB                   = 1024
	MySqlParserST_POINTN                         = 1025
	MySqlParserST_POLYFROMTEXT                   = 1026
	MySqlParserST_POLYFROMWKB                    = 1027
	MySqlParserST_POLYGONFROMTEXT                = 1028
	MySqlParserST_POLYGONFROMWKB                 = 1029
	MySqlParserST_SRID                           = 1030
	MySqlParserST_STARTPOINT                     = 1031
	MySqlParserST_SYMDIFFERENCE                  = 1032
	MySqlParserST_TOUCHES                        = 1033
	MySqlParserST_UNION                          = 1034
	MySqlParserST_WITHIN                         = 1035
	MySqlParserST_X                              = 1036
	MySqlParserST_Y                              = 1037
	MySqlParserSUBDATE                           = 1038
	MySqlParserSUBSTRING_INDEX                   = 1039
	MySqlParserSUBTIME                           = 1040
	MySqlParserSYSTEM_USER                       = 1041
	MySqlParserTAN                               = 1042
	MySqlParserTIMEDIFF                          = 1043
	MySqlParserTIMESTAMPADD                      = 1044
	MySqlParserTIMESTAMPDIFF                     = 1045
	MySqlParserTIME_FORMAT                       = 1046
	MySqlParserTIME_TO_SEC                       = 1047
	MySqlParserTOUCHES                           = 1048
	MySqlParserTO_BASE64                         = 1049
	MySqlParserTO_DAYS                           = 1050
	MySqlParserTO_SECONDS                        = 1051
	MySqlParserUCASE                             = 1052
	MySqlParserUNCOMPRESS                        = 1053
	MySqlParserUNCOMPRESSED_LENGTH               = 1054
	MySqlParserUNHEX                             = 1055
	MySqlParserUNIX_TIMESTAMP                    = 1056
	MySqlParserUPDATEXML                         = 1057
	MySqlParserUPPER                             = 1058
	MySqlParserUUID                              = 1059
	MySqlParserUUID_SHORT                        = 1060
	MySqlParserVALIDATE_PASSWORD_STRENGTH        = 1061
	MySqlParserVERSION                           = 1062
	MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1063
	MySqlParserWEEKDAY                           = 1064
	MySqlParserWEEKOFYEAR                        = 1065
	MySqlParserWEIGHT_STRING                     = 1066
	MySqlParserWITHIN                            = 1067
	MySqlParserYEARWEEK                          = 1068
	MySqlParserY_FUNCTION                        = 1069
	MySqlParserX_FUNCTION                        = 1070
	MySqlParserVAR_ASSIGN                        = 1071
	MySqlParserPLUS_ASSIGN                       = 1072
	MySqlParserMINUS_ASSIGN                      = 1073
	MySqlParserMULT_ASSIGN                       = 1074
	MySqlParserDIV_ASSIGN                        = 1075
	MySqlParserMOD_ASSIGN                        = 1076
	MySqlParserAND_ASSIGN                        = 1077
	MySqlParserXOR_ASSIGN                        = 1078
	MySqlParserOR_ASSIGN                         = 1079
	MySqlParserSTAR                              = 1080
	MySqlParserDIVIDE                            = 1081
	MySqlParserMODULE                            = 1082
	MySqlParserPLUS                              = 1083
	MySqlParserMINUS                             = 1084
	MySqlParserDIV                               = 1085
	MySqlParserMOD                               = 1086
	MySqlParserEQUAL_SYMBOL                      = 1087
	MySqlParserGREATER_SYMBOL                    = 1088
	MySqlParserLESS_SYMBOL                       = 1089
	MySqlParserEXCLAMATION_SYMBOL                = 1090
	MySqlParserBIT_NOT_OP                        = 1091
	MySqlParserBIT_OR_OP                         = 1092
	MySqlParserBIT_AND_OP                        = 1093
	MySqlParserBIT_XOR_OP                        = 1094
	MySqlParserDOT                               = 1095
	MySqlParserLR_BRACKET                        = 1096
	MySqlParserRR_BRACKET                        = 1097
	MySqlParserCOMMA                             = 1098
	MySqlParserSEMI                              = 1099
	MySqlParserAT_SIGN                           = 1100
	MySqlParserZERO_DECIMAL                      = 1101
	MySqlParserONE_DECIMAL                       = 1102
	MySqlParserTWO_DECIMAL                       = 1103
	MySqlParserSINGLE_QUOTE_SYMB                 = 1104
	MySqlParserDOUBLE_QUOTE_SYMB                 = 1105
	MySqlParserREVERSE_QUOTE_SYMB                = 1106
	MySqlParserCOLON_SYMB                        = 1107
	MySqlParserCHARSET_REVERSE_QOUTE_STRING      = 1108
	MySqlParserFILESIZE_LITERAL                  = 1109
	MySqlParserSTART_NATIONAL_STRING_LITERAL     = 1110
	MySqlParserSTRING_LITERAL                    = 1111
	MySqlParserDECIMAL_LITERAL                   = 1112
	MySqlParserHEXADECIMAL_LITERAL               = 1113
	MySqlParserREAL_LITERAL                      = 1114
	MySqlParserNULL_SPEC_LITERAL                 = 1115
	MySqlParserBIT_STRING                        = 1116
	MySqlParserSTRING_CHARSET_NAME               = 1117
	MySqlParserDOT_ID                            = 1118
	MySqlParserID                                = 1119
	MySqlParserREVERSE_QUOTE_ID                  = 1120
	MySqlParserSTRING_USER_NAME                  = 1121
	MySqlParserIP_ADDRESS                        = 1122
	MySqlParserLOCAL_ID                          = 1123
	MySqlParserGLOBAL_ID                         = 1124
	MySqlParserERROR_RECONGNIGION                = 1125
)

// MySqlParser rules.
const (
	MySqlParserRULE_root                                = 0
	MySqlParserRULE_sqlStatements                       = 1
	MySqlParserRULE_sqlStatement                        = 2
	MySqlParserRULE_emptyStatement_                     = 3
	MySqlParserRULE_ddlStatement                        = 4
	MySqlParserRULE_dmlStatement                        = 5
	MySqlParserRULE_transactionStatement                = 6
	MySqlParserRULE_replicationStatement                = 7
	MySqlParserRULE_preparedStatement                   = 8
	MySqlParserRULE_compoundStatement                   = 9
	MySqlParserRULE_administrationStatement             = 10
	MySqlParserRULE_utilityStatement                    = 11
	MySqlParserRULE_createDatabase                      = 12
	MySqlParserRULE_createEvent                         = 13
	MySqlParserRULE_createIndex                         = 14
	MySqlParserRULE_createLogfileGroup                  = 15
	MySqlParserRULE_createProcedure                     = 16
	MySqlParserRULE_createFunction                      = 17
	MySqlParserRULE_createServer                        = 18
	MySqlParserRULE_createTable                         = 19
	MySqlParserRULE_createTablespaceInnodb              = 20
	MySqlParserRULE_createTablespaceNdb                 = 21
	MySqlParserRULE_createTrigger                       = 22
	MySqlParserRULE_withClause                          = 23
	MySqlParserRULE_commonTableExpressions              = 24
	MySqlParserRULE_cteName                             = 25
	MySqlParserRULE_cteColumnName                       = 26
	MySqlParserRULE_createView                          = 27
	MySqlParserRULE_createDatabaseOption                = 28
	MySqlParserRULE_charSet                             = 29
	MySqlParserRULE_ownerStatement                      = 30
	MySqlParserRULE_scheduleExpression                  = 31
	MySqlParserRULE_timestampValue                      = 32
	MySqlParserRULE_intervalExpr                        = 33
	MySqlParserRULE_intervalType                        = 34
	MySqlParserRULE_enableType                          = 35
	MySqlParserRULE_indexType                           = 36
	MySqlParserRULE_indexOption                         = 37
	MySqlParserRULE_procedureParameter                  = 38
	MySqlParserRULE_functionParameter                   = 39
	MySqlParserRULE_routineOption                       = 40
	MySqlParserRULE_serverOption                        = 41
	MySqlParserRULE_createDefinitions                   = 42
	MySqlParserRULE_createDefinition                    = 43
	MySqlParserRULE_columnDefinition                    = 44
	MySqlParserRULE_columnConstraint                    = 45
	MySqlParserRULE_tableConstraint                     = 46
	MySqlParserRULE_referenceDefinition                 = 47
	MySqlParserRULE_referenceAction                     = 48
	MySqlParserRULE_referenceControlType                = 49
	MySqlParserRULE_indexColumnDefinition               = 50
	MySqlParserRULE_tableOption                         = 51
	MySqlParserRULE_tableType                           = 52
	MySqlParserRULE_tablespaceStorage                   = 53
	MySqlParserRULE_partitionDefinitions                = 54
	MySqlParserRULE_partitionFunctionDefinition         = 55
	MySqlParserRULE_subpartitionFunctionDefinition      = 56
	MySqlParserRULE_partitionDefinition                 = 57
	MySqlParserRULE_partitionDefinerAtom                = 58
	MySqlParserRULE_partitionDefinerVector              = 59
	MySqlParserRULE_subpartitionDefinition              = 60
	MySqlParserRULE_partitionOption                     = 61
	MySqlParserRULE_alterDatabase                       = 62
	MySqlParserRULE_alterEvent                          = 63
	MySqlParserRULE_alterFunction                       = 64
	MySqlParserRULE_alterInstance                       = 65
	MySqlParserRULE_alterLogfileGroup                   = 66
	MySqlParserRULE_alterProcedure                      = 67
	MySqlParserRULE_alterServer                         = 68
	MySqlParserRULE_alterTable                          = 69
	MySqlParserRULE_alterTablespace                     = 70
	MySqlParserRULE_alterView                           = 71
	MySqlParserRULE_alterSpecification                  = 72
	MySqlParserRULE_dropDatabase                        = 73
	MySqlParserRULE_dropEvent                           = 74
	MySqlParserRULE_dropIndex                           = 75
	MySqlParserRULE_dropLogfileGroup                    = 76
	MySqlParserRULE_dropProcedure                       = 77
	MySqlParserRULE_dropFunction                        = 78
	MySqlParserRULE_dropServer                          = 79
	MySqlParserRULE_dropTable                           = 80
	MySqlParserRULE_dropTablespace                      = 81
	MySqlParserRULE_dropTrigger                         = 82
	MySqlParserRULE_dropView                            = 83
	MySqlParserRULE_renameTable                         = 84
	MySqlParserRULE_renameTableClause                   = 85
	MySqlParserRULE_truncateTable                       = 86
	MySqlParserRULE_callStatement                       = 87
	MySqlParserRULE_deleteStatement                     = 88
	MySqlParserRULE_doStatement                         = 89
	MySqlParserRULE_handlerStatement                    = 90
	MySqlParserRULE_insertStatement                     = 91
	MySqlParserRULE_loadDataStatement                   = 92
	MySqlParserRULE_loadXmlStatement                    = 93
	MySqlParserRULE_replaceStatement                    = 94
	MySqlParserRULE_selectStatement                     = 95
	MySqlParserRULE_updateStatement                     = 96
	MySqlParserRULE_insertStatementValue                = 97
	MySqlParserRULE_updatedElement                      = 98
	MySqlParserRULE_assignmentField                     = 99
	MySqlParserRULE_lockClause                          = 100
	MySqlParserRULE_singleDeleteStatement               = 101
	MySqlParserRULE_multipleDeleteStatement             = 102
	MySqlParserRULE_handlerOpenStatement                = 103
	MySqlParserRULE_handlerReadIndexStatement           = 104
	MySqlParserRULE_handlerReadStatement                = 105
	MySqlParserRULE_handlerCloseStatement               = 106
	MySqlParserRULE_singleUpdateStatement               = 107
	MySqlParserRULE_multipleUpdateStatement             = 108
	MySqlParserRULE_orderByClause                       = 109
	MySqlParserRULE_orderByExpression                   = 110
	MySqlParserRULE_tableSources                        = 111
	MySqlParserRULE_tableSource                         = 112
	MySqlParserRULE_tableSourceItem                     = 113
	MySqlParserRULE_indexHint                           = 114
	MySqlParserRULE_indexHintType                       = 115
	MySqlParserRULE_joinPart                            = 116
	MySqlParserRULE_queryExpression                     = 117
	MySqlParserRULE_queryExpressionNointo               = 118
	MySqlParserRULE_querySpecification                  = 119
	MySqlParserRULE_querySpecificationNointo            = 120
	MySqlParserRULE_unionParenthesis                    = 121
	MySqlParserRULE_unionStatement                      = 122
	MySqlParserRULE_selectSpec                          = 123
	MySqlParserRULE_selectElements                      = 124
	MySqlParserRULE_selectElement                       = 125
	MySqlParserRULE_selectIntoExpression                = 126
	MySqlParserRULE_selectFieldsInto                    = 127
	MySqlParserRULE_selectLinesInto                     = 128
	MySqlParserRULE_fromClause                          = 129
	MySqlParserRULE_groupByClause                       = 130
	MySqlParserRULE_havingClause                        = 131
	MySqlParserRULE_windowClause                        = 132
	MySqlParserRULE_groupByItem                         = 133
	MySqlParserRULE_limitClause                         = 134
	MySqlParserRULE_limitClauseAtom                     = 135
	MySqlParserRULE_startTransaction                    = 136
	MySqlParserRULE_beginWork                           = 137
	MySqlParserRULE_commitWork                          = 138
	MySqlParserRULE_rollbackWork                        = 139
	MySqlParserRULE_savepointStatement                  = 140
	MySqlParserRULE_rollbackStatement                   = 141
	MySqlParserRULE_releaseStatement                    = 142
	MySqlParserRULE_lockTables                          = 143
	MySqlParserRULE_unlockTables                        = 144
	MySqlParserRULE_setAutocommitStatement              = 145
	MySqlParserRULE_setTransactionStatement             = 146
	MySqlParserRULE_transactionMode                     = 147
	MySqlParserRULE_lockTableElement                    = 148
	MySqlParserRULE_lockAction                          = 149
	MySqlParserRULE_transactionOption                   = 150
	MySqlParserRULE_transactionLevel                    = 151
	MySqlParserRULE_changeMaster                        = 152
	MySqlParserRULE_changeReplicationFilter             = 153
	MySqlParserRULE_purgeBinaryLogs                     = 154
	MySqlParserRULE_resetMaster                         = 155
	MySqlParserRULE_resetSlave                          = 156
	MySqlParserRULE_startSlave                          = 157
	MySqlParserRULE_stopSlave                           = 158
	MySqlParserRULE_startGroupReplication               = 159
	MySqlParserRULE_stopGroupReplication                = 160
	MySqlParserRULE_masterOption                        = 161
	MySqlParserRULE_stringMasterOption                  = 162
	MySqlParserRULE_decimalMasterOption                 = 163
	MySqlParserRULE_boolMasterOption                    = 164
	MySqlParserRULE_channelOption                       = 165
	MySqlParserRULE_replicationFilter                   = 166
	MySqlParserRULE_tablePair                           = 167
	MySqlParserRULE_threadType                          = 168
	MySqlParserRULE_untilOption                         = 169
	MySqlParserRULE_connectionOption                    = 170
	MySqlParserRULE_gtuidSet                            = 171
	MySqlParserRULE_xaStartTransaction                  = 172
	MySqlParserRULE_xaEndTransaction                    = 173
	MySqlParserRULE_xaPrepareStatement                  = 174
	MySqlParserRULE_xaCommitWork                        = 175
	MySqlParserRULE_xaRollbackWork                      = 176
	MySqlParserRULE_xaRecoverWork                       = 177
	MySqlParserRULE_prepareStatement                    = 178
	MySqlParserRULE_executeStatement                    = 179
	MySqlParserRULE_deallocatePrepare                   = 180
	MySqlParserRULE_routineBody                         = 181
	MySqlParserRULE_blockStatement                      = 182
	MySqlParserRULE_caseStatement                       = 183
	MySqlParserRULE_ifStatement                         = 184
	MySqlParserRULE_iterateStatement                    = 185
	MySqlParserRULE_leaveStatement                      = 186
	MySqlParserRULE_loopStatement                       = 187
	MySqlParserRULE_repeatStatement                     = 188
	MySqlParserRULE_returnStatement                     = 189
	MySqlParserRULE_whileStatement                      = 190
	MySqlParserRULE_cursorStatement                     = 191
	MySqlParserRULE_declareVariable                     = 192
	MySqlParserRULE_declareCondition                    = 193
	MySqlParserRULE_declareCursor                       = 194
	MySqlParserRULE_declareHandler                      = 195
	MySqlParserRULE_handlerConditionValue               = 196
	MySqlParserRULE_procedureSqlStatement               = 197
	MySqlParserRULE_caseAlternative                     = 198
	MySqlParserRULE_elifAlternative                     = 199
	MySqlParserRULE_alterUser                           = 200
	MySqlParserRULE_createUser                          = 201
	MySqlParserRULE_dropUser                            = 202
	MySqlParserRULE_grantStatement                      = 203
	MySqlParserRULE_roleOption                          = 204
	MySqlParserRULE_grantProxy                          = 205
	MySqlParserRULE_renameUser                          = 206
	MySqlParserRULE_revokeStatement                     = 207
	MySqlParserRULE_revokeProxy                         = 208
	MySqlParserRULE_setPasswordStatement                = 209
	MySqlParserRULE_userSpecification                   = 210
	MySqlParserRULE_userAuthOption                      = 211
	MySqlParserRULE_tlsOption                           = 212
	MySqlParserRULE_userResourceOption                  = 213
	MySqlParserRULE_userPasswordOption                  = 214
	MySqlParserRULE_userLockOption                      = 215
	MySqlParserRULE_privelegeClause                     = 216
	MySqlParserRULE_privilege                           = 217
	MySqlParserRULE_privilegeLevel                      = 218
	MySqlParserRULE_renameUserClause                    = 219
	MySqlParserRULE_analyzeTable                        = 220
	MySqlParserRULE_checkTable                          = 221
	MySqlParserRULE_checksumTable                       = 222
	MySqlParserRULE_optimizeTable                       = 223
	MySqlParserRULE_repairTable                         = 224
	MySqlParserRULE_checkTableOption                    = 225
	MySqlParserRULE_createUdfunction                    = 226
	MySqlParserRULE_installPlugin                       = 227
	MySqlParserRULE_uninstallPlugin                     = 228
	MySqlParserRULE_setStatement                        = 229
	MySqlParserRULE_showStatement                       = 230
	MySqlParserRULE_variableClause                      = 231
	MySqlParserRULE_showCommonEntity                    = 232
	MySqlParserRULE_showFilter                          = 233
	MySqlParserRULE_showGlobalInfoClause                = 234
	MySqlParserRULE_showSchemaEntity                    = 235
	MySqlParserRULE_showProfileType                     = 236
	MySqlParserRULE_binlogStatement                     = 237
	MySqlParserRULE_cacheIndexStatement                 = 238
	MySqlParserRULE_flushStatement                      = 239
	MySqlParserRULE_killStatement                       = 240
	MySqlParserRULE_loadIndexIntoCache                  = 241
	MySqlParserRULE_resetStatement                      = 242
	MySqlParserRULE_shutdownStatement                   = 243
	MySqlParserRULE_tableIndexes                        = 244
	MySqlParserRULE_flushOption                         = 245
	MySqlParserRULE_flushTableOption                    = 246
	MySqlParserRULE_loadedTableIndexes                  = 247
	MySqlParserRULE_simpleDescribeStatement             = 248
	MySqlParserRULE_fullDescribeStatement               = 249
	MySqlParserRULE_helpStatement                       = 250
	MySqlParserRULE_useStatement                        = 251
	MySqlParserRULE_signalStatement                     = 252
	MySqlParserRULE_resignalStatement                   = 253
	MySqlParserRULE_signalConditionInformation          = 254
	MySqlParserRULE_diagnosticsStatement                = 255
	MySqlParserRULE_diagnosticsConditionInformationName = 256
	MySqlParserRULE_describeObjectClause                = 257
	MySqlParserRULE_fullId                              = 258
	MySqlParserRULE_tableName                           = 259
	MySqlParserRULE_fullColumnName                      = 260
	MySqlParserRULE_indexColumnName                     = 261
	MySqlParserRULE_userName                            = 262
	MySqlParserRULE_mysqlVariable                       = 263
	MySqlParserRULE_charsetName                         = 264
	MySqlParserRULE_collationName                       = 265
	MySqlParserRULE_engineName                          = 266
	MySqlParserRULE_uuidSet                             = 267
	MySqlParserRULE_xid                                 = 268
	MySqlParserRULE_xuidStringId                        = 269
	MySqlParserRULE_authPlugin                          = 270
	MySqlParserRULE_uid                                 = 271
	MySqlParserRULE_simpleId                            = 272
	MySqlParserRULE_dottedId                            = 273
	MySqlParserRULE_decimalLiteral                      = 274
	MySqlParserRULE_fileSizeLiteral                     = 275
	MySqlParserRULE_stringLiteral                       = 276
	MySqlParserRULE_booleanLiteral                      = 277
	MySqlParserRULE_hexadecimalLiteral                  = 278
	MySqlParserRULE_nullNotnull                         = 279
	MySqlParserRULE_constant                            = 280
	MySqlParserRULE_dataType                            = 281
	MySqlParserRULE_collectionOptions                   = 282
	MySqlParserRULE_convertedDataType                   = 283
	MySqlParserRULE_lengthOneDimension                  = 284
	MySqlParserRULE_lengthTwoDimension                  = 285
	MySqlParserRULE_lengthTwoOptionalDimension          = 286
	MySqlParserRULE_uidList                             = 287
	MySqlParserRULE_tables                              = 288
	MySqlParserRULE_indexColumnNames                    = 289
	MySqlParserRULE_expressions                         = 290
	MySqlParserRULE_expressionsWithDefaults             = 291
	MySqlParserRULE_constants                           = 292
	MySqlParserRULE_simpleStrings                       = 293
	MySqlParserRULE_userVariables                       = 294
	MySqlParserRULE_defaultValue                        = 295
	MySqlParserRULE_currentTimestamp                    = 296
	MySqlParserRULE_expressionOrDefault                 = 297
	MySqlParserRULE_ifExists                            = 298
	MySqlParserRULE_ifNotExists                         = 299
	MySqlParserRULE_functionCall                        = 300
	MySqlParserRULE_specificFunction                    = 301
	MySqlParserRULE_caseFuncAlternative                 = 302
	MySqlParserRULE_levelsInWeightString                = 303
	MySqlParserRULE_levelInWeightListElement            = 304
	MySqlParserRULE_aggregateWindowedFunction           = 305
	MySqlParserRULE_nonAggregateWindowedFunction        = 306
	MySqlParserRULE_overClause                          = 307
	MySqlParserRULE_windowSpec                          = 308
	MySqlParserRULE_windowName                          = 309
	MySqlParserRULE_frameClause                         = 310
	MySqlParserRULE_frameUnits                          = 311
	MySqlParserRULE_frameExtent                         = 312
	MySqlParserRULE_frameBetween                        = 313
	MySqlParserRULE_frameRange                          = 314
	MySqlParserRULE_partitionClause                     = 315
	MySqlParserRULE_scalarFunctionName                  = 316
	MySqlParserRULE_passwordFunctionClause              = 317
	MySqlParserRULE_functionArgs                        = 318
	MySqlParserRULE_functionArg                         = 319
	MySqlParserRULE_expression                          = 320
	MySqlParserRULE_predicate                           = 321
	MySqlParserRULE_expressionAtom                      = 322
	MySqlParserRULE_unaryOperator                       = 323
	MySqlParserRULE_comparisonOperator                  = 324
	MySqlParserRULE_logicalOperator                     = 325
	MySqlParserRULE_bitOperator                         = 326
	MySqlParserRULE_mathOperator                        = 327
	MySqlParserRULE_jsonOperator                        = 328
	MySqlParserRULE_charsetNameBase                     = 329
	MySqlParserRULE_transactionLevelBase                = 330
	MySqlParserRULE_privilegesBase                      = 331
	MySqlParserRULE_intervalTypeBase                    = 332
	MySqlParserRULE_dataTypeBase                        = 333
	MySqlParserRULE_keywordsCanBeId                     = 334
	MySqlParserRULE_functionNameBase                    = 335
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(MySqlParserEOF, 0)
}

func (s *RootContext) SqlStatements() ISqlStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementsContext)
}

func (s *RootContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *RootContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (p *MySqlParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MySqlParserRULE_root)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCREATE-32))|(1<<(MySqlParserDELETE-32))|(1<<(MySqlParserDESC-32))|(1<<(MySqlParserDESCRIBE-32))|(1<<(MySqlParserDROP-32))|(1<<(MySqlParserEXPLAIN-32)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(MySqlParserGET-68))|(1<<(MySqlParserGRANT-68))|(1<<(MySqlParserINSERT-68))|(1<<(MySqlParserKILL-68))|(1<<(MySqlParserLOAD-68))|(1<<(MySqlParserLOCK-68)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserOPTIMIZE-113))|(1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRESIGNAL-113))|(1<<(MySqlParserREVOKE-113)))) != 0) || (((_la-146)&-(0x1f+1)) == 0 && ((1<<uint((_la-146)))&((1<<(MySqlParserSELECT-146))|(1<<(MySqlParserSET-146))|(1<<(MySqlParserSHOW-146))|(1<<(MySqlParserSIGNAL-146))|(1<<(MySqlParserUNLOCK-146))|(1<<(MySqlParserUPDATE-146))|(1<<(MySqlParserUSE-146)))) != 0) || (((_la-332)&-(0x1f+1)) == 0 && ((1<<uint((_la-332)))&((1<<(MySqlParserBEGIN-332))|(1<<(MySqlParserBINLOG-332))|(1<<(MySqlParserCACHE-332))|(1<<(MySqlParserCHECKSUM-332))|(1<<(MySqlParserCOMMIT-332)))) != 0) || _la == MySqlParserDEALLOCATE || _la == MySqlParserDO || (((_la-416)&-(0x1f+1)) == 0 && ((1<<uint((_la-416)))&((1<<(MySqlParserFLUSH-416))|(1<<(MySqlParserHANDLER-416))|(1<<(MySqlParserHELP-416))|(1<<(MySqlParserINSTALL-416)))) != 0) || (((_la-535)&-(0x1f+1)) == 0 && ((1<<uint((_la-535)))&((1<<(MySqlParserPREPARE-535))|(1<<(MySqlParserREPAIR-535))|(1<<(MySqlParserRESET-535)))) != 0) || (((_la-570)&-(0x1f+1)) == 0 && ((1<<uint((_la-570)))&((1<<(MySqlParserROLLBACK-570))|(1<<(MySqlParserSAVEPOINT-570))|(1<<(MySqlParserSTART-570)))) != 0) || (((_la-607)&-(0x1f+1)) == 0 && ((1<<uint((_la-607)))&((1<<(MySqlParserSTOP-607))|(1<<(MySqlParserTRUNCATE-607))|(1<<(MySqlParserUNINSTALL-607)))) != 0) || (((_la-653)&-(0x1f+1)) == 0 && ((1<<uint((_la-653)))&((1<<(MySqlParserXA-653))|(1<<(MySqlParserEXECUTE-653))|(1<<(MySqlParserSHUTDOWN-653)))) != 0) || _la == MySqlParserLR_BRACKET || _la == MySqlParserSEMI {
		{
			p.SetState(672)
			p.SqlStatements()
		}

	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMINUS {
		{
			p.SetState(675)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(676)
			p.Match(MySqlParserMINUS)
		}

	}
	{
		p.SetState(679)
		p.Match(MySqlParserEOF)
	}

	return localctx
}

// ISqlStatementsContext is an interface to support dynamic dispatch.
type ISqlStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlStatementsContext differentiates from other interfaces.
	IsSqlStatementsContext()
}

type SqlStatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlStatementsContext() *SqlStatementsContext {
	var p = new(SqlStatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sqlStatements
	return p
}

func (*SqlStatementsContext) IsSqlStatementsContext() {}

func NewSqlStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlStatementsContext {
	var p = new(SqlStatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sqlStatements

	return p
}

func (s *SqlStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlStatementsContext) AllSqlStatement() []ISqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem())
	var tst = make([]ISqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISqlStatementContext)
		}
	}

	return tst
}

func (s *SqlStatementsContext) SqlStatement(i int) ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *SqlStatementsContext) AllEmptyStatement_() []IEmptyStatement_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmptyStatement_Context)(nil)).Elem())
	var tst = make([]IEmptyStatement_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmptyStatement_Context)
		}
	}

	return tst
}

func (s *SqlStatementsContext) EmptyStatement_(i int) IEmptyStatement_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyStatement_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmptyStatement_Context)
}

func (s *SqlStatementsContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *SqlStatementsContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *SqlStatementsContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *SqlStatementsContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *SqlStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSqlStatements(s)
	}
}

func (s *SqlStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSqlStatements(s)
	}
}

func (p *MySqlParser) SqlStatements() (localctx ISqlStatementsContext) {
	localctx = NewSqlStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MySqlParserRULE_sqlStatements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(690)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
				{
					p.SetState(681)
					p.SqlStatement()
				}
				p.SetState(684)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserMINUS {
					{
						p.SetState(682)
						p.Match(MySqlParserMINUS)
					}
					{
						p.SetState(683)
						p.Match(MySqlParserMINUS)
					}

				}
				p.SetState(687)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(686)
						p.Match(MySqlParserSEMI)
					}

				}

			case MySqlParserSEMI:
				{
					p.SetState(689)
					p.EmptyStatement_()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(694)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(704)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
		{
			p.SetState(695)
			p.SqlStatement()
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
			p.SetState(698)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserMINUS {
				{
					p.SetState(696)
					p.Match(MySqlParserMINUS)
				}
				{
					p.SetState(697)
					p.Match(MySqlParserMINUS)
				}

			}
			{
				p.SetState(700)
				p.Match(MySqlParserSEMI)
			}

		}

	case MySqlParserSEMI:
		{
			p.SetState(703)
			p.EmptyStatement_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISqlStatementContext is an interface to support dynamic dispatch.
type ISqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlStatementContext differentiates from other interfaces.
	IsSqlStatementContext()
}

type SqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlStatementContext() *SqlStatementContext {
	var p = new(SqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sqlStatement
	return p
}

func (*SqlStatementContext) IsSqlStatementContext() {}

func NewSqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlStatementContext {
	var p = new(SqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sqlStatement

	return p
}

func (s *SqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlStatementContext) DdlStatement() IDdlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdlStatementContext)
}

func (s *SqlStatementContext) DmlStatement() IDmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDmlStatementContext)
}

func (s *SqlStatementContext) TransactionStatement() ITransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionStatementContext)
}

func (s *SqlStatementContext) ReplicationStatement() IReplicationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplicationStatementContext)
}

func (s *SqlStatementContext) PreparedStatement() IPreparedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPreparedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPreparedStatementContext)
}

func (s *SqlStatementContext) AdministrationStatement() IAdministrationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdministrationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdministrationStatementContext)
}

func (s *SqlStatementContext) UtilityStatement() IUtilityStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUtilityStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUtilityStatementContext)
}

func (s *SqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSqlStatement(s)
	}
}

func (s *SqlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSqlStatement(s)
	}
}

func (p *MySqlParser) SqlStatement() (localctx ISqlStatementContext) {
	localctx = NewSqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MySqlParserRULE_sqlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(713)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(706)
			p.DdlStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(707)
			p.DmlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(708)
			p.TransactionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(709)
			p.ReplicationStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(710)
			p.PreparedStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(711)
			p.AdministrationStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(712)
			p.UtilityStatement()
		}

	}

	return localctx
}

// IEmptyStatement_Context is an interface to support dynamic dispatch.
type IEmptyStatement_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyStatement_Context differentiates from other interfaces.
	IsEmptyStatement_Context()
}

type EmptyStatement_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStatement_Context() *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_emptyStatement_
	return p
}

func (*EmptyStatement_Context) IsEmptyStatement_Context() {}

func NewEmptyStatement_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStatement_Context {
	var p = new(EmptyStatement_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_emptyStatement_

	return p
}

func (s *EmptyStatement_Context) GetParser() antlr.Parser { return s.parser }

func (s *EmptyStatement_Context) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *EmptyStatement_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStatement_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStatement_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterEmptyStatement_(s)
	}
}

func (s *EmptyStatement_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitEmptyStatement_(s)
	}
}

func (p *MySqlParser) EmptyStatement_() (localctx IEmptyStatement_Context) {
	localctx = NewEmptyStatement_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MySqlParserRULE_emptyStatement_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// IDdlStatementContext is an interface to support dynamic dispatch.
type IDdlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdlStatementContext differentiates from other interfaces.
	IsDdlStatementContext()
}

type DdlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdlStatementContext() *DdlStatementContext {
	var p = new(DdlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ddlStatement
	return p
}

func (*DdlStatementContext) IsDdlStatementContext() {}

func NewDdlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DdlStatementContext {
	var p = new(DdlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ddlStatement

	return p
}

func (s *DdlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DdlStatementContext) CreateDatabase() ICreateDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseContext)
}

func (s *DdlStatementContext) CreateEvent() ICreateEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateEventContext)
}

func (s *DdlStatementContext) CreateIndex() ICreateIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateIndexContext)
}

func (s *DdlStatementContext) CreateLogfileGroup() ICreateLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateLogfileGroupContext)
}

func (s *DdlStatementContext) CreateProcedure() ICreateProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateProcedureContext)
}

func (s *DdlStatementContext) CreateFunction() ICreateFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateFunctionContext)
}

func (s *DdlStatementContext) CreateServer() ICreateServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateServerContext)
}

func (s *DdlStatementContext) CreateTable() ICreateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableContext)
}

func (s *DdlStatementContext) CreateTablespaceInnodb() ICreateTablespaceInnodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceInnodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceInnodbContext)
}

func (s *DdlStatementContext) CreateTablespaceNdb() ICreateTablespaceNdbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceNdbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceNdbContext)
}

func (s *DdlStatementContext) CreateTrigger() ICreateTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTriggerContext)
}

func (s *DdlStatementContext) CreateView() ICreateViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateViewContext)
}

func (s *DdlStatementContext) AlterDatabase() IAlterDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseContext)
}

func (s *DdlStatementContext) AlterEvent() IAlterEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterEventContext)
}

func (s *DdlStatementContext) AlterFunction() IAlterFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterFunctionContext)
}

func (s *DdlStatementContext) AlterInstance() IAlterInstanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterInstanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterInstanceContext)
}

func (s *DdlStatementContext) AlterLogfileGroup() IAlterLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterLogfileGroupContext)
}

func (s *DdlStatementContext) AlterProcedure() IAlterProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterProcedureContext)
}

func (s *DdlStatementContext) AlterServer() IAlterServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterServerContext)
}

func (s *DdlStatementContext) AlterTable() IAlterTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableContext)
}

func (s *DdlStatementContext) AlterTablespace() IAlterTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablespaceContext)
}

func (s *DdlStatementContext) AlterView() IAlterViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterViewContext)
}

func (s *DdlStatementContext) DropDatabase() IDropDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropDatabaseContext)
}

func (s *DdlStatementContext) DropEvent() IDropEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropEventContext)
}

func (s *DdlStatementContext) DropIndex() IDropIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropIndexContext)
}

func (s *DdlStatementContext) DropLogfileGroup() IDropLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropLogfileGroupContext)
}

func (s *DdlStatementContext) DropProcedure() IDropProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropProcedureContext)
}

func (s *DdlStatementContext) DropFunction() IDropFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropFunctionContext)
}

func (s *DdlStatementContext) DropServer() IDropServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropServerContext)
}

func (s *DdlStatementContext) DropTable() IDropTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTableContext)
}

func (s *DdlStatementContext) DropTablespace() IDropTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTablespaceContext)
}

func (s *DdlStatementContext) DropTrigger() IDropTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTriggerContext)
}

func (s *DdlStatementContext) DropView() IDropViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropViewContext)
}

func (s *DdlStatementContext) RenameTable() IRenameTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameTableContext)
}

func (s *DdlStatementContext) TruncateTable() ITruncateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncateTableContext)
}

func (s *DdlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DdlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DdlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDdlStatement(s)
	}
}

func (s *DdlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDdlStatement(s)
	}
}

func (p *MySqlParser) DdlStatement() (localctx IDdlStatementContext) {
	localctx = NewDdlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MySqlParserRULE_ddlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(717)
			p.CreateDatabase()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(718)
			p.CreateEvent()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(719)
			p.CreateIndex()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(720)
			p.CreateLogfileGroup()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(721)
			p.CreateProcedure()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(722)
			p.CreateFunction()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(723)
			p.CreateServer()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(724)
			p.CreateTable()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(725)
			p.CreateTablespaceInnodb()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(726)
			p.CreateTablespaceNdb()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(727)
			p.CreateTrigger()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(728)
			p.CreateView()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(729)
			p.AlterDatabase()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(730)
			p.AlterEvent()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(731)
			p.AlterFunction()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(732)
			p.AlterInstance()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(733)
			p.AlterLogfileGroup()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(734)
			p.AlterProcedure()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(735)
			p.AlterServer()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(736)
			p.AlterTable()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(737)
			p.AlterTablespace()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(738)
			p.AlterView()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(739)
			p.DropDatabase()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(740)
			p.DropEvent()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(741)
			p.DropIndex()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(742)
			p.DropLogfileGroup()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(743)
			p.DropProcedure()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(744)
			p.DropFunction()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(745)
			p.DropServer()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(746)
			p.DropTable()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(747)
			p.DropTablespace()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(748)
			p.DropTrigger()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(749)
			p.DropView()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(750)
			p.RenameTable()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(751)
			p.TruncateTable()
		}

	}

	return localctx
}

// IDmlStatementContext is an interface to support dynamic dispatch.
type IDmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDmlStatementContext differentiates from other interfaces.
	IsDmlStatementContext()
}

type DmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDmlStatementContext() *DmlStatementContext {
	var p = new(DmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dmlStatement
	return p
}

func (*DmlStatementContext) IsDmlStatementContext() {}

func NewDmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DmlStatementContext {
	var p = new(DmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dmlStatement

	return p
}

func (s *DmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DmlStatementContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DmlStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *DmlStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *DmlStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *DmlStatementContext) ReplaceStatement() IReplaceStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceStatementContext)
}

func (s *DmlStatementContext) CallStatement() ICallStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallStatementContext)
}

func (s *DmlStatementContext) LoadDataStatement() ILoadDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadDataStatementContext)
}

func (s *DmlStatementContext) LoadXmlStatement() ILoadXmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadXmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadXmlStatementContext)
}

func (s *DmlStatementContext) DoStatement() IDoStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoStatementContext)
}

func (s *DmlStatementContext) HandlerStatement() IHandlerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerStatementContext)
}

func (s *DmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DmlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDmlStatement(s)
	}
}

func (s *DmlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDmlStatement(s)
	}
}

func (p *MySqlParser) DmlStatement() (localctx IDmlStatementContext) {
	localctx = NewDmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MySqlParserRULE_dmlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(754)
			p.SelectStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(755)
			p.InsertStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(756)
			p.UpdateStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(757)
			p.DeleteStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(758)
			p.ReplaceStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(759)
			p.CallStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(760)
			p.LoadDataStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(761)
			p.LoadXmlStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(762)
			p.DoStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(763)
			p.HandlerStatement()
		}

	}

	return localctx
}

// ITransactionStatementContext is an interface to support dynamic dispatch.
type ITransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionStatementContext differentiates from other interfaces.
	IsTransactionStatementContext()
}

type TransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionStatementContext() *TransactionStatementContext {
	var p = new(TransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionStatement
	return p
}

func (*TransactionStatementContext) IsTransactionStatementContext() {}

func NewTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionStatementContext {
	var p = new(TransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionStatement

	return p
}

func (s *TransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionStatementContext) StartTransaction() IStartTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartTransactionContext)
}

func (s *TransactionStatementContext) BeginWork() IBeginWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginWorkContext)
}

func (s *TransactionStatementContext) CommitWork() ICommitWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommitWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommitWorkContext)
}

func (s *TransactionStatementContext) RollbackWork() IRollbackWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackWorkContext)
}

func (s *TransactionStatementContext) SavepointStatement() ISavepointStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepointStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepointStatementContext)
}

func (s *TransactionStatementContext) RollbackStatement() IRollbackStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackStatementContext)
}

func (s *TransactionStatementContext) ReleaseStatement() IReleaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReleaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReleaseStatementContext)
}

func (s *TransactionStatementContext) LockTables() ILockTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockTablesContext)
}

func (s *TransactionStatementContext) UnlockTables() IUnlockTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlockTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlockTablesContext)
}

func (s *TransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransactionStatement(s)
	}
}

func (s *TransactionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransactionStatement(s)
	}
}

func (p *MySqlParser) TransactionStatement() (localctx ITransactionStatementContext) {
	localctx = NewTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MySqlParserRULE_transactionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(775)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(766)
			p.StartTransaction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(767)
			p.BeginWork()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(768)
			p.CommitWork()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(769)
			p.RollbackWork()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(770)
			p.SavepointStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(771)
			p.RollbackStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(772)
			p.ReleaseStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(773)
			p.LockTables()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(774)
			p.UnlockTables()
		}

	}

	return localctx
}

// IReplicationStatementContext is an interface to support dynamic dispatch.
type IReplicationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplicationStatementContext differentiates from other interfaces.
	IsReplicationStatementContext()
}

type ReplicationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplicationStatementContext() *ReplicationStatementContext {
	var p = new(ReplicationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replicationStatement
	return p
}

func (*ReplicationStatementContext) IsReplicationStatementContext() {}

func NewReplicationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplicationStatementContext {
	var p = new(ReplicationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replicationStatement

	return p
}

func (s *ReplicationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplicationStatementContext) ChangeMaster() IChangeMasterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeMasterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeMasterContext)
}

func (s *ReplicationStatementContext) ChangeReplicationFilter() IChangeReplicationFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeReplicationFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeReplicationFilterContext)
}

func (s *ReplicationStatementContext) PurgeBinaryLogs() IPurgeBinaryLogsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPurgeBinaryLogsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPurgeBinaryLogsContext)
}

func (s *ReplicationStatementContext) ResetMaster() IResetMasterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetMasterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetMasterContext)
}

func (s *ReplicationStatementContext) ResetSlave() IResetSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetSlaveContext)
}

func (s *ReplicationStatementContext) StartSlave() IStartSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartSlaveContext)
}

func (s *ReplicationStatementContext) StopSlave() IStopSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopSlaveContext)
}

func (s *ReplicationStatementContext) StartGroupReplication() IStartGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartGroupReplicationContext)
}

func (s *ReplicationStatementContext) StopGroupReplication() IStopGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopGroupReplicationContext)
}

func (s *ReplicationStatementContext) XaStartTransaction() IXaStartTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaStartTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaStartTransactionContext)
}

func (s *ReplicationStatementContext) XaEndTransaction() IXaEndTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaEndTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaEndTransactionContext)
}

func (s *ReplicationStatementContext) XaPrepareStatement() IXaPrepareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaPrepareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaPrepareStatementContext)
}

func (s *ReplicationStatementContext) XaCommitWork() IXaCommitWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaCommitWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaCommitWorkContext)
}

func (s *ReplicationStatementContext) XaRollbackWork() IXaRollbackWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaRollbackWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaRollbackWorkContext)
}

func (s *ReplicationStatementContext) XaRecoverWork() IXaRecoverWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaRecoverWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaRecoverWorkContext)
}

func (s *ReplicationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplicationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplicationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplicationStatement(s)
	}
}

func (s *ReplicationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplicationStatement(s)
	}
}

func (p *MySqlParser) ReplicationStatement() (localctx IReplicationStatementContext) {
	localctx = NewReplicationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MySqlParserRULE_replicationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(777)
			p.ChangeMaster()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(778)
			p.ChangeReplicationFilter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(779)
			p.PurgeBinaryLogs()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(780)
			p.ResetMaster()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(781)
			p.ResetSlave()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(782)
			p.StartSlave()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(783)
			p.StopSlave()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(784)
			p.StartGroupReplication()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(785)
			p.StopGroupReplication()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(786)
			p.XaStartTransaction()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(787)
			p.XaEndTransaction()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(788)
			p.XaPrepareStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(789)
			p.XaCommitWork()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(790)
			p.XaRollbackWork()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(791)
			p.XaRecoverWork()
		}

	}

	return localctx
}

// IPreparedStatementContext is an interface to support dynamic dispatch.
type IPreparedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPreparedStatementContext differentiates from other interfaces.
	IsPreparedStatementContext()
}

type PreparedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreparedStatementContext() *PreparedStatementContext {
	var p = new(PreparedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_preparedStatement
	return p
}

func (*PreparedStatementContext) IsPreparedStatementContext() {}

func NewPreparedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreparedStatementContext {
	var p = new(PreparedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_preparedStatement

	return p
}

func (s *PreparedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PreparedStatementContext) PrepareStatement() IPrepareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepareStatementContext)
}

func (s *PreparedStatementContext) ExecuteStatement() IExecuteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecuteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecuteStatementContext)
}

func (s *PreparedStatementContext) DeallocatePrepare() IDeallocatePrepareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeallocatePrepareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeallocatePrepareContext)
}

func (s *PreparedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreparedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreparedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPreparedStatement(s)
	}
}

func (s *PreparedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPreparedStatement(s)
	}
}

func (p *MySqlParser) PreparedStatement() (localctx IPreparedStatementContext) {
	localctx = NewPreparedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MySqlParserRULE_preparedStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(797)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserPREPARE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(794)
			p.PrepareStatement()
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(795)
			p.ExecuteStatement()
		}

	case MySqlParserDROP, MySqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(796)
			p.DeallocatePrepare()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_compoundStatement
	return p
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) BlockStatement() IBlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *CompoundStatementContext) CaseStatement() ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *CompoundStatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *CompoundStatementContext) LeaveStatement() ILeaveStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeaveStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeaveStatementContext)
}

func (s *CompoundStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *CompoundStatementContext) RepeatStatement() IRepeatStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeatStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeatStatementContext)
}

func (s *CompoundStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *CompoundStatementContext) IterateStatement() IIterateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterateStatementContext)
}

func (s *CompoundStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *CompoundStatementContext) CursorStatement() ICursorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorStatementContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCompoundStatement(s)
	}
}

func (s *CompoundStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCompoundStatement(s)
	}
}

func (p *MySqlParser) CompoundStatement() (localctx ICompoundStatementContext) {
	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MySqlParserRULE_compoundStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(799)
			p.BlockStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(800)
			p.CaseStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(801)
			p.IfStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(802)
			p.LeaveStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(803)
			p.LoopStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(804)
			p.RepeatStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(805)
			p.WhileStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(806)
			p.IterateStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(807)
			p.ReturnStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(808)
			p.CursorStatement()
		}

	}

	return localctx
}

// IAdministrationStatementContext is an interface to support dynamic dispatch.
type IAdministrationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdministrationStatementContext differentiates from other interfaces.
	IsAdministrationStatementContext()
}

type AdministrationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdministrationStatementContext() *AdministrationStatementContext {
	var p = new(AdministrationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_administrationStatement
	return p
}

func (*AdministrationStatementContext) IsAdministrationStatementContext() {}

func NewAdministrationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdministrationStatementContext {
	var p = new(AdministrationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_administrationStatement

	return p
}

func (s *AdministrationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AdministrationStatementContext) AlterUser() IAlterUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterUserContext)
}

func (s *AdministrationStatementContext) CreateUser() ICreateUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUserContext)
}

func (s *AdministrationStatementContext) DropUser() IDropUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropUserContext)
}

func (s *AdministrationStatementContext) GrantStatement() IGrantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantStatementContext)
}

func (s *AdministrationStatementContext) GrantProxy() IGrantProxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantProxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantProxyContext)
}

func (s *AdministrationStatementContext) RenameUser() IRenameUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameUserContext)
}

func (s *AdministrationStatementContext) RevokeStatement() IRevokeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeStatementContext)
}

func (s *AdministrationStatementContext) RevokeProxy() IRevokeProxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeProxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeProxyContext)
}

func (s *AdministrationStatementContext) AnalyzeTable() IAnalyzeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyzeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyzeTableContext)
}

func (s *AdministrationStatementContext) CheckTable() ICheckTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckTableContext)
}

func (s *AdministrationStatementContext) ChecksumTable() IChecksumTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecksumTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecksumTableContext)
}

func (s *AdministrationStatementContext) OptimizeTable() IOptimizeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimizeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptimizeTableContext)
}

func (s *AdministrationStatementContext) RepairTable() IRepairTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepairTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepairTableContext)
}

func (s *AdministrationStatementContext) CreateUdfunction() ICreateUdfunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUdfunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUdfunctionContext)
}

func (s *AdministrationStatementContext) InstallPlugin() IInstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstallPluginContext)
}

func (s *AdministrationStatementContext) UninstallPlugin() IUninstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstallPluginContext)
}

func (s *AdministrationStatementContext) SetStatement() ISetStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetStatementContext)
}

func (s *AdministrationStatementContext) ShowStatement() IShowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowStatementContext)
}

func (s *AdministrationStatementContext) BinlogStatement() IBinlogStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinlogStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinlogStatementContext)
}

func (s *AdministrationStatementContext) CacheIndexStatement() ICacheIndexStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICacheIndexStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICacheIndexStatementContext)
}

func (s *AdministrationStatementContext) FlushStatement() IFlushStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlushStatementContext)
}

func (s *AdministrationStatementContext) KillStatement() IKillStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKillStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKillStatementContext)
}

func (s *AdministrationStatementContext) LoadIndexIntoCache() ILoadIndexIntoCacheContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadIndexIntoCacheContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadIndexIntoCacheContext)
}

func (s *AdministrationStatementContext) ResetStatement() IResetStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetStatementContext)
}

func (s *AdministrationStatementContext) ShutdownStatement() IShutdownStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShutdownStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShutdownStatementContext)
}

func (s *AdministrationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdministrationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdministrationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAdministrationStatement(s)
	}
}

func (s *AdministrationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAdministrationStatement(s)
	}
}

func (p *MySqlParser) AdministrationStatement() (localctx IAdministrationStatementContext) {
	localctx = NewAdministrationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MySqlParserRULE_administrationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(836)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(811)
			p.AlterUser()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(812)
			p.CreateUser()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(813)
			p.DropUser()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(814)
			p.GrantStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(815)
			p.GrantProxy()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(816)
			p.RenameUser()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(817)
			p.RevokeStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(818)
			p.RevokeProxy()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(819)
			p.AnalyzeTable()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(820)
			p.CheckTable()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(821)
			p.ChecksumTable()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(822)
			p.OptimizeTable()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(823)
			p.RepairTable()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(824)
			p.CreateUdfunction()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(825)
			p.InstallPlugin()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(826)
			p.UninstallPlugin()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(827)
			p.SetStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(828)
			p.ShowStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(829)
			p.BinlogStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(830)
			p.CacheIndexStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(831)
			p.FlushStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(832)
			p.KillStatement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(833)
			p.LoadIndexIntoCache()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(834)
			p.ResetStatement()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(835)
			p.ShutdownStatement()
		}

	}

	return localctx
}

// IUtilityStatementContext is an interface to support dynamic dispatch.
type IUtilityStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUtilityStatementContext differentiates from other interfaces.
	IsUtilityStatementContext()
}

type UtilityStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUtilityStatementContext() *UtilityStatementContext {
	var p = new(UtilityStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_utilityStatement
	return p
}

func (*UtilityStatementContext) IsUtilityStatementContext() {}

func NewUtilityStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UtilityStatementContext {
	var p = new(UtilityStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_utilityStatement

	return p
}

func (s *UtilityStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UtilityStatementContext) SimpleDescribeStatement() ISimpleDescribeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleDescribeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleDescribeStatementContext)
}

func (s *UtilityStatementContext) FullDescribeStatement() IFullDescribeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullDescribeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullDescribeStatementContext)
}

func (s *UtilityStatementContext) HelpStatement() IHelpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHelpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHelpStatementContext)
}

func (s *UtilityStatementContext) UseStatement() IUseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUseStatementContext)
}

func (s *UtilityStatementContext) SignalStatement() ISignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalStatementContext)
}

func (s *UtilityStatementContext) ResignalStatement() IResignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResignalStatementContext)
}

func (s *UtilityStatementContext) DiagnosticsStatement() IDiagnosticsStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiagnosticsStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDiagnosticsStatementContext)
}

func (s *UtilityStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UtilityStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UtilityStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUtilityStatement(s)
	}
}

func (s *UtilityStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUtilityStatement(s)
	}
}

func (p *MySqlParser) UtilityStatement() (localctx IUtilityStatementContext) {
	localctx = NewUtilityStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MySqlParserRULE_utilityStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(845)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(838)
			p.SimpleDescribeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(839)
			p.FullDescribeStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(840)
			p.HelpStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(841)
			p.UseStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(842)
			p.SignalStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(843)
			p.ResignalStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(844)
			p.DiagnosticsStatement()
		}

	}

	return localctx
}

// ICreateDatabaseContext is an interface to support dynamic dispatch.
type ICreateDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDbFormat returns the dbFormat token.
	GetDbFormat() antlr.Token

	// SetDbFormat sets the dbFormat token.
	SetDbFormat(antlr.Token)

	// IsCreateDatabaseContext differentiates from other interfaces.
	IsCreateDatabaseContext()
}

type CreateDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dbFormat antlr.Token
}

func NewEmptyCreateDatabaseContext() *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDatabase
	return p
}

func (*CreateDatabaseContext) IsCreateDatabaseContext() {}

func NewCreateDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDatabase

	return p
}

func (s *CreateDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *CreateDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *CreateDatabaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *CreateDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *CreateDatabaseContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateDatabaseContext) AllCreateDatabaseOption() []ICreateDatabaseOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem())
	var tst = make([]ICreateDatabaseOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDatabaseOptionContext)
		}
	}

	return tst
}

func (s *CreateDatabaseContext) CreateDatabaseOption(i int) ICreateDatabaseOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseOptionContext)
}

func (s *CreateDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateDatabase(s)
	}
}

func (s *CreateDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateDatabase(s)
	}
}

func (p *MySqlParser) CreateDatabase() (localctx ICreateDatabaseContext) {
	localctx = NewCreateDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MySqlParserRULE_createDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(847)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(848)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateDatabaseContext).dbFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateDatabaseContext).dbFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(849)
			p.IfNotExists()
		}

	}
	{
		p.SetState(852)
		p.Uid()
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-24)&-(0x1f+1)) == 0 && ((1<<uint((_la-24)))&((1<<(MySqlParserCHARACTER-24))|(1<<(MySqlParserCOLLATE-24))|(1<<(MySqlParserDEFAULT-24)))) != 0) || _la == MySqlParserCHAR || _la == MySqlParserCHARSET {
		{
			p.SetState(853)
			p.CreateDatabaseOption()
		}

		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateEventContext is an interface to support dynamic dispatch.
type ICreateEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateEventContext differentiates from other interfaces.
	IsCreateEventContext()
}

type CreateEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateEventContext() *CreateEventContext {
	var p = new(CreateEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createEvent
	return p
}

func (*CreateEventContext) IsCreateEventContext() {}

func NewCreateEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateEventContext {
	var p = new(CreateEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createEvent

	return p
}

func (s *CreateEventContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateEventContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *CreateEventContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *CreateEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *CreateEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *CreateEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *CreateEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *CreateEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateEventContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *CreateEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *CreateEventContext) EnableType() IEnableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableTypeContext)
}

func (s *CreateEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateEventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *CreateEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateEvent(s)
	}
}

func (s *CreateEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateEvent(s)
	}
}

func (p *MySqlParser) CreateEvent() (localctx ICreateEventContext) {
	localctx = NewCreateEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MySqlParserRULE_createEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(859)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(860)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(863)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(864)
			p.IfNotExists()
		}

	}
	{
		p.SetState(867)
		p.FullId()
	}
	{
		p.SetState(868)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(869)
		p.Match(MySqlParserSCHEDULE)
	}
	{
		p.SetState(870)
		p.ScheduleExpression()
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(871)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(872)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(873)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(876)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDISABLE || _la == MySqlParserENABLE {
		{
			p.SetState(879)
			p.EnableType()
		}

	}
	p.SetState(884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(882)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(883)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	{
		p.SetState(886)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(887)
		p.RoutineBody()
	}

	return localctx
}

// ICreateIndexContext is an interface to support dynamic dispatch.
type ICreateIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// GetIndexCategory returns the indexCategory token.
	GetIndexCategory() antlr.Token

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// SetIndexCategory sets the indexCategory token.
	SetIndexCategory(antlr.Token)

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsCreateIndexContext differentiates from other interfaces.
	IsCreateIndexContext()
}

type CreateIndexContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	intimeAction  antlr.Token
	indexCategory antlr.Token
	algType       antlr.Token
	lockType      antlr.Token
}

func NewEmptyCreateIndexContext() *CreateIndexContext {
	var p = new(CreateIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createIndex
	return p
}

func (*CreateIndexContext) IsCreateIndexContext() {}

func NewCreateIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateIndexContext {
	var p = new(CreateIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createIndex

	return p
}

func (s *CreateIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateIndexContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *CreateIndexContext) GetIndexCategory() antlr.Token { return s.indexCategory }

func (s *CreateIndexContext) GetAlgType() antlr.Token { return s.algType }

func (s *CreateIndexContext) GetLockType() antlr.Token { return s.lockType }

func (s *CreateIndexContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *CreateIndexContext) SetIndexCategory(v antlr.Token) { s.indexCategory = v }

func (s *CreateIndexContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *CreateIndexContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *CreateIndexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *CreateIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *CreateIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *CreateIndexContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *CreateIndexContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *CreateIndexContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *CreateIndexContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *CreateIndexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *CreateIndexContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *CreateIndexContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *CreateIndexContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *CreateIndexContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOWAIT, 0)
}

func (s *CreateIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *CreateIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *CreateIndexContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserALGORITHM)
}

func (s *CreateIndexContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, i)
}

func (s *CreateIndexContext) AllLOCK() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCK)
}

func (s *CreateIndexContext) LOCK(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, i)
}

func (s *CreateIndexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *CreateIndexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *CreateIndexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *CreateIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *CreateIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *CreateIndexContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *CreateIndexContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *CreateIndexContext) AllINPLACE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserINPLACE)
}

func (s *CreateIndexContext) INPLACE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, i)
}

func (s *CreateIndexContext) AllCOPY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOPY)
}

func (s *CreateIndexContext) COPY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, i)
}

func (s *CreateIndexContext) AllNOCOPY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNOCOPY)
}

func (s *CreateIndexContext) NOCOPY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNOCOPY, i)
}

func (s *CreateIndexContext) AllINSTANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserINSTANT)
}

func (s *CreateIndexContext) INSTANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANT, i)
}

func (s *CreateIndexContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNONE)
}

func (s *CreateIndexContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, i)
}

func (s *CreateIndexContext) AllSHARED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSHARED)
}

func (s *CreateIndexContext) SHARED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, i)
}

func (s *CreateIndexContext) AllEXCLUSIVE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEXCLUSIVE)
}

func (s *CreateIndexContext) EXCLUSIVE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, i)
}

func (s *CreateIndexContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateIndexContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateIndex(s)
	}
}

func (s *CreateIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateIndex(s)
	}
}

func (p *MySqlParser) CreateIndex() (localctx ICreateIndexContext) {
	localctx = NewCreateIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MySqlParserRULE_createIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(889)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOR {
		{
			p.SetState(890)
			p.Match(MySqlParserOR)
		}
		{
			p.SetState(891)
			p.Match(MySqlParserREPLACE)
		}

	}
	p.SetState(895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		{
			p.SetState(894)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateIndexContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateIndexContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE {
		{
			p.SetState(897)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateIndexContext).indexCategory = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateIndexContext).indexCategory = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(900)
		p.Match(MySqlParserINDEX)
	}
	p.SetState(904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(901)
			p.Match(MySqlParserIF)
		}
		{
			p.SetState(902)
			p.Match(MySqlParserNOT)
		}
		{
			p.SetState(903)
			p.Match(MySqlParserEXISTS)
		}

	}
	{
		p.SetState(906)
		p.Uid()
	}
	p.SetState(908)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(907)
			p.IndexType()
		}

	}
	{
		p.SetState(910)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(911)
		p.TableName()
	}
	{
		p.SetState(912)
		p.IndexColumnNames()
	}
	p.SetState(916)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserWAIT:
		{
			p.SetState(913)
			p.Match(MySqlParserWAIT)
		}
		{
			p.SetState(914)
			p.DecimalLiteral()
		}

	case MySqlParserNOWAIT:
		{
			p.SetState(915)
			p.Match(MySqlParserNOWAIT)
		}

	case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserIGNORED, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserNOT, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserUSING, MySqlParserWITH, MySqlParserALGORITHM, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCLUSTERING, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserINVISIBLE, MySqlParserKEY_BLOCK_SIZE, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserVISIBLE, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserENGINE_ATTRIBUTE, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserSEMI:

	default:
	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
		{
			p.SetState(918)
			p.IndexOption()
		}

		p.SetState(923)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(936)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(934)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALGORITHM:
				{
					p.SetState(924)
					p.Match(MySqlParserALGORITHM)
				}
				p.SetState(926)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(925)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(928)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*CreateIndexContext).algType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE || _la == MySqlParserINSTANT || _la == MySqlParserNOCOPY) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*CreateIndexContext).algType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case MySqlParserLOCK:
				{
					p.SetState(929)
					p.Match(MySqlParserLOCK)
				}
				p.SetState(931)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(930)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(933)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*CreateIndexContext).lockType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*CreateIndexContext).lockType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// ICreateLogfileGroupContext is an interface to support dynamic dispatch.
type ICreateLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUndoFile returns the undoFile token.
	GetUndoFile() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetUndoFile sets the undoFile token.
	SetUndoFile(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetInitSize returns the initSize rule contexts.
	GetInitSize() IFileSizeLiteralContext

	// GetUndoSize returns the undoSize rule contexts.
	GetUndoSize() IFileSizeLiteralContext

	// GetRedoSize returns the redoSize rule contexts.
	GetRedoSize() IFileSizeLiteralContext

	// SetInitSize sets the initSize rule contexts.
	SetInitSize(IFileSizeLiteralContext)

	// SetUndoSize sets the undoSize rule contexts.
	SetUndoSize(IFileSizeLiteralContext)

	// SetRedoSize sets the redoSize rule contexts.
	SetRedoSize(IFileSizeLiteralContext)

	// IsCreateLogfileGroupContext differentiates from other interfaces.
	IsCreateLogfileGroupContext()
}

type CreateLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	undoFile antlr.Token
	initSize IFileSizeLiteralContext
	undoSize IFileSizeLiteralContext
	redoSize IFileSizeLiteralContext
	comment  antlr.Token
}

func NewEmptyCreateLogfileGroupContext() *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createLogfileGroup
	return p
}

func (*CreateLogfileGroupContext) IsCreateLogfileGroupContext() {}

func NewCreateLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createLogfileGroup

	return p
}

func (s *CreateLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateLogfileGroupContext) GetUndoFile() antlr.Token { return s.undoFile }

func (s *CreateLogfileGroupContext) GetComment() antlr.Token { return s.comment }

func (s *CreateLogfileGroupContext) SetUndoFile(v antlr.Token) { s.undoFile = v }

func (s *CreateLogfileGroupContext) SetComment(v antlr.Token) { s.comment = v }

func (s *CreateLogfileGroupContext) GetInitSize() IFileSizeLiteralContext { return s.initSize }

func (s *CreateLogfileGroupContext) GetUndoSize() IFileSizeLiteralContext { return s.undoSize }

func (s *CreateLogfileGroupContext) GetRedoSize() IFileSizeLiteralContext { return s.redoSize }

func (s *CreateLogfileGroupContext) SetInitSize(v IFileSizeLiteralContext) { s.initSize = v }

func (s *CreateLogfileGroupContext) SetUndoSize(v IFileSizeLiteralContext) { s.undoSize = v }

func (s *CreateLogfileGroupContext) SetRedoSize(v IFileSizeLiteralContext) { s.redoSize = v }

func (s *CreateLogfileGroupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *CreateLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *CreateLogfileGroupContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *CreateLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateLogfileGroupContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CreateLogfileGroupContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CreateLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *CreateLogfileGroupContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *CreateLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *CreateLogfileGroupContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateLogfileGroupContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateLogfileGroupContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateLogfileGroupContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateLogfileGroup(s)
	}
}

func (s *CreateLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateLogfileGroup(s)
	}
}

func (p *MySqlParser) CreateLogfileGroup() (localctx ICreateLogfileGroupContext) {
	localctx = NewCreateLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MySqlParserRULE_createLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(939)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(940)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(941)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(942)
		p.Uid()
	}
	{
		p.SetState(943)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(944)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(945)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateLogfileGroupContext).undoFile = _m
	}
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(946)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(947)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(950)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).initSize = _x
		}

	}
	p.SetState(958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUNDO_BUFFER_SIZE {
		{
			p.SetState(953)
			p.Match(MySqlParserUNDO_BUFFER_SIZE)
		}
		p.SetState(955)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(954)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(957)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).undoSize = _x
		}

	}
	p.SetState(965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREDO_BUFFER_SIZE {
		{
			p.SetState(960)
			p.Match(MySqlParserREDO_BUFFER_SIZE)
		}
		p.SetState(962)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(961)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(964)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).redoSize = _x
		}

	}
	p.SetState(972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(967)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(968)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(971)
			p.Uid()
		}

	}
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(974)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(977)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(978)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(981)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*CreateLogfileGroupContext).comment = _m
		}

	}
	{
		p.SetState(984)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(985)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(988)
		p.EngineName()
	}

	return localctx
}

// ICreateProcedureContext is an interface to support dynamic dispatch.
type ICreateProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateProcedureContext differentiates from other interfaces.
	IsCreateProcedureContext()
}

type CreateProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateProcedureContext() *CreateProcedureContext {
	var p = new(CreateProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createProcedure
	return p
}

func (*CreateProcedureContext) IsCreateProcedureContext() {}

func NewCreateProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateProcedureContext {
	var p = new(CreateProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createProcedure

	return p
}

func (s *CreateProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateProcedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *CreateProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateProcedureContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateProcedureContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateProcedureContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateProcedureContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateProcedureContext) AllProcedureParameter() []IProcedureParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem())
	var tst = make([]IProcedureParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureParameterContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) ProcedureParameter(i int) IProcedureParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureParameterContext)
}

func (s *CreateProcedureContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateProcedureContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateProcedure(s)
	}
}

func (s *CreateProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateProcedure(s)
	}
}

func (p *MySqlParser) CreateProcedure() (localctx ICreateProcedureContext) {
	localctx = NewCreateProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MySqlParserRULE_createProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(991)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(994)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(995)
		p.FullId()
	}
	{
		p.SetState(996)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(998)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserIN-70))|(1<<(MySqlParserINOUT-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserOUT-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(997)
			p.ProcedureParameter()
		}

	}
	p.SetState(1004)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1000)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1001)
			p.ProcedureParameter()
		}

		p.SetState(1006)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1007)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1008)
				p.RoutineOption()
			}

		}
		p.SetState(1013)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())
	}
	{
		p.SetState(1014)
		p.RoutineBody()
	}

	return localctx
}

// ICreateFunctionContext is an interface to support dynamic dispatch.
type ICreateFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateFunctionContext differentiates from other interfaces.
	IsCreateFunctionContext()
}

type CreateFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateFunctionContext() *CreateFunctionContext {
	var p = new(CreateFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createFunction
	return p
}

func (*CreateFunctionContext) IsCreateFunctionContext() {}

func NewCreateFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateFunctionContext {
	var p = new(CreateFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createFunction

	return p
}

func (s *CreateFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateFunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *CreateFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateFunctionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateFunctionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateFunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *CreateFunctionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *CreateFunctionContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateFunctionContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *CreateFunctionContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateFunctionContext) AllFunctionParameter() []IFunctionParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem())
	var tst = make([]IFunctionParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionParameterContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) FunctionParameter(i int) IFunctionParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *CreateFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateFunction(s)
	}
}

func (s *CreateFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateFunction(s)
	}
}

func (p *MySqlParser) CreateFunction() (localctx ICreateFunctionContext) {
	localctx = NewCreateFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MySqlParserRULE_createFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1016)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1017)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(1020)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(1021)
		p.FullId()
	}
	{
		p.SetState(1022)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(1023)
			p.FunctionParameter()
		}

	}
	p.SetState(1030)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1026)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1027)
			p.FunctionParameter()
		}

		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1033)
		p.Match(MySqlParserRR_BRACKET)
	}
	{
		p.SetState(1034)
		p.Match(MySqlParserRETURNS)
	}
	{
		p.SetState(1035)
		p.DataType()
	}
	p.SetState(1039)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1036)
				p.RoutineOption()
			}

		}
		p.SetState(1041)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDIAGNOSTICS, MySqlParserDROP, MySqlParserEXCEPT, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserINSERT, MySqlParserKILL, MySqlParserLEFT, MySqlParserLOAD, MySqlParserLOCK, MySqlParserNUMBER, MySqlParserOPTIMIZE, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserSTACKED, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserLR_BRACKET, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(1042)
			p.RoutineBody()
		}

	case MySqlParserRETURN:
		{
			p.SetState(1043)
			p.ReturnStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateServerContext is an interface to support dynamic dispatch.
type ICreateServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWrapperName returns the wrapperName token.
	GetWrapperName() antlr.Token

	// SetWrapperName sets the wrapperName token.
	SetWrapperName(antlr.Token)

	// IsCreateServerContext differentiates from other interfaces.
	IsCreateServerContext()
}

type CreateServerContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	wrapperName antlr.Token
}

func NewEmptyCreateServerContext() *CreateServerContext {
	var p = new(CreateServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createServer
	return p
}

func (*CreateServerContext) IsCreateServerContext() {}

func NewCreateServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateServerContext {
	var p = new(CreateServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createServer

	return p
}

func (s *CreateServerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateServerContext) GetWrapperName() antlr.Token { return s.wrapperName }

func (s *CreateServerContext) SetWrapperName(v antlr.Token) { s.wrapperName = v }

func (s *CreateServerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *CreateServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateServerContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *CreateServerContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *CreateServerContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *CreateServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *CreateServerContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *CreateServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *CreateServerContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateServerContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *CreateServerContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateServerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateServerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateServer(s)
	}
}

func (s *CreateServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateServer(s)
	}
}

func (p *MySqlParser) CreateServer() (localctx ICreateServerContext) {
	localctx = NewCreateServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MySqlParserRULE_createServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1046)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1047)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(1048)
		p.Uid()
	}
	{
		p.SetState(1049)
		p.Match(MySqlParserFOREIGN)
	}
	{
		p.SetState(1050)
		p.Match(MySqlParserDATA)
	}
	{
		p.SetState(1051)
		p.Match(MySqlParserWRAPPER)
	}
	{
		p.SetState(1052)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateServerContext).wrapperName = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMYSQL || _la == MySqlParserSTRING_LITERAL) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateServerContext).wrapperName = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1053)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(1054)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1055)
		p.ServerOption()
	}
	p.SetState(1060)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1056)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1057)
			p.ServerOption()
		}

		p.SetState(1062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1063)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ICreateTableContext is an interface to support dynamic dispatch.
type ICreateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableContext differentiates from other interfaces.
	IsCreateTableContext()
}

type CreateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableContext() *CreateTableContext {
	var p = new(CreateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTable
	return p
}

func (*CreateTableContext) IsCreateTableContext() {}

func NewCreateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableContext {
	var p = new(CreateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTable

	return p
}

func (s *CreateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableContext) CopyFrom(ctx *CreateTableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CopyCreateTableContext struct {
	*CreateTableContext
	parenthesisTable ITableNameContext
}

func NewCopyCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CopyCreateTableContext {
	var p = new(CopyCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *CopyCreateTableContext) GetParenthesisTable() ITableNameContext { return s.parenthesisTable }

func (s *CopyCreateTableContext) SetParenthesisTable(v ITableNameContext) { s.parenthesisTable = v }

func (s *CopyCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CopyCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CopyCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *CopyCreateTableContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *CopyCreateTableContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CopyCreateTableContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *CopyCreateTableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CopyCreateTableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CopyCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *CopyCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CopyCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCopyCreateTable(s)
	}
}

func (s *CopyCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCopyCreateTable(s)
	}
}

type ColumnCreateTableContext struct {
	*CreateTableContext
}

func NewColumnCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnCreateTableContext {
	var p = new(ColumnCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *ColumnCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ColumnCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ColumnCreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ColumnCreateTableContext) CreateDefinitions() ICreateDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionsContext)
}

func (s *ColumnCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *ColumnCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *ColumnCreateTableContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *ColumnCreateTableContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *ColumnCreateTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *ColumnCreateTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ColumnCreateTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ColumnCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumnCreateTable(s)
	}
}

func (s *ColumnCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumnCreateTable(s)
	}
}

type QueryCreateTableContext struct {
	*CreateTableContext
	keyViolate antlr.Token
}

func NewQueryCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryCreateTableContext {
	var p = new(QueryCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *QueryCreateTableContext) GetKeyViolate() antlr.Token { return s.keyViolate }

func (s *QueryCreateTableContext) SetKeyViolate(v antlr.Token) { s.keyViolate = v }

func (s *QueryCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *QueryCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *QueryCreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *QueryCreateTableContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *QueryCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *QueryCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *QueryCreateTableContext) CreateDefinitions() ICreateDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionsContext)
}

func (s *QueryCreateTableContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *QueryCreateTableContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *QueryCreateTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *QueryCreateTableContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *QueryCreateTableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *QueryCreateTableContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *QueryCreateTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *QueryCreateTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *QueryCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQueryCreateTable(s)
	}
}

func (s *QueryCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQueryCreateTable(s)
	}
}

func (p *MySqlParser) CreateTable() (localctx ICreateTableContext) {
	localctx = NewCreateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MySqlParserRULE_createTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1143)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCopyCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1065)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1066)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1069)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1070)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1073)
			p.TableName()
		}
		p.SetState(1081)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLIKE:
			{
				p.SetState(1074)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(1075)
				p.TableName()
			}

		case MySqlParserLR_BRACKET:
			{
				p.SetState(1076)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1077)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(1078)

				var _x = p.TableName()

				localctx.(*CopyCreateTableContext).parenthesisTable = _x
			}
			{
				p.SetState(1079)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewQueryCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1083)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1084)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1087)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1088)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1091)
			p.TableName()
		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1092)
				p.CreateDefinitions()
			}

		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-24)&-(0x1f+1)) == 0 && ((1<<uint((_la-24)))&((1<<(MySqlParserCHARACTER-24))|(1<<(MySqlParserCOLLATE-24))|(1<<(MySqlParserDEFAULT-24)))) != 0) || _la == MySqlParserINDEX || _la == MySqlParserUNION || _la == MySqlParserCHAR || (((_la-330)&-(0x1f+1)) == 0 && ((1<<uint((_la-330)))&((1<<(MySqlParserAUTO_INCREMENT-330))|(1<<(MySqlParserAVG_ROW_LENGTH-330))|(1<<(MySqlParserCHECKSUM-330))|(1<<(MySqlParserPAGE_CHECKSUM-330))|(1<<(MySqlParserCOMMENT-330))|(1<<(MySqlParserCOMPRESSION-330)))) != 0) || (((_la-364)&-(0x1f+1)) == 0 && ((1<<uint((_la-364)))&((1<<(MySqlParserCONNECTION-364))|(1<<(MySqlParserDATA-364))|(1<<(MySqlParserDELAY_KEY_WRITE-364))|(1<<(MySqlParserENCRYPTION-364))|(1<<(MySqlParserENGINE-364)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-575)&-(0x1f+1)) == 0 && ((1<<uint((_la-575)))&((1<<(MySqlParserROW_FORMAT-575))|(1<<(MySqlParserSTATS_AUTO_RECALC-575))|(1<<(MySqlParserSTATS_PERSISTENT-575))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-575)))) != 0) || (((_la-608)&-(0x1f+1)) == 0 && ((1<<uint((_la-608)))&((1<<(MySqlParserSTORAGE-608))|(1<<(MySqlParserTABLESPACE-608))|(1<<(MySqlParserTABLE_TYPE-608)))) != 0) || _la == MySqlParserCHARSET {
			{
				p.SetState(1095)
				p.TableOption()
			}
			p.SetState(1102)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (((_la-24)&-(0x1f+1)) == 0 && ((1<<uint((_la-24)))&((1<<(MySqlParserCHARACTER-24))|(1<<(MySqlParserCOLLATE-24))|(1<<(MySqlParserDEFAULT-24)))) != 0) || _la == MySqlParserINDEX || _la == MySqlParserUNION || _la == MySqlParserCHAR || (((_la-330)&-(0x1f+1)) == 0 && ((1<<uint((_la-330)))&((1<<(MySqlParserAUTO_INCREMENT-330))|(1<<(MySqlParserAVG_ROW_LENGTH-330))|(1<<(MySqlParserCHECKSUM-330))|(1<<(MySqlParserPAGE_CHECKSUM-330))|(1<<(MySqlParserCOMMENT-330))|(1<<(MySqlParserCOMPRESSION-330)))) != 0) || (((_la-364)&-(0x1f+1)) == 0 && ((1<<uint((_la-364)))&((1<<(MySqlParserCONNECTION-364))|(1<<(MySqlParserDATA-364))|(1<<(MySqlParserDELAY_KEY_WRITE-364))|(1<<(MySqlParserENCRYPTION-364))|(1<<(MySqlParserENGINE-364)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-575)&-(0x1f+1)) == 0 && ((1<<uint((_la-575)))&((1<<(MySqlParserROW_FORMAT-575))|(1<<(MySqlParserSTATS_AUTO_RECALC-575))|(1<<(MySqlParserSTATS_PERSISTENT-575))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-575)))) != 0) || (((_la-608)&-(0x1f+1)) == 0 && ((1<<uint((_la-608)))&((1<<(MySqlParserSTORAGE-608))|(1<<(MySqlParserTABLESPACE-608))|(1<<(MySqlParserTABLE_TYPE-608)))) != 0) || _la == MySqlParserCHARSET || _la == MySqlParserCOMMA {
				p.SetState(1097)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(1096)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(1099)
					p.TableOption()
				}

				p.SetState(1104)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(1107)
				p.PartitionDefinitions()
			}

		}
		p.SetState(1111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
			{
				p.SetState(1110)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*QueryCreateTableContext).keyViolate = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*QueryCreateTableContext).keyViolate = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1114)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(1113)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(1116)
			p.SelectStatement()
		}

	case 3:
		localctx = NewColumnCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1118)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1119)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1122)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1123)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1126)
			p.TableName()
		}
		{
			p.SetState(1127)
			p.CreateDefinitions()
		}
		p.SetState(1138)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1128)
				p.TableOption()
			}
			p.SetState(1135)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					p.SetState(1130)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserCOMMA {
						{
							p.SetState(1129)
							p.Match(MySqlParserCOMMA)
						}

					}
					{
						p.SetState(1132)
						p.TableOption()
					}

				}
				p.SetState(1137)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())
			}

		}
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(1140)
				p.PartitionDefinitions()
			}

		}

	}

	return localctx
}

// ICreateTablespaceInnodbContext is an interface to support dynamic dispatch.
type ICreateTablespaceInnodbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// GetFileBlockSize returns the fileBlockSize rule contexts.
	GetFileBlockSize() IFileSizeLiteralContext

	// SetFileBlockSize sets the fileBlockSize rule contexts.
	SetFileBlockSize(IFileSizeLiteralContext)

	// IsCreateTablespaceInnodbContext differentiates from other interfaces.
	IsCreateTablespaceInnodbContext()
}

type CreateTablespaceInnodbContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	datafile      antlr.Token
	fileBlockSize IFileSizeLiteralContext
}

func NewEmptyCreateTablespaceInnodbContext() *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTablespaceInnodb
	return p
}

func (*CreateTablespaceInnodbContext) IsCreateTablespaceInnodbContext() {}

func NewCreateTablespaceInnodbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTablespaceInnodb

	return p
}

func (s *CreateTablespaceInnodbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceInnodbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *CreateTablespaceInnodbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *CreateTablespaceInnodbContext) GetFileBlockSize() IFileSizeLiteralContext {
	return s.fileBlockSize
}

func (s *CreateTablespaceInnodbContext) SetFileBlockSize(v IFileSizeLiteralContext) {
	s.fileBlockSize = v
}

func (s *CreateTablespaceInnodbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTablespaceInnodbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *CreateTablespaceInnodbContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateTablespaceInnodbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateTablespaceInnodbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *CreateTablespaceInnodbContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateTablespaceInnodbContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE_BLOCK_SIZE, 0)
}

func (s *CreateTablespaceInnodbContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateTablespaceInnodbContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateTablespaceInnodbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateTablespaceInnodbContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateTablespaceInnodbContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceInnodbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceInnodbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceInnodbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateTablespaceInnodb(s)
	}
}

func (s *CreateTablespaceInnodbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateTablespaceInnodb(s)
	}
}

func (p *MySqlParser) CreateTablespaceInnodb() (localctx ICreateTablespaceInnodbContext) {
	localctx = NewCreateTablespaceInnodbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MySqlParserRULE_createTablespaceInnodb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1145)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1146)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1147)
		p.Uid()
	}
	{
		p.SetState(1148)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1149)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1150)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateTablespaceInnodbContext).datafile = _m
	}
	p.SetState(1154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFILE_BLOCK_SIZE {
		{
			p.SetState(1151)
			p.Match(MySqlParserFILE_BLOCK_SIZE)
		}
		{
			p.SetState(1152)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1153)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceInnodbContext).fileBlockSize = _x
		}

	}
	p.SetState(1161)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(1156)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1157)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1160)
			p.EngineName()
		}

	}

	return localctx
}

// ICreateTablespaceNdbContext is an interface to support dynamic dispatch.
type ICreateTablespaceNdbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetExtentSize returns the extentSize rule contexts.
	GetExtentSize() IFileSizeLiteralContext

	// GetInitialSize returns the initialSize rule contexts.
	GetInitialSize() IFileSizeLiteralContext

	// GetAutoextendSize returns the autoextendSize rule contexts.
	GetAutoextendSize() IFileSizeLiteralContext

	// GetMaxSize returns the maxSize rule contexts.
	GetMaxSize() IFileSizeLiteralContext

	// SetExtentSize sets the extentSize rule contexts.
	SetExtentSize(IFileSizeLiteralContext)

	// SetInitialSize sets the initialSize rule contexts.
	SetInitialSize(IFileSizeLiteralContext)

	// SetAutoextendSize sets the autoextendSize rule contexts.
	SetAutoextendSize(IFileSizeLiteralContext)

	// SetMaxSize sets the maxSize rule contexts.
	SetMaxSize(IFileSizeLiteralContext)

	// IsCreateTablespaceNdbContext differentiates from other interfaces.
	IsCreateTablespaceNdbContext()
}

type CreateTablespaceNdbContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	datafile       antlr.Token
	extentSize     IFileSizeLiteralContext
	initialSize    IFileSizeLiteralContext
	autoextendSize IFileSizeLiteralContext
	maxSize        IFileSizeLiteralContext
	comment        antlr.Token
}

func NewEmptyCreateTablespaceNdbContext() *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTablespaceNdb
	return p
}

func (*CreateTablespaceNdbContext) IsCreateTablespaceNdbContext() {}

func NewCreateTablespaceNdbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTablespaceNdb

	return p
}

func (s *CreateTablespaceNdbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceNdbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *CreateTablespaceNdbContext) GetComment() antlr.Token { return s.comment }

func (s *CreateTablespaceNdbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *CreateTablespaceNdbContext) SetComment(v antlr.Token) { s.comment = v }

func (s *CreateTablespaceNdbContext) GetExtentSize() IFileSizeLiteralContext { return s.extentSize }

func (s *CreateTablespaceNdbContext) GetInitialSize() IFileSizeLiteralContext { return s.initialSize }

func (s *CreateTablespaceNdbContext) GetAutoextendSize() IFileSizeLiteralContext {
	return s.autoextendSize
}

func (s *CreateTablespaceNdbContext) GetMaxSize() IFileSizeLiteralContext { return s.maxSize }

func (s *CreateTablespaceNdbContext) SetExtentSize(v IFileSizeLiteralContext) { s.extentSize = v }

func (s *CreateTablespaceNdbContext) SetInitialSize(v IFileSizeLiteralContext) { s.initialSize = v }

func (s *CreateTablespaceNdbContext) SetAutoextendSize(v IFileSizeLiteralContext) {
	s.autoextendSize = v
}

func (s *CreateTablespaceNdbContext) SetMaxSize(v IFileSizeLiteralContext) { s.maxSize = v }

func (s *CreateTablespaceNdbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTablespaceNdbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *CreateTablespaceNdbContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateTablespaceNdbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateTablespaceNdbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *CreateTablespaceNdbContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *CreateTablespaceNdbContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *CreateTablespaceNdbContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *CreateTablespaceNdbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateTablespaceNdbContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateTablespaceNdbContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CreateTablespaceNdbContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CreateTablespaceNdbContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *CreateTablespaceNdbContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *CreateTablespaceNdbContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateTablespaceNdbContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateTablespaceNdbContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateTablespaceNdbContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceNdbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceNdbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceNdbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateTablespaceNdb(s)
	}
}

func (s *CreateTablespaceNdbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateTablespaceNdb(s)
	}
}

func (p *MySqlParser) CreateTablespaceNdb() (localctx ICreateTablespaceNdbContext) {
	localctx = NewCreateTablespaceNdbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MySqlParserRULE_createTablespaceNdb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1163)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1164)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1165)
		p.Uid()
	}
	{
		p.SetState(1166)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1167)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1168)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateTablespaceNdbContext).datafile = _m
	}
	{
		p.SetState(1169)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(1170)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(1171)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(1172)
		p.Uid()
	}
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENT_SIZE {
		{
			p.SetState(1173)
			p.Match(MySqlParserEXTENT_SIZE)
		}
		p.SetState(1175)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1174)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1177)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).extentSize = _x
		}

	}
	p.SetState(1185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(1180)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(1182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1181)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1184)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).initialSize = _x
		}

	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAUTOEXTEND_SIZE {
		{
			p.SetState(1187)
			p.Match(MySqlParserAUTOEXTEND_SIZE)
		}
		p.SetState(1189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1188)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1191)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).autoextendSize = _x
		}

	}
	p.SetState(1199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMAX_SIZE {
		{
			p.SetState(1194)
			p.Match(MySqlParserMAX_SIZE)
		}
		p.SetState(1196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1195)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1198)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).maxSize = _x
		}

	}
	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(1201)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(1203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1202)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1205)
			p.Uid()
		}

	}
	p.SetState(1209)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(1208)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(1216)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1211)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1212)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1215)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*CreateTablespaceNdbContext).comment = _m
		}

	}
	{
		p.SetState(1218)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(1220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(1219)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(1222)
		p.EngineName()
	}

	return localctx
}

// ICreateTriggerContext is an interface to support dynamic dispatch.
type ICreateTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTriggerTime returns the triggerTime token.
	GetTriggerTime() antlr.Token

	// GetTriggerEvent returns the triggerEvent token.
	GetTriggerEvent() antlr.Token

	// GetTriggerPlace returns the triggerPlace token.
	GetTriggerPlace() antlr.Token

	// SetTriggerTime sets the triggerTime token.
	SetTriggerTime(antlr.Token)

	// SetTriggerEvent sets the triggerEvent token.
	SetTriggerEvent(antlr.Token)

	// SetTriggerPlace sets the triggerPlace token.
	SetTriggerPlace(antlr.Token)

	// GetThisTrigger returns the thisTrigger rule contexts.
	GetThisTrigger() IFullIdContext

	// GetOtherTrigger returns the otherTrigger rule contexts.
	GetOtherTrigger() IFullIdContext

	// SetThisTrigger sets the thisTrigger rule contexts.
	SetThisTrigger(IFullIdContext)

	// SetOtherTrigger sets the otherTrigger rule contexts.
	SetOtherTrigger(IFullIdContext)

	// IsCreateTriggerContext differentiates from other interfaces.
	IsCreateTriggerContext()
}

type CreateTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	thisTrigger  IFullIdContext
	triggerTime  antlr.Token
	triggerEvent antlr.Token
	triggerPlace antlr.Token
	otherTrigger IFullIdContext
}

func NewEmptyCreateTriggerContext() *CreateTriggerContext {
	var p = new(CreateTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTrigger
	return p
}

func (*CreateTriggerContext) IsCreateTriggerContext() {}

func NewCreateTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTriggerContext {
	var p = new(CreateTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTrigger

	return p
}

func (s *CreateTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTriggerContext) GetTriggerTime() antlr.Token { return s.triggerTime }

func (s *CreateTriggerContext) GetTriggerEvent() antlr.Token { return s.triggerEvent }

func (s *CreateTriggerContext) GetTriggerPlace() antlr.Token { return s.triggerPlace }

func (s *CreateTriggerContext) SetTriggerTime(v antlr.Token) { s.triggerTime = v }

func (s *CreateTriggerContext) SetTriggerEvent(v antlr.Token) { s.triggerEvent = v }

func (s *CreateTriggerContext) SetTriggerPlace(v antlr.Token) { s.triggerPlace = v }

func (s *CreateTriggerContext) GetThisTrigger() IFullIdContext { return s.thisTrigger }

func (s *CreateTriggerContext) GetOtherTrigger() IFullIdContext { return s.otherTrigger }

func (s *CreateTriggerContext) SetThisTrigger(v IFullIdContext) { s.thisTrigger = v }

func (s *CreateTriggerContext) SetOtherTrigger(v IFullIdContext) { s.otherTrigger = v }

func (s *CreateTriggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *CreateTriggerContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *CreateTriggerContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateTriggerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *CreateTriggerContext) EACH() antlr.TerminalNode {
	return s.GetToken(MySqlParserEACH, 0)
}

func (s *CreateTriggerContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *CreateTriggerContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateTriggerContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *CreateTriggerContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateTriggerContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *CreateTriggerContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *CreateTriggerContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *CreateTriggerContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *CreateTriggerContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *CreateTriggerContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *CreateTriggerContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *CreateTriggerContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateTriggerContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWS, 0)
}

func (s *CreateTriggerContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDES, 0)
}

func (s *CreateTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateTrigger(s)
	}
}

func (s *CreateTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateTrigger(s)
	}
}

func (p *MySqlParser) CreateTrigger() (localctx ICreateTriggerContext) {
	localctx = NewCreateTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MySqlParserRULE_createTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1224)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1227)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOR {
		{
			p.SetState(1225)
			p.Match(MySqlParserOR)
		}
		{
			p.SetState(1226)
			p.Match(MySqlParserREPLACE)
		}

	}
	p.SetState(1230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1229)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(1232)
		p.Match(MySqlParserTRIGGER)
	}
	{
		p.SetState(1233)

		var _x = p.FullId()

		localctx.(*CreateTriggerContext).thisTrigger = _x
	}
	{
		p.SetState(1234)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateTriggerContext).triggerTime = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBEFORE || _la == MySqlParserAFTER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateTriggerContext).triggerTime = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1235)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateTriggerContext).triggerEvent = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDELETE || _la == MySqlParserINSERT || _la == MySqlParserUPDATE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateTriggerContext).triggerEvent = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1236)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(1237)
		p.TableName()
	}
	{
		p.SetState(1238)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(1239)
		p.Match(MySqlParserEACH)
	}
	{
		p.SetState(1240)
		p.Match(MySqlParserROW)
	}
	p.SetState(1243)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1241)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTriggerContext).triggerPlace = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFOLLOWS || _la == MySqlParserPRECEDES) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTriggerContext).triggerPlace = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1242)

			var _x = p.FullId()

			localctx.(*CreateTriggerContext).otherTrigger = _x
		}

	}
	{
		p.SetState(1245)
		p.RoutineBody()
	}

	return localctx
}

// IWithClauseContext is an interface to support dynamic dispatch.
type IWithClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithClauseContext differentiates from other interfaces.
	IsWithClauseContext()
}

type WithClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithClauseContext() *WithClauseContext {
	var p = new(WithClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_withClause
	return p
}

func (*WithClauseContext) IsWithClauseContext() {}

func NewWithClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithClauseContext {
	var p = new(WithClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_withClause

	return p
}

func (s *WithClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WithClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *WithClauseContext) CommonTableExpressions() ICommonTableExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommonTableExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommonTableExpressionsContext)
}

func (s *WithClauseContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECURSIVE, 0)
}

func (s *WithClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWithClause(s)
	}
}

func (s *WithClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWithClause(s)
	}
}

func (p *MySqlParser) WithClause() (localctx IWithClauseContext) {
	localctx = NewWithClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MySqlParserRULE_withClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1247)
		p.Match(MySqlParserWITH)
	}
	p.SetState(1249)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1248)
			p.Match(MySqlParserRECURSIVE)
		}

	}
	{
		p.SetState(1251)
		p.CommonTableExpressions()
	}

	return localctx
}

// ICommonTableExpressionsContext is an interface to support dynamic dispatch.
type ICommonTableExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommonTableExpressionsContext differentiates from other interfaces.
	IsCommonTableExpressionsContext()
}

type CommonTableExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommonTableExpressionsContext() *CommonTableExpressionsContext {
	var p = new(CommonTableExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_commonTableExpressions
	return p
}

func (*CommonTableExpressionsContext) IsCommonTableExpressionsContext() {}

func NewCommonTableExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommonTableExpressionsContext {
	var p = new(CommonTableExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_commonTableExpressions

	return p
}

func (s *CommonTableExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CommonTableExpressionsContext) CteName() ICteNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICteNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICteNameContext)
}

func (s *CommonTableExpressionsContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *CommonTableExpressionsContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *CommonTableExpressionsContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *CommonTableExpressionsContext) DmlStatement() IDmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDmlStatementContext)
}

func (s *CommonTableExpressionsContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *CommonTableExpressionsContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *CommonTableExpressionsContext) AllCteColumnName() []ICteColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICteColumnNameContext)(nil)).Elem())
	var tst = make([]ICteColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICteColumnNameContext)
		}
	}

	return tst
}

func (s *CommonTableExpressionsContext) CteColumnName(i int) ICteColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICteColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICteColumnNameContext)
}

func (s *CommonTableExpressionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CommonTableExpressionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CommonTableExpressionsContext) CommonTableExpressions() ICommonTableExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommonTableExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommonTableExpressionsContext)
}

func (s *CommonTableExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommonTableExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommonTableExpressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCommonTableExpressions(s)
	}
}

func (s *CommonTableExpressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCommonTableExpressions(s)
	}
}

func (p *MySqlParser) CommonTableExpressions() (localctx ICommonTableExpressionsContext) {
	localctx = NewCommonTableExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MySqlParserRULE_commonTableExpressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1253)
		p.CteName()
	}
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(1254)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1255)
			p.CteColumnName()
		}
		p.SetState(1260)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1256)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1257)
				p.CteColumnName()
			}

			p.SetState(1262)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1263)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(1267)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(1268)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1269)
		p.DmlStatement()
	}
	{
		p.SetState(1270)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(1273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(1271)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1272)
			p.CommonTableExpressions()
		}

	}

	return localctx
}

// ICteNameContext is an interface to support dynamic dispatch.
type ICteNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCteNameContext differentiates from other interfaces.
	IsCteNameContext()
}

type CteNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCteNameContext() *CteNameContext {
	var p = new(CteNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cteName
	return p
}

func (*CteNameContext) IsCteNameContext() {}

func NewCteNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CteNameContext {
	var p = new(CteNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cteName

	return p
}

func (s *CteNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CteNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CteNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CteNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CteNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCteName(s)
	}
}

func (s *CteNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCteName(s)
	}
}

func (p *MySqlParser) CteName() (localctx ICteNameContext) {
	localctx = NewCteNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MySqlParserRULE_cteName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1275)
		p.Uid()
	}

	return localctx
}

// ICteColumnNameContext is an interface to support dynamic dispatch.
type ICteColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCteColumnNameContext differentiates from other interfaces.
	IsCteColumnNameContext()
}

type CteColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCteColumnNameContext() *CteColumnNameContext {
	var p = new(CteColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cteColumnName
	return p
}

func (*CteColumnNameContext) IsCteColumnNameContext() {}

func NewCteColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CteColumnNameContext {
	var p = new(CteColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cteColumnName

	return p
}

func (s *CteColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CteColumnNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CteColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CteColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CteColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCteColumnName(s)
	}
}

func (s *CteColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCteColumnName(s)
	}
}

func (p *MySqlParser) CteColumnName() (localctx ICteColumnNameContext) {
	localctx = NewCteColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MySqlParserRULE_cteColumnName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1277)
		p.Uid()
	}

	return localctx
}

// ICreateViewContext is an interface to support dynamic dispatch.
type ICreateViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetSecContext returns the secContext token.
	GetSecContext() antlr.Token

	// GetCheckOption returns the checkOption token.
	GetCheckOption() antlr.Token

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetSecContext sets the secContext token.
	SetSecContext(antlr.Token)

	// SetCheckOption sets the checkOption token.
	SetCheckOption(antlr.Token)

	// IsCreateViewContext differentiates from other interfaces.
	IsCreateViewContext()
}

type CreateViewContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	algType     antlr.Token
	secContext  antlr.Token
	checkOption antlr.Token
}

func NewEmptyCreateViewContext() *CreateViewContext {
	var p = new(CreateViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createView
	return p
}

func (*CreateViewContext) IsCreateViewContext() {}

func NewCreateViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateViewContext {
	var p = new(CreateViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createView

	return p
}

func (s *CreateViewContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateViewContext) GetAlgType() antlr.Token { return s.algType }

func (s *CreateViewContext) GetSecContext() antlr.Token { return s.secContext }

func (s *CreateViewContext) GetCheckOption() antlr.Token { return s.checkOption }

func (s *CreateViewContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *CreateViewContext) SetSecContext(v antlr.Token) { s.secContext = v }

func (s *CreateViewContext) SetCheckOption(v antlr.Token) { s.checkOption = v }

func (s *CreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *CreateViewContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *CreateViewContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *CreateViewContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *CreateViewContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *CreateViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *CreateViewContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *CreateViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *CreateViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *CreateViewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateViewContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *CreateViewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateViewContext) WithClause() IWithClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithClauseContext)
}

func (s *CreateViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *CreateViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CreateViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *CreateViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *CreateViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *CreateViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *CreateViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *CreateViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *CreateViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *CreateViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *CreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateView(s)
	}
}

func (s *CreateViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateView(s)
	}
}

func (p *MySqlParser) CreateView() (localctx ICreateViewContext) {
	localctx = NewCreateViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MySqlParserRULE_createView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1279)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOR {
		{
			p.SetState(1280)
			p.Match(MySqlParserOR)
		}
		{
			p.SetState(1281)
			p.Match(MySqlParserREPLACE)
		}

	}
	p.SetState(1287)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(1284)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(1285)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1286)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateViewContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateViewContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1289)
			p.OwnerStatement()
		}

	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(1292)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1293)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(1294)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateViewContext).secContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateViewContext).secContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1297)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(1298)
		p.FullId()
	}
	p.SetState(1303)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(1299)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1300)
			p.UidList()
		}
		{
			p.SetState(1301)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(1305)
		p.Match(MySqlParserAS)
	}
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(1306)
			p.WithClause()
		}

	}
	{
		p.SetState(1309)
		p.SelectStatement()
	}
	p.SetState(1316)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(1310)
			p.Match(MySqlParserWITH)
		}
		p.SetState(1312)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			{
				p.SetState(1311)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*CreateViewContext).checkOption = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*CreateViewContext).checkOption = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1314)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1315)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// ICreateDatabaseOptionContext is an interface to support dynamic dispatch.
type ICreateDatabaseOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDatabaseOptionContext differentiates from other interfaces.
	IsCreateDatabaseOptionContext()
}

type CreateDatabaseOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDatabaseOptionContext() *CreateDatabaseOptionContext {
	var p = new(CreateDatabaseOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDatabaseOption
	return p
}

func (*CreateDatabaseOptionContext) IsCreateDatabaseOptionContext() {}

func NewCreateDatabaseOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseOptionContext {
	var p = new(CreateDatabaseOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDatabaseOption

	return p
}

func (s *CreateDatabaseOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseOptionContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *CreateDatabaseOptionContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CreateDatabaseOptionContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *CreateDatabaseOptionContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *CreateDatabaseOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *CreateDatabaseOptionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CreateDatabaseOptionContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CreateDatabaseOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateDatabaseOption(s)
	}
}

func (s *CreateDatabaseOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateDatabaseOption(s)
	}
}

func (p *MySqlParser) CreateDatabaseOption() (localctx ICreateDatabaseOptionContext) {
	localctx = NewCreateDatabaseOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MySqlParserRULE_createDatabaseOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1337)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1318)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1321)
			p.CharSet()
		}
		p.SetState(1323)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1322)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1327)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(1325)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(1326)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1329)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1332)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1334)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1333)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1336)
			p.CollationName()
		}

	}

	return localctx
}

// ICharSetContext is an interface to support dynamic dispatch.
type ICharSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharSetContext differentiates from other interfaces.
	IsCharSetContext()
}

type CharSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharSetContext() *CharSetContext {
	var p = new(CharSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charSet
	return p
}

func (*CharSetContext) IsCharSetContext() {}

func NewCharSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharSetContext {
	var p = new(CharSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charSet

	return p
}

func (s *CharSetContext) GetParser() antlr.Parser { return s.parser }

func (s *CharSetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *CharSetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *CharSetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *CharSetContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *CharSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharSet(s)
	}
}

func (s *CharSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharSet(s)
	}
}

func (p *MySqlParser) CharSet() (localctx ICharSetContext) {
	localctx = NewCharSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MySqlParserRULE_charSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1344)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCHARACTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1339)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(1340)
			p.Match(MySqlParserSET)
		}

	case MySqlParserCHARSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1341)
			p.Match(MySqlParserCHARSET)
		}

	case MySqlParserCHAR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1342)
			p.Match(MySqlParserCHAR)
		}
		{
			p.SetState(1343)
			p.Match(MySqlParserSET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOwnerStatementContext is an interface to support dynamic dispatch.
type IOwnerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwnerStatementContext differentiates from other interfaces.
	IsOwnerStatementContext()
}

type OwnerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwnerStatementContext() *OwnerStatementContext {
	var p = new(OwnerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ownerStatement
	return p
}

func (*OwnerStatementContext) IsOwnerStatementContext() {}

func NewOwnerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OwnerStatementContext {
	var p = new(OwnerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ownerStatement

	return p
}

func (s *OwnerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OwnerStatementContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *OwnerStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *OwnerStatementContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *OwnerStatementContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *OwnerStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *OwnerStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *OwnerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OwnerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OwnerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOwnerStatement(s)
	}
}

func (s *OwnerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOwnerStatement(s)
	}
}

func (p *MySqlParser) OwnerStatement() (localctx IOwnerStatementContext) {
	localctx = NewOwnerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MySqlParserRULE_ownerStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1346)
		p.Match(MySqlParserDEFINER)
	}
	{
		p.SetState(1347)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(1354)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserADMIN, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserSTRING_USER_NAME:
		{
			p.SetState(1348)
			p.UserName()
		}

	case MySqlParserCURRENT_USER:
		{
			p.SetState(1349)
			p.Match(MySqlParserCURRENT_USER)
		}
		p.SetState(1352)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1350)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1351)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IScheduleExpressionContext is an interface to support dynamic dispatch.
type IScheduleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScheduleExpressionContext differentiates from other interfaces.
	IsScheduleExpressionContext()
}

type ScheduleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScheduleExpressionContext() *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_scheduleExpression
	return p
}

func (*ScheduleExpressionContext) IsScheduleExpressionContext() {}

func NewScheduleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_scheduleExpression

	return p
}

func (s *ScheduleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScheduleExpressionContext) CopyFrom(ctx *ScheduleExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ScheduleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScheduleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PreciseScheduleContext struct {
	*ScheduleExpressionContext
}

func NewPreciseScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PreciseScheduleContext {
	var p = new(PreciseScheduleContext)

	p.ScheduleExpressionContext = NewEmptyScheduleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ScheduleExpressionContext))

	return p
}

func (s *PreciseScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreciseScheduleContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *PreciseScheduleContext) TimestampValue() ITimestampValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampValueContext)
}

func (s *PreciseScheduleContext) AllIntervalExpr() []IIntervalExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem())
	var tst = make([]IIntervalExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalExprContext)
		}
	}

	return tst
}

func (s *PreciseScheduleContext) IntervalExpr(i int) IIntervalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalExprContext)
}

func (s *PreciseScheduleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPreciseSchedule(s)
	}
}

func (s *PreciseScheduleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPreciseSchedule(s)
	}
}

type IntervalScheduleContext struct {
	*ScheduleExpressionContext
	startTimestamp ITimestampValueContext
	_intervalExpr  IIntervalExprContext
	startIntervals []IIntervalExprContext
	endTimestamp   ITimestampValueContext
	endIntervals   []IIntervalExprContext
}

func NewIntervalScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalScheduleContext {
	var p = new(IntervalScheduleContext)

	p.ScheduleExpressionContext = NewEmptyScheduleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ScheduleExpressionContext))

	return p
}

func (s *IntervalScheduleContext) GetStartTimestamp() ITimestampValueContext { return s.startTimestamp }

func (s *IntervalScheduleContext) Get_intervalExpr() IIntervalExprContext { return s._intervalExpr }

func (s *IntervalScheduleContext) GetEndTimestamp() ITimestampValueContext { return s.endTimestamp }

func (s *IntervalScheduleContext) SetStartTimestamp(v ITimestampValueContext) { s.startTimestamp = v }

func (s *IntervalScheduleContext) Set_intervalExpr(v IIntervalExprContext) { s._intervalExpr = v }

func (s *IntervalScheduleContext) SetEndTimestamp(v ITimestampValueContext) { s.endTimestamp = v }

func (s *IntervalScheduleContext) GetStartIntervals() []IIntervalExprContext { return s.startIntervals }

func (s *IntervalScheduleContext) GetEndIntervals() []IIntervalExprContext { return s.endIntervals }

func (s *IntervalScheduleContext) SetStartIntervals(v []IIntervalExprContext) { s.startIntervals = v }

func (s *IntervalScheduleContext) SetEndIntervals(v []IIntervalExprContext) { s.endIntervals = v }

func (s *IntervalScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalScheduleContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *IntervalScheduleContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalScheduleContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IntervalScheduleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalScheduleContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *IntervalScheduleContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *IntervalScheduleContext) AllTimestampValue() []ITimestampValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem())
	var tst = make([]ITimestampValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITimestampValueContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) TimestampValue(i int) ITimestampValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITimestampValueContext)
}

func (s *IntervalScheduleContext) AllIntervalExpr() []IIntervalExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem())
	var tst = make([]IIntervalExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalExprContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) IntervalExpr(i int) IIntervalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalExprContext)
}

func (s *IntervalScheduleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalSchedule(s)
	}
}

func (s *IntervalScheduleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalSchedule(s)
	}
}

func (p *MySqlParser) ScheduleExpression() (localctx IScheduleExpressionContext) {
	localctx = NewScheduleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MySqlParserRULE_scheduleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1390)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAT:
		localctx = NewPreciseScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1356)
			p.Match(MySqlParserAT)
		}
		{
			p.SetState(1357)
			p.TimestampValue()
		}
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserPLUS {
			{
				p.SetState(1358)
				p.IntervalExpr()
			}

			p.SetState(1363)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserEVERY:
		localctx = NewIntervalScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1364)
			p.Match(MySqlParserEVERY)
		}
		p.SetState(1367)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1365)
				p.DecimalLiteral()
			}

		case 2:
			{
				p.SetState(1366)
				p.expression(0)
			}

		}
		{
			p.SetState(1369)
			p.IntervalType()
		}
		p.SetState(1378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTARTS {
			{
				p.SetState(1370)
				p.Match(MySqlParserSTARTS)
			}
			{
				p.SetState(1371)

				var _x = p.TimestampValue()

				localctx.(*IntervalScheduleContext).startTimestamp = _x
			}
			p.SetState(1375)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1372)

					var _x = p.IntervalExpr()

					localctx.(*IntervalScheduleContext)._intervalExpr = _x
				}
				localctx.(*IntervalScheduleContext).startIntervals = append(localctx.(*IntervalScheduleContext).startIntervals, localctx.(*IntervalScheduleContext)._intervalExpr)

				p.SetState(1377)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserENDS {
			{
				p.SetState(1380)
				p.Match(MySqlParserENDS)
			}
			{
				p.SetState(1381)

				var _x = p.TimestampValue()

				localctx.(*IntervalScheduleContext).endTimestamp = _x
			}
			p.SetState(1385)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1382)

					var _x = p.IntervalExpr()

					localctx.(*IntervalScheduleContext)._intervalExpr = _x
				}
				localctx.(*IntervalScheduleContext).endIntervals = append(localctx.(*IntervalScheduleContext).endIntervals, localctx.(*IntervalScheduleContext)._intervalExpr)

				p.SetState(1387)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestampValueContext is an interface to support dynamic dispatch.
type ITimestampValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampValueContext differentiates from other interfaces.
	IsTimestampValueContext()
}

type TimestampValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampValueContext() *TimestampValueContext {
	var p = new(TimestampValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_timestampValue
	return p
}

func (*TimestampValueContext) IsTimestampValueContext() {}

func NewTimestampValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampValueContext {
	var p = new(TimestampValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_timestampValue

	return p
}

func (s *TimestampValueContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampValueContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *TimestampValueContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *TimestampValueContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TimestampValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TimestampValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTimestampValue(s)
	}
}

func (s *TimestampValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTimestampValue(s)
	}
}

func (p *MySqlParser) TimestampValue() (localctx ITimestampValueContext) {
	localctx = NewTimestampValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MySqlParserRULE_timestampValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1396)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1392)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1393)
			p.StringLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1394)
			p.DecimalLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1395)
			p.expression(0)
		}

	}

	return localctx
}

// IIntervalExprContext is an interface to support dynamic dispatch.
type IIntervalExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalExprContext differentiates from other interfaces.
	IsIntervalExprContext()
}

type IntervalExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalExprContext() *IntervalExprContext {
	var p = new(IntervalExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalExpr
	return p
}

func (*IntervalExprContext) IsIntervalExprContext() {}

func NewIntervalExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalExprContext {
	var p = new(IntervalExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalExpr

	return p
}

func (s *IntervalExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *IntervalExprContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *IntervalExprContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalExprContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IntervalExprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalExpr(s)
	}
}

func (s *IntervalExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalExpr(s)
	}
}

func (p *MySqlParser) IntervalExpr() (localctx IIntervalExprContext) {
	localctx = NewIntervalExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MySqlParserRULE_intervalExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1398)
		p.Match(MySqlParserPLUS)
	}
	{
		p.SetState(1399)
		p.Match(MySqlParserINTERVAL)
	}
	p.SetState(1402)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1400)
			p.DecimalLiteral()
		}

	case 2:
		{
			p.SetState(1401)
			p.expression(0)
		}

	}
	{
		p.SetState(1404)
		p.IntervalType()
	}

	return localctx
}

// IIntervalTypeContext is an interface to support dynamic dispatch.
type IIntervalTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalTypeContext differentiates from other interfaces.
	IsIntervalTypeContext()
}

type IntervalTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalTypeContext() *IntervalTypeContext {
	var p = new(IntervalTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalType
	return p
}

func (*IntervalTypeContext) IsIntervalTypeContext() {}

func NewIntervalTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalTypeContext {
	var p = new(IntervalTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalType

	return p
}

func (s *IntervalTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalTypeContext) IntervalTypeBase() IIntervalTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeBaseContext)
}

func (s *IntervalTypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *IntervalTypeContext) YEAR_MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR_MONTH, 0)
}

func (s *IntervalTypeContext) DAY_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_HOUR, 0)
}

func (s *IntervalTypeContext) DAY_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MINUTE, 0)
}

func (s *IntervalTypeContext) DAY_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_SECOND, 0)
}

func (s *IntervalTypeContext) HOUR_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MINUTE, 0)
}

func (s *IntervalTypeContext) HOUR_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_SECOND, 0)
}

func (s *IntervalTypeContext) MINUTE_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_SECOND, 0)
}

func (s *IntervalTypeContext) SECOND_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND_MICROSECOND, 0)
}

func (s *IntervalTypeContext) MINUTE_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_MICROSECOND, 0)
}

func (s *IntervalTypeContext) HOUR_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MICROSECOND, 0)
}

func (s *IntervalTypeContext) DAY_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MICROSECOND, 0)
}

func (s *IntervalTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalType(s)
	}
}

func (s *IntervalTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalType(s)
	}
}

func (p *MySqlParser) IntervalType() (localctx IIntervalTypeContext) {
	localctx = NewIntervalTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MySqlParserRULE_intervalType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1419)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1406)
			p.IntervalTypeBase()
		}

	case MySqlParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1407)
			p.Match(MySqlParserYEAR)
		}

	case MySqlParserYEAR_MONTH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1408)
			p.Match(MySqlParserYEAR_MONTH)
		}

	case MySqlParserDAY_HOUR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1409)
			p.Match(MySqlParserDAY_HOUR)
		}

	case MySqlParserDAY_MINUTE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1410)
			p.Match(MySqlParserDAY_MINUTE)
		}

	case MySqlParserDAY_SECOND:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1411)
			p.Match(MySqlParserDAY_SECOND)
		}

	case MySqlParserHOUR_MINUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1412)
			p.Match(MySqlParserHOUR_MINUTE)
		}

	case MySqlParserHOUR_SECOND:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1413)
			p.Match(MySqlParserHOUR_SECOND)
		}

	case MySqlParserMINUTE_SECOND:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1414)
			p.Match(MySqlParserMINUTE_SECOND)
		}

	case MySqlParserSECOND_MICROSECOND:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1415)
			p.Match(MySqlParserSECOND_MICROSECOND)
		}

	case MySqlParserMINUTE_MICROSECOND:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1416)
			p.Match(MySqlParserMINUTE_MICROSECOND)
		}

	case MySqlParserHOUR_MICROSECOND:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1417)
			p.Match(MySqlParserHOUR_MICROSECOND)
		}

	case MySqlParserDAY_MICROSECOND:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1418)
			p.Match(MySqlParserDAY_MICROSECOND)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnableTypeContext is an interface to support dynamic dispatch.
type IEnableTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableTypeContext differentiates from other interfaces.
	IsEnableTypeContext()
}

type EnableTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableTypeContext() *EnableTypeContext {
	var p = new(EnableTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_enableType
	return p
}

func (*EnableTypeContext) IsEnableTypeContext() {}

func NewEnableTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableTypeContext {
	var p = new(EnableTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_enableType

	return p
}

func (s *EnableTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableTypeContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *EnableTypeContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *EnableTypeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *EnableTypeContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *EnableTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnableTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterEnableType(s)
	}
}

func (s *EnableTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitEnableType(s)
	}
}

func (p *MySqlParser) EnableType() (localctx IEnableTypeContext) {
	localctx = NewEnableTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MySqlParserRULE_enableType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1421)
			p.Match(MySqlParserENABLE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1422)
			p.Match(MySqlParserDISABLE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1423)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(1424)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1425)
			p.Match(MySqlParserSLAVE)
		}

	}

	return localctx
}

// IIndexTypeContext is an interface to support dynamic dispatch.
type IIndexTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexTypeContext differentiates from other interfaces.
	IsIndexTypeContext()
}

type IndexTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexTypeContext() *IndexTypeContext {
	var p = new(IndexTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexType
	return p
}

func (*IndexTypeContext) IsIndexTypeContext() {}

func NewIndexTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexTypeContext {
	var p = new(IndexTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexType

	return p
}

func (s *IndexTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexTypeContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *IndexTypeContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *IndexTypeContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *IndexTypeContext) RTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRTREE, 0)
}

func (s *IndexTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexType(s)
	}
}

func (s *IndexTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexType(s)
	}
}

func (p *MySqlParser) IndexType() (localctx IIndexTypeContext) {
	localctx = NewIndexTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MySqlParserRULE_indexType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1428)
		p.Match(MySqlParserUSING)
	}
	{
		p.SetState(1429)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBTREE || _la == MySqlParserHASH || _la == MySqlParserRTREE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIndexOptionContext is an interface to support dynamic dispatch.
type IIndexOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexOptionContext differentiates from other interfaces.
	IsIndexOptionContext()
}

type IndexOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexOptionContext() *IndexOptionContext {
	var p = new(IndexOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexOption
	return p
}

func (*IndexOptionContext) IsIndexOptionContext() {}

func NewIndexOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexOptionContext {
	var p = new(IndexOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexOption

	return p
}

func (s *IndexOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexOptionContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *IndexOptionContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *IndexOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IndexOptionContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *IndexOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *IndexOptionContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *IndexOptionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IndexOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *IndexOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *IndexOptionContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *IndexOptionContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *IndexOptionContext) ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE_ATTRIBUTE, 0)
}

func (s *IndexOptionContext) SECONDARY_ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECONDARY_ENGINE_ATTRIBUTE, 0)
}

func (s *IndexOptionContext) CLUSTERING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLUSTERING, 0)
}

func (s *IndexOptionContext) YES() antlr.TerminalNode {
	return s.GetToken(MySqlParserYES, 0)
}

func (s *IndexOptionContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *IndexOptionContext) IGNORED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORED, 0)
}

func (s *IndexOptionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IndexOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexOption(s)
	}
}

func (s *IndexOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexOption(s)
	}
}

func (p *MySqlParser) IndexOption() (localctx IIndexOptionContext) {
	localctx = NewIndexOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MySqlParserRULE_indexOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1461)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserKEY_BLOCK_SIZE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1431)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1432)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1435)
			p.FileSizeLiteral()
		}

	case MySqlParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1436)
			p.IndexType()
		}

	case MySqlParserWITH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1437)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(1438)
			p.Match(MySqlParserPARSER)
		}
		{
			p.SetState(1439)
			p.Uid()
		}

	case MySqlParserCOMMENT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1440)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1441)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserINVISIBLE, MySqlParserVISIBLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1442)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINVISIBLE || _la == MySqlParserVISIBLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserENGINE_ATTRIBUTE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1443)
			p.Match(MySqlParserENGINE_ATTRIBUTE)
		}
		p.SetState(1445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1444)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1447)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSECONDARY_ENGINE_ATTRIBUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1448)
			p.Match(MySqlParserSECONDARY_ENGINE_ATTRIBUTE)
		}
		p.SetState(1450)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1449)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1452)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCLUSTERING:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1453)
			p.Match(MySqlParserCLUSTERING)
		}
		{
			p.SetState(1454)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1455)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO || _la == MySqlParserYES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserIGNORED, MySqlParserNOT:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(1459)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserIGNORED:
			{
				p.SetState(1456)
				p.Match(MySqlParserIGNORED)
			}

		case MySqlParserNOT:
			{
				p.SetState(1457)
				p.Match(MySqlParserNOT)
			}
			{
				p.SetState(1458)
				p.Match(MySqlParserIGNORED)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedureParameterContext is an interface to support dynamic dispatch.
type IProcedureParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDirection returns the direction token.
	GetDirection() antlr.Token

	// SetDirection sets the direction token.
	SetDirection(antlr.Token)

	// IsProcedureParameterContext differentiates from other interfaces.
	IsProcedureParameterContext()
}

type ProcedureParameterContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	direction antlr.Token
}

func NewEmptyProcedureParameterContext() *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_procedureParameter
	return p
}

func (*ProcedureParameterContext) IsProcedureParameterContext() {}

func NewProcedureParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_procedureParameter

	return p
}

func (s *ProcedureParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureParameterContext) GetDirection() antlr.Token { return s.direction }

func (s *ProcedureParameterContext) SetDirection(v antlr.Token) { s.direction = v }

func (s *ProcedureParameterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ProcedureParameterContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ProcedureParameterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ProcedureParameterContext) OUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUT, 0)
}

func (s *ProcedureParameterContext) INOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINOUT, 0)
}

func (s *ProcedureParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterProcedureParameter(s)
	}
}

func (s *ProcedureParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitProcedureParameter(s)
	}
}

func (p *MySqlParser) ProcedureParameter() (localctx IProcedureParameterContext) {
	localctx = NewProcedureParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MySqlParserRULE_procedureParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1464)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT {
		{
			p.SetState(1463)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ProcedureParameterContext).direction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ProcedureParameterContext).direction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1466)
		p.Uid()
	}
	{
		p.SetState(1467)
		p.DataType()
	}

	return localctx
}

// IFunctionParameterContext is an interface to support dynamic dispatch.
type IFunctionParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterContext differentiates from other interfaces.
	IsFunctionParameterContext()
}

type FunctionParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterContext() *FunctionParameterContext {
	var p = new(FunctionParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionParameter
	return p
}

func (*FunctionParameterContext) IsFunctionParameterContext() {}

func NewFunctionParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterContext {
	var p = new(FunctionParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionParameter

	return p
}

func (s *FunctionParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FunctionParameterContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *FunctionParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionParameter(s)
	}
}

func (s *FunctionParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionParameter(s)
	}
}

func (p *MySqlParser) FunctionParameter() (localctx IFunctionParameterContext) {
	localctx = NewFunctionParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MySqlParserRULE_functionParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1469)
		p.Uid()
	}
	{
		p.SetState(1470)
		p.DataType()
	}

	return localctx
}

// IRoutineOptionContext is an interface to support dynamic dispatch.
type IRoutineOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineOptionContext differentiates from other interfaces.
	IsRoutineOptionContext()
}

type RoutineOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineOptionContext() *RoutineOptionContext {
	var p = new(RoutineOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routineOption
	return p
}

func (*RoutineOptionContext) IsRoutineOptionContext() {}

func NewRoutineOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineOptionContext {
	var p = new(RoutineOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routineOption

	return p
}

func (s *RoutineOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineOptionContext) CopyFrom(ctx *RoutineOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RoutineOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RoutineBehaviorContext struct {
	*RoutineOptionContext
}

func NewRoutineBehaviorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineBehaviorContext {
	var p = new(RoutineBehaviorContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineBehaviorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineBehaviorContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDETERMINISTIC, 0)
}

func (s *RoutineBehaviorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RoutineBehaviorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineBehavior(s)
	}
}

func (s *RoutineBehaviorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineBehavior(s)
	}
}

type RoutineLanguageContext struct {
	*RoutineOptionContext
}

func NewRoutineLanguageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineLanguageContext {
	var p = new(RoutineLanguageContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineLanguageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineLanguageContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *RoutineLanguageContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineLanguageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineLanguage(s)
	}
}

func (s *RoutineLanguageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineLanguage(s)
	}
}

type RoutineCommentContext struct {
	*RoutineOptionContext
}

func NewRoutineCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineCommentContext {
	var p = new(RoutineCommentContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *RoutineCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *RoutineCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineComment(s)
	}
}

func (s *RoutineCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineComment(s)
	}
}

type RoutineSecurityContext struct {
	*RoutineOptionContext
	context antlr.Token
}

func NewRoutineSecurityContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineSecurityContext {
	var p = new(RoutineSecurityContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineSecurityContext) GetContext() antlr.Token { return s.context }

func (s *RoutineSecurityContext) SetContext(v antlr.Token) { s.context = v }

func (s *RoutineSecurityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineSecurityContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineSecurityContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *RoutineSecurityContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *RoutineSecurityContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *RoutineSecurityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineSecurity(s)
	}
}

func (s *RoutineSecurityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineSecurity(s)
	}
}

type RoutineDataContext struct {
	*RoutineOptionContext
}

func NewRoutineDataContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineDataContext {
	var p = new(RoutineDataContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineDataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineDataContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *RoutineDataContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineDataContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *RoutineDataContext) READS() antlr.TerminalNode {
	return s.GetToken(MySqlParserREADS, 0)
}

func (s *RoutineDataContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *RoutineDataContext) MODIFIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFIES, 0)
}

func (s *RoutineDataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineData(s)
	}
}

func (s *RoutineDataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineData(s)
	}
}

func (p *MySqlParser) RoutineOption() (localctx IRoutineOptionContext) {
	localctx = NewRoutineOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MySqlParserRULE_routineOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1495)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCOMMENT:
		localctx = NewRoutineCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1472)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1473)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserLANGUAGE:
		localctx = NewRoutineLanguageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1474)
			p.Match(MySqlParserLANGUAGE)
		}
		{
			p.SetState(1475)
			p.Match(MySqlParserSQL)
		}

	case MySqlParserDETERMINISTIC, MySqlParserNOT:
		localctx = NewRoutineBehaviorContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(1476)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(1479)
			p.Match(MySqlParserDETERMINISTIC)
		}

	case MySqlParserMODIFIES, MySqlParserREADS, MySqlParserCONTAINS, MySqlParserNO:
		localctx = NewRoutineDataContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1490)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCONTAINS:
			{
				p.SetState(1480)
				p.Match(MySqlParserCONTAINS)
			}
			{
				p.SetState(1481)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserNO:
			{
				p.SetState(1482)
				p.Match(MySqlParserNO)
			}
			{
				p.SetState(1483)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserREADS:
			{
				p.SetState(1484)
				p.Match(MySqlParserREADS)
			}
			{
				p.SetState(1485)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1486)
				p.Match(MySqlParserDATA)
			}

		case MySqlParserMODIFIES:
			{
				p.SetState(1487)
				p.Match(MySqlParserMODIFIES)
			}
			{
				p.SetState(1488)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1489)
				p.Match(MySqlParserDATA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserSQL:
		localctx = NewRoutineSecurityContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1492)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1493)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(1494)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RoutineSecurityContext).context = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RoutineSecurityContext).context = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IServerOptionContext is an interface to support dynamic dispatch.
type IServerOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsServerOptionContext differentiates from other interfaces.
	IsServerOptionContext()
}

type ServerOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServerOptionContext() *ServerOptionContext {
	var p = new(ServerOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_serverOption
	return p
}

func (*ServerOptionContext) IsServerOptionContext() {}

func NewServerOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServerOptionContext {
	var p = new(ServerOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_serverOption

	return p
}

func (s *ServerOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ServerOptionContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *ServerOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ServerOptionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *ServerOptionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *ServerOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *ServerOptionContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *ServerOptionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *ServerOptionContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *ServerOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ServerOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServerOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServerOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterServerOption(s)
	}
}

func (s *ServerOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitServerOption(s)
	}
}

func (p *MySqlParser) ServerOption() (localctx IServerOptionContext) {
	localctx = NewServerOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MySqlParserRULE_serverOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1511)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserHOST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1497)
			p.Match(MySqlParserHOST)
		}
		{
			p.SetState(1498)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserDATABASE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1499)
			p.Match(MySqlParserDATABASE)
		}
		{
			p.SetState(1500)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserUSER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1501)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(1502)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1503)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(1504)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSOCKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1505)
			p.Match(MySqlParserSOCKET)
		}
		{
			p.SetState(1506)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserOWNER:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1507)
			p.Match(MySqlParserOWNER)
		}
		{
			p.SetState(1508)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPORT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1509)
			p.Match(MySqlParserPORT)
		}
		{
			p.SetState(1510)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateDefinitionsContext is an interface to support dynamic dispatch.
type ICreateDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDefinitionsContext differentiates from other interfaces.
	IsCreateDefinitionsContext()
}

type CreateDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDefinitionsContext() *CreateDefinitionsContext {
	var p = new(CreateDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDefinitions
	return p
}

func (*CreateDefinitionsContext) IsCreateDefinitionsContext() {}

func NewCreateDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDefinitionsContext {
	var p = new(CreateDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDefinitions

	return p
}

func (s *CreateDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDefinitionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateDefinitionsContext) AllCreateDefinition() []ICreateDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDefinitionContext)(nil)).Elem())
	var tst = make([]ICreateDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDefinitionContext)
		}
	}

	return tst
}

func (s *CreateDefinitionsContext) CreateDefinition(i int) ICreateDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionContext)
}

func (s *CreateDefinitionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateDefinitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateDefinitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateDefinitions(s)
	}
}

func (s *CreateDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateDefinitions(s)
	}
}

func (p *MySqlParser) CreateDefinitions() (localctx ICreateDefinitionsContext) {
	localctx = NewCreateDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MySqlParserRULE_createDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1514)
		p.CreateDefinition()
	}
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1515)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1516)
			p.CreateDefinition()
		}

		p.SetState(1521)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1522)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ICreateDefinitionContext is an interface to support dynamic dispatch.
type ICreateDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDefinitionContext differentiates from other interfaces.
	IsCreateDefinitionContext()
}

type CreateDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDefinitionContext() *CreateDefinitionContext {
	var p = new(CreateDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDefinition
	return p
}

func (*CreateDefinitionContext) IsCreateDefinitionContext() {}

func NewCreateDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDefinitionContext {
	var p = new(CreateDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDefinition

	return p
}

func (s *CreateDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDefinitionContext) CopyFrom(ctx *CreateDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnDeclarationContext struct {
	*CreateDefinitionContext
}

func NewColumnDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnDeclarationContext {
	var p = new(ColumnDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *ColumnDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ColumnDeclarationContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *ColumnDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumnDeclaration(s)
	}
}

func (s *ColumnDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumnDeclaration(s)
	}
}

type ConstraintDeclarationContext struct {
	*CreateDefinitionContext
}

func NewConstraintDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstraintDeclarationContext {
	var p = new(ConstraintDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *ConstraintDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintDeclarationContext) TableConstraint() ITableConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintContext)
}

func (s *ConstraintDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstraintDeclaration(s)
	}
}

func (s *ConstraintDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstraintDeclaration(s)
	}
}

type IndexDeclarationContext struct {
	*CreateDefinitionContext
}

func NewIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexDeclarationContext {
	var p = new(IndexDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *IndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexDeclarationContext) IndexColumnDefinition() IIndexColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnDefinitionContext)
}

func (s *IndexDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexDeclaration(s)
	}
}

func (s *IndexDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexDeclaration(s)
	}
}

func (p *MySqlParser) CreateDefinition() (localctx ICreateDefinitionContext) {
	localctx = NewCreateDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MySqlParserRULE_createDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1529)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		localctx = NewColumnDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1524)
			p.Uid()
		}
		{
			p.SetState(1525)
			p.ColumnDefinition()
		}

	case MySqlParserCHECK, MySqlParserCONSTRAINT, MySqlParserFOREIGN, MySqlParserPRIMARY, MySqlParserUNIQUE:
		localctx = NewConstraintDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1527)
			p.TableConstraint()
		}

	case MySqlParserFULLTEXT, MySqlParserINDEX, MySqlParserKEY, MySqlParserSPATIAL:
		localctx = NewIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1528)
			p.IndexColumnDefinition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumnDefinitionContext is an interface to support dynamic dispatch.
type IColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnDefinitionContext differentiates from other interfaces.
	IsColumnDefinitionContext()
}

type ColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnDefinitionContext() *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_columnDefinition
	return p
}

func (*ColumnDefinitionContext) IsColumnDefinitionContext() {}

func NewColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_columnDefinition

	return p
}

func (s *ColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnDefinitionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ColumnDefinitionContext) AllColumnConstraint() []IColumnConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnConstraintContext)(nil)).Elem())
	var tst = make([]IColumnConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnConstraintContext)
		}
	}

	return tst
}

func (s *ColumnDefinitionContext) ColumnConstraint(i int) IColumnConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintContext)
}

func (s *ColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumnDefinition(s)
	}
}

func (s *ColumnDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumnDefinition(s)
	}
}

func (p *MySqlParser) ColumnDefinition() (localctx IColumnDefinitionContext) {
	localctx = NewColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MySqlParserRULE_columnDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1531)
		p.DataType()
	}
	p.SetState(1535)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1532)
				p.ColumnConstraint()
			}

		}
		p.SetState(1537)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())
	}

	return localctx
}

// IColumnConstraintContext is an interface to support dynamic dispatch.
type IColumnConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnConstraintContext differentiates from other interfaces.
	IsColumnConstraintContext()
}

type ColumnConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintContext() *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_columnConstraint
	return p
}

func (*ColumnConstraintContext) IsColumnConstraintContext() {}

func NewColumnConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_columnConstraint

	return p
}

func (s *ColumnConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintContext) CopyFrom(ctx *ColumnConstraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StorageColumnConstraintContext struct {
	*ColumnConstraintContext
	storageval antlr.Token
}

func NewStorageColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StorageColumnConstraintContext {
	var p = new(StorageColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *StorageColumnConstraintContext) GetStorageval() antlr.Token { return s.storageval }

func (s *StorageColumnConstraintContext) SetStorageval(v antlr.Token) { s.storageval = v }

func (s *StorageColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageColumnConstraintContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *StorageColumnConstraintContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *StorageColumnConstraintContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *StorageColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *StorageColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStorageColumnConstraint(s)
	}
}

func (s *StorageColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStorageColumnConstraint(s)
	}
}

type VisibilityColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewVisibilityColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *VisibilityColumnConstraintContext {
	var p = new(VisibilityColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *VisibilityColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VisibilityColumnConstraintContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *VisibilityColumnConstraintContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *VisibilityColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterVisibilityColumnConstraint(s)
	}
}

func (s *VisibilityColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitVisibilityColumnConstraint(s)
	}
}

type AutoIncrementColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewAutoIncrementColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AutoIncrementColumnConstraintContext {
	var p = new(AutoIncrementColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *AutoIncrementColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AutoIncrementColumnConstraintContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *AutoIncrementColumnConstraintContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *AutoIncrementColumnConstraintContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *AutoIncrementColumnConstraintContext) CurrentTimestamp() ICurrentTimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICurrentTimestampContext)
}

func (s *AutoIncrementColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAutoIncrementColumnConstraint(s)
	}
}

func (s *AutoIncrementColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAutoIncrementColumnConstraint(s)
	}
}

type CommentColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewCommentColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CommentColumnConstraintContext {
	var p = new(CommentColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CommentColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommentColumnConstraintContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CommentColumnConstraintContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CommentColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCommentColumnConstraint(s)
	}
}

func (s *CommentColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCommentColumnConstraint(s)
	}
}

type UniqueKeyColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewUniqueKeyColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniqueKeyColumnConstraintContext {
	var p = new(UniqueKeyColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *UniqueKeyColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueKeyColumnConstraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *UniqueKeyColumnConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *UniqueKeyColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUniqueKeyColumnConstraint(s)
	}
}

func (s *UniqueKeyColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUniqueKeyColumnConstraint(s)
	}
}

type SerialDefaultColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewSerialDefaultColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SerialDefaultColumnConstraintContext {
	var p = new(SerialDefaultColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *SerialDefaultColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SerialDefaultColumnConstraintContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *SerialDefaultColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SerialDefaultColumnConstraintContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *SerialDefaultColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSerialDefaultColumnConstraint(s)
	}
}

func (s *SerialDefaultColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSerialDefaultColumnConstraint(s)
	}
}

type GeneratedColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewGeneratedColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GeneratedColumnConstraintContext {
	var p = new(GeneratedColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *GeneratedColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratedColumnConstraintContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *GeneratedColumnConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *GeneratedColumnConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GeneratedColumnConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *GeneratedColumnConstraintContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERATED, 0)
}

func (s *GeneratedColumnConstraintContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserALWAYS, 0)
}

func (s *GeneratedColumnConstraintContext) VIRTUAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIRTUAL, 0)
}

func (s *GeneratedColumnConstraintContext) STORED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORED, 0)
}

func (s *GeneratedColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGeneratedColumnConstraint(s)
	}
}

func (s *GeneratedColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGeneratedColumnConstraint(s)
	}
}

type FormatColumnConstraintContext struct {
	*ColumnConstraintContext
	colformat antlr.Token
}

func NewFormatColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FormatColumnConstraintContext {
	var p = new(FormatColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *FormatColumnConstraintContext) GetColformat() antlr.Token { return s.colformat }

func (s *FormatColumnConstraintContext) SetColformat(v antlr.Token) { s.colformat = v }

func (s *FormatColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormatColumnConstraintContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *FormatColumnConstraintContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *FormatColumnConstraintContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *FormatColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *FormatColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFormatColumnConstraint(s)
	}
}

func (s *FormatColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFormatColumnConstraint(s)
	}
}

type CollateColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewCollateColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollateColumnConstraintContext {
	var p = new(CollateColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CollateColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateColumnConstraintContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CollateColumnConstraintContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CollateColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollateColumnConstraint(s)
	}
}

func (s *CollateColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollateColumnConstraint(s)
	}
}

type PrimaryKeyColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewPrimaryKeyColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryKeyColumnConstraintContext {
	var p = new(PrimaryKeyColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *PrimaryKeyColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryKeyColumnConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PrimaryKeyColumnConstraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *PrimaryKeyColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrimaryKeyColumnConstraint(s)
	}
}

func (s *PrimaryKeyColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrimaryKeyColumnConstraint(s)
	}
}

type CheckColumnConstraintContext struct {
	*ColumnConstraintContext
	name IUidContext
}

func NewCheckColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CheckColumnConstraintContext {
	var p = new(CheckColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CheckColumnConstraintContext) GetName() IUidContext { return s.name }

func (s *CheckColumnConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *CheckColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckColumnConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckColumnConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CheckColumnConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckColumnConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CheckColumnConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *CheckColumnConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CheckColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheckColumnConstraint(s)
	}
}

func (s *CheckColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheckColumnConstraint(s)
	}
}

type NullColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewNullColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullColumnConstraintContext {
	var p = new(NullColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *NullColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullColumnConstraintContext) NullNotnull() INullNotnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullNotnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullNotnullContext)
}

func (s *NullColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNullColumnConstraint(s)
	}
}

func (s *NullColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNullColumnConstraint(s)
	}
}

type DefaultColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewDefaultColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefaultColumnConstraintContext {
	var p = new(DefaultColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *DefaultColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *DefaultColumnConstraintContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *DefaultColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefaultColumnConstraint(s)
	}
}

func (s *DefaultColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefaultColumnConstraint(s)
	}
}

type ReferenceColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewReferenceColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReferenceColumnConstraintContext {
	var p = new(ReferenceColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *ReferenceColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceColumnConstraintContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *ReferenceColumnConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReferenceColumnConstraint(s)
	}
}

func (s *ReferenceColumnConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReferenceColumnConstraint(s)
	}
}

func (p *MySqlParser) ColumnConstraint() (localctx IColumnConstraintContext) {
	localctx = NewColumnConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MySqlParserRULE_columnConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1591)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserNOT, MySqlParserNULL_LITERAL, MySqlParserNULL_SPEC_LITERAL:
		localctx = NewNullColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1538)
			p.NullNotnull()
		}

	case MySqlParserDEFAULT:
		localctx = NewDefaultColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1539)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(1540)
			p.DefaultValue()
		}

	case MySqlParserVISIBLE:
		localctx = NewVisibilityColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1541)
			p.Match(MySqlParserVISIBLE)
		}

	case MySqlParserINVISIBLE:
		localctx = NewVisibilityColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1542)
			p.Match(MySqlParserINVISIBLE)
		}

	case MySqlParserON, MySqlParserAUTO_INCREMENT:
		localctx = NewAutoIncrementColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1547)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserAUTO_INCREMENT:
			{
				p.SetState(1543)
				p.Match(MySqlParserAUTO_INCREMENT)
			}

		case MySqlParserON:
			{
				p.SetState(1544)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1545)
				p.Match(MySqlParserUPDATE)
			}
			{
				p.SetState(1546)
				p.CurrentTimestamp()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserKEY, MySqlParserPRIMARY:
		localctx = NewPrimaryKeyColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1550)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIMARY {
			{
				p.SetState(1549)
				p.Match(MySqlParserPRIMARY)
			}

		}
		{
			p.SetState(1552)
			p.Match(MySqlParserKEY)
		}

	case MySqlParserUNIQUE:
		localctx = NewUniqueKeyColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1553)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1555)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1554)
				p.Match(MySqlParserKEY)
			}

		}

	case MySqlParserCOMMENT:
		localctx = NewCommentColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1557)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1558)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCOLUMN_FORMAT:
		localctx = NewFormatColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1559)
			p.Match(MySqlParserCOLUMN_FORMAT)
		}
		{
			p.SetState(1560)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FormatColumnConstraintContext).colformat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserDYNAMIC || _la == MySqlParserFIXED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FormatColumnConstraintContext).colformat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSTORAGE:
		localctx = NewStorageColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1561)
			p.Match(MySqlParserSTORAGE)
		}
		{
			p.SetState(1562)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*StorageColumnConstraintContext).storageval = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*StorageColumnConstraintContext).storageval = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserREFERENCES:
		localctx = NewReferenceColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1563)
			p.ReferenceDefinition()
		}

	case MySqlParserCOLLATE:
		localctx = NewCollateColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1564)
			p.Match(MySqlParserCOLLATE)
		}
		{
			p.SetState(1565)
			p.CollationName()
		}

	case MySqlParserAS, MySqlParserGENERATED:
		localctx = NewGeneratedColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		p.SetState(1568)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserGENERATED {
			{
				p.SetState(1566)
				p.Match(MySqlParserGENERATED)
			}
			{
				p.SetState(1567)
				p.Match(MySqlParserALWAYS)
			}

		}
		{
			p.SetState(1570)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(1571)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1572)
			p.expression(0)
		}
		{
			p.SetState(1573)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(1575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORED || _la == MySqlParserVIRTUAL {
			{
				p.SetState(1574)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserSTORED || _la == MySqlParserVIRTUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case MySqlParserSERIAL:
		localctx = NewSerialDefaultColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1577)
			p.Match(MySqlParserSERIAL)
		}
		{
			p.SetState(1578)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(1579)
			p.Match(MySqlParserVALUE)
		}

	case MySqlParserCHECK, MySqlParserCONSTRAINT:
		localctx = NewCheckColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		p.SetState(1584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1580)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1582)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1581)

					var _x = p.Uid()

					localctx.(*CheckColumnConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1586)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1587)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1588)
			p.expression(0)
		}
		{
			p.SetState(1589)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableConstraintContext is an interface to support dynamic dispatch.
type ITableConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableConstraintContext differentiates from other interfaces.
	IsTableConstraintContext()
}

type TableConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintContext() *TableConstraintContext {
	var p = new(TableConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableConstraint
	return p
}

func (*TableConstraintContext) IsTableConstraintContext() {}

func NewTableConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintContext {
	var p = new(TableConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableConstraint

	return p
}

func (s *TableConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintContext) CopyFrom(ctx *TableConstraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UniqueKeyTableConstraintContext struct {
	*TableConstraintContext
	name        IUidContext
	indexFormat antlr.Token
	index       IUidContext
}

func NewUniqueKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniqueKeyTableConstraintContext {
	var p = new(UniqueKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *UniqueKeyTableConstraintContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *UniqueKeyTableConstraintContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *UniqueKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *UniqueKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *UniqueKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *UniqueKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *UniqueKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueKeyTableConstraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *UniqueKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *UniqueKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *UniqueKeyTableConstraintContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *UniqueKeyTableConstraintContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *UniqueKeyTableConstraintContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *UniqueKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *UniqueKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UniqueKeyTableConstraintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *UniqueKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *UniqueKeyTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUniqueKeyTableConstraint(s)
	}
}

func (s *UniqueKeyTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUniqueKeyTableConstraint(s)
	}
}

type CheckTableConstraintContext struct {
	*TableConstraintContext
	name IUidContext
}

func NewCheckTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CheckTableConstraintContext {
	var p = new(CheckTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *CheckTableConstraintContext) GetName() IUidContext { return s.name }

func (s *CheckTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *CheckTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckTableConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CheckTableConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckTableConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CheckTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *CheckTableConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CheckTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheckTableConstraint(s)
	}
}

func (s *CheckTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheckTableConstraint(s)
	}
}

type PrimaryKeyTableConstraintContext struct {
	*TableConstraintContext
	name  IUidContext
	index IUidContext
}

func NewPrimaryKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryKeyTableConstraintContext {
	var p = new(PrimaryKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *PrimaryKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *PrimaryKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *PrimaryKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *PrimaryKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *PrimaryKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryKeyTableConstraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *PrimaryKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PrimaryKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *PrimaryKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *PrimaryKeyTableConstraintContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *PrimaryKeyTableConstraintContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *PrimaryKeyTableConstraintContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *PrimaryKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *PrimaryKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PrimaryKeyTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrimaryKeyTableConstraint(s)
	}
}

func (s *PrimaryKeyTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrimaryKeyTableConstraint(s)
	}
}

type ForeignKeyTableConstraintContext struct {
	*TableConstraintContext
	name  IUidContext
	index IUidContext
}

func NewForeignKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForeignKeyTableConstraintContext {
	var p = new(ForeignKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *ForeignKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *ForeignKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *ForeignKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *ForeignKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *ForeignKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForeignKeyTableConstraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *ForeignKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *ForeignKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *ForeignKeyTableConstraintContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *ForeignKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *ForeignKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *ForeignKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ForeignKeyTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterForeignKeyTableConstraint(s)
	}
}

func (s *ForeignKeyTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitForeignKeyTableConstraint(s)
	}
}

func (p *MySqlParser) TableConstraint() (localctx ITableConstraintContext) {
	localctx = NewTableConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MySqlParserRULE_tableConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1662)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPrimaryKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1593)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1595)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1594)

					var _x = p.Uid()

					localctx.(*PrimaryKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1599)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(1600)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1601)

				var _x = p.Uid()

				localctx.(*PrimaryKeyTableConstraintContext).index = _x
			}

		}
		p.SetState(1605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1604)
				p.IndexType()
			}

		}
		{
			p.SetState(1607)
			p.IndexColumnNames()
		}
		p.SetState(1611)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(1608)
				p.IndexOption()
			}

			p.SetState(1613)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewUniqueKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1614)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1616)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1615)

					var _x = p.Uid()

					localctx.(*UniqueKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1620)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(1621)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*UniqueKeyTableConstraintContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*UniqueKeyTableConstraintContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1624)

				var _x = p.Uid()

				localctx.(*UniqueKeyTableConstraintContext).index = _x
			}

		}
		p.SetState(1628)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1627)
				p.IndexType()
			}

		}
		{
			p.SetState(1630)
			p.IndexColumnNames()
		}
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(1631)
				p.IndexOption()
			}

			p.SetState(1636)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		localctx = NewForeignKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1637)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1639)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1638)

					var _x = p.Uid()

					localctx.(*ForeignKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1643)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(1644)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1645)

				var _x = p.Uid()

				localctx.(*ForeignKeyTableConstraintContext).index = _x
			}

		}
		{
			p.SetState(1648)
			p.IndexColumnNames()
		}
		{
			p.SetState(1649)
			p.ReferenceDefinition()
		}

	case 4:
		localctx = NewCheckTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1651)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1652)

					var _x = p.Uid()

					localctx.(*CheckTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1657)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1658)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1659)
			p.expression(0)
		}
		{
			p.SetState(1660)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IReferenceDefinitionContext is an interface to support dynamic dispatch.
type IReferenceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMatchType returns the matchType token.
	GetMatchType() antlr.Token

	// SetMatchType sets the matchType token.
	SetMatchType(antlr.Token)

	// IsReferenceDefinitionContext differentiates from other interfaces.
	IsReferenceDefinitionContext()
}

type ReferenceDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	matchType antlr.Token
}

func NewEmptyReferenceDefinitionContext() *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceDefinition
	return p
}

func (*ReferenceDefinitionContext) IsReferenceDefinitionContext() {}

func NewReferenceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceDefinition

	return p
}

func (s *ReferenceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceDefinitionContext) GetMatchType() antlr.Token { return s.matchType }

func (s *ReferenceDefinitionContext) SetMatchType(v antlr.Token) { s.matchType = v }

func (s *ReferenceDefinitionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *ReferenceDefinitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReferenceDefinitionContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *ReferenceDefinitionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMATCH, 0)
}

func (s *ReferenceDefinitionContext) ReferenceAction() IReferenceActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceActionContext)
}

func (s *ReferenceDefinitionContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ReferenceDefinitionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *ReferenceDefinitionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *ReferenceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReferenceDefinition(s)
	}
}

func (s *ReferenceDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReferenceDefinition(s)
	}
}

func (p *MySqlParser) ReferenceDefinition() (localctx IReferenceDefinitionContext) {
	localctx = NewReferenceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MySqlParserRULE_referenceDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)
		p.Match(MySqlParserREFERENCES)
	}
	{
		p.SetState(1665)
		p.TableName()
	}
	p.SetState(1667)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1666)
			p.IndexColumnNames()
		}

	}
	p.SetState(1671)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMATCH {
		{
			p.SetState(1669)
			p.Match(MySqlParserMATCH)
		}
		{
			p.SetState(1670)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReferenceDefinitionContext).matchType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULL || _la == MySqlParserPARTIAL || _la == MySqlParserSIMPLE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReferenceDefinitionContext).matchType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1674)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1673)
			p.ReferenceAction()
		}

	}

	return localctx
}

// IReferenceActionContext is an interface to support dynamic dispatch.
type IReferenceActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOnDelete returns the onDelete rule contexts.
	GetOnDelete() IReferenceControlTypeContext

	// GetOnUpdate returns the onUpdate rule contexts.
	GetOnUpdate() IReferenceControlTypeContext

	// SetOnDelete sets the onDelete rule contexts.
	SetOnDelete(IReferenceControlTypeContext)

	// SetOnUpdate sets the onUpdate rule contexts.
	SetOnUpdate(IReferenceControlTypeContext)

	// IsReferenceActionContext differentiates from other interfaces.
	IsReferenceActionContext()
}

type ReferenceActionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	onDelete IReferenceControlTypeContext
	onUpdate IReferenceControlTypeContext
}

func NewEmptyReferenceActionContext() *ReferenceActionContext {
	var p = new(ReferenceActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceAction
	return p
}

func (*ReferenceActionContext) IsReferenceActionContext() {}

func NewReferenceActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceActionContext {
	var p = new(ReferenceActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceAction

	return p
}

func (s *ReferenceActionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceActionContext) GetOnDelete() IReferenceControlTypeContext { return s.onDelete }

func (s *ReferenceActionContext) GetOnUpdate() IReferenceControlTypeContext { return s.onUpdate }

func (s *ReferenceActionContext) SetOnDelete(v IReferenceControlTypeContext) { s.onDelete = v }

func (s *ReferenceActionContext) SetOnUpdate(v IReferenceControlTypeContext) { s.onUpdate = v }

func (s *ReferenceActionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *ReferenceActionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *ReferenceActionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *ReferenceActionContext) AllReferenceControlType() []IReferenceControlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReferenceControlTypeContext)(nil)).Elem())
	var tst = make([]IReferenceControlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReferenceControlTypeContext)
		}
	}

	return tst
}

func (s *ReferenceActionContext) ReferenceControlType(i int) IReferenceControlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceControlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReferenceControlTypeContext)
}

func (s *ReferenceActionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *ReferenceActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReferenceAction(s)
	}
}

func (s *ReferenceActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReferenceAction(s)
	}
}

func (p *MySqlParser) ReferenceAction() (localctx IReferenceActionContext) {
	localctx = NewReferenceActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MySqlParserRULE_referenceAction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1692)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1676)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1677)
			p.Match(MySqlParserDELETE)
		}
		{
			p.SetState(1678)

			var _x = p.ReferenceControlType()

			localctx.(*ReferenceActionContext).onDelete = _x
		}
		p.SetState(1682)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1679)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1680)
				p.Match(MySqlParserUPDATE)
			}
			{
				p.SetState(1681)

				var _x = p.ReferenceControlType()

				localctx.(*ReferenceActionContext).onUpdate = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1684)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1685)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(1686)

			var _x = p.ReferenceControlType()

			localctx.(*ReferenceActionContext).onUpdate = _x
		}
		p.SetState(1690)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1687)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1688)
				p.Match(MySqlParserDELETE)
			}
			{
				p.SetState(1689)

				var _x = p.ReferenceControlType()

				localctx.(*ReferenceActionContext).onDelete = _x
			}

		}

	}

	return localctx
}

// IReferenceControlTypeContext is an interface to support dynamic dispatch.
type IReferenceControlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReferenceControlTypeContext differentiates from other interfaces.
	IsReferenceControlTypeContext()
}

type ReferenceControlTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceControlTypeContext() *ReferenceControlTypeContext {
	var p = new(ReferenceControlTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceControlType
	return p
}

func (*ReferenceControlTypeContext) IsReferenceControlTypeContext() {}

func NewReferenceControlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceControlTypeContext {
	var p = new(ReferenceControlTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceControlType

	return p
}

func (s *ReferenceControlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceControlTypeContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *ReferenceControlTypeContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *ReferenceControlTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ReferenceControlTypeContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *ReferenceControlTypeContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *ReferenceControlTypeContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *ReferenceControlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceControlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceControlTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReferenceControlType(s)
	}
}

func (s *ReferenceControlTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReferenceControlType(s)
	}
}

func (p *MySqlParser) ReferenceControlType() (localctx IReferenceControlTypeContext) {
	localctx = NewReferenceControlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MySqlParserRULE_referenceControlType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1700)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserRESTRICT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1694)
			p.Match(MySqlParserRESTRICT)
		}

	case MySqlParserCASCADE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1695)
			p.Match(MySqlParserCASCADE)
		}

	case MySqlParserSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1696)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(1697)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case MySqlParserNO:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1698)
			p.Match(MySqlParserNO)
		}
		{
			p.SetState(1699)
			p.Match(MySqlParserACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexColumnDefinitionContext is an interface to support dynamic dispatch.
type IIndexColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexColumnDefinitionContext differentiates from other interfaces.
	IsIndexColumnDefinitionContext()
}

type IndexColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexColumnDefinitionContext() *IndexColumnDefinitionContext {
	var p = new(IndexColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnDefinition
	return p
}

func (*IndexColumnDefinitionContext) IsIndexColumnDefinitionContext() {}

func NewIndexColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnDefinitionContext {
	var p = new(IndexColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnDefinition

	return p
}

func (s *IndexColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnDefinitionContext) CopyFrom(ctx *IndexColumnDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecialIndexDeclarationContext struct {
	*IndexColumnDefinitionContext
	indexFormat antlr.Token
}

func NewSpecialIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecialIndexDeclarationContext {
	var p = new(SpecialIndexDeclarationContext)

	p.IndexColumnDefinitionContext = NewEmptyIndexColumnDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexColumnDefinitionContext))

	return p
}

func (s *SpecialIndexDeclarationContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *SpecialIndexDeclarationContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *SpecialIndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialIndexDeclarationContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *SpecialIndexDeclarationContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *SpecialIndexDeclarationContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *SpecialIndexDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SpecialIndexDeclarationContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *SpecialIndexDeclarationContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *SpecialIndexDeclarationContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SpecialIndexDeclarationContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SpecialIndexDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpecialIndexDeclaration(s)
	}
}

func (s *SpecialIndexDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpecialIndexDeclaration(s)
	}
}

type SimpleIndexDeclarationContext struct {
	*IndexColumnDefinitionContext
	indexFormat antlr.Token
}

func NewSimpleIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleIndexDeclarationContext {
	var p = new(SimpleIndexDeclarationContext)

	p.IndexColumnDefinitionContext = NewEmptyIndexColumnDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexColumnDefinitionContext))

	return p
}

func (s *SimpleIndexDeclarationContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *SimpleIndexDeclarationContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *SimpleIndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIndexDeclarationContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *SimpleIndexDeclarationContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SimpleIndexDeclarationContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SimpleIndexDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SimpleIndexDeclarationContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *SimpleIndexDeclarationContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *SimpleIndexDeclarationContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *SimpleIndexDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleIndexDeclaration(s)
	}
}

func (s *SimpleIndexDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleIndexDeclaration(s)
	}
}

func (p *MySqlParser) IndexColumnDefinition() (localctx IIndexColumnDefinitionContext) {
	localctx = NewIndexColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MySqlParserRULE_indexColumnDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1730)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserINDEX, MySqlParserKEY:
		localctx = NewSimpleIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1702)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SimpleIndexDeclarationContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SimpleIndexDeclarationContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1703)
				p.Uid()
			}

		}
		p.SetState(1707)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1706)
				p.IndexType()
			}

		}
		{
			p.SetState(1709)
			p.IndexColumnNames()
		}
		p.SetState(1713)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(1710)
				p.IndexOption()
			}

			p.SetState(1715)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserFULLTEXT, MySqlParserSPATIAL:
		localctx = NewSpecialIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1716)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1718)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(1717)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SpecialIndexDeclarationContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SpecialIndexDeclarationContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1721)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1720)
				p.Uid()
			}

		}
		{
			p.SetState(1723)
			p.IndexColumnNames()
		}
		p.SetState(1727)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(1724)
				p.IndexOption()
			}

			p.SetState(1729)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableOptionContext is an interface to support dynamic dispatch.
type ITableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableOptionContext differentiates from other interfaces.
	IsTableOptionContext()
}

type TableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableOptionContext() *TableOptionContext {
	var p = new(TableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableOption
	return p
}

func (*TableOptionContext) IsTableOptionContext() {}

func NewTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableOptionContext {
	var p = new(TableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableOption

	return p
}

func (s *TableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TableOptionContext) CopyFrom(ctx *TableOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableOptionEngineContext struct {
	*TableOptionContext
}

func NewTableOptionEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionEngineContext {
	var p = new(TableOptionEngineContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *TableOptionEngineContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *TableOptionEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionEngine(s)
	}
}

func (s *TableOptionEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionEngine(s)
	}
}

type TableOptionMaxRowsContext struct {
	*TableOptionContext
}

func NewTableOptionMaxRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionMaxRowsContext {
	var p = new(TableOptionMaxRowsContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionMaxRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionMaxRowsContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *TableOptionMaxRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionMaxRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionMaxRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionMaxRows(s)
	}
}

func (s *TableOptionMaxRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionMaxRows(s)
	}
}

type TableOptionCollateContext struct {
	*TableOptionContext
}

func NewTableOptionCollateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCollateContext {
	var p = new(TableOptionCollateContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCollateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCollateContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *TableOptionCollateContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *TableOptionCollateContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionCollateContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCollateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionCollate(s)
	}
}

func (s *TableOptionCollateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionCollate(s)
	}
}

type TableOptionPersistentContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionPersistentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPersistentContext {
	var p = new(TableOptionPersistentContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPersistentContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionPersistentContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionPersistentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPersistentContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *TableOptionPersistentContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionPersistentContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionPersistentContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionPersistentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPersistentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionPersistent(s)
	}
}

func (s *TableOptionPersistentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionPersistent(s)
	}
}

type TableOptionTablespaceContext struct {
	*TableOptionContext
}

func NewTableOptionTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionTablespaceContext {
	var p = new(TableOptionTablespaceContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *TableOptionTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *TableOptionTablespaceContext) TablespaceStorage() ITablespaceStorageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablespaceStorageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablespaceStorageContext)
}

func (s *TableOptionTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionTablespace(s)
	}
}

func (s *TableOptionTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionTablespace(s)
	}
}

type TableOptionPackKeysContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionPackKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPackKeysContext {
	var p = new(TableOptionPackKeysContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPackKeysContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionPackKeysContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionPackKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPackKeysContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *TableOptionPackKeysContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionPackKeysContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionPackKeysContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionPackKeysContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPackKeysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionPackKeys(s)
	}
}

func (s *TableOptionPackKeysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionPackKeys(s)
	}
}

type TableOptionPasswordContext struct {
	*TableOptionContext
}

func NewTableOptionPasswordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPasswordContext {
	var p = new(TableOptionPasswordContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPasswordContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *TableOptionPasswordContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionPasswordContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPasswordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionPassword(s)
	}
}

func (s *TableOptionPasswordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionPassword(s)
	}
}

type TableOptionUnionContext struct {
	*TableOptionContext
}

func NewTableOptionUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionUnionContext {
	var p = new(TableOptionUnionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionUnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionUnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *TableOptionUnionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableOptionUnionContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *TableOptionUnionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableOptionUnionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionUnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionUnion(s)
	}
}

func (s *TableOptionUnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionUnion(s)
	}
}

type TableOptionSamplePageContext struct {
	*TableOptionContext
}

func NewTableOptionSamplePageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionSamplePageContext {
	var p = new(TableOptionSamplePageContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionSamplePageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionSamplePageContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *TableOptionSamplePageContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionSamplePageContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionSamplePageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionSamplePage(s)
	}
}

func (s *TableOptionSamplePageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionSamplePage(s)
	}
}

type TableOptionCharsetContext struct {
	*TableOptionContext
}

func NewTableOptionCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCharsetContext {
	var p = new(TableOptionCharsetContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCharsetContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *TableOptionCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *TableOptionCharsetContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *TableOptionCharsetContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *TableOptionCharsetContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionCharset(s)
	}
}

func (s *TableOptionCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionCharset(s)
	}
}

type TableOptionIndexDirectoryContext struct {
	*TableOptionContext
}

func NewTableOptionIndexDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionIndexDirectoryContext {
	var p = new(TableOptionIndexDirectoryContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionIndexDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionIndexDirectoryContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TableOptionIndexDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TableOptionIndexDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionIndexDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionIndexDirectoryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionIndexDirectory(s)
	}
}

func (s *TableOptionIndexDirectoryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionIndexDirectory(s)
	}
}

type TableOptionTableTypeContext struct {
	*TableOptionContext
}

func NewTableOptionTableTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionTableTypeContext {
	var p = new(TableOptionTableTypeContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionTableTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionTableTypeContext) TABLE_TYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_TYPE, 0)
}

func (s *TableOptionTableTypeContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionTableTypeContext) TableType() ITableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableTypeContext)
}

func (s *TableOptionTableTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionTableType(s)
	}
}

func (s *TableOptionTableTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionTableType(s)
	}
}

type TableOptionKeyBlockSizeContext struct {
	*TableOptionContext
}

func NewTableOptionKeyBlockSizeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionKeyBlockSizeContext {
	var p = new(TableOptionKeyBlockSizeContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionKeyBlockSizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionKeyBlockSizeContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *TableOptionKeyBlockSizeContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *TableOptionKeyBlockSizeContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionKeyBlockSizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionKeyBlockSize(s)
	}
}

func (s *TableOptionKeyBlockSizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionKeyBlockSize(s)
	}
}

type TableOptionEncryptionContext struct {
	*TableOptionContext
}

func NewTableOptionEncryptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionEncryptionContext {
	var p = new(TableOptionEncryptionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionEncryptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionEncryptionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION, 0)
}

func (s *TableOptionEncryptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionEncryptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionEncryptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionEncryption(s)
	}
}

func (s *TableOptionEncryptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionEncryption(s)
	}
}

type TableOptionDataDirectoryContext struct {
	*TableOptionContext
}

func NewTableOptionDataDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionDataDirectoryContext {
	var p = new(TableOptionDataDirectoryContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionDataDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionDataDirectoryContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *TableOptionDataDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TableOptionDataDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionDataDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionDataDirectoryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionDataDirectory(s)
	}
}

func (s *TableOptionDataDirectoryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionDataDirectory(s)
	}
}

type TableOptionRecalculationContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionRecalculationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionRecalculationContext {
	var p = new(TableOptionRecalculationContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionRecalculationContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionRecalculationContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionRecalculationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionRecalculationContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *TableOptionRecalculationContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionRecalculationContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionRecalculationContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionRecalculationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionRecalculationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionRecalculation(s)
	}
}

func (s *TableOptionRecalculationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionRecalculation(s)
	}
}

type TableOptionAutoIncrementContext struct {
	*TableOptionContext
}

func NewTableOptionAutoIncrementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionAutoIncrementContext {
	var p = new(TableOptionAutoIncrementContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionAutoIncrementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionAutoIncrementContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *TableOptionAutoIncrementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionAutoIncrementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionAutoIncrementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionAutoIncrement(s)
	}
}

func (s *TableOptionAutoIncrementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionAutoIncrement(s)
	}
}

type TableOptionChecksumContext struct {
	*TableOptionContext
	boolValue antlr.Token
}

func NewTableOptionChecksumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionChecksumContext {
	var p = new(TableOptionChecksumContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionChecksumContext) GetBoolValue() antlr.Token { return s.boolValue }

func (s *TableOptionChecksumContext) SetBoolValue(v antlr.Token) { s.boolValue = v }

func (s *TableOptionChecksumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionChecksumContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *TableOptionChecksumContext) PAGE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE_CHECKSUM, 0)
}

func (s *TableOptionChecksumContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionChecksumContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionChecksumContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionChecksumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionChecksum(s)
	}
}

func (s *TableOptionChecksumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionChecksum(s)
	}
}

type TableOptionDelayContext struct {
	*TableOptionContext
	boolValue antlr.Token
}

func NewTableOptionDelayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionDelayContext {
	var p = new(TableOptionDelayContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionDelayContext) GetBoolValue() antlr.Token { return s.boolValue }

func (s *TableOptionDelayContext) SetBoolValue(v antlr.Token) { s.boolValue = v }

func (s *TableOptionDelayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionDelayContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *TableOptionDelayContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionDelayContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionDelayContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionDelayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionDelay(s)
	}
}

func (s *TableOptionDelayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionDelay(s)
	}
}

type TableOptionConnectionContext struct {
	*TableOptionContext
}

func NewTableOptionConnectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionConnectionContext {
	var p = new(TableOptionConnectionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionConnectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionConnectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *TableOptionConnectionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionConnectionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionConnectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionConnection(s)
	}
}

func (s *TableOptionConnectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionConnection(s)
	}
}

type TableOptionCommentContext struct {
	*TableOptionContext
}

func NewTableOptionCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCommentContext {
	var p = new(TableOptionCommentContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *TableOptionCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionCommentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionComment(s)
	}
}

func (s *TableOptionCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionComment(s)
	}
}

type TableOptionAverageContext struct {
	*TableOptionContext
}

func NewTableOptionAverageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionAverageContext {
	var p = new(TableOptionAverageContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionAverageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionAverageContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *TableOptionAverageContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionAverageContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionAverageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionAverage(s)
	}
}

func (s *TableOptionAverageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionAverage(s)
	}
}

type TableOptionRowFormatContext struct {
	*TableOptionContext
	rowFormat antlr.Token
}

func NewTableOptionRowFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionRowFormatContext {
	var p = new(TableOptionRowFormatContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionRowFormatContext) GetRowFormat() antlr.Token { return s.rowFormat }

func (s *TableOptionRowFormatContext) SetRowFormat(v antlr.Token) { s.rowFormat = v }

func (s *TableOptionRowFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionRowFormatContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *TableOptionRowFormatContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionRowFormatContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *TableOptionRowFormatContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *TableOptionRowFormatContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *TableOptionRowFormatContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *TableOptionRowFormatContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *TableOptionRowFormatContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *TableOptionRowFormatContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionRowFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionRowFormat(s)
	}
}

func (s *TableOptionRowFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionRowFormat(s)
	}
}

type TableOptionCompressionContext struct {
	*TableOptionContext
}

func NewTableOptionCompressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCompressionContext {
	var p = new(TableOptionCompressionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCompressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCompressionContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSION, 0)
}

func (s *TableOptionCompressionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionCompressionContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *TableOptionCompressionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCompressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionCompression(s)
	}
}

func (s *TableOptionCompressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionCompression(s)
	}
}

type TableOptionInsertMethodContext struct {
	*TableOptionContext
	insertMethod antlr.Token
}

func NewTableOptionInsertMethodContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionInsertMethodContext {
	var p = new(TableOptionInsertMethodContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionInsertMethodContext) GetInsertMethod() antlr.Token { return s.insertMethod }

func (s *TableOptionInsertMethodContext) SetInsertMethod(v antlr.Token) { s.insertMethod = v }

func (s *TableOptionInsertMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionInsertMethodContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *TableOptionInsertMethodContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *TableOptionInsertMethodContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *TableOptionInsertMethodContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *TableOptionInsertMethodContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionInsertMethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionInsertMethod(s)
	}
}

func (s *TableOptionInsertMethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionInsertMethod(s)
	}
}

type TableOptionMinRowsContext struct {
	*TableOptionContext
}

func NewTableOptionMinRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionMinRowsContext {
	var p = new(TableOptionMinRowsContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionMinRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionMinRowsContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *TableOptionMinRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionMinRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionMinRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableOptionMinRows(s)
	}
}

func (s *TableOptionMinRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableOptionMinRows(s)
	}
}

func (p *MySqlParser) TableOption() (localctx ITableOptionContext) {
	localctx = NewTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MySqlParserRULE_tableOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1877)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableOptionEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1732)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1734)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1733)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONNECT || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(MySqlParserARCHIVE-752))|(1<<(MySqlParserBLACKHOLE-752))|(1<<(MySqlParserCSV-752))|(1<<(MySqlParserFEDERATED-752))|(1<<(MySqlParserINNODB-752))|(1<<(MySqlParserMEMORY-752))|(1<<(MySqlParserMRG_MYISAM-752))|(1<<(MySqlParserMYISAM-752))|(1<<(MySqlParserNDB-752))|(1<<(MySqlParserNDBCLUSTER-752))|(1<<(MySqlParserPERFORMANCE_SCHEMA-752))|(1<<(MySqlParserTOKUDB-752)))) != 0) || (((_la-1111)&-(0x1f+1)) == 0 && ((1<<uint((_la-1111)))&((1<<(MySqlParserSTRING_LITERAL-1111))|(1<<(MySqlParserID-1111))|(1<<(MySqlParserREVERSE_QUOTE_ID-1111)))) != 0) {
			{
				p.SetState(1736)
				p.EngineName()
			}

		}

	case 2:
		localctx = NewTableOptionAutoIncrementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1739)
			p.Match(MySqlParserAUTO_INCREMENT)
		}
		p.SetState(1741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1740)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1743)
			p.DecimalLiteral()
		}

	case 3:
		localctx = NewTableOptionAverageContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1744)
			p.Match(MySqlParserAVG_ROW_LENGTH)
		}
		p.SetState(1746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1745)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1748)
			p.DecimalLiteral()
		}

	case 4:
		localctx = NewTableOptionCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1749)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1752)
			p.CharSet()
		}
		p.SetState(1754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1753)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1758)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(1756)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(1757)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		localctx = NewTableOptionChecksumContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1760)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHECKSUM || _la == MySqlParserPAGE_CHECKSUM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1761)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1764)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionChecksumContext).boolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionChecksumContext).boolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 6:
		localctx = NewTableOptionCollateContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1765)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1768)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1769)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1772)
			p.CollationName()
		}

	case 7:
		localctx = NewTableOptionCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1773)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1774)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1777)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 8:
		localctx = NewTableOptionCompressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1778)
			p.Match(MySqlParserCOMPRESSION)
		}
		p.SetState(1780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1779)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1782)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSTRING_LITERAL || _la == MySqlParserID) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 9:
		localctx = NewTableOptionConnectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1783)
			p.Match(MySqlParserCONNECTION)
		}
		p.SetState(1785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1784)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1787)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 10:
		localctx = NewTableOptionDataDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1788)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1789)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1790)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1793)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 11:
		localctx = NewTableOptionDelayContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1794)
			p.Match(MySqlParserDELAY_KEY_WRITE)
		}
		p.SetState(1796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1795)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1798)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionDelayContext).boolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionDelayContext).boolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 12:
		localctx = NewTableOptionEncryptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1799)
			p.Match(MySqlParserENCRYPTION)
		}
		p.SetState(1801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1800)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1803)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 13:
		localctx = NewTableOptionIndexDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1804)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(1805)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1807)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1806)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1809)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 14:
		localctx = NewTableOptionInsertMethodContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1810)
			p.Match(MySqlParserINSERT_METHOD)
		}
		p.SetState(1812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1811)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1814)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionInsertMethodContext).insertMethod = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNO) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionInsertMethodContext).insertMethod = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 15:
		localctx = NewTableOptionKeyBlockSizeContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1815)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1816)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1819)
			p.FileSizeLiteral()
		}

	case 16:
		localctx = NewTableOptionMaxRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1820)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(1822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1821)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1824)
			p.DecimalLiteral()
		}

	case 17:
		localctx = NewTableOptionMinRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1825)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(1827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1826)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1829)
			p.DecimalLiteral()
		}

	case 18:
		localctx = NewTableOptionPackKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1830)
			p.Match(MySqlParserPACK_KEYS)
		}
		p.SetState(1832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1831)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1834)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionPackKeysContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionPackKeysContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 19:
		localctx = NewTableOptionPasswordContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1835)
			p.Match(MySqlParserPASSWORD)
		}
		p.SetState(1837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1836)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1839)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 20:
		localctx = NewTableOptionRowFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1840)
			p.Match(MySqlParserROW_FORMAT)
		}
		p.SetState(1842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1841)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1844)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionRowFormatContext).rowFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || (((_la-358)&-(0x1f+1)) == 0 && ((1<<uint((_la-358)))&((1<<(MySqlParserCOMPACT-358))|(1<<(MySqlParserCOMPRESSED-358))|(1<<(MySqlParserDYNAMIC-358)))) != 0) || _la == MySqlParserFIXED || _la == MySqlParserREDUNDANT || _la == MySqlParserID) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionRowFormatContext).rowFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 21:
		localctx = NewTableOptionRecalculationContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1845)
			p.Match(MySqlParserSTATS_AUTO_RECALC)
		}
		p.SetState(1847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1846)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1849)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionRecalculationContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionRecalculationContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 22:
		localctx = NewTableOptionPersistentContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1850)
			p.Match(MySqlParserSTATS_PERSISTENT)
		}
		p.SetState(1852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1851)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1854)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionPersistentContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionPersistentContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 23:
		localctx = NewTableOptionSamplePageContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1855)
			p.Match(MySqlParserSTATS_SAMPLE_PAGES)
		}
		p.SetState(1857)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1856)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1859)
			p.DecimalLiteral()
		}

	case 24:
		localctx = NewTableOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1860)
			p.Match(MySqlParserTABLESPACE)
		}
		{
			p.SetState(1861)
			p.Uid()
		}
		p.SetState(1863)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1862)
				p.TablespaceStorage()
			}

		}

	case 25:
		localctx = NewTableOptionTableTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1865)
			p.Match(MySqlParserTABLE_TYPE)
		}
		{
			p.SetState(1866)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1867)
			p.TableType()
		}

	case 26:
		localctx = NewTableOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1868)
			p.TablespaceStorage()
		}

	case 27:
		localctx = NewTableOptionUnionContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1869)
			p.Match(MySqlParserUNION)
		}
		p.SetState(1871)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1870)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1873)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1874)
			p.Tables()
		}
		{
			p.SetState(1875)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITableTypeContext is an interface to support dynamic dispatch.
type ITableTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableTypeContext differentiates from other interfaces.
	IsTableTypeContext()
}

type TableTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableTypeContext() *TableTypeContext {
	var p = new(TableTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableType
	return p
}

func (*TableTypeContext) IsTableTypeContext() {}

func NewTableTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableTypeContext {
	var p = new(TableTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableType

	return p
}

func (s *TableTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TableTypeContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *TableTypeContext) ODBC() antlr.TerminalNode {
	return s.GetToken(MySqlParserODBC, 0)
}

func (s *TableTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableType(s)
	}
}

func (s *TableTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableType(s)
	}
}

func (p *MySqlParser) TableType() (localctx ITableTypeContext) {
	localctx = NewTableTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MySqlParserRULE_tableType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1879)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMYSQL || _la == MySqlParserODBC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITablespaceStorageContext is an interface to support dynamic dispatch.
type ITablespaceStorageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablespaceStorageContext differentiates from other interfaces.
	IsTablespaceStorageContext()
}

type TablespaceStorageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablespaceStorageContext() *TablespaceStorageContext {
	var p = new(TablespaceStorageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tablespaceStorage
	return p
}

func (*TablespaceStorageContext) IsTablespaceStorageContext() {}

func NewTablespaceStorageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablespaceStorageContext {
	var p = new(TablespaceStorageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tablespaceStorage

	return p
}

func (s *TablespaceStorageContext) GetParser() antlr.Parser { return s.parser }

func (s *TablespaceStorageContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *TablespaceStorageContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *TablespaceStorageContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *TablespaceStorageContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TablespaceStorageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablespaceStorageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablespaceStorageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTablespaceStorage(s)
	}
}

func (s *TablespaceStorageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTablespaceStorage(s)
	}
}

func (p *MySqlParser) TablespaceStorage() (localctx ITablespaceStorageContext) {
	localctx = NewTablespaceStorageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MySqlParserRULE_tablespaceStorage)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1881)
		p.Match(MySqlParserSTORAGE)
	}
	{
		p.SetState(1882)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPartitionDefinitionsContext is an interface to support dynamic dispatch.
type IPartitionDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCount returns the count rule contexts.
	GetCount() IDecimalLiteralContext

	// GetSubCount returns the subCount rule contexts.
	GetSubCount() IDecimalLiteralContext

	// SetCount sets the count rule contexts.
	SetCount(IDecimalLiteralContext)

	// SetSubCount sets the subCount rule contexts.
	SetSubCount(IDecimalLiteralContext)

	// IsPartitionDefinitionsContext differentiates from other interfaces.
	IsPartitionDefinitionsContext()
}

type PartitionDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	count    IDecimalLiteralContext
	subCount IDecimalLiteralContext
}

func NewEmptyPartitionDefinitionsContext() *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinitions
	return p
}

func (*PartitionDefinitionsContext) IsPartitionDefinitionsContext() {}

func NewPartitionDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinitions

	return p
}

func (s *PartitionDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionsContext) GetCount() IDecimalLiteralContext { return s.count }

func (s *PartitionDefinitionsContext) GetSubCount() IDecimalLiteralContext { return s.subCount }

func (s *PartitionDefinitionsContext) SetCount(v IDecimalLiteralContext) { s.count = v }

func (s *PartitionDefinitionsContext) SetSubCount(v IDecimalLiteralContext) { s.subCount = v }

func (s *PartitionDefinitionsContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionDefinitionsContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBY)
}

func (s *PartitionDefinitionsContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, i)
}

func (s *PartitionDefinitionsContext) PartitionFunctionDefinition() IPartitionFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionFunctionDefinitionContext)
}

func (s *PartitionDefinitionsContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *PartitionDefinitionsContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *PartitionDefinitionsContext) SubpartitionFunctionDefinition() ISubpartitionFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionFunctionDefinitionContext)
}

func (s *PartitionDefinitionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionDefinitionsContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionsContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *PartitionDefinitionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionDefinitionsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionDefinitionsContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *PartitionDefinitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionDefinitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionDefinitions(s)
	}
}

func (s *PartitionDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionDefinitions(s)
	}
}

func (p *MySqlParser) PartitionDefinitions() (localctx IPartitionDefinitionsContext) {
	localctx = NewPartitionDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MySqlParserRULE_partitionDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1884)
		p.Match(MySqlParserPARTITION)
	}
	{
		p.SetState(1885)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(1886)
		p.PartitionFunctionDefinition()
	}
	p.SetState(1889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITIONS {
		{
			p.SetState(1887)
			p.Match(MySqlParserPARTITIONS)
		}
		{
			p.SetState(1888)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionDefinitionsContext).count = _x
		}

	}
	p.SetState(1898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUBPARTITION {
		{
			p.SetState(1891)
			p.Match(MySqlParserSUBPARTITION)
		}
		{
			p.SetState(1892)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(1893)
			p.SubpartitionFunctionDefinition()
		}
		p.SetState(1896)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSUBPARTITIONS {
			{
				p.SetState(1894)
				p.Match(MySqlParserSUBPARTITIONS)
			}
			{
				p.SetState(1895)

				var _x = p.DecimalLiteral()

				localctx.(*PartitionDefinitionsContext).subCount = _x
			}

		}

	}
	p.SetState(1911)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1900)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1901)
			p.PartitionDefinition()
		}
		p.SetState(1906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1902)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1903)
				p.PartitionDefinition()
			}

			p.SetState(1908)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1909)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartitionFunctionDefinitionContext is an interface to support dynamic dispatch.
type IPartitionFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionFunctionDefinitionContext differentiates from other interfaces.
	IsPartitionFunctionDefinitionContext()
}

type PartitionFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionFunctionDefinitionContext() *PartitionFunctionDefinitionContext {
	var p = new(PartitionFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionFunctionDefinition
	return p
}

func (*PartitionFunctionDefinitionContext) IsPartitionFunctionDefinitionContext() {}

func NewPartitionFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionFunctionDefinitionContext {
	var p = new(PartitionFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionFunctionDefinition

	return p
}

func (s *PartitionFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionFunctionDefinitionContext) CopyFrom(ctx *PartitionFunctionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionFunctionKeyContext struct {
	*PartitionFunctionDefinitionContext
	algType antlr.Token
}

func NewPartitionFunctionKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionKeyContext {
	var p = new(PartitionFunctionKeyContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionKeyContext) GetAlgType() antlr.Token { return s.algType }

func (s *PartitionFunctionKeyContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *PartitionFunctionKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PartitionFunctionKeyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionKeyContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionKeyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionKeyContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *PartitionFunctionKeyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *PartitionFunctionKeyContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionFunctionKeyContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *PartitionFunctionKeyContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *PartitionFunctionKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionFunctionKey(s)
	}
}

func (s *PartitionFunctionKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionFunctionKey(s)
	}
}

type PartitionFunctionHashContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionHashContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionHashContext {
	var p = new(PartitionFunctionHashContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionHashContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *PartitionFunctionHashContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionHashContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionHashContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionHashContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *PartitionFunctionHashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionFunctionHash(s)
	}
}

func (s *PartitionFunctionHashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionFunctionHash(s)
	}
}

type PartitionFunctionListContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionListContext {
	var p = new(PartitionFunctionListContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionListContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *PartitionFunctionListContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionListContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionListContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionListContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *PartitionFunctionListContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionFunctionList(s)
	}
}

func (s *PartitionFunctionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionFunctionList(s)
	}
}

type PartitionFunctionRangeContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionRangeContext {
	var p = new(PartitionFunctionRangeContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionRangeContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANGE, 0)
}

func (s *PartitionFunctionRangeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionRangeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionRangeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionRangeContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *PartitionFunctionRangeContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionFunctionRange(s)
	}
}

func (s *PartitionFunctionRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionFunctionRange(s)
	}
}

func (p *MySqlParser) PartitionFunctionDefinition() (localctx IPartitionFunctionDefinitionContext) {
	localctx = NewPartitionFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MySqlParserRULE_partitionFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1958)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPartitionFunctionHashContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1914)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1913)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1916)
			p.Match(MySqlParserHASH)
		}
		{
			p.SetState(1917)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1918)
			p.expression(0)
		}
		{
			p.SetState(1919)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		localctx = NewPartitionFunctionKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1922)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1921)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1924)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALGORITHM {
			{
				p.SetState(1925)
				p.Match(MySqlParserALGORITHM)
			}
			{
				p.SetState(1926)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(1927)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*PartitionFunctionKeyContext).algType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserONE_DECIMAL || _la == MySqlParserTWO_DECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*PartitionFunctionKeyContext).algType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1930)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1931)
			p.UidList()
		}
		{
			p.SetState(1932)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewPartitionFunctionRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1934)
			p.Match(MySqlParserRANGE)
		}
		p.SetState(1944)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLR_BRACKET:
			{
				p.SetState(1935)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1936)
				p.expression(0)
			}
			{
				p.SetState(1937)
				p.Match(MySqlParserRR_BRACKET)
			}

		case MySqlParserCOLUMNS:
			{
				p.SetState(1939)
				p.Match(MySqlParserCOLUMNS)
			}
			{
				p.SetState(1940)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1941)
				p.UidList()
			}
			{
				p.SetState(1942)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewPartitionFunctionListContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1946)
			p.Match(MySqlParserLIST)
		}
		p.SetState(1956)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLR_BRACKET:
			{
				p.SetState(1947)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1948)
				p.expression(0)
			}
			{
				p.SetState(1949)
				p.Match(MySqlParserRR_BRACKET)
			}

		case MySqlParserCOLUMNS:
			{
				p.SetState(1951)
				p.Match(MySqlParserCOLUMNS)
			}
			{
				p.SetState(1952)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1953)
				p.UidList()
			}
			{
				p.SetState(1954)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISubpartitionFunctionDefinitionContext is an interface to support dynamic dispatch.
type ISubpartitionFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubpartitionFunctionDefinitionContext differentiates from other interfaces.
	IsSubpartitionFunctionDefinitionContext()
}

type SubpartitionFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubpartitionFunctionDefinitionContext() *SubpartitionFunctionDefinitionContext {
	var p = new(SubpartitionFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subpartitionFunctionDefinition
	return p
}

func (*SubpartitionFunctionDefinitionContext) IsSubpartitionFunctionDefinitionContext() {}

func NewSubpartitionFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubpartitionFunctionDefinitionContext {
	var p = new(SubpartitionFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subpartitionFunctionDefinition

	return p
}

func (s *SubpartitionFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubpartitionFunctionDefinitionContext) CopyFrom(ctx *SubpartitionFunctionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SubpartitionFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubpartitionFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubPartitionFunctionHashContext struct {
	*SubpartitionFunctionDefinitionContext
}

func NewSubPartitionFunctionHashContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubPartitionFunctionHashContext {
	var p = new(SubPartitionFunctionHashContext)

	p.SubpartitionFunctionDefinitionContext = NewEmptySubpartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SubpartitionFunctionDefinitionContext))

	return p
}

func (s *SubPartitionFunctionHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubPartitionFunctionHashContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *SubPartitionFunctionHashContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubPartitionFunctionHashContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubPartitionFunctionHashContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubPartitionFunctionHashContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *SubPartitionFunctionHashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubPartitionFunctionHash(s)
	}
}

func (s *SubPartitionFunctionHashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubPartitionFunctionHash(s)
	}
}

type SubPartitionFunctionKeyContext struct {
	*SubpartitionFunctionDefinitionContext
	algType antlr.Token
}

func NewSubPartitionFunctionKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubPartitionFunctionKeyContext {
	var p = new(SubPartitionFunctionKeyContext)

	p.SubpartitionFunctionDefinitionContext = NewEmptySubpartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SubpartitionFunctionDefinitionContext))

	return p
}

func (s *SubPartitionFunctionKeyContext) GetAlgType() antlr.Token { return s.algType }

func (s *SubPartitionFunctionKeyContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *SubPartitionFunctionKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubPartitionFunctionKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SubPartitionFunctionKeyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubPartitionFunctionKeyContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *SubPartitionFunctionKeyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubPartitionFunctionKeyContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *SubPartitionFunctionKeyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *SubPartitionFunctionKeyContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SubPartitionFunctionKeyContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *SubPartitionFunctionKeyContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *SubPartitionFunctionKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubPartitionFunctionKey(s)
	}
}

func (s *SubPartitionFunctionKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubPartitionFunctionKey(s)
	}
}

func (p *MySqlParser) SubpartitionFunctionDefinition() (localctx ISubpartitionFunctionDefinitionContext) {
	localctx = NewSubpartitionFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MySqlParserRULE_subpartitionFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1981)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSubPartitionFunctionHashContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1961)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1960)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1963)
			p.Match(MySqlParserHASH)
		}
		{
			p.SetState(1964)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1965)
			p.expression(0)
		}
		{
			p.SetState(1966)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		localctx = NewSubPartitionFunctionKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1968)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1971)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALGORITHM {
			{
				p.SetState(1972)
				p.Match(MySqlParserALGORITHM)
			}
			{
				p.SetState(1973)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(1974)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SubPartitionFunctionKeyContext).algType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserONE_DECIMAL || _la == MySqlParserTWO_DECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SubPartitionFunctionKeyContext).algType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1977)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1978)
			p.UidList()
		}
		{
			p.SetState(1979)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartitionDefinitionContext is an interface to support dynamic dispatch.
type IPartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinitionContext differentiates from other interfaces.
	IsPartitionDefinitionContext()
}

type PartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinitionContext() *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinition
	return p
}

func (*PartitionDefinitionContext) IsPartitionDefinitionContext() {}

func NewPartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinition

	return p
}

func (s *PartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionContext) CopyFrom(ctx *PartitionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionComparisonContext struct {
	*PartitionDefinitionContext
}

func NewPartitionComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionComparisonContext {
	var p = new(PartitionComparisonContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionComparisonContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionComparisonContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionComparisonContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionComparisonContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *PartitionComparisonContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *PartitionComparisonContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionComparisonContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionComparisonContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionComparisonContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionComparisonContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionComparisonContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionComparisonContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionComparisonContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionComparisonContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionComparison(s)
	}
}

func (s *PartitionComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionComparison(s)
	}
}

type PartitionListAtomContext struct {
	*PartitionDefinitionContext
}

func NewPartitionListAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionListAtomContext {
	var p = new(PartitionListAtomContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionListAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionListAtomContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionListAtomContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionListAtomContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionListAtomContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PartitionListAtomContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionListAtomContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionListAtomContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionListAtomContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionListAtomContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionListAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionListAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionListAtomContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionListAtomContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionListAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionListAtom(s)
	}
}

func (s *PartitionListAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionListAtom(s)
	}
}

type PartitionListVectorContext struct {
	*PartitionDefinitionContext
}

func NewPartitionListVectorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionListVectorContext {
	var p = new(PartitionListVectorContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionListVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionListVectorContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionListVectorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionListVectorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionListVectorContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PartitionListVectorContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionListVectorContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionListVectorContext) AllPartitionDefinerVector() []IPartitionDefinerVectorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerVectorContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerVectorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerVectorContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) PartitionDefinerVector(i int) IPartitionDefinerVectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerVectorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerVectorContext)
}

func (s *PartitionListVectorContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionListVectorContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionListVectorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionListVectorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionListVectorContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionListVectorContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionListVectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionListVector(s)
	}
}

func (s *PartitionListVectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionListVector(s)
	}
}

type PartitionSimpleContext struct {
	*PartitionDefinitionContext
}

func NewPartitionSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionSimpleContext {
	var p = new(PartitionSimpleContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionSimpleContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionSimpleContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionSimpleContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionSimpleContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionSimpleContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionSimpleContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionSimpleContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionSimpleContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionSimpleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionSimpleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionSimpleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionSimple(s)
	}
}

func (s *PartitionSimpleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionSimple(s)
	}
}

func (p *MySqlParser) PartitionDefinition() (localctx IPartitionDefinitionContext) {
	localctx = NewPartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MySqlParserRULE_partitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2129)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPartitionComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1983)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1984)
			p.Uid()
		}
		{
			p.SetState(1985)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(1986)
			p.Match(MySqlParserLESS)
		}
		{
			p.SetState(1987)
			p.Match(MySqlParserTHAN)
		}
		{
			p.SetState(1988)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1989)
			p.PartitionDefinerAtom()
		}
		p.SetState(1994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1990)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1991)
				p.PartitionDefinerAtom()
			}

			p.SetState(1996)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1997)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(2001)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1998)
				p.PartitionOption()
			}

			p.SetState(2003)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(2004)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2005)
				p.SubpartitionDefinition()
			}
			p.SetState(2010)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2006)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2007)
					p.SubpartitionDefinition()
				}

				p.SetState(2012)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2013)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 2:
		localctx = NewPartitionComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2017)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2018)
			p.Uid()
		}
		{
			p.SetState(2019)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(2020)
			p.Match(MySqlParserLESS)
		}
		{
			p.SetState(2021)
			p.Match(MySqlParserTHAN)
		}
		{
			p.SetState(2022)
			p.PartitionDefinerAtom()
		}
		p.SetState(2026)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(2023)
				p.PartitionOption()
			}

			p.SetState(2028)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2040)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(2029)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2030)
				p.SubpartitionDefinition()
			}
			p.SetState(2035)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2031)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2032)
					p.SubpartitionDefinition()
				}

				p.SetState(2037)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2038)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 3:
		localctx = NewPartitionListAtomContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2042)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2043)
			p.Uid()
		}
		{
			p.SetState(2044)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(2045)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(2046)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2047)
			p.PartitionDefinerAtom()
		}
		p.SetState(2052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2048)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2049)
				p.PartitionDefinerAtom()
			}

			p.SetState(2054)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2055)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(2059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(2056)
				p.PartitionOption()
			}

			p.SetState(2061)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(2062)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2063)
				p.SubpartitionDefinition()
			}
			p.SetState(2068)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2064)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2065)
					p.SubpartitionDefinition()
				}

				p.SetState(2070)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2071)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 4:
		localctx = NewPartitionListVectorContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2075)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2076)
			p.Uid()
		}
		{
			p.SetState(2077)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(2078)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(2079)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2080)
			p.PartitionDefinerVector()
		}
		p.SetState(2085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2081)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2082)
				p.PartitionDefinerVector()
			}

			p.SetState(2087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2088)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(2092)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(2089)
				p.PartitionOption()
			}

			p.SetState(2094)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2106)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(2095)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2096)
				p.SubpartitionDefinition()
			}
			p.SetState(2101)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2097)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2098)
					p.SubpartitionDefinition()
				}

				p.SetState(2103)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2104)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 5:
		localctx = NewPartitionSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2108)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2109)
			p.Uid()
		}
		p.SetState(2113)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(2110)
				p.PartitionOption()
			}

			p.SetState(2115)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(2116)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2117)
				p.SubpartitionDefinition()
			}
			p.SetState(2122)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2118)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2119)
					p.SubpartitionDefinition()
				}

				p.SetState(2124)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2125)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	}

	return localctx
}

// IPartitionDefinerAtomContext is an interface to support dynamic dispatch.
type IPartitionDefinerAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinerAtomContext differentiates from other interfaces.
	IsPartitionDefinerAtomContext()
}

type PartitionDefinerAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinerAtomContext() *PartitionDefinerAtomContext {
	var p = new(PartitionDefinerAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinerAtom
	return p
}

func (*PartitionDefinerAtomContext) IsPartitionDefinerAtomContext() {}

func NewPartitionDefinerAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinerAtomContext {
	var p = new(PartitionDefinerAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinerAtom

	return p
}

func (s *PartitionDefinerAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinerAtomContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PartitionDefinerAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionDefinerAtomContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAXVALUE, 0)
}

func (s *PartitionDefinerAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinerAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinerAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionDefinerAtom(s)
	}
}

func (s *PartitionDefinerAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionDefinerAtom(s)
	}
}

func (p *MySqlParser) PartitionDefinerAtom() (localctx IPartitionDefinerAtomContext) {
	localctx = NewPartitionDefinerAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MySqlParserRULE_partitionDefinerAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2134)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2131)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2132)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2133)
			p.Match(MySqlParserMAXVALUE)
		}

	}

	return localctx
}

// IPartitionDefinerVectorContext is an interface to support dynamic dispatch.
type IPartitionDefinerVectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinerVectorContext differentiates from other interfaces.
	IsPartitionDefinerVectorContext()
}

type PartitionDefinerVectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinerVectorContext() *PartitionDefinerVectorContext {
	var p = new(PartitionDefinerVectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinerVector
	return p
}

func (*PartitionDefinerVectorContext) IsPartitionDefinerVectorContext() {}

func NewPartitionDefinerVectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinerVectorContext {
	var p = new(PartitionDefinerVectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinerVector

	return p
}

func (s *PartitionDefinerVectorContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinerVectorContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionDefinerVectorContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionDefinerVectorContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionDefinerVectorContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionDefinerVectorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionDefinerVectorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionDefinerVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinerVectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinerVectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionDefinerVector(s)
	}
}

func (s *PartitionDefinerVectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionDefinerVector(s)
	}
}

func (p *MySqlParser) PartitionDefinerVector() (localctx IPartitionDefinerVectorContext) {
	localctx = NewPartitionDefinerVectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MySqlParserRULE_partitionDefinerVector)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2136)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(2137)
		p.PartitionDefinerAtom()
	}
	p.SetState(2140)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserCOMMA {
		{
			p.SetState(2138)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2139)
			p.PartitionDefinerAtom()
		}

		p.SetState(2142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2144)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ISubpartitionDefinitionContext is an interface to support dynamic dispatch.
type ISubpartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubpartitionDefinitionContext differentiates from other interfaces.
	IsSubpartitionDefinitionContext()
}

type SubpartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubpartitionDefinitionContext() *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subpartitionDefinition
	return p
}

func (*SubpartitionDefinitionContext) IsSubpartitionDefinitionContext() {}

func NewSubpartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subpartitionDefinition

	return p
}

func (s *SubpartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubpartitionDefinitionContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *SubpartitionDefinitionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SubpartitionDefinitionContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *SubpartitionDefinitionContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *SubpartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubpartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubpartitionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubpartitionDefinition(s)
	}
}

func (s *SubpartitionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubpartitionDefinition(s)
	}
}

func (p *MySqlParser) SubpartitionDefinition() (localctx ISubpartitionDefinitionContext) {
	localctx = NewSubpartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MySqlParserRULE_subpartitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2146)
		p.Match(MySqlParserSUBPARTITION)
	}
	{
		p.SetState(2147)
		p.Uid()
	}
	p.SetState(2151)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-482)&-(0x1f+1)) == 0 && ((1<<uint((_la-482)))&((1<<(MySqlParserMAX_ROWS-482))|(1<<(MySqlParserMIN_ROWS-482))|(1<<(MySqlParserNODEGROUP-482)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
		{
			p.SetState(2148)
			p.PartitionOption()
		}

		p.SetState(2153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPartitionOptionContext is an interface to support dynamic dispatch.
type IPartitionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionOptionContext differentiates from other interfaces.
	IsPartitionOptionContext()
}

type PartitionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionOptionContext() *PartitionOptionContext {
	var p = new(PartitionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionOption
	return p
}

func (*PartitionOptionContext) IsPartitionOptionContext() {}

func NewPartitionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionOptionContext {
	var p = new(PartitionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionOption

	return p
}

func (s *PartitionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionOptionContext) CopyFrom(ctx *PartitionOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionOptionCommentContext struct {
	*PartitionOptionContext
	comment antlr.Token
}

func NewPartitionOptionCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionCommentContext {
	var p = new(PartitionOptionCommentContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionCommentContext) GetComment() antlr.Token { return s.comment }

func (s *PartitionOptionCommentContext) SetComment(v antlr.Token) { s.comment = v }

func (s *PartitionOptionCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *PartitionOptionCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionCommentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionComment(s)
	}
}

func (s *PartitionOptionCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionComment(s)
	}
}

type PartitionOptionNodeGroupContext struct {
	*PartitionOptionContext
	nodegroup IUidContext
}

func NewPartitionOptionNodeGroupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionNodeGroupContext {
	var p = new(PartitionOptionNodeGroupContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionNodeGroupContext) GetNodegroup() IUidContext { return s.nodegroup }

func (s *PartitionOptionNodeGroupContext) SetNodegroup(v IUidContext) { s.nodegroup = v }

func (s *PartitionOptionNodeGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionNodeGroupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *PartitionOptionNodeGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionOptionNodeGroupContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionNodeGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionNodeGroup(s)
	}
}

func (s *PartitionOptionNodeGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionNodeGroup(s)
	}
}

type PartitionOptionIndexDirectoryContext struct {
	*PartitionOptionContext
	indexDirectory antlr.Token
}

func NewPartitionOptionIndexDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionIndexDirectoryContext {
	var p = new(PartitionOptionIndexDirectoryContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionIndexDirectoryContext) GetIndexDirectory() antlr.Token {
	return s.indexDirectory
}

func (s *PartitionOptionIndexDirectoryContext) SetIndexDirectory(v antlr.Token) { s.indexDirectory = v }

func (s *PartitionOptionIndexDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionIndexDirectoryContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *PartitionOptionIndexDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *PartitionOptionIndexDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionIndexDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionIndexDirectoryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionIndexDirectory(s)
	}
}

func (s *PartitionOptionIndexDirectoryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionIndexDirectory(s)
	}
}

type PartitionOptionMaxRowsContext struct {
	*PartitionOptionContext
	maxRows IDecimalLiteralContext
}

func NewPartitionOptionMaxRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionMaxRowsContext {
	var p = new(PartitionOptionMaxRowsContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionMaxRowsContext) GetMaxRows() IDecimalLiteralContext { return s.maxRows }

func (s *PartitionOptionMaxRowsContext) SetMaxRows(v IDecimalLiteralContext) { s.maxRows = v }

func (s *PartitionOptionMaxRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionMaxRowsContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *PartitionOptionMaxRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionOptionMaxRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionMaxRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionMaxRows(s)
	}
}

func (s *PartitionOptionMaxRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionMaxRows(s)
	}
}

type PartitionOptionTablespaceContext struct {
	*PartitionOptionContext
	tablespace IUidContext
}

func NewPartitionOptionTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionTablespaceContext {
	var p = new(PartitionOptionTablespaceContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionTablespaceContext) GetTablespace() IUidContext { return s.tablespace }

func (s *PartitionOptionTablespaceContext) SetTablespace(v IUidContext) { s.tablespace = v }

func (s *PartitionOptionTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *PartitionOptionTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionOptionTablespaceContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionTablespace(s)
	}
}

func (s *PartitionOptionTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionTablespace(s)
	}
}

type PartitionOptionEngineContext struct {
	*PartitionOptionContext
}

func NewPartitionOptionEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionEngineContext {
	var p = new(PartitionOptionEngineContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *PartitionOptionEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *PartitionOptionEngineContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *PartitionOptionEngineContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *PartitionOptionEngineContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionEngine(s)
	}
}

func (s *PartitionOptionEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionEngine(s)
	}
}

type PartitionOptionMinRowsContext struct {
	*PartitionOptionContext
	minRows IDecimalLiteralContext
}

func NewPartitionOptionMinRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionMinRowsContext {
	var p = new(PartitionOptionMinRowsContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionMinRowsContext) GetMinRows() IDecimalLiteralContext { return s.minRows }

func (s *PartitionOptionMinRowsContext) SetMinRows(v IDecimalLiteralContext) { s.minRows = v }

func (s *PartitionOptionMinRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionMinRowsContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *PartitionOptionMinRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionOptionMinRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionMinRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionMinRows(s)
	}
}

func (s *PartitionOptionMinRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionMinRows(s)
	}
}

type PartitionOptionDataDirectoryContext struct {
	*PartitionOptionContext
	dataDirectory antlr.Token
}

func NewPartitionOptionDataDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionDataDirectoryContext {
	var p = new(PartitionOptionDataDirectoryContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionDataDirectoryContext) GetDataDirectory() antlr.Token { return s.dataDirectory }

func (s *PartitionOptionDataDirectoryContext) SetDataDirectory(v antlr.Token) { s.dataDirectory = v }

func (s *PartitionOptionDataDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionDataDirectoryContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *PartitionOptionDataDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *PartitionOptionDataDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionDataDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionDataDirectoryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionOptionDataDirectory(s)
	}
}

func (s *PartitionOptionDataDirectoryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionOptionDataDirectory(s)
	}
}

func (p *MySqlParser) PartitionOption() (localctx IPartitionOptionContext) {
	localctx = NewPartitionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MySqlParserRULE_partitionOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2202)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDEFAULT, MySqlParserENGINE, MySqlParserSTORAGE:
		localctx = NewPartitionOptionEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(2154)
				p.Match(MySqlParserDEFAULT)
			}

		}
		p.SetState(2158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(2157)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(2160)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(2162)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2161)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2164)
			p.EngineName()
		}

	case MySqlParserCOMMENT:
		localctx = NewPartitionOptionCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2165)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(2167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2166)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2169)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionCommentContext).comment = _m
		}

	case MySqlParserDATA:
		localctx = NewPartitionOptionDataDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2170)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(2171)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(2173)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2172)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2175)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionDataDirectoryContext).dataDirectory = _m
		}

	case MySqlParserINDEX:
		localctx = NewPartitionOptionIndexDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2176)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(2177)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(2179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2178)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2181)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionIndexDirectoryContext).indexDirectory = _m
		}

	case MySqlParserMAX_ROWS:
		localctx = NewPartitionOptionMaxRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2182)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(2184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2183)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2186)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionOptionMaxRowsContext).maxRows = _x
		}

	case MySqlParserMIN_ROWS:
		localctx = NewPartitionOptionMinRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2187)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(2189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2188)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2191)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionOptionMinRowsContext).minRows = _x
		}

	case MySqlParserTABLESPACE:
		localctx = NewPartitionOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2192)
			p.Match(MySqlParserTABLESPACE)
		}
		p.SetState(2194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2193)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2196)

			var _x = p.Uid()

			localctx.(*PartitionOptionTablespaceContext).tablespace = _x
		}

	case MySqlParserNODEGROUP:
		localctx = NewPartitionOptionNodeGroupContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2197)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(2199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2198)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2201)

			var _x = p.Uid()

			localctx.(*PartitionOptionNodeGroupContext).nodegroup = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterDatabaseContext is an interface to support dynamic dispatch.
type IAlterDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseContext differentiates from other interfaces.
	IsAlterDatabaseContext()
}

type AlterDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseContext() *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterDatabase
	return p
}

func (*AlterDatabaseContext) IsAlterDatabaseContext() {}

func NewAlterDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterDatabase

	return p
}

func (s *AlterDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseContext) CopyFrom(ctx *AlterDatabaseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterUpgradeNameContext struct {
	*AlterDatabaseContext
	dbFormat antlr.Token
}

func NewAlterUpgradeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUpgradeNameContext {
	var p = new(AlterUpgradeNameContext)

	p.AlterDatabaseContext = NewEmptyAlterDatabaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterDatabaseContext))

	return p
}

func (s *AlterUpgradeNameContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *AlterUpgradeNameContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *AlterUpgradeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUpgradeNameContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUpgradeNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterUpgradeNameContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AlterUpgradeNameContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *AlterUpgradeNameContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *AlterUpgradeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *AlterUpgradeNameContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterUpgradeNameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterUpgradeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterUpgradeName(s)
	}
}

func (s *AlterUpgradeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterUpgradeName(s)
	}
}

type AlterSimpleDatabaseContext struct {
	*AlterDatabaseContext
	dbFormat antlr.Token
}

func NewAlterSimpleDatabaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterSimpleDatabaseContext {
	var p = new(AlterSimpleDatabaseContext)

	p.AlterDatabaseContext = NewEmptyAlterDatabaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterDatabaseContext))

	return p
}

func (s *AlterSimpleDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *AlterSimpleDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *AlterSimpleDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterSimpleDatabaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterSimpleDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterSimpleDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterSimpleDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterSimpleDatabaseContext) AllCreateDatabaseOption() []ICreateDatabaseOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem())
	var tst = make([]ICreateDatabaseOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDatabaseOptionContext)
		}
	}

	return tst
}

func (s *AlterSimpleDatabaseContext) CreateDatabaseOption(i int) ICreateDatabaseOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseOptionContext)
}

func (s *AlterSimpleDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterSimpleDatabase(s)
	}
}

func (s *AlterSimpleDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterSimpleDatabase(s)
	}
}

func (p *MySqlParser) AlterDatabase() (localctx IAlterDatabaseContext) {
	localctx = NewAlterDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MySqlParserRULE_alterDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2222)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterSimpleDatabaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2204)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2205)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterSimpleDatabaseContext).dbFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterSimpleDatabaseContext).dbFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2207)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2206)
				p.Uid()
			}

		}
		p.SetState(2210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-24)&-(0x1f+1)) == 0 && ((1<<uint((_la-24)))&((1<<(MySqlParserCHARACTER-24))|(1<<(MySqlParserCOLLATE-24))|(1<<(MySqlParserDEFAULT-24)))) != 0) || _la == MySqlParserCHAR || _la == MySqlParserCHARSET {
			{
				p.SetState(2209)
				p.CreateDatabaseOption()
			}

			p.SetState(2212)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterUpgradeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2214)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2215)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterUpgradeNameContext).dbFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterUpgradeNameContext).dbFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2216)
			p.Uid()
		}
		{
			p.SetState(2217)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(2218)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(2219)
			p.Match(MySqlParserDIRECTORY)
		}
		{
			p.SetState(2220)
			p.Match(MySqlParserNAME)
		}

	}

	return localctx
}

// IAlterEventContext is an interface to support dynamic dispatch.
type IAlterEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterEventContext differentiates from other interfaces.
	IsAlterEventContext()
}

type AlterEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterEventContext() *AlterEventContext {
	var p = new(AlterEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterEvent
	return p
}

func (*AlterEventContext) IsAlterEventContext() {}

func NewAlterEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterEventContext {
	var p = new(AlterEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterEvent

	return p
}

func (s *AlterEventContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterEventContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *AlterEventContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *AlterEventContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *AlterEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *AlterEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *AlterEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *AlterEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *AlterEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *AlterEventContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterEventContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterEventContext) EnableType() IEnableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableTypeContext)
}

func (s *AlterEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *AlterEventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *AlterEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *AlterEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *AlterEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterEvent(s)
	}
}

func (s *AlterEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterEvent(s)
	}
}

func (p *MySqlParser) AlterEvent() (localctx IAlterEventContext) {
	localctx = NewAlterEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MySqlParserRULE_alterEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2224)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2226)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(2225)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(2228)
		p.Match(MySqlParserEVENT)
	}
	{
		p.SetState(2229)
		p.FullId()
	}
	p.SetState(2233)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2230)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2231)
			p.Match(MySqlParserSCHEDULE)
		}
		{
			p.SetState(2232)
			p.ScheduleExpression()
		}

	}
	p.SetState(2241)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(2235)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2236)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(2238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(2237)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(2240)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(2246)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2243)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2244)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2245)
			p.FullId()
		}

	}
	p.SetState(2249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDISABLE || _la == MySqlParserENABLE {
		{
			p.SetState(2248)
			p.EnableType()
		}

	}
	p.SetState(2253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(2251)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(2252)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	p.SetState(2257)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2255)
			p.Match(MySqlParserDO)
		}
		{
			p.SetState(2256)
			p.RoutineBody()
		}

	}

	return localctx
}

// IAlterFunctionContext is an interface to support dynamic dispatch.
type IAlterFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterFunctionContext differentiates from other interfaces.
	IsAlterFunctionContext()
}

type AlterFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterFunctionContext() *AlterFunctionContext {
	var p = new(AlterFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterFunction
	return p
}

func (*AlterFunctionContext) IsAlterFunctionContext() {}

func NewAlterFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterFunctionContext {
	var p = new(AlterFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterFunction

	return p
}

func (s *AlterFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterFunctionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *AlterFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterFunction(s)
	}
}

func (s *AlterFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterFunction(s)
	}
}

func (p *MySqlParser) AlterFunction() (localctx IAlterFunctionContext) {
	localctx = NewAlterFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MySqlParserRULE_alterFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2259)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2260)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(2261)
		p.FullId()
	}
	p.SetState(2265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-106)&-(0x1f+1)) == 0 && ((1<<uint((_la-106)))&((1<<(MySqlParserMODIFIES-106))|(1<<(MySqlParserNOT-106))|(1<<(MySqlParserREADS-106)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(2262)
			p.RoutineOption()
		}

		p.SetState(2267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterInstanceContext is an interface to support dynamic dispatch.
type IAlterInstanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterInstanceContext differentiates from other interfaces.
	IsAlterInstanceContext()
}

type AlterInstanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterInstanceContext() *AlterInstanceContext {
	var p = new(AlterInstanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterInstance
	return p
}

func (*AlterInstanceContext) IsAlterInstanceContext() {}

func NewAlterInstanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterInstanceContext {
	var p = new(AlterInstanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterInstance

	return p
}

func (s *AlterInstanceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterInstanceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterInstanceContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANCE, 0)
}

func (s *AlterInstanceContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROTATE, 0)
}

func (s *AlterInstanceContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *AlterInstanceContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *AlterInstanceContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterInstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterInstanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterInstanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterInstance(s)
	}
}

func (s *AlterInstanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterInstance(s)
	}
}

func (p *MySqlParser) AlterInstance() (localctx IAlterInstanceContext) {
	localctx = NewAlterInstanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MySqlParserRULE_alterInstance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2268)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2269)
		p.Match(MySqlParserINSTANCE)
	}
	{
		p.SetState(2270)
		p.Match(MySqlParserROTATE)
	}
	{
		p.SetState(2271)
		p.Match(MySqlParserINNODB)
	}
	{
		p.SetState(2272)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(2273)
		p.Match(MySqlParserKEY)
	}

	return localctx
}

// IAlterLogfileGroupContext is an interface to support dynamic dispatch.
type IAlterLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterLogfileGroupContext differentiates from other interfaces.
	IsAlterLogfileGroupContext()
}

type AlterLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterLogfileGroupContext() *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterLogfileGroup
	return p
}

func (*AlterLogfileGroupContext) IsAlterLogfileGroupContext() {}

func NewAlterLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterLogfileGroup

	return p
}

func (s *AlterLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterLogfileGroupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *AlterLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *AlterLogfileGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *AlterLogfileGroupContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *AlterLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *AlterLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *AlterLogfileGroupContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *AlterLogfileGroupContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterLogfileGroupContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterLogfileGroup(s)
	}
}

func (s *AlterLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterLogfileGroup(s)
	}
}

func (p *MySqlParser) AlterLogfileGroup() (localctx IAlterLogfileGroupContext) {
	localctx = NewAlterLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MySqlParserRULE_alterLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2275)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2276)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(2277)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(2278)
		p.Uid()
	}
	{
		p.SetState(2279)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(2280)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(2281)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2287)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(2282)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(2284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2283)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2286)
			p.FileSizeLiteral()
		}

	}
	p.SetState(2290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(2289)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(2292)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(2294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(2293)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(2296)
		p.EngineName()
	}

	return localctx
}

// IAlterProcedureContext is an interface to support dynamic dispatch.
type IAlterProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterProcedureContext differentiates from other interfaces.
	IsAlterProcedureContext()
}

type AlterProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterProcedureContext() *AlterProcedureContext {
	var p = new(AlterProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterProcedure
	return p
}

func (*AlterProcedureContext) IsAlterProcedureContext() {}

func NewAlterProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterProcedureContext {
	var p = new(AlterProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterProcedure

	return p
}

func (s *AlterProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterProcedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *AlterProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterProcedure(s)
	}
}

func (s *AlterProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterProcedure(s)
	}
}

func (p *MySqlParser) AlterProcedure() (localctx IAlterProcedureContext) {
	localctx = NewAlterProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MySqlParserRULE_alterProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2298)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2299)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(2300)
		p.FullId()
	}
	p.SetState(2304)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-106)&-(0x1f+1)) == 0 && ((1<<uint((_la-106)))&((1<<(MySqlParserMODIFIES-106))|(1<<(MySqlParserNOT-106))|(1<<(MySqlParserREADS-106)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(2301)
			p.RoutineOption()
		}

		p.SetState(2306)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterServerContext is an interface to support dynamic dispatch.
type IAlterServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterServerContext differentiates from other interfaces.
	IsAlterServerContext()
}

type AlterServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterServerContext() *AlterServerContext {
	var p = new(AlterServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterServer
	return p
}

func (*AlterServerContext) IsAlterServerContext() {}

func NewAlterServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterServerContext {
	var p = new(AlterServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterServer

	return p
}

func (s *AlterServerContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterServerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *AlterServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *AlterServerContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *AlterServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *AlterServerContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterServerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterServerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterServer(s)
	}
}

func (s *AlterServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterServer(s)
	}
}

func (p *MySqlParser) AlterServer() (localctx IAlterServerContext) {
	localctx = NewAlterServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MySqlParserRULE_alterServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2307)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2308)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(2309)
		p.Uid()
	}
	{
		p.SetState(2310)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(2311)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(2312)
		p.ServerOption()
	}
	p.SetState(2317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2313)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2314)
			p.ServerOption()
		}

		p.SetState(2319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2320)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IAlterTableContext is an interface to support dynamic dispatch.
type IAlterTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// IsAlterTableContext differentiates from other interfaces.
	IsAlterTableContext()
}

type AlterTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	intimeAction antlr.Token
}

func NewEmptyAlterTableContext() *AlterTableContext {
	var p = new(AlterTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterTable
	return p
}

func (*AlterTableContext) IsAlterTableContext() {}

func NewAlterTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableContext {
	var p = new(AlterTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterTable

	return p
}

func (s *AlterTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *AlterTableContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *AlterTableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AlterTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterTableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *AlterTableContext) AllAlterSpecification() []IAlterSpecificationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterSpecificationContext)(nil)).Elem())
	var tst = make([]IAlterSpecificationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterSpecificationContext)
		}
	}

	return tst
}

func (s *AlterTableContext) AlterSpecification(i int) IAlterSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterSpecificationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterSpecificationContext)
}

func (s *AlterTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *AlterTableContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *AlterTableContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *AlterTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterTable(s)
	}
}

func (s *AlterTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterTable(s)
	}
}

func (p *MySqlParser) AlterTable() (localctx IAlterTableContext) {
	localctx = NewAlterTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MySqlParserRULE_alterTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2322)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		{
			p.SetState(2323)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterTableContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterTableContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2326)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(2329)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2330)
		p.TableName()
	}
	p.SetState(2339)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2331)
			p.AlterSpecification()
		}
		p.SetState(2336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2332)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2333)
				p.AlterSpecification()
			}

			p.SetState(2338)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(2342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2341)
			p.PartitionDefinitions()
		}

	}

	return localctx
}

// IAlterTablespaceContext is an interface to support dynamic dispatch.
type IAlterTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetObjectAction returns the objectAction token.
	GetObjectAction() antlr.Token

	// SetObjectAction sets the objectAction token.
	SetObjectAction(antlr.Token)

	// IsAlterTablespaceContext differentiates from other interfaces.
	IsAlterTablespaceContext()
}

type AlterTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	objectAction antlr.Token
}

func NewEmptyAlterTablespaceContext() *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterTablespace
	return p
}

func (*AlterTablespaceContext) IsAlterTablespaceContext() {}

func NewAlterTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterTablespace

	return p
}

func (s *AlterTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablespaceContext) GetObjectAction() antlr.Token { return s.objectAction }

func (s *AlterTablespaceContext) SetObjectAction(v antlr.Token) { s.objectAction = v }

func (s *AlterTablespaceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterTablespaceContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *AlterTablespaceContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterTablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *AlterTablespaceContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *AlterTablespaceContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterTablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterTablespaceContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *AlterTablespaceContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterTablespaceContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterTablespaceContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterTablespaceContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *AlterTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterTablespace(s)
	}
}

func (s *AlterTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterTablespace(s)
	}
}

func (p *MySqlParser) AlterTablespace() (localctx IAlterTablespaceContext) {
	localctx = NewAlterTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MySqlParserRULE_alterTablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2344)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2345)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2346)
		p.Uid()
	}
	{
		p.SetState(2347)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AlterTablespaceContext).objectAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserADD || _la == MySqlParserDROP) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AlterTablespaceContext).objectAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2348)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(2349)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(2350)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		{
			p.SetState(2351)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2352)
			p.FileSizeLiteral()
		}

	}
	p.SetState(2356)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(2355)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(2358)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(2360)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(2359)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(2362)
		p.EngineName()
	}

	return localctx
}

// IAlterViewContext is an interface to support dynamic dispatch.
type IAlterViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetSecContext returns the secContext token.
	GetSecContext() antlr.Token

	// GetCheckOpt returns the checkOpt token.
	GetCheckOpt() antlr.Token

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetSecContext sets the secContext token.
	SetSecContext(antlr.Token)

	// SetCheckOpt sets the checkOpt token.
	SetCheckOpt(antlr.Token)

	// IsAlterViewContext differentiates from other interfaces.
	IsAlterViewContext()
}

type AlterViewContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	algType    antlr.Token
	secContext antlr.Token
	checkOpt   antlr.Token
}

func NewEmptyAlterViewContext() *AlterViewContext {
	var p = new(AlterViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterView
	return p
}

func (*AlterViewContext) IsAlterViewContext() {}

func NewAlterViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterViewContext {
	var p = new(AlterViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterView

	return p
}

func (s *AlterViewContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterViewContext) GetAlgType() antlr.Token { return s.algType }

func (s *AlterViewContext) GetSecContext() antlr.Token { return s.secContext }

func (s *AlterViewContext) GetCheckOpt() antlr.Token { return s.checkOpt }

func (s *AlterViewContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *AlterViewContext) SetSecContext(v antlr.Token) { s.secContext = v }

func (s *AlterViewContext) SetCheckOpt(v antlr.Token) { s.checkOpt = v }

func (s *AlterViewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *AlterViewContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AlterViewContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *AlterViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *AlterViewContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *AlterViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *AlterViewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterViewContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterViewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *AlterViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *AlterViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *AlterViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *AlterViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *AlterViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *AlterViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *AlterViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *AlterViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterView(s)
	}
}

func (s *AlterViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterView(s)
	}
}

func (p *MySqlParser) AlterView() (localctx IAlterViewContext) {
	localctx = NewAlterViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MySqlParserRULE_alterView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2364)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2368)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(2365)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(2366)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2367)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterViewContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterViewContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(2370)
			p.OwnerStatement()
		}

	}
	p.SetState(2376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(2373)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(2374)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(2375)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterViewContext).secContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterViewContext).secContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2378)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(2379)
		p.FullId()
	}
	p.SetState(2384)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2380)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2381)
			p.UidList()
		}
		{
			p.SetState(2382)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(2386)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(2387)
		p.SelectStatement()
	}
	p.SetState(2394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(2388)
			p.Match(MySqlParserWITH)
		}
		p.SetState(2390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			{
				p.SetState(2389)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterViewContext).checkOpt = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterViewContext).checkOpt = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(2392)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2393)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IAlterSpecificationContext is an interface to support dynamic dispatch.
type IAlterSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterSpecificationContext differentiates from other interfaces.
	IsAlterSpecificationContext()
}

type AlterSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterSpecificationContext() *AlterSpecificationContext {
	var p = new(AlterSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterSpecification
	return p
}

func (*AlterSpecificationContext) IsAlterSpecificationContext() {}

func NewAlterSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterSpecificationContext {
	var p = new(AlterSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterSpecification

	return p
}

func (s *AlterSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterSpecificationContext) CopyFrom(ctx *AlterSpecificationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterByDisableKeysContext struct {
	*AlterSpecificationContext
}

func NewAlterByDisableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDisableKeysContext {
	var p = new(AlterByDisableKeysContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDisableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDisableKeysContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *AlterByDisableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AlterByDisableKeysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDisableKeys(s)
	}
}

func (s *AlterByDisableKeysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDisableKeys(s)
	}
}

type AlterByDefaultCharsetContext struct {
	*AlterSpecificationContext
}

func NewAlterByDefaultCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDefaultCharsetContext {
	var p = new(AlterByDefaultCharsetContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDefaultCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDefaultCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AlterByDefaultCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByDefaultCharsetContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterByDefaultCharsetContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterByDefaultCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *AlterByDefaultCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByDefaultCharsetContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AlterByDefaultCharsetContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *AlterByDefaultCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDefaultCharset(s)
	}
}

func (s *AlterByDefaultCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDefaultCharset(s)
	}
}

type AlterByRenameColumnContext struct {
	*AlterSpecificationContext
	oldColumn IUidContext
	newColumn IUidContext
}

func NewAlterByRenameColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameColumnContext {
	var p = new(AlterByRenameColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameColumnContext) GetOldColumn() IUidContext { return s.oldColumn }

func (s *AlterByRenameColumnContext) GetNewColumn() IUidContext { return s.newColumn }

func (s *AlterByRenameColumnContext) SetOldColumn(v IUidContext) { s.oldColumn = v }

func (s *AlterByRenameColumnContext) SetNewColumn(v IUidContext) { s.newColumn = v }

func (s *AlterByRenameColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameColumnContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByRenameColumnContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByRenameColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRenameColumn(s)
	}
}

func (s *AlterByRenameColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRenameColumn(s)
	}
}

type AlterByConvertCharsetContext struct {
	*AlterSpecificationContext
}

func NewAlterByConvertCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByConvertCharsetContext {
	var p = new(AlterByConvertCharsetContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByConvertCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByConvertCharsetContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *AlterByConvertCharsetContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByConvertCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AlterByConvertCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByConvertCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *AlterByConvertCharsetContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AlterByConvertCharsetContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *AlterByConvertCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByConvertCharset(s)
	}
}

func (s *AlterByConvertCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByConvertCharset(s)
	}
}

type AlterByAddPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddPartitionContext {
	var p = new(AlterByAddPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddPartitionContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByAddPartitionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddPartitionContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByAddPartitionContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *AlterByAddPartitionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddPartitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByAddPartitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByAddPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddPartition(s)
	}
}

func (s *AlterByAddPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddPartition(s)
	}
}

type AlterByAddForeignKeyContext struct {
	*AlterSpecificationContext
	name      IUidContext
	indexName IUidContext
}

func NewAlterByAddForeignKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddForeignKeyContext {
	var p = new(AlterByAddForeignKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddForeignKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddForeignKeyContext) GetIndexName() IUidContext { return s.indexName }

func (s *AlterByAddForeignKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddForeignKeyContext) SetIndexName(v IUidContext) { s.indexName = v }

func (s *AlterByAddForeignKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddForeignKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddForeignKeyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AlterByAddForeignKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddForeignKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddForeignKeyContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *AlterByAddForeignKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddForeignKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddForeignKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddForeignKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddForeignKey(s)
	}
}

func (s *AlterByAddForeignKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddForeignKey(s)
	}
}

type AlterByRenameIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByRenameIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameIndexContext {
	var p = new(AlterByRenameIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByRenameIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByRenameIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameIndexContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameIndexContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByRenameIndexContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameIndexContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByRenameIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByRenameIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRenameIndex(s)
	}
}

func (s *AlterByRenameIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRenameIndex(s)
	}
}

type AlterByRemovePartitioningContext struct {
	*AlterSpecificationContext
}

func NewAlterByRemovePartitioningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRemovePartitioningContext {
	var p = new(AlterByRemovePartitioningContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRemovePartitioningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRemovePartitioningContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *AlterByRemovePartitioningContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AlterByRemovePartitioningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRemovePartitioning(s)
	}
}

func (s *AlterByRemovePartitioningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRemovePartitioning(s)
	}
}

type AlterByRenameContext struct {
	*AlterSpecificationContext
	renameFormat antlr.Token
}

func NewAlterByRenameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameContext {
	var p = new(AlterByRenameContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameContext) GetRenameFormat() antlr.Token { return s.renameFormat }

func (s *AlterByRenameContext) SetRenameFormat(v antlr.Token) { s.renameFormat = v }

func (s *AlterByRenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterByRenameContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AlterByRenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRename(s)
	}
}

func (s *AlterByRenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRename(s)
	}
}

type AlterByOptimizePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByOptimizePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByOptimizePartitionContext {
	var p = new(AlterByOptimizePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByOptimizePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByOptimizePartitionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *AlterByOptimizePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByOptimizePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByOptimizePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByOptimizePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByOptimizePartition(s)
	}
}

func (s *AlterByOptimizePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByOptimizePartition(s)
	}
}

type AlterByImportTablespaceContext struct {
	*AlterSpecificationContext
}

func NewAlterByImportTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByImportTablespaceContext {
	var p = new(AlterByImportTablespaceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByImportTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByImportTablespaceContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AlterByImportTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByImportTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByImportTablespace(s)
	}
}

func (s *AlterByImportTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByImportTablespace(s)
	}
}

type AlterByCoalescePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByCoalescePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByCoalescePartitionContext {
	var p = new(AlterByCoalescePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByCoalescePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByCoalescePartitionContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *AlterByCoalescePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByCoalescePartitionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *AlterByCoalescePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByCoalescePartition(s)
	}
}

func (s *AlterByCoalescePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByCoalescePartition(s)
	}
}

type AlterByDropConstraintCheckContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropConstraintCheckContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropConstraintCheckContext {
	var p = new(AlterByDropConstraintCheckContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropConstraintCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropConstraintCheckContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropConstraintCheckContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropConstraintCheckContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByDropConstraintCheckContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByDropConstraintCheckContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropConstraintCheck(s)
	}
}

func (s *AlterByDropConstraintCheckContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropConstraintCheck(s)
	}
}

type AlterByAddColumnsContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddColumnsContext {
	var p = new(AlterByAddColumnsContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddColumnsContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddColumnsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddColumnsContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnsContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddColumnsContext) AllColumnDefinition() []IColumnDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem())
	var tst = make([]IColumnDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnsContext) ColumnDefinition(i int) IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByAddColumnsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddColumnsContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByAddColumnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByAddColumnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByAddColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddColumns(s)
	}
}

func (s *AlterByAddColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddColumns(s)
	}
}

type AlterByAlterIndexVisibilityContext struct {
	*AlterSpecificationContext
}

func NewAlterByAlterIndexVisibilityContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAlterIndexVisibilityContext {
	var p = new(AlterByAlterIndexVisibilityContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAlterIndexVisibilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAlterIndexVisibilityContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterByAlterIndexVisibilityContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAlterIndexVisibilityContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAlterIndexVisibilityContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *AlterByAlterIndexVisibilityContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *AlterByAlterIndexVisibilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAlterIndexVisibility(s)
	}
}

func (s *AlterByAlterIndexVisibilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAlterIndexVisibility(s)
	}
}

type AlterByDropForeignKeyContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropForeignKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropForeignKeyContext {
	var p = new(AlterByDropForeignKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropForeignKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropForeignKeyContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropForeignKeyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AlterByDropForeignKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropForeignKeyContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropForeignKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropForeignKey(s)
	}
}

func (s *AlterByDropForeignKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropForeignKey(s)
	}
}

type AlterByAddCheckTableConstraintContext struct {
	*AlterSpecificationContext
	name IUidContext
}

func NewAlterByAddCheckTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddCheckTableConstraintContext {
	var p = new(AlterByAddCheckTableConstraintContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddCheckTableConstraintContext) GetName() IUidContext { return s.name }

func (s *AlterByAddCheckTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddCheckTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddCheckTableConstraintContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddCheckTableConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByAddCheckTableConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddCheckTableConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AlterByAddCheckTableConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddCheckTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddCheckTableConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddCheckTableConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddCheckTableConstraint(s)
	}
}

func (s *AlterByAddCheckTableConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddCheckTableConstraint(s)
	}
}

type AlterByRebuildPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByRebuildPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRebuildPartitionContext {
	var p = new(AlterByRebuildPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRebuildPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRebuildPartitionContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *AlterByRebuildPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByRebuildPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByRebuildPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByRebuildPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRebuildPartition(s)
	}
}

func (s *AlterByRebuildPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRebuildPartition(s)
	}
}

type AlterByUpgradePartitioningContext struct {
	*AlterSpecificationContext
}

func NewAlterByUpgradePartitioningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByUpgradePartitioningContext {
	var p = new(AlterByUpgradePartitioningContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByUpgradePartitioningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByUpgradePartitioningContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AlterByUpgradePartitioningContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AlterByUpgradePartitioningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByUpgradePartitioning(s)
	}
}

func (s *AlterByUpgradePartitioningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByUpgradePartitioning(s)
	}
}

type AlterByRepairPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByRepairPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRepairPartitionContext {
	var p = new(AlterByRepairPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRepairPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRepairPartitionContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *AlterByRepairPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByRepairPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByRepairPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByRepairPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByRepairPartition(s)
	}
}

func (s *AlterByRepairPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByRepairPartition(s)
	}
}

type AlterByExchangePartitionContext struct {
	*AlterSpecificationContext
	validationFormat antlr.Token
}

func NewAlterByExchangePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByExchangePartitionContext {
	var p = new(AlterByExchangePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByExchangePartitionContext) GetValidationFormat() antlr.Token {
	return s.validationFormat
}

func (s *AlterByExchangePartitionContext) SetValidationFormat(v antlr.Token) { s.validationFormat = v }

func (s *AlterByExchangePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByExchangePartitionContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *AlterByExchangePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByExchangePartitionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByExchangePartitionContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWITH)
}

func (s *AlterByExchangePartitionContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, i)
}

func (s *AlterByExchangePartitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AlterByExchangePartitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterByExchangePartitionContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AlterByExchangePartitionContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AlterByExchangePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByExchangePartition(s)
	}
}

func (s *AlterByExchangePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByExchangePartition(s)
	}
}

type AlterByAddIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByAddIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddIndexContext {
	var p = new(AlterByAddIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddIndexContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddIndex(s)
	}
}

func (s *AlterByAddIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddIndex(s)
	}
}

type AlterByDropColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropColumnContext {
	var p = new(AlterByDropColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropColumnContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropColumnContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByDropColumnContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *AlterByDropColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropColumn(s)
	}
}

func (s *AlterByDropColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropColumn(s)
	}
}

type AlterByImportPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByImportPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByImportPartitionContext {
	var p = new(AlterByImportPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByImportPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByImportPartitionContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AlterByImportPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByImportPartitionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByImportPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByImportPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByImportPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByImportPartition(s)
	}
}

func (s *AlterByImportPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByImportPartition(s)
	}
}

type AlterByChangeDefaultContext struct {
	*AlterSpecificationContext
}

func NewAlterByChangeDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByChangeDefaultContext {
	var p = new(AlterByChangeDefaultContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByChangeDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByChangeDefaultContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterByChangeDefaultContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByChangeDefaultContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByChangeDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByChangeDefaultContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *AlterByChangeDefaultContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByChangeDefaultContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByChangeDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByChangeDefault(s)
	}
}

func (s *AlterByChangeDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByChangeDefault(s)
	}
}

type AlterByForceContext struct {
	*AlterSpecificationContext
}

func NewAlterByForceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByForceContext {
	var p = new(AlterByForceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByForceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByForceContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *AlterByForceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByForce(s)
	}
}

func (s *AlterByForceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByForce(s)
	}
}

type AlterByDropPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropPartitionContext {
	var p = new(AlterByDropPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropPartitionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByDropPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByDropPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropPartition(s)
	}
}

func (s *AlterByDropPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropPartition(s)
	}
}

type AlterByAddSpecialIndexContext struct {
	*AlterSpecificationContext
	keyType     antlr.Token
	indexFormat antlr.Token
}

func NewAlterByAddSpecialIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddSpecialIndexContext {
	var p = new(AlterByAddSpecialIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddSpecialIndexContext) GetKeyType() antlr.Token { return s.keyType }

func (s *AlterByAddSpecialIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddSpecialIndexContext) SetKeyType(v antlr.Token) { s.keyType = v }

func (s *AlterByAddSpecialIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddSpecialIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddSpecialIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddSpecialIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddSpecialIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *AlterByAddSpecialIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *AlterByAddSpecialIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddSpecialIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddSpecialIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddSpecialIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddSpecialIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddSpecialIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddSpecialIndex(s)
	}
}

func (s *AlterByAddSpecialIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddSpecialIndex(s)
	}
}

type AlterByModifyColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByModifyColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByModifyColumnContext {
	var p = new(AlterByModifyColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByModifyColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByModifyColumnContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *AlterByModifyColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByModifyColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByModifyColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByModifyColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByModifyColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByModifyColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByModifyColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByModifyColumn(s)
	}
}

func (s *AlterByModifyColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByModifyColumn(s)
	}
}

type AlterByTableOptionContext struct {
	*AlterSpecificationContext
}

func NewAlterByTableOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByTableOptionContext {
	var p = new(AlterByTableOptionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByTableOptionContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *AlterByTableOptionContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *AlterByTableOptionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByTableOptionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByTableOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByTableOption(s)
	}
}

func (s *AlterByTableOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByTableOption(s)
	}
}

type AlterByDropPrimaryKeyContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropPrimaryKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropPrimaryKeyContext {
	var p = new(AlterByDropPrimaryKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropPrimaryKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropPrimaryKeyContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropPrimaryKeyContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AlterByDropPrimaryKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropPrimaryKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropPrimaryKey(s)
	}
}

func (s *AlterByDropPrimaryKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropPrimaryKey(s)
	}
}

type AlterByLockContext struct {
	*AlterSpecificationContext
	lockType antlr.Token
}

func NewAlterByLockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByLockContext {
	var p = new(AlterByLockContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByLockContext) GetLockType() antlr.Token { return s.lockType }

func (s *AlterByLockContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *AlterByLockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByLockContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *AlterByLockContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByLockContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AlterByLockContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *AlterByLockContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *AlterByLockContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterByLockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByLock(s)
	}
}

func (s *AlterByLockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByLock(s)
	}
}

type AlterByDiscardPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByDiscardPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDiscardPartitionContext {
	var p = new(AlterByDiscardPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDiscardPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDiscardPartitionContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AlterByDiscardPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByDiscardPartitionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByDiscardPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByDiscardPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByDiscardPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDiscardPartition(s)
	}
}

func (s *AlterByDiscardPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDiscardPartition(s)
	}
}

type AlterByDiscardTablespaceContext struct {
	*AlterSpecificationContext
}

func NewAlterByDiscardTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDiscardTablespaceContext {
	var p = new(AlterByDiscardTablespaceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDiscardTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDiscardTablespaceContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AlterByDiscardTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByDiscardTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDiscardTablespace(s)
	}
}

func (s *AlterByDiscardTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDiscardTablespace(s)
	}
}

type AlterByValidateContext struct {
	*AlterSpecificationContext
	validationFormat antlr.Token
}

func NewAlterByValidateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByValidateContext {
	var p = new(AlterByValidateContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByValidateContext) GetValidationFormat() antlr.Token { return s.validationFormat }

func (s *AlterByValidateContext) SetValidationFormat(v antlr.Token) { s.validationFormat = v }

func (s *AlterByValidateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByValidateContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AlterByValidateContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AlterByValidateContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterByValidateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByValidate(s)
	}
}

func (s *AlterByValidateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByValidate(s)
	}
}

type AlterByAddPrimaryKeyContext struct {
	*AlterSpecificationContext
	name  IUidContext
	index IUidContext
}

func NewAlterByAddPrimaryKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddPrimaryKeyContext {
	var p = new(AlterByAddPrimaryKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddPrimaryKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddPrimaryKeyContext) GetIndex() IUidContext { return s.index }

func (s *AlterByAddPrimaryKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddPrimaryKeyContext) SetIndex(v IUidContext) { s.index = v }

func (s *AlterByAddPrimaryKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddPrimaryKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddPrimaryKeyContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AlterByAddPrimaryKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddPrimaryKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddPrimaryKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddPrimaryKeyContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddPrimaryKeyContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddPrimaryKeyContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddPrimaryKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddPrimaryKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddPrimaryKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddPrimaryKey(s)
	}
}

func (s *AlterByAddPrimaryKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddPrimaryKey(s)
	}
}

type AlterByCheckPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByCheckPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByCheckPartitionContext {
	var p = new(AlterByCheckPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByCheckPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByCheckPartitionContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByCheckPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByCheckPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByCheckPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByCheckPartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByCheckPartition(s)
	}
}

func (s *AlterByCheckPartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByCheckPartition(s)
	}
}

type AlterByEnableKeysContext struct {
	*AlterSpecificationContext
}

func NewAlterByEnableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByEnableKeysContext {
	var p = new(AlterByEnableKeysContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByEnableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByEnableKeysContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *AlterByEnableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AlterByEnableKeysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByEnableKeys(s)
	}
}

func (s *AlterByEnableKeysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByEnableKeys(s)
	}
}

type AlterByReorganizePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByReorganizePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByReorganizePartitionContext {
	var p = new(AlterByReorganizePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByReorganizePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByReorganizePartitionContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *AlterByReorganizePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByReorganizePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByReorganizePartitionContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *AlterByReorganizePartitionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByReorganizePartitionContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByReorganizePartitionContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *AlterByReorganizePartitionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByReorganizePartitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByReorganizePartitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByReorganizePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByReorganizePartition(s)
	}
}

func (s *AlterByReorganizePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByReorganizePartition(s)
	}
}

type AlterBySetAlgorithmContext struct {
	*AlterSpecificationContext
	algType antlr.Token
}

func NewAlterBySetAlgorithmContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterBySetAlgorithmContext {
	var p = new(AlterBySetAlgorithmContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterBySetAlgorithmContext) GetAlgType() antlr.Token { return s.algType }

func (s *AlterBySetAlgorithmContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *AlterBySetAlgorithmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterBySetAlgorithmContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *AlterBySetAlgorithmContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterBySetAlgorithmContext) INSTANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANT, 0)
}

func (s *AlterBySetAlgorithmContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *AlterBySetAlgorithmContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *AlterBySetAlgorithmContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterBySetAlgorithmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterBySetAlgorithm(s)
	}
}

func (s *AlterBySetAlgorithmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterBySetAlgorithm(s)
	}
}

type AlterByAnalyzePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByAnalyzePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAnalyzePartitionContext {
	var p = new(AlterByAnalyzePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAnalyzePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAnalyzePartitionContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *AlterByAnalyzePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByAnalyzePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByAnalyzePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByAnalyzePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAnalyzePartition(s)
	}
}

func (s *AlterByAnalyzePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAnalyzePartition(s)
	}
}

type AlterByChangeColumnContext struct {
	*AlterSpecificationContext
	oldColumn   IUidContext
	newColumn   IUidContext
	afterColumn IUidContext
}

func NewAlterByChangeColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByChangeColumnContext {
	var p = new(AlterByChangeColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByChangeColumnContext) GetOldColumn() IUidContext { return s.oldColumn }

func (s *AlterByChangeColumnContext) GetNewColumn() IUidContext { return s.newColumn }

func (s *AlterByChangeColumnContext) GetAfterColumn() IUidContext { return s.afterColumn }

func (s *AlterByChangeColumnContext) SetOldColumn(v IUidContext) { s.oldColumn = v }

func (s *AlterByChangeColumnContext) SetNewColumn(v IUidContext) { s.newColumn = v }

func (s *AlterByChangeColumnContext) SetAfterColumn(v IUidContext) { s.afterColumn = v }

func (s *AlterByChangeColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByChangeColumnContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *AlterByChangeColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByChangeColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByChangeColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByChangeColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByChangeColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByChangeColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByChangeColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByChangeColumn(s)
	}
}

func (s *AlterByChangeColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByChangeColumn(s)
	}
}

type AlterByAddUniqueKeyContext struct {
	*AlterSpecificationContext
	name        IUidContext
	indexFormat antlr.Token
	indexName   IUidContext
}

func NewAlterByAddUniqueKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddUniqueKeyContext {
	var p = new(AlterByAddUniqueKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddUniqueKeyContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddUniqueKeyContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddUniqueKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddUniqueKeyContext) GetIndexName() IUidContext { return s.indexName }

func (s *AlterByAddUniqueKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddUniqueKeyContext) SetIndexName(v IUidContext) { s.indexName = v }

func (s *AlterByAddUniqueKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddUniqueKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddUniqueKeyContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *AlterByAddUniqueKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddUniqueKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddUniqueKeyContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddUniqueKeyContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddUniqueKeyContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddUniqueKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddUniqueKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddUniqueKeyContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddUniqueKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddUniqueKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddUniqueKey(s)
	}
}

func (s *AlterByAddUniqueKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddUniqueKey(s)
	}
}

type AlterByTruncatePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByTruncatePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByTruncatePartitionContext {
	var p = new(AlterByTruncatePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByTruncatePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByTruncatePartitionContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *AlterByTruncatePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByTruncatePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByTruncatePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByTruncatePartitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByTruncatePartition(s)
	}
}

func (s *AlterByTruncatePartitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByTruncatePartition(s)
	}
}

type AlterByDropIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByDropIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropIndexContext {
	var p = new(AlterByDropIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByDropIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByDropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByDropIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByDropIndex(s)
	}
}

func (s *AlterByDropIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByDropIndex(s)
	}
}

type AlterByAddColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddColumnContext {
	var p = new(AlterByAddColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddColumnContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByAddColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByAddColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByAddColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByAddColumnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByAddColumn(s)
	}
}

func (s *AlterByAddColumnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByAddColumn(s)
	}
}

type AlterByOrderContext struct {
	*AlterSpecificationContext
}

func NewAlterByOrderContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByOrderContext {
	var p = new(AlterByOrderContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByOrderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *AlterByOrderContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AlterByOrderContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByOrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterByOrder(s)
	}
}

func (s *AlterByOrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterByOrder(s)
	}
}

func (p *MySqlParser) AlterSpecification() (localctx IAlterSpecificationContext) {
	localctx = NewAlterSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MySqlParserRULE_alterSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2762)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 346, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterByTableOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2396)
			p.TableOption()
		}
		p.SetState(2403)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2398)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(2397)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(2400)
					p.TableOption()
				}

			}
			p.SetState(2405)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext())
		}

	case 2:
		localctx = NewAlterByAddColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2406)
			p.Match(MySqlParserADD)
		}
		p.SetState(2408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2407)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2410)
			p.Uid()
		}
		{
			p.SetState(2411)
			p.ColumnDefinition()
		}
		p.SetState(2415)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2412)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2413)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2414)
				p.Uid()
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 3:
		localctx = NewAlterByAddColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2417)
			p.Match(MySqlParserADD)
		}
		p.SetState(2419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2418)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2421)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2422)
			p.Uid()
		}
		{
			p.SetState(2423)
			p.ColumnDefinition()
		}
		p.SetState(2430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2424)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2425)
				p.Uid()
			}
			{
				p.SetState(2426)
				p.ColumnDefinition()
			}

			p.SetState(2432)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2433)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewAlterByAddIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2435)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2436)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByAddIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByAddIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2438)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2437)
				p.Uid()
			}

		}
		p.SetState(2441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2440)
				p.IndexType()
			}

		}
		{
			p.SetState(2443)
			p.IndexColumnNames()
		}
		p.SetState(2447)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(2444)
				p.IndexOption()
			}

			p.SetState(2449)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 5:
		localctx = NewAlterByAddPrimaryKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2450)
			p.Match(MySqlParserADD)
		}
		p.SetState(2455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2451)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2453)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2452)

					var _x = p.Uid()

					localctx.(*AlterByAddPrimaryKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2457)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2458)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2459)

				var _x = p.Uid()

				localctx.(*AlterByAddPrimaryKeyContext).index = _x
			}

		}
		p.SetState(2463)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2462)
				p.IndexType()
			}

		}
		{
			p.SetState(2465)
			p.IndexColumnNames()
		}
		p.SetState(2469)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(2466)
				p.IndexOption()
			}

			p.SetState(2471)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 6:
		localctx = NewAlterByAddUniqueKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2472)
			p.Match(MySqlParserADD)
		}
		p.SetState(2477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2473)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2475)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2474)

					var _x = p.Uid()

					localctx.(*AlterByAddUniqueKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2479)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(2481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(2480)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByAddUniqueKeyContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByAddUniqueKeyContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2483)

				var _x = p.Uid()

				localctx.(*AlterByAddUniqueKeyContext).indexName = _x
			}

		}
		p.SetState(2487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2486)
				p.IndexType()
			}

		}
		{
			p.SetState(2489)
			p.IndexColumnNames()
		}
		p.SetState(2493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(2490)
				p.IndexOption()
			}

			p.SetState(2495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 7:
		localctx = NewAlterByAddSpecialIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2496)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2497)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByAddSpecialIndexContext).keyType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByAddSpecialIndexContext).keyType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(2498)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByAddSpecialIndexContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByAddSpecialIndexContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2501)
				p.Uid()
			}

		}
		{
			p.SetState(2504)
			p.IndexColumnNames()
		}
		p.SetState(2508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserIGNORED || _la == MySqlParserNOT || _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCLUSTERING || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE {
			{
				p.SetState(2505)
				p.IndexOption()
			}

			p.SetState(2510)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 8:
		localctx = NewAlterByAddForeignKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2511)
			p.Match(MySqlParserADD)
		}
		p.SetState(2516)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2512)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2514)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2513)

					var _x = p.Uid()

					localctx.(*AlterByAddForeignKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2518)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2519)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2521)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2520)

				var _x = p.Uid()

				localctx.(*AlterByAddForeignKeyContext).indexName = _x
			}

		}
		{
			p.SetState(2523)
			p.IndexColumnNames()
		}
		{
			p.SetState(2524)
			p.ReferenceDefinition()
		}

	case 9:
		localctx = NewAlterByAddCheckTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2526)
			p.Match(MySqlParserADD)
		}
		p.SetState(2531)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2527)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2529)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2528)

					var _x = p.Uid()

					localctx.(*AlterByAddCheckTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(2533)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2534)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2535)
			p.expression(0)
		}
		{
			p.SetState(2536)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewAlterBySetAlgorithmContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2538)
			p.Match(MySqlParserALGORITHM)
		}
		p.SetState(2540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2539)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2542)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterBySetAlgorithmContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE || _la == MySqlParserINSTANT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterBySetAlgorithmContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 11:
		localctx = NewAlterByChangeDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2543)
			p.Match(MySqlParserALTER)
		}
		p.SetState(2545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2544)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2547)
			p.Uid()
		}
		p.SetState(2553)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSET:
			{
				p.SetState(2548)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(2549)
				p.Match(MySqlParserDEFAULT)
			}
			{
				p.SetState(2550)
				p.DefaultValue()
			}

		case MySqlParserDROP:
			{
				p.SetState(2551)
				p.Match(MySqlParserDROP)
			}
			{
				p.SetState(2552)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 12:
		localctx = NewAlterByChangeColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2555)
			p.Match(MySqlParserCHANGE)
		}
		p.SetState(2557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2556)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2559)

			var _x = p.Uid()

			localctx.(*AlterByChangeColumnContext).oldColumn = _x
		}
		{
			p.SetState(2560)

			var _x = p.Uid()

			localctx.(*AlterByChangeColumnContext).newColumn = _x
		}
		{
			p.SetState(2561)
			p.ColumnDefinition()
		}
		p.SetState(2565)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2562)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2563)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2564)

				var _x = p.Uid()

				localctx.(*AlterByChangeColumnContext).afterColumn = _x
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 13:
		localctx = NewAlterByRenameColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2567)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2568)
			p.Match(MySqlParserCOLUMN)
		}
		{
			p.SetState(2569)

			var _x = p.Uid()

			localctx.(*AlterByRenameColumnContext).oldColumn = _x
		}
		{
			p.SetState(2570)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2571)

			var _x = p.Uid()

			localctx.(*AlterByRenameColumnContext).newColumn = _x
		}

	case 14:
		localctx = NewAlterByLockContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2573)
			p.Match(MySqlParserLOCK)
		}
		p.SetState(2575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2574)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2577)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByLockContext).lockType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByLockContext).lockType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 15:
		localctx = NewAlterByModifyColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2578)
			p.Match(MySqlParserMODIFY)
		}
		p.SetState(2580)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2579)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2582)
			p.Uid()
		}
		{
			p.SetState(2583)
			p.ColumnDefinition()
		}
		p.SetState(2587)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2584)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2585)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2586)
				p.Uid()
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 16:
		localctx = NewAlterByDropColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2589)
			p.Match(MySqlParserDROP)
		}
		p.SetState(2591)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2590)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2593)
			p.Uid()
		}
		p.SetState(2595)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserRESTRICT {
			{
				p.SetState(2594)
				p.Match(MySqlParserRESTRICT)
			}

		}

	case 17:
		localctx = NewAlterByDropConstraintCheckContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2597)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2598)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHECK || _la == MySqlParserCONSTRAINT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2599)
			p.Uid()
		}

	case 18:
		localctx = NewAlterByDropPrimaryKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2600)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2601)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2602)
			p.Match(MySqlParserKEY)
		}

	case 19:
		localctx = NewAlterByRenameIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2603)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2604)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByRenameIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByRenameIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2605)
			p.Uid()
		}
		{
			p.SetState(2606)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2607)
			p.Uid()
		}

	case 20:
		localctx = NewAlterByAlterIndexVisibilityContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2609)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2610)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(2611)
			p.Uid()
		}
		{
			p.SetState(2612)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINVISIBLE || _la == MySqlParserVISIBLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 21:
		localctx = NewAlterByDropIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2614)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2615)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByDropIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByDropIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2616)
			p.Uid()
		}

	case 22:
		localctx = NewAlterByDropForeignKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2617)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2618)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2619)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2620)
			p.Uid()
		}

	case 23:
		localctx = NewAlterByDisableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2621)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(2622)
			p.Match(MySqlParserKEYS)
		}

	case 24:
		localctx = NewAlterByEnableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2623)
			p.Match(MySqlParserENABLE)
		}
		{
			p.SetState(2624)
			p.Match(MySqlParserKEYS)
		}

	case 25:
		localctx = NewAlterByRenameContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2625)
			p.Match(MySqlParserRENAME)
		}
		p.SetState(2627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS || _la == MySqlParserTO {
			{
				p.SetState(2626)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByRenameContext).renameFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserAS || _la == MySqlParserTO) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByRenameContext).renameFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2631)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2629)
				p.Uid()
			}

		case 2:
			{
				p.SetState(2630)
				p.FullId()
			}

		}

	case 26:
		localctx = NewAlterByOrderContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2633)
			p.Match(MySqlParserORDER)
		}
		{
			p.SetState(2634)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(2635)
			p.UidList()
		}

	case 27:
		localctx = NewAlterByConvertCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2636)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(2637)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2638)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2639)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2640)
			p.CharsetName()
		}
		p.SetState(2643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2641)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2642)
				p.CollationName()
			}

		}

	case 28:
		localctx = NewAlterByDefaultCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		p.SetState(2646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(2645)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(2648)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2649)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2650)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2651)
			p.CharsetName()
		}
		p.SetState(2655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2652)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2653)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(2654)
				p.CollationName()
			}

		}

	case 29:
		localctx = NewAlterByDiscardTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2657)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2658)
			p.Match(MySqlParserTABLESPACE)
		}

	case 30:
		localctx = NewAlterByImportTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2659)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2660)
			p.Match(MySqlParserTABLESPACE)
		}

	case 31:
		localctx = NewAlterByForceContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2661)
			p.Match(MySqlParserFORCE)
		}

	case 32:
		localctx = NewAlterByValidateContext(p, localctx)
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2662)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByValidateContext).validationFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByValidateContext).validationFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2663)
			p.Match(MySqlParserVALIDATION)
		}

	case 33:
		localctx = NewAlterByAddPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2664)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2665)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2666)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2667)
			p.PartitionDefinition()
		}
		p.SetState(2672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2668)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2669)
				p.PartitionDefinition()
			}

			p.SetState(2674)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2675)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 34:
		localctx = NewAlterByDropPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2677)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2678)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2679)
			p.UidList()
		}

	case 35:
		localctx = NewAlterByDiscardPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2680)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2681)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2684)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2682)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2683)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2686)
			p.Match(MySqlParserTABLESPACE)
		}

	case 36:
		localctx = NewAlterByImportPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2687)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2688)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2691)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2689)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2690)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2693)
			p.Match(MySqlParserTABLESPACE)
		}

	case 37:
		localctx = NewAlterByTruncatePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2694)
			p.Match(MySqlParserTRUNCATE)
		}
		{
			p.SetState(2695)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2698)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2696)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2697)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 38:
		localctx = NewAlterByCoalescePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2700)
			p.Match(MySqlParserCOALESCE)
		}
		{
			p.SetState(2701)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2702)
			p.DecimalLiteral()
		}

	case 39:
		localctx = NewAlterByReorganizePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2703)
			p.Match(MySqlParserREORGANIZE)
		}
		{
			p.SetState(2704)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2705)
			p.UidList()
		}
		{
			p.SetState(2706)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(2707)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2708)
			p.PartitionDefinition()
		}
		p.SetState(2713)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2709)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2710)
				p.PartitionDefinition()
			}

			p.SetState(2715)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2716)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 40:
		localctx = NewAlterByExchangePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(2718)
			p.Match(MySqlParserEXCHANGE)
		}
		{
			p.SetState(2719)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2720)
			p.Uid()
		}
		{
			p.SetState(2721)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(2722)
			p.Match(MySqlParserTABLE)
		}
		{
			p.SetState(2723)
			p.TableName()
		}
		p.SetState(2726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH || _la == MySqlParserWITHOUT {
			{
				p.SetState(2724)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByExchangePartitionContext).validationFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByExchangePartitionContext).validationFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2725)
				p.Match(MySqlParserVALIDATION)
			}

		}

	case 41:
		localctx = NewAlterByAnalyzePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(2728)
			p.Match(MySqlParserANALYZE)
		}
		{
			p.SetState(2729)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2732)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2730)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2731)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 42:
		localctx = NewAlterByCheckPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(2734)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2735)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2738)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2736)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2737)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 43:
		localctx = NewAlterByOptimizePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(2740)
			p.Match(MySqlParserOPTIMIZE)
		}
		{
			p.SetState(2741)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2744)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2742)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2743)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 44:
		localctx = NewAlterByRebuildPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(2746)
			p.Match(MySqlParserREBUILD)
		}
		{
			p.SetState(2747)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2750)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2748)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2749)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 45:
		localctx = NewAlterByRepairPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(2752)
			p.Match(MySqlParserREPAIR)
		}
		{
			p.SetState(2753)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2756)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2754)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2755)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 46:
		localctx = NewAlterByRemovePartitioningContext(p, localctx)
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(2758)
			p.Match(MySqlParserREMOVE)
		}
		{
			p.SetState(2759)
			p.Match(MySqlParserPARTITIONING)
		}

	case 47:
		localctx = NewAlterByUpgradePartitioningContext(p, localctx)
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(2760)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(2761)
			p.Match(MySqlParserPARTITIONING)
		}

	}

	return localctx
}

// IDropDatabaseContext is an interface to support dynamic dispatch.
type IDropDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDbFormat returns the dbFormat token.
	GetDbFormat() antlr.Token

	// SetDbFormat sets the dbFormat token.
	SetDbFormat(antlr.Token)

	// IsDropDatabaseContext differentiates from other interfaces.
	IsDropDatabaseContext()
}

type DropDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dbFormat antlr.Token
}

func NewEmptyDropDatabaseContext() *DropDatabaseContext {
	var p = new(DropDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropDatabase
	return p
}

func (*DropDatabaseContext) IsDropDatabaseContext() {}

func NewDropDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropDatabaseContext {
	var p = new(DropDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropDatabase

	return p
}

func (s *DropDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *DropDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *DropDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *DropDatabaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *DropDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *DropDatabaseContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropDatabaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropDatabase(s)
	}
}

func (s *DropDatabaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropDatabase(s)
	}
}

func (p *MySqlParser) DropDatabase() (localctx IDropDatabaseContext) {
	localctx = NewDropDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MySqlParserRULE_dropDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2764)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2765)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DropDatabaseContext).dbFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DropDatabaseContext).dbFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2767)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2766)
			p.IfExists()
		}

	}
	{
		p.SetState(2769)
		p.Uid()
	}

	return localctx
}

// IDropEventContext is an interface to support dynamic dispatch.
type IDropEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropEventContext differentiates from other interfaces.
	IsDropEventContext()
}

type DropEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropEventContext() *DropEventContext {
	var p = new(DropEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropEvent
	return p
}

func (*DropEventContext) IsDropEventContext() {}

func NewDropEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropEventContext {
	var p = new(DropEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropEvent

	return p
}

func (s *DropEventContext) GetParser() antlr.Parser { return s.parser }

func (s *DropEventContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *DropEventContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropEventContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropEventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropEvent(s)
	}
}

func (s *DropEventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropEvent(s)
	}
}

func (p *MySqlParser) DropEvent() (localctx IDropEventContext) {
	localctx = NewDropEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MySqlParserRULE_dropEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2771)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2772)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(2774)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2773)
			p.IfExists()
		}

	}
	{
		p.SetState(2776)
		p.FullId()
	}

	return localctx
}

// IDropIndexContext is an interface to support dynamic dispatch.
type IDropIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsDropIndexContext differentiates from other interfaces.
	IsDropIndexContext()
}

type DropIndexContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	intimeAction antlr.Token
	algType      antlr.Token
	lockType     antlr.Token
}

func NewEmptyDropIndexContext() *DropIndexContext {
	var p = new(DropIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropIndex
	return p
}

func (*DropIndexContext) IsDropIndexContext() {}

func NewDropIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropIndexContext {
	var p = new(DropIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropIndex

	return p
}

func (s *DropIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *DropIndexContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *DropIndexContext) GetAlgType() antlr.Token { return s.algType }

func (s *DropIndexContext) GetLockType() antlr.Token { return s.lockType }

func (s *DropIndexContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *DropIndexContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *DropIndexContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *DropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *DropIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DropIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DropIndexContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserALGORITHM)
}

func (s *DropIndexContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, i)
}

func (s *DropIndexContext) AllLOCK() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCK)
}

func (s *DropIndexContext) LOCK(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, i)
}

func (s *DropIndexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *DropIndexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *DropIndexContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *DropIndexContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *DropIndexContext) AllINPLACE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserINPLACE)
}

func (s *DropIndexContext) INPLACE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, i)
}

func (s *DropIndexContext) AllCOPY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOPY)
}

func (s *DropIndexContext) COPY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, i)
}

func (s *DropIndexContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNONE)
}

func (s *DropIndexContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, i)
}

func (s *DropIndexContext) AllSHARED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSHARED)
}

func (s *DropIndexContext) SHARED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, i)
}

func (s *DropIndexContext) AllEXCLUSIVE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEXCLUSIVE)
}

func (s *DropIndexContext) EXCLUSIVE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, i)
}

func (s *DropIndexContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *DropIndexContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *DropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropIndex(s)
	}
}

func (s *DropIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropIndex(s)
	}
}

func (p *MySqlParser) DropIndex() (localctx IDropIndexContext) {
	localctx = NewDropIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MySqlParserRULE_dropIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2778)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2779)
		p.Match(MySqlParserINDEX)
	}
	p.SetState(2781)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2780)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropIndexContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropIndexContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2783)
		p.Uid()
	}
	{
		p.SetState(2784)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(2785)
		p.TableName()
	}
	p.SetState(2798)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2796)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALGORITHM:
				{
					p.SetState(2786)
					p.Match(MySqlParserALGORITHM)
				}
				p.SetState(2788)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(2787)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(2790)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*DropIndexContext).algType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*DropIndexContext).algType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case MySqlParserLOCK:
				{
					p.SetState(2791)
					p.Match(MySqlParserLOCK)
				}
				p.SetState(2793)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(2792)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(2795)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*DropIndexContext).lockType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*DropIndexContext).lockType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(2800)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext())
	}

	return localctx
}

// IDropLogfileGroupContext is an interface to support dynamic dispatch.
type IDropLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropLogfileGroupContext differentiates from other interfaces.
	IsDropLogfileGroupContext()
}

type DropLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropLogfileGroupContext() *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropLogfileGroup
	return p
}

func (*DropLogfileGroupContext) IsDropLogfileGroupContext() {}

func NewDropLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropLogfileGroup

	return p
}

func (s *DropLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *DropLogfileGroupContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *DropLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *DropLogfileGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *DropLogfileGroupContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DropLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *DropLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropLogfileGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropLogfileGroup(s)
	}
}

func (s *DropLogfileGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropLogfileGroup(s)
	}
}

func (p *MySqlParser) DropLogfileGroup() (localctx IDropLogfileGroupContext) {
	localctx = NewDropLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MySqlParserRULE_dropLogfileGroup)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2801)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2802)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(2803)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(2804)
		p.Uid()
	}
	{
		p.SetState(2805)
		p.Match(MySqlParserENGINE)
	}
	{
		p.SetState(2806)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(2807)
		p.EngineName()
	}

	return localctx
}

// IDropProcedureContext is an interface to support dynamic dispatch.
type IDropProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropProcedureContext differentiates from other interfaces.
	IsDropProcedureContext()
}

type DropProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropProcedureContext() *DropProcedureContext {
	var p = new(DropProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropProcedure
	return p
}

func (*DropProcedureContext) IsDropProcedureContext() {}

func NewDropProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropProcedureContext {
	var p = new(DropProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropProcedure

	return p
}

func (s *DropProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *DropProcedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *DropProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropProcedureContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropProcedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropProcedure(s)
	}
}

func (s *DropProcedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropProcedure(s)
	}
}

func (p *MySqlParser) DropProcedure() (localctx IDropProcedureContext) {
	localctx = NewDropProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MySqlParserRULE_dropProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2809)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2810)
		p.Match(MySqlParserPROCEDURE)
	}
	p.SetState(2812)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2811)
			p.IfExists()
		}

	}
	{
		p.SetState(2814)
		p.FullId()
	}

	return localctx
}

// IDropFunctionContext is an interface to support dynamic dispatch.
type IDropFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropFunctionContext differentiates from other interfaces.
	IsDropFunctionContext()
}

type DropFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropFunctionContext() *DropFunctionContext {
	var p = new(DropFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropFunction
	return p
}

func (*DropFunctionContext) IsDropFunctionContext() {}

func NewDropFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropFunctionContext {
	var p = new(DropFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropFunction

	return p
}

func (s *DropFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *DropFunctionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *DropFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropFunctionContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropFunction(s)
	}
}

func (s *DropFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropFunction(s)
	}
}

func (p *MySqlParser) DropFunction() (localctx IDropFunctionContext) {
	localctx = NewDropFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MySqlParserRULE_dropFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2816)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2817)
		p.Match(MySqlParserFUNCTION)
	}
	p.SetState(2819)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2818)
			p.IfExists()
		}

	}
	{
		p.SetState(2821)
		p.FullId()
	}

	return localctx
}

// IDropServerContext is an interface to support dynamic dispatch.
type IDropServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropServerContext differentiates from other interfaces.
	IsDropServerContext()
}

type DropServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropServerContext() *DropServerContext {
	var p = new(DropServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropServer
	return p
}

func (*DropServerContext) IsDropServerContext() {}

func NewDropServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropServerContext {
	var p = new(DropServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropServer

	return p
}

func (s *DropServerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropServerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *DropServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropServerContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropServerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropServer(s)
	}
}

func (s *DropServerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropServer(s)
	}
}

func (p *MySqlParser) DropServer() (localctx IDropServerContext) {
	localctx = NewDropServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MySqlParserRULE_dropServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2823)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2824)
		p.Match(MySqlParserSERVER)
	}
	p.SetState(2826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2825)
			p.IfExists()
		}

	}
	{
		p.SetState(2828)
		p.Uid()
	}

	return localctx
}

// IDropTableContext is an interface to support dynamic dispatch.
type IDropTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropType returns the dropType token.
	GetDropType() antlr.Token

	// SetDropType sets the dropType token.
	SetDropType(antlr.Token)

	// IsDropTableContext differentiates from other interfaces.
	IsDropTableContext()
}

type DropTableContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dropType antlr.Token
}

func NewEmptyDropTableContext() *DropTableContext {
	var p = new(DropTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTable
	return p
}

func (*DropTableContext) IsDropTableContext() {}

func NewDropTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTableContext {
	var p = new(DropTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTable

	return p
}

func (s *DropTableContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTableContext) GetDropType() antlr.Token { return s.dropType }

func (s *DropTableContext) SetDropType(v antlr.Token) { s.dropType = v }

func (s *DropTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *DropTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *DropTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *DropTableContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropTableContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *DropTableContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *DropTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropTable(s)
	}
}

func (s *DropTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropTable(s)
	}
}

func (p *MySqlParser) DropTable() (localctx IDropTableContext) {
	localctx = NewDropTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MySqlParserRULE_dropTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2830)
		p.Match(MySqlParserDROP)
	}
	p.SetState(2832)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTEMPORARY {
		{
			p.SetState(2831)
			p.Match(MySqlParserTEMPORARY)
		}

	}
	{
		p.SetState(2834)
		p.Match(MySqlParserTABLE)
	}
	p.SetState(2836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2835)
			p.IfExists()
		}

	}
	{
		p.SetState(2838)
		p.Tables()
	}
	p.SetState(2840)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		{
			p.SetState(2839)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropTableContext).dropType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropTableContext).dropType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDropTablespaceContext is an interface to support dynamic dispatch.
type IDropTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTablespaceContext differentiates from other interfaces.
	IsDropTablespaceContext()
}

type DropTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTablespaceContext() *DropTablespaceContext {
	var p = new(DropTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTablespace
	return p
}

func (*DropTablespaceContext) IsDropTablespaceContext() {}

func NewDropTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTablespaceContext {
	var p = new(DropTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTablespace

	return p
}

func (s *DropTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *DropTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropTablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *DropTablespaceContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *DropTablespaceContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DropTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropTablespace(s)
	}
}

func (s *DropTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropTablespace(s)
	}
}

func (p *MySqlParser) DropTablespace() (localctx IDropTablespaceContext) {
	localctx = NewDropTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MySqlParserRULE_dropTablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2842)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2843)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2844)
		p.Uid()
	}
	p.SetState(2850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(2845)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(2847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2846)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2849)
			p.EngineName()
		}

	}

	return localctx
}

// IDropTriggerContext is an interface to support dynamic dispatch.
type IDropTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTriggerContext differentiates from other interfaces.
	IsDropTriggerContext()
}

type DropTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTriggerContext() *DropTriggerContext {
	var p = new(DropTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTrigger
	return p
}

func (*DropTriggerContext) IsDropTriggerContext() {}

func NewDropTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTriggerContext {
	var p = new(DropTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTrigger

	return p
}

func (s *DropTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTriggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *DropTriggerContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropTriggerContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropTrigger(s)
	}
}

func (s *DropTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropTrigger(s)
	}
}

func (p *MySqlParser) DropTrigger() (localctx IDropTriggerContext) {
	localctx = NewDropTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MySqlParserRULE_dropTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2852)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2853)
		p.Match(MySqlParserTRIGGER)
	}
	p.SetState(2855)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2854)
			p.IfExists()
		}

	}
	{
		p.SetState(2857)
		p.FullId()
	}

	return localctx
}

// IDropViewContext is an interface to support dynamic dispatch.
type IDropViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropType returns the dropType token.
	GetDropType() antlr.Token

	// SetDropType sets the dropType token.
	SetDropType(antlr.Token)

	// IsDropViewContext differentiates from other interfaces.
	IsDropViewContext()
}

type DropViewContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dropType antlr.Token
}

func NewEmptyDropViewContext() *DropViewContext {
	var p = new(DropViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropView
	return p
}

func (*DropViewContext) IsDropViewContext() {}

func NewDropViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropViewContext {
	var p = new(DropViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropView

	return p
}

func (s *DropViewContext) GetParser() antlr.Parser { return s.parser }

func (s *DropViewContext) GetDropType() antlr.Token { return s.dropType }

func (s *DropViewContext) SetDropType(v antlr.Token) { s.dropType = v }

func (s *DropViewContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *DropViewContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *DropViewContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropViewContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropViewContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DropViewContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DropViewContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *DropViewContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *DropViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropViewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropView(s)
	}
}

func (s *DropViewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropView(s)
	}
}

func (p *MySqlParser) DropView() (localctx IDropViewContext) {
	localctx = NewDropViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MySqlParserRULE_dropView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2859)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2860)
		p.Match(MySqlParserVIEW)
	}
	p.SetState(2862)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2861)
			p.IfExists()
		}

	}
	{
		p.SetState(2864)
		p.FullId()
	}
	p.SetState(2869)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2865)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2866)
			p.FullId()
		}

		p.SetState(2871)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2873)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		{
			p.SetState(2872)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropViewContext).dropType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropViewContext).dropType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IRenameTableContext is an interface to support dynamic dispatch.
type IRenameTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameTableContext differentiates from other interfaces.
	IsRenameTableContext()
}

type RenameTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameTableContext() *RenameTableContext {
	var p = new(RenameTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameTable
	return p
}

func (*RenameTableContext) IsRenameTableContext() {}

func NewRenameTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameTableContext {
	var p = new(RenameTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameTable

	return p
}

func (s *RenameTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameTableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *RenameTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *RenameTableContext) AllRenameTableClause() []IRenameTableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRenameTableClauseContext)(nil)).Elem())
	var tst = make([]IRenameTableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRenameTableClauseContext)
		}
	}

	return tst
}

func (s *RenameTableContext) RenameTableClause(i int) IRenameTableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameTableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRenameTableClauseContext)
}

func (s *RenameTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RenameTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RenameTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRenameTable(s)
	}
}

func (s *RenameTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRenameTable(s)
	}
}

func (p *MySqlParser) RenameTable() (localctx IRenameTableContext) {
	localctx = NewRenameTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MySqlParserRULE_renameTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2875)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(2876)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2877)
		p.RenameTableClause()
	}
	p.SetState(2882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2878)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2879)
			p.RenameTableClause()
		}

		p.SetState(2884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRenameTableClauseContext is an interface to support dynamic dispatch.
type IRenameTableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameTableClauseContext differentiates from other interfaces.
	IsRenameTableClauseContext()
}

type RenameTableClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameTableClauseContext() *RenameTableClauseContext {
	var p = new(RenameTableClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameTableClause
	return p
}

func (*RenameTableClauseContext) IsRenameTableClauseContext() {}

func NewRenameTableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameTableClauseContext {
	var p = new(RenameTableClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameTableClause

	return p
}

func (s *RenameTableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameTableClauseContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *RenameTableClauseContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *RenameTableClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RenameTableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameTableClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRenameTableClause(s)
	}
}

func (s *RenameTableClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRenameTableClause(s)
	}
}

func (p *MySqlParser) RenameTableClause() (localctx IRenameTableClauseContext) {
	localctx = NewRenameTableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MySqlParserRULE_renameTableClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2885)
		p.TableName()
	}
	{
		p.SetState(2886)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(2887)
		p.TableName()
	}

	return localctx
}

// ITruncateTableContext is an interface to support dynamic dispatch.
type ITruncateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncateTableContext differentiates from other interfaces.
	IsTruncateTableContext()
}

type TruncateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncateTableContext() *TruncateTableContext {
	var p = new(TruncateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_truncateTable
	return p
}

func (*TruncateTableContext) IsTruncateTableContext() {}

func NewTruncateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TruncateTableContext {
	var p = new(TruncateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_truncateTable

	return p
}

func (s *TruncateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *TruncateTableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *TruncateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TruncateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *TruncateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruncateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TruncateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTruncateTable(s)
	}
}

func (s *TruncateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTruncateTable(s)
	}
}

func (p *MySqlParser) TruncateTable() (localctx ITruncateTableContext) {
	localctx = NewTruncateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MySqlParserRULE_truncateTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2889)
		p.Match(MySqlParserTRUNCATE)
	}
	p.SetState(2891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTABLE {
		{
			p.SetState(2890)
			p.Match(MySqlParserTABLE)
		}

	}
	{
		p.SetState(2893)
		p.TableName()
	}

	return localctx
}

// ICallStatementContext is an interface to support dynamic dispatch.
type ICallStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallStatementContext differentiates from other interfaces.
	IsCallStatementContext()
}

type CallStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallStatementContext() *CallStatementContext {
	var p = new(CallStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_callStatement
	return p
}

func (*CallStatementContext) IsCallStatementContext() {}

func NewCallStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallStatementContext {
	var p = new(CallStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_callStatement

	return p
}

func (s *CallStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallStatementContext) CALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCALL, 0)
}

func (s *CallStatementContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CallStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CallStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CallStatementContext) Constants() IConstantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantsContext)
}

func (s *CallStatementContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *CallStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCallStatement(s)
	}
}

func (s *CallStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCallStatement(s)
	}
}

func (p *MySqlParser) CallStatement() (localctx ICallStatementContext) {
	localctx = NewCallStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MySqlParserRULE_callStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2895)
		p.Match(MySqlParserCALL)
	}
	{
		p.SetState(2896)
		p.FullId()
	}
	p.SetState(2903)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2897)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(2900)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2898)
				p.Constants()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2899)
				p.Expressions()
			}

		}
		{
			p.SetState(2902)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) SingleDeleteStatement() ISingleDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleDeleteStatementContext)
}

func (s *DeleteStatementContext) MultipleDeleteStatement() IMultipleDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleDeleteStatementContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (p *MySqlParser) DeleteStatement() (localctx IDeleteStatementContext) {
	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MySqlParserRULE_deleteStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2907)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2905)
			p.SingleDeleteStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2906)
			p.MultipleDeleteStatement()
		}

	}

	return localctx
}

// IDoStatementContext is an interface to support dynamic dispatch.
type IDoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoStatementContext differentiates from other interfaces.
	IsDoStatementContext()
}

type DoStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoStatementContext() *DoStatementContext {
	var p = new(DoStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_doStatement
	return p
}

func (*DoStatementContext) IsDoStatementContext() {}

func NewDoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoStatementContext {
	var p = new(DoStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_doStatement

	return p
}

func (s *DoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *DoStatementContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *DoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDoStatement(s)
	}
}

func (s *DoStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDoStatement(s)
	}
}

func (p *MySqlParser) DoStatement() (localctx IDoStatementContext) {
	localctx = NewDoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MySqlParserRULE_doStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2909)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(2910)
		p.Expressions()
	}

	return localctx
}

// IHandlerStatementContext is an interface to support dynamic dispatch.
type IHandlerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerStatementContext differentiates from other interfaces.
	IsHandlerStatementContext()
}

type HandlerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerStatementContext() *HandlerStatementContext {
	var p = new(HandlerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerStatement
	return p
}

func (*HandlerStatementContext) IsHandlerStatementContext() {}

func NewHandlerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerStatementContext {
	var p = new(HandlerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerStatement

	return p
}

func (s *HandlerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerStatementContext) HandlerOpenStatement() IHandlerOpenStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerOpenStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerOpenStatementContext)
}

func (s *HandlerStatementContext) HandlerReadIndexStatement() IHandlerReadIndexStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadIndexStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadIndexStatementContext)
}

func (s *HandlerStatementContext) HandlerReadStatement() IHandlerReadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadStatementContext)
}

func (s *HandlerStatementContext) HandlerCloseStatement() IHandlerCloseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerCloseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerCloseStatementContext)
}

func (s *HandlerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerStatement(s)
	}
}

func (s *HandlerStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerStatement(s)
	}
}

func (p *MySqlParser) HandlerStatement() (localctx IHandlerStatementContext) {
	localctx = NewHandlerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MySqlParserRULE_handlerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2916)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 371, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2912)
			p.HandlerOpenStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2913)
			p.HandlerReadIndexStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2914)
			p.HandlerReadStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2915)
			p.HandlerCloseStatement()
		}

	}

	return localctx
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// GetPartitions returns the partitions rule contexts.
	GetPartitions() IUidListContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IUidListContext

	// GetSetFirst returns the setFirst rule contexts.
	GetSetFirst() IUpdatedElementContext

	// Get_updatedElement returns the _updatedElement rule contexts.
	Get_updatedElement() IUpdatedElementContext

	// GetDuplicatedFirst returns the duplicatedFirst rule contexts.
	GetDuplicatedFirst() IUpdatedElementContext

	// SetPartitions sets the partitions rule contexts.
	SetPartitions(IUidListContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IUidListContext)

	// SetSetFirst sets the setFirst rule contexts.
	SetSetFirst(IUpdatedElementContext)

	// Set_updatedElement sets the _updatedElement rule contexts.
	Set_updatedElement(IUpdatedElementContext)

	// SetDuplicatedFirst sets the duplicatedFirst rule contexts.
	SetDuplicatedFirst(IUpdatedElementContext)

	// GetSetElements returns the setElements rule context list.
	GetSetElements() []IUpdatedElementContext

	// GetDuplicatedElements returns the duplicatedElements rule context list.
	GetDuplicatedElements() []IUpdatedElementContext

	// SetSetElements sets the setElements rule context list.
	SetSetElements([]IUpdatedElementContext)

	// SetDuplicatedElements sets the duplicatedElements rule context list.
	SetDuplicatedElements([]IUpdatedElementContext)

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	priority           antlr.Token
	partitions         IUidListContext
	columns            IUidListContext
	setFirst           IUpdatedElementContext
	_updatedElement    IUpdatedElementContext
	setElements        []IUpdatedElementContext
	duplicatedFirst    IUpdatedElementContext
	duplicatedElements []IUpdatedElementContext
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insertStatement
	return p
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *InsertStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *InsertStatementContext) GetPartitions() IUidListContext { return s.partitions }

func (s *InsertStatementContext) GetColumns() IUidListContext { return s.columns }

func (s *InsertStatementContext) GetSetFirst() IUpdatedElementContext { return s.setFirst }

func (s *InsertStatementContext) Get_updatedElement() IUpdatedElementContext {
	return s._updatedElement
}

func (s *InsertStatementContext) GetDuplicatedFirst() IUpdatedElementContext {
	return s.duplicatedFirst
}

func (s *InsertStatementContext) SetPartitions(v IUidListContext) { s.partitions = v }

func (s *InsertStatementContext) SetColumns(v IUidListContext) { s.columns = v }

func (s *InsertStatementContext) SetSetFirst(v IUpdatedElementContext) { s.setFirst = v }

func (s *InsertStatementContext) Set_updatedElement(v IUpdatedElementContext) { s._updatedElement = v }

func (s *InsertStatementContext) SetDuplicatedFirst(v IUpdatedElementContext) { s.duplicatedFirst = v }

func (s *InsertStatementContext) GetSetElements() []IUpdatedElementContext { return s.setElements }

func (s *InsertStatementContext) GetDuplicatedElements() []IUpdatedElementContext {
	return s.duplicatedElements
}

func (s *InsertStatementContext) SetSetElements(v []IUpdatedElementContext) { s.setElements = v }

func (s *InsertStatementContext) SetDuplicatedElements(v []IUpdatedElementContext) {
	s.duplicatedElements = v
}

func (s *InsertStatementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *InsertStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertStatementContext) InsertStatementValue() IInsertStatementValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementValueContext)
}

func (s *InsertStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *InsertStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *InsertStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *InsertStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *InsertStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *InsertStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *InsertStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *InsertStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *InsertStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *InsertStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *InsertStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *InsertStatementContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *InsertStatementContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *InsertStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *InsertStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *InsertStatementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *InsertStatementContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *InsertStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *InsertStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *InsertStatementContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *InsertStatementContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (p *MySqlParser) InsertStatement() (localctx IInsertStatementContext) {
	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MySqlParserRULE_insertStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2918)
		p.Match(MySqlParserINSERT)
	}
	p.SetState(2920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2919)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*InsertStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*InsertStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2923)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2922)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(2926)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(2925)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(2928)
		p.TableName()
	}
	p.SetState(2935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2929)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2930)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(2932)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2931)

				var _x = p.UidList()

				localctx.(*InsertStatementContext).partitions = _x
			}

		}
		{
			p.SetState(2934)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2953)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(2941)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2937)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2938)

				var _x = p.UidList()

				localctx.(*InsertStatementContext).columns = _x
			}
			{
				p.SetState(2939)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(2943)
			p.InsertStatementValue()
		}

	case MySqlParserSET:
		{
			p.SetState(2944)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2945)

			var _x = p.UpdatedElement()

			localctx.(*InsertStatementContext).setFirst = _x
		}
		p.SetState(2950)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2946)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2947)

				var _x = p.UpdatedElement()

				localctx.(*InsertStatementContext)._updatedElement = _x
			}
			localctx.(*InsertStatementContext).setElements = append(localctx.(*InsertStatementContext).setElements, localctx.(*InsertStatementContext)._updatedElement)

			p.SetState(2952)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(2955)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2956)
			p.Match(MySqlParserDUPLICATE)
		}
		{
			p.SetState(2957)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2958)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(2959)

			var _x = p.UpdatedElement()

			localctx.(*InsertStatementContext).duplicatedFirst = _x
		}
		p.SetState(2964)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2960)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2961)

				var _x = p.UpdatedElement()

				localctx.(*InsertStatementContext)._updatedElement = _x
			}
			localctx.(*InsertStatementContext).duplicatedElements = append(localctx.(*InsertStatementContext).duplicatedElements, localctx.(*InsertStatementContext)._updatedElement)

			p.SetState(2966)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoadDataStatementContext is an interface to support dynamic dispatch.
type ILoadDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// GetFilename returns the filename token.
	GetFilename() antlr.Token

	// GetViolation returns the violation token.
	GetViolation() antlr.Token

	// GetFieldsFormat returns the fieldsFormat token.
	GetFieldsFormat() antlr.Token

	// GetLinesFormat returns the linesFormat token.
	GetLinesFormat() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// SetFilename sets the filename token.
	SetFilename(antlr.Token)

	// SetViolation sets the violation token.
	SetViolation(antlr.Token)

	// SetFieldsFormat sets the fieldsFormat token.
	SetFieldsFormat(antlr.Token)

	// SetLinesFormat sets the linesFormat token.
	SetLinesFormat(antlr.Token)

	// GetCharset returns the charset rule contexts.
	GetCharset() ICharsetNameContext

	// SetCharset sets the charset rule contexts.
	SetCharset(ICharsetNameContext)

	// IsLoadDataStatementContext differentiates from other interfaces.
	IsLoadDataStatementContext()
}

type LoadDataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	priority     antlr.Token
	filename     antlr.Token
	violation    antlr.Token
	charset      ICharsetNameContext
	fieldsFormat antlr.Token
	linesFormat  antlr.Token
}

func NewEmptyLoadDataStatementContext() *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadDataStatement
	return p
}

func (*LoadDataStatementContext) IsLoadDataStatementContext() {}

func NewLoadDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadDataStatement

	return p
}

func (s *LoadDataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadDataStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *LoadDataStatementContext) GetFilename() antlr.Token { return s.filename }

func (s *LoadDataStatementContext) GetViolation() antlr.Token { return s.violation }

func (s *LoadDataStatementContext) GetFieldsFormat() antlr.Token { return s.fieldsFormat }

func (s *LoadDataStatementContext) GetLinesFormat() antlr.Token { return s.linesFormat }

func (s *LoadDataStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *LoadDataStatementContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *LoadDataStatementContext) SetViolation(v antlr.Token) { s.violation = v }

func (s *LoadDataStatementContext) SetFieldsFormat(v antlr.Token) { s.fieldsFormat = v }

func (s *LoadDataStatementContext) SetLinesFormat(v antlr.Token) { s.linesFormat = v }

func (s *LoadDataStatementContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *LoadDataStatementContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *LoadDataStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadDataStatementContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *LoadDataStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *LoadDataStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadDataStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *LoadDataStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadDataStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *LoadDataStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LoadDataStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *LoadDataStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *LoadDataStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *LoadDataStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *LoadDataStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *LoadDataStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *LoadDataStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *LoadDataStatementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *LoadDataStatementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *LoadDataStatementContext) AllLINES() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLINES)
}

func (s *LoadDataStatementContext) LINES(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, i)
}

func (s *LoadDataStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *LoadDataStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *LoadDataStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LoadDataStatementContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *LoadDataStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *LoadDataStatementContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LoadDataStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LoadDataStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *LoadDataStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *LoadDataStatementContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *LoadDataStatementContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *LoadDataStatementContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *LoadDataStatementContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *LoadDataStatementContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *LoadDataStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadDataStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadDataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadDataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadDataStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoadDataStatement(s)
	}
}

func (s *LoadDataStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoadDataStatement(s)
	}
}

func (p *MySqlParser) LoadDataStatement() (localctx ILoadDataStatementContext) {
	localctx = NewLoadDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MySqlParserRULE_loadDataStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2969)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(2970)
		p.Match(MySqlParserDATA)
	}
	p.SetState(2972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		{
			p.SetState(2971)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(2974)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(2977)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(2978)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*LoadDataStatementContext).filename = _m
	}
	p.SetState(2980)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		{
			p.SetState(2979)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).violation = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).violation = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2982)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(2983)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2984)
		p.TableName()
	}
	p.SetState(2990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2985)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2986)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2987)
			p.UidList()
		}
		{
			p.SetState(2988)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(2992)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2993)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2994)

			var _x = p.CharsetName()

			localctx.(*LoadDataStatementContext).charset = _x
		}

	}
	p.SetState(3003)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS {
		{
			p.SetState(2997)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).fieldsFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).fieldsFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserENCLOSED || _la == MySqlParserESCAPED || _la == MySqlParserOPTIONALLY || _la == MySqlParserTERMINATED {
			{
				p.SetState(2998)
				p.SelectFieldsInto()
			}

			p.SetState(3001)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(3011)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLINES {
		{
			p.SetState(3005)
			p.Match(MySqlParserLINES)
		}
		p.SetState(3007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserSTARTING || _la == MySqlParserTERMINATED {
			{
				p.SetState(3006)
				p.SelectLinesInto()
			}

			p.SetState(3009)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(3017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3013)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(3014)
			p.DecimalLiteral()
		}
		{
			p.SetState(3015)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).linesFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).linesFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3030)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 393, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3019)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3020)
			p.AssignmentField()
		}
		p.SetState(3025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3021)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3022)
				p.AssignmentField()
			}

			p.SetState(3027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3028)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3041)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 395, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3032)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(3033)
			p.UpdatedElement()
		}
		p.SetState(3038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3034)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3035)
				p.UpdatedElement()
			}

			p.SetState(3040)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoadXmlStatementContext is an interface to support dynamic dispatch.
type ILoadXmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// GetFilename returns the filename token.
	GetFilename() antlr.Token

	// GetViolation returns the violation token.
	GetViolation() antlr.Token

	// GetTag returns the tag token.
	GetTag() antlr.Token

	// GetLinesFormat returns the linesFormat token.
	GetLinesFormat() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// SetFilename sets the filename token.
	SetFilename(antlr.Token)

	// SetViolation sets the violation token.
	SetViolation(antlr.Token)

	// SetTag sets the tag token.
	SetTag(antlr.Token)

	// SetLinesFormat sets the linesFormat token.
	SetLinesFormat(antlr.Token)

	// GetCharset returns the charset rule contexts.
	GetCharset() ICharsetNameContext

	// SetCharset sets the charset rule contexts.
	SetCharset(ICharsetNameContext)

	// IsLoadXmlStatementContext differentiates from other interfaces.
	IsLoadXmlStatementContext()
}

type LoadXmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	priority    antlr.Token
	filename    antlr.Token
	violation   antlr.Token
	charset     ICharsetNameContext
	tag         antlr.Token
	linesFormat antlr.Token
}

func NewEmptyLoadXmlStatementContext() *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadXmlStatement
	return p
}

func (*LoadXmlStatementContext) IsLoadXmlStatementContext() {}

func NewLoadXmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadXmlStatement

	return p
}

func (s *LoadXmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadXmlStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *LoadXmlStatementContext) GetFilename() antlr.Token { return s.filename }

func (s *LoadXmlStatementContext) GetViolation() antlr.Token { return s.violation }

func (s *LoadXmlStatementContext) GetTag() antlr.Token { return s.tag }

func (s *LoadXmlStatementContext) GetLinesFormat() antlr.Token { return s.linesFormat }

func (s *LoadXmlStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *LoadXmlStatementContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *LoadXmlStatementContext) SetViolation(v antlr.Token) { s.violation = v }

func (s *LoadXmlStatementContext) SetTag(v antlr.Token) { s.tag = v }

func (s *LoadXmlStatementContext) SetLinesFormat(v antlr.Token) { s.linesFormat = v }

func (s *LoadXmlStatementContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *LoadXmlStatementContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *LoadXmlStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadXmlStatementContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *LoadXmlStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *LoadXmlStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadXmlStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *LoadXmlStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadXmlStatementContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *LoadXmlStatementContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *LoadXmlStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LoadXmlStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *LoadXmlStatementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *LoadXmlStatementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *LoadXmlStatementContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserROWS)
}

func (s *LoadXmlStatementContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, i)
}

func (s *LoadXmlStatementContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *LoadXmlStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *LoadXmlStatementContext) LESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, 0)
}

func (s *LoadXmlStatementContext) GREATER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, 0)
}

func (s *LoadXmlStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *LoadXmlStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *LoadXmlStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LoadXmlStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LoadXmlStatementContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *LoadXmlStatementContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *LoadXmlStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LoadXmlStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *LoadXmlStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *LoadXmlStatementContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LoadXmlStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LoadXmlStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *LoadXmlStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *LoadXmlStatementContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *LoadXmlStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadXmlStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadXmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadXmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadXmlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoadXmlStatement(s)
	}
}

func (s *LoadXmlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoadXmlStatement(s)
	}
}

func (p *MySqlParser) LoadXmlStatement() (localctx ILoadXmlStatementContext) {
	localctx = NewLoadXmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MySqlParserRULE_loadXmlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3043)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(3044)
		p.Match(MySqlParserXML)
	}
	p.SetState(3046)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		{
			p.SetState(3045)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(3048)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(3051)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(3052)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*LoadXmlStatementContext).filename = _m
	}
	p.SetState(3054)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		{
			p.SetState(3053)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).violation = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).violation = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3056)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(3057)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(3058)
		p.TableName()
	}
	p.SetState(3062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(3059)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(3060)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(3061)

			var _x = p.CharsetName()

			localctx.(*LoadXmlStatementContext).charset = _x
		}

	}
	p.SetState(3070)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserROWS {
		{
			p.SetState(3064)
			p.Match(MySqlParserROWS)
		}
		{
			p.SetState(3065)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(3066)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3067)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(3068)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*LoadXmlStatementContext).tag = _m
		}
		{
			p.SetState(3069)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}
	p.SetState(3076)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3072)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(3073)
			p.DecimalLiteral()
		}
		{
			p.SetState(3074)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).linesFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).linesFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3089)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3078)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3079)
			p.AssignmentField()
		}
		p.SetState(3084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3080)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3081)
				p.AssignmentField()
			}

			p.SetState(3086)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3087)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3100)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 405, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3091)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(3092)
			p.UpdatedElement()
		}
		p.SetState(3097)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3093)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3094)
				p.UpdatedElement()
			}

			p.SetState(3099)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IReplaceStatementContext is an interface to support dynamic dispatch.
type IReplaceStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// GetPartitions returns the partitions rule contexts.
	GetPartitions() IUidListContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IUidListContext

	// GetSetFirst returns the setFirst rule contexts.
	GetSetFirst() IUpdatedElementContext

	// Get_updatedElement returns the _updatedElement rule contexts.
	Get_updatedElement() IUpdatedElementContext

	// SetPartitions sets the partitions rule contexts.
	SetPartitions(IUidListContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IUidListContext)

	// SetSetFirst sets the setFirst rule contexts.
	SetSetFirst(IUpdatedElementContext)

	// Set_updatedElement sets the _updatedElement rule contexts.
	Set_updatedElement(IUpdatedElementContext)

	// GetSetElements returns the setElements rule context list.
	GetSetElements() []IUpdatedElementContext

	// SetSetElements sets the setElements rule context list.
	SetSetElements([]IUpdatedElementContext)

	// IsReplaceStatementContext differentiates from other interfaces.
	IsReplaceStatementContext()
}

type ReplaceStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	priority        antlr.Token
	partitions      IUidListContext
	columns         IUidListContext
	setFirst        IUpdatedElementContext
	_updatedElement IUpdatedElementContext
	setElements     []IUpdatedElementContext
}

func NewEmptyReplaceStatementContext() *ReplaceStatementContext {
	var p = new(ReplaceStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replaceStatement
	return p
}

func (*ReplaceStatementContext) IsReplaceStatementContext() {}

func NewReplaceStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceStatementContext {
	var p = new(ReplaceStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replaceStatement

	return p
}

func (s *ReplaceStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *ReplaceStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *ReplaceStatementContext) GetPartitions() IUidListContext { return s.partitions }

func (s *ReplaceStatementContext) GetColumns() IUidListContext { return s.columns }

func (s *ReplaceStatementContext) GetSetFirst() IUpdatedElementContext { return s.setFirst }

func (s *ReplaceStatementContext) Get_updatedElement() IUpdatedElementContext {
	return s._updatedElement
}

func (s *ReplaceStatementContext) SetPartitions(v IUidListContext) { s.partitions = v }

func (s *ReplaceStatementContext) SetColumns(v IUidListContext) { s.columns = v }

func (s *ReplaceStatementContext) SetSetFirst(v IUpdatedElementContext) { s.setFirst = v }

func (s *ReplaceStatementContext) Set_updatedElement(v IUpdatedElementContext) { s._updatedElement = v }

func (s *ReplaceStatementContext) GetSetElements() []IUpdatedElementContext { return s.setElements }

func (s *ReplaceStatementContext) SetSetElements(v []IUpdatedElementContext) { s.setElements = v }

func (s *ReplaceStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *ReplaceStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReplaceStatementContext) InsertStatementValue() IInsertStatementValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementValueContext)
}

func (s *ReplaceStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ReplaceStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *ReplaceStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *ReplaceStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *ReplaceStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *ReplaceStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *ReplaceStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *ReplaceStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *ReplaceStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *ReplaceStatementContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *ReplaceStatementContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *ReplaceStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *ReplaceStatementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *ReplaceStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ReplaceStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ReplaceStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplaceStatement(s)
	}
}

func (s *ReplaceStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplaceStatement(s)
	}
}

func (p *MySqlParser) ReplaceStatement() (localctx IReplaceStatementContext) {
	localctx = NewReplaceStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MySqlParserRULE_replaceStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3102)
		p.Match(MySqlParserREPLACE)
	}
	p.SetState(3104)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3103)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReplaceStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReplaceStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(3106)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(3109)
		p.TableName()
	}
	p.SetState(3115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(3110)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(3111)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3112)

			var _x = p.UidList()

			localctx.(*ReplaceStatementContext).partitions = _x
		}
		{
			p.SetState(3113)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3133)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(3121)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 409, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3117)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3118)

				var _x = p.UidList()

				localctx.(*ReplaceStatementContext).columns = _x
			}
			{
				p.SetState(3119)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(3123)
			p.InsertStatementValue()
		}

	case MySqlParserSET:
		{
			p.SetState(3124)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(3125)

			var _x = p.UpdatedElement()

			localctx.(*ReplaceStatementContext).setFirst = _x
		}
		p.SetState(3130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3126)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3127)

				var _x = p.UpdatedElement()

				localctx.(*ReplaceStatementContext)._updatedElement = _x
			}
			localctx.(*ReplaceStatementContext).setElements = append(localctx.(*ReplaceStatementContext).setElements, localctx.(*ReplaceStatementContext)._updatedElement)

			p.SetState(3132)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectStatement
	return p
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) CopyFrom(ctx *SelectStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnionSelectContext struct {
	*SelectStatementContext
	unionType antlr.Token
}

func NewUnionSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionSelectContext {
	var p = new(UnionSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *UnionSelectContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionSelectContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionSelectContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *UnionSelectContext) AllUnionStatement() []IUnionStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionStatementContext)(nil)).Elem())
	var tst = make([]IUnionStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionStatementContext)
		}
	}

	return tst
}

func (s *UnionSelectContext) UnionStatement(i int) IUnionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionStatementContext)
}

func (s *UnionSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionSelectContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *UnionSelectContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *UnionSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *UnionSelectContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *UnionSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *UnionSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionSelect(s)
	}
}

func (s *UnionSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionSelect(s)
	}
}

type UnionParenthesisSelectContext struct {
	*SelectStatementContext
	unionType antlr.Token
}

func NewUnionParenthesisSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionParenthesisSelectContext {
	var p = new(UnionParenthesisSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *UnionParenthesisSelectContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionParenthesisSelectContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionParenthesisSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionParenthesisSelectContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionParenthesisSelectContext) AllUnionParenthesis() []IUnionParenthesisContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionParenthesisContext)(nil)).Elem())
	var tst = make([]IUnionParenthesisContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionParenthesisContext)
		}
	}

	return tst
}

func (s *UnionParenthesisSelectContext) UnionParenthesis(i int) IUnionParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionParenthesisContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionParenthesisContext)
}

func (s *UnionParenthesisSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionParenthesisSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *UnionParenthesisSelectContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *UnionParenthesisSelectContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *UnionParenthesisSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *UnionParenthesisSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionParenthesisSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionParenthesisSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionParenthesisSelect(s)
	}
}

func (s *UnionParenthesisSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionParenthesisSelect(s)
	}
}

type SimpleSelectContext struct {
	*SelectStatementContext
}

func NewSimpleSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleSelectContext {
	var p = new(SimpleSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *SimpleSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleSelectContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *SimpleSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *SimpleSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleSelect(s)
	}
}

func (s *SimpleSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleSelect(s)
	}
}

type ParenthesisSelectContext struct {
	*SelectStatementContext
}

func NewParenthesisSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesisSelectContext {
	var p = new(ParenthesisSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *ParenthesisSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesisSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *ParenthesisSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *ParenthesisSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterParenthesisSelect(s)
	}
}

func (s *ParenthesisSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitParenthesisSelect(s)
	}
}

func (p *MySqlParser) SelectStatement() (localctx ISelectStatementContext) {
	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MySqlParserRULE_selectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3190)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 427, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3135)
			p.QuerySpecification()
		}
		p.SetState(3137)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 412, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3136)
				p.LockClause()
			}

		}

	case 2:
		localctx = NewParenthesisSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3139)
			p.QueryExpression()
		}
		p.SetState(3141)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3140)
				p.LockClause()
			}

		}

	case 3:
		localctx = NewUnionSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3143)
			p.QuerySpecificationNointo()
		}
		p.SetState(3145)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3144)
					p.UnionStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3147)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext())
		}
		p.SetState(3157)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(3149)
				p.Match(MySqlParserUNION)
			}
			p.SetState(3151)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				{
					p.SetState(3150)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*UnionSelectContext).unionType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*UnionSelectContext).unionType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(3155)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserSELECT:
				{
					p.SetState(3153)
					p.QuerySpecification()
				}

			case MySqlParserLR_BRACKET:
				{
					p.SetState(3154)
					p.QueryExpression()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3160)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3159)
				p.OrderByClause()
			}

		}
		p.SetState(3163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(3162)
				p.LimitClause()
			}

		}
		p.SetState(3166)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 420, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3165)
				p.LockClause()
			}

		}

	case 4:
		localctx = NewUnionParenthesisSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3168)
			p.QueryExpressionNointo()
		}
		p.SetState(3170)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3169)
					p.UnionParenthesis()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3172)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext())
		}
		p.SetState(3179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(3174)
				p.Match(MySqlParserUNION)
			}
			p.SetState(3176)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				{
					p.SetState(3175)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*UnionParenthesisSelectContext).unionType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*UnionParenthesisSelectContext).unionType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(3178)
				p.QueryExpression()
			}

		}
		p.SetState(3182)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3181)
				p.OrderByClause()
			}

		}
		p.SetState(3185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(3184)
				p.LimitClause()
			}

		}
		p.SetState(3188)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3187)
				p.LockClause()
			}

		}

	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) SingleUpdateStatement() ISingleUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleUpdateStatementContext)
}

func (s *UpdateStatementContext) MultipleUpdateStatement() IMultipleUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleUpdateStatementContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (p *MySqlParser) UpdateStatement() (localctx IUpdateStatementContext) {
	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MySqlParserRULE_updateStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3194)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3192)
			p.SingleUpdateStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3193)
			p.MultipleUpdateStatement()
		}

	}

	return localctx
}

// IInsertStatementValueContext is an interface to support dynamic dispatch.
type IInsertStatementValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInsertFormat returns the insertFormat token.
	GetInsertFormat() antlr.Token

	// SetInsertFormat sets the insertFormat token.
	SetInsertFormat(antlr.Token)

	// IsInsertStatementValueContext differentiates from other interfaces.
	IsInsertStatementValueContext()
}

type InsertStatementValueContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	insertFormat antlr.Token
}

func NewEmptyInsertStatementValueContext() *InsertStatementValueContext {
	var p = new(InsertStatementValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insertStatementValue
	return p
}

func (*InsertStatementValueContext) IsInsertStatementValueContext() {}

func NewInsertStatementValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementValueContext {
	var p = new(InsertStatementValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insertStatementValue

	return p
}

func (s *InsertStatementValueContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementValueContext) GetInsertFormat() antlr.Token { return s.insertFormat }

func (s *InsertStatementValueContext) SetInsertFormat(v antlr.Token) { s.insertFormat = v }

func (s *InsertStatementValueContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *InsertStatementValueContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *InsertStatementValueContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *InsertStatementValueContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *InsertStatementValueContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *InsertStatementValueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *InsertStatementValueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *InsertStatementValueContext) AllExpressionsWithDefaults() []IExpressionsWithDefaultsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionsWithDefaultsContext)(nil)).Elem())
	var tst = make([]IExpressionsWithDefaultsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionsWithDefaultsContext)
		}
	}

	return tst
}

func (s *InsertStatementValueContext) ExpressionsWithDefaults(i int) IExpressionsWithDefaultsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsWithDefaultsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionsWithDefaultsContext)
}

func (s *InsertStatementValueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *InsertStatementValueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *InsertStatementValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInsertStatementValue(s)
	}
}

func (s *InsertStatementValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInsertStatementValue(s)
	}
}

func (p *MySqlParser) InsertStatementValue() (localctx IInsertStatementValueContext) {
	localctx = NewInsertStatementValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MySqlParserRULE_insertStatementValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3214)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3196)
			p.SelectStatement()
		}

	case MySqlParserVALUES, MySqlParserVALUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3197)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*InsertStatementValueContext).insertFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVALUES || _la == MySqlParserVALUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*InsertStatementValueContext).insertFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3198)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(3200)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 429, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3199)
				p.ExpressionsWithDefaults()
			}

		}
		{
			p.SetState(3202)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(3211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3203)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3204)
				p.Match(MySqlParserLR_BRACKET)
			}
			p.SetState(3206)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 430, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3205)
					p.ExpressionsWithDefaults()
				}

			}
			{
				p.SetState(3208)
				p.Match(MySqlParserRR_BRACKET)
			}

			p.SetState(3213)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdatedElementContext is an interface to support dynamic dispatch.
type IUpdatedElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdatedElementContext differentiates from other interfaces.
	IsUpdatedElementContext()
}

type UpdatedElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdatedElementContext() *UpdatedElementContext {
	var p = new(UpdatedElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_updatedElement
	return p
}

func (*UpdatedElementContext) IsUpdatedElementContext() {}

func NewUpdatedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdatedElementContext {
	var p = new(UpdatedElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_updatedElement

	return p
}

func (s *UpdatedElementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdatedElementContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *UpdatedElementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *UpdatedElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UpdatedElementContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *UpdatedElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdatedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdatedElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUpdatedElement(s)
	}
}

func (s *UpdatedElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUpdatedElement(s)
	}
}

func (p *MySqlParser) UpdatedElement() (localctx IUpdatedElementContext) {
	localctx = NewUpdatedElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MySqlParserRULE_updatedElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3216)
		p.FullColumnName()
	}
	{
		p.SetState(3217)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(3220)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3218)
			p.expression(0)
		}

	case 2:
		{
			p.SetState(3219)
			p.Match(MySqlParserDEFAULT)
		}

	}

	return localctx
}

// IAssignmentFieldContext is an interface to support dynamic dispatch.
type IAssignmentFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentFieldContext differentiates from other interfaces.
	IsAssignmentFieldContext()
}

type AssignmentFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentFieldContext() *AssignmentFieldContext {
	var p = new(AssignmentFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_assignmentField
	return p
}

func (*AssignmentFieldContext) IsAssignmentFieldContext() {}

func NewAssignmentFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentFieldContext {
	var p = new(AssignmentFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_assignmentField

	return p
}

func (s *AssignmentFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentFieldContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AssignmentFieldContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *AssignmentFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAssignmentField(s)
	}
}

func (s *AssignmentFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAssignmentField(s)
	}
}

func (p *MySqlParser) AssignmentField() (localctx IAssignmentFieldContext) {
	localctx = NewAssignmentFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MySqlParserRULE_assignmentField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3224)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3222)
			p.Uid()
		}

	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3223)
			p.Match(MySqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILockClauseContext is an interface to support dynamic dispatch.
type ILockClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockClauseContext differentiates from other interfaces.
	IsLockClauseContext()
}

type LockClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockClauseContext() *LockClauseContext {
	var p = new(LockClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockClause
	return p
}

func (*LockClauseContext) IsLockClauseContext() {}

func NewLockClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockClauseContext {
	var p = new(LockClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockClause

	return p
}

func (s *LockClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LockClauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *LockClauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *LockClauseContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *LockClauseContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *LockClauseContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *LockClauseContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *LockClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLockClause(s)
	}
}

func (s *LockClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLockClause(s)
	}
}

func (p *MySqlParser) LockClause() (localctx ILockClauseContext) {
	localctx = NewLockClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MySqlParserRULE_lockClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3232)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3226)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(3227)
			p.Match(MySqlParserUPDATE)
		}

	case MySqlParserLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3228)
			p.Match(MySqlParserLOCK)
		}
		{
			p.SetState(3229)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(3230)
			p.Match(MySqlParserSHARE)
		}
		{
			p.SetState(3231)
			p.Match(MySqlParserMODE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISingleDeleteStatementContext is an interface to support dynamic dispatch.
type ISingleDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsSingleDeleteStatementContext differentiates from other interfaces.
	IsSingleDeleteStatementContext()
}

type SingleDeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptySingleDeleteStatementContext() *SingleDeleteStatementContext {
	var p = new(SingleDeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_singleDeleteStatement
	return p
}

func (*SingleDeleteStatementContext) IsSingleDeleteStatementContext() {}

func NewSingleDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleDeleteStatementContext {
	var p = new(SingleDeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_singleDeleteStatement

	return p
}

func (s *SingleDeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleDeleteStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *SingleDeleteStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *SingleDeleteStatementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *SingleDeleteStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *SingleDeleteStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SingleDeleteStatementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *SingleDeleteStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *SingleDeleteStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *SingleDeleteStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SingleDeleteStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *SingleDeleteStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SingleDeleteStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *SingleDeleteStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SingleDeleteStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SingleDeleteStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *SingleDeleteStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *SingleDeleteStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *SingleDeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleDeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleDeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSingleDeleteStatement(s)
	}
}

func (s *SingleDeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSingleDeleteStatement(s)
	}
}

func (p *MySqlParser) SingleDeleteStatement() (localctx ISingleDeleteStatementContext) {
	localctx = NewSingleDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MySqlParserRULE_singleDeleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3234)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(3236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3235)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*SingleDeleteStatementContext).priority = _m
		}

	}
	p.SetState(3239)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(3238)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(3242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3241)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3244)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(3245)
		p.TableName()
	}
	p.SetState(3251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(3246)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(3247)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3248)
			p.UidList()
		}
		{
			p.SetState(3249)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3255)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3253)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3254)
			p.expression(0)
		}

	}
	p.SetState(3258)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(3257)
			p.OrderByClause()
		}

	}
	p.SetState(3262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3260)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3261)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IMultipleDeleteStatementContext is an interface to support dynamic dispatch.
type IMultipleDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsMultipleDeleteStatementContext differentiates from other interfaces.
	IsMultipleDeleteStatementContext()
}

type MultipleDeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptyMultipleDeleteStatementContext() *MultipleDeleteStatementContext {
	var p = new(MultipleDeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multipleDeleteStatement
	return p
}

func (*MultipleDeleteStatementContext) IsMultipleDeleteStatementContext() {}

func NewMultipleDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleDeleteStatementContext {
	var p = new(MultipleDeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multipleDeleteStatement

	return p
}

func (s *MultipleDeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleDeleteStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *MultipleDeleteStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *MultipleDeleteStatementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *MultipleDeleteStatementContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *MultipleDeleteStatementContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *MultipleDeleteStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *MultipleDeleteStatementContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *MultipleDeleteStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *MultipleDeleteStatementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *MultipleDeleteStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *MultipleDeleteStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *MultipleDeleteStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultipleDeleteStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *MultipleDeleteStatementContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDOT)
}

func (s *MultipleDeleteStatementContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, i)
}

func (s *MultipleDeleteStatementContext) AllSTAR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTAR)
}

func (s *MultipleDeleteStatementContext) STAR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, i)
}

func (s *MultipleDeleteStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MultipleDeleteStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MultipleDeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleDeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleDeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMultipleDeleteStatement(s)
	}
}

func (s *MultipleDeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMultipleDeleteStatement(s)
	}
}

func (p *MySqlParser) MultipleDeleteStatement() (localctx IMultipleDeleteStatementContext) {
	localctx = NewMultipleDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MySqlParserRULE_multipleDeleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3264)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(3266)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3265)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*MultipleDeleteStatementContext).priority = _m
		}

	}
	p.SetState(3269)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 444, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3268)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(3272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3271)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(3313)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(3274)
			p.TableName()
		}
		p.SetState(3277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(3275)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(3276)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(3287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3279)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3280)
				p.TableName()
			}
			p.SetState(3283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(3281)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(3282)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(3289)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3290)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(3291)
			p.TableSources()
		}

	case MySqlParserFROM:
		{
			p.SetState(3293)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(3294)
			p.TableName()
		}
		p.SetState(3297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(3295)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(3296)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(3307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3299)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3300)
				p.TableName()
			}
			p.SetState(3303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(3301)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(3302)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(3309)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3310)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(3311)
			p.TableSources()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3315)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3316)
			p.expression(0)
		}

	}

	return localctx
}

// IHandlerOpenStatementContext is an interface to support dynamic dispatch.
type IHandlerOpenStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerOpenStatementContext differentiates from other interfaces.
	IsHandlerOpenStatementContext()
}

type HandlerOpenStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerOpenStatementContext() *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerOpenStatement
	return p
}

func (*HandlerOpenStatementContext) IsHandlerOpenStatementContext() {}

func NewHandlerOpenStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerOpenStatement

	return p
}

func (s *HandlerOpenStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerOpenStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerOpenStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerOpenStatementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *HandlerOpenStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerOpenStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *HandlerOpenStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerOpenStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerOpenStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerOpenStatement(s)
	}
}

func (s *HandlerOpenStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerOpenStatement(s)
	}
}

func (p *MySqlParser) HandlerOpenStatement() (localctx IHandlerOpenStatementContext) {
	localctx = NewHandlerOpenStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MySqlParserRULE_handlerOpenStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3319)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3320)
		p.TableName()
	}
	{
		p.SetState(3321)
		p.Match(MySqlParserOPEN)
	}
	p.SetState(3326)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 455, p.GetParserRuleContext()) == 1 {
		p.SetState(3323)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3322)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3325)
			p.Uid()
		}

	}

	return localctx
}

// IHandlerReadIndexStatementContext is an interface to support dynamic dispatch.
type IHandlerReadIndexStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMoveOrder returns the moveOrder token.
	GetMoveOrder() antlr.Token

	// SetMoveOrder sets the moveOrder token.
	SetMoveOrder(antlr.Token)

	// GetIndex returns the index rule contexts.
	GetIndex() IUidContext

	// SetIndex sets the index rule contexts.
	SetIndex(IUidContext)

	// IsHandlerReadIndexStatementContext differentiates from other interfaces.
	IsHandlerReadIndexStatementContext()
}

type HandlerReadIndexStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	index     IUidContext
	moveOrder antlr.Token
}

func NewEmptyHandlerReadIndexStatementContext() *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerReadIndexStatement
	return p
}

func (*HandlerReadIndexStatementContext) IsHandlerReadIndexStatementContext() {}

func NewHandlerReadIndexStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerReadIndexStatement

	return p
}

func (s *HandlerReadIndexStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadIndexStatementContext) GetMoveOrder() antlr.Token { return s.moveOrder }

func (s *HandlerReadIndexStatementContext) SetMoveOrder(v antlr.Token) { s.moveOrder = v }

func (s *HandlerReadIndexStatementContext) GetIndex() IUidContext { return s.index }

func (s *HandlerReadIndexStatementContext) SetIndex(v IUidContext) { s.index = v }

func (s *HandlerReadIndexStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerReadIndexStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadIndexStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *HandlerReadIndexStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerReadIndexStatementContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *HandlerReadIndexStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *HandlerReadIndexStatementContext) Constants() IConstantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantsContext)
}

func (s *HandlerReadIndexStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *HandlerReadIndexStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *HandlerReadIndexStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HandlerReadIndexStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *HandlerReadIndexStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *HandlerReadIndexStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *HandlerReadIndexStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *HandlerReadIndexStatementContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREV, 0)
}

func (s *HandlerReadIndexStatementContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *HandlerReadIndexStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadIndexStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadIndexStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerReadIndexStatement(s)
	}
}

func (s *HandlerReadIndexStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerReadIndexStatement(s)
	}
}

func (p *MySqlParser) HandlerReadIndexStatement() (localctx IHandlerReadIndexStatementContext) {
	localctx = NewHandlerReadIndexStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MySqlParserRULE_handlerReadIndexStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3328)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3329)
		p.TableName()
	}
	{
		p.SetState(3330)
		p.Match(MySqlParserREAD)
	}
	{
		p.SetState(3331)

		var _x = p.Uid()

		localctx.(*HandlerReadIndexStatementContext).index = _x
	}
	p.SetState(3338)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEQUAL_SYMBOL, MySqlParserGREATER_SYMBOL, MySqlParserLESS_SYMBOL, MySqlParserEXCLAMATION_SYMBOL:
		{
			p.SetState(3332)
			p.ComparisonOperator()
		}
		{
			p.SetState(3333)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3334)
			p.Constants()
		}
		{
			p.SetState(3335)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserFIRST, MySqlParserLAST, MySqlParserNEXT, MySqlParserPREV:
		{
			p.SetState(3337)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*HandlerReadIndexStatementContext).moveOrder = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNEXT || _la == MySqlParserPREV) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*HandlerReadIndexStatementContext).moveOrder = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3340)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3341)
			p.expression(0)
		}

	}
	p.SetState(3346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3344)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3345)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IHandlerReadStatementContext is an interface to support dynamic dispatch.
type IHandlerReadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMoveOrder returns the moveOrder token.
	GetMoveOrder() antlr.Token

	// SetMoveOrder sets the moveOrder token.
	SetMoveOrder(antlr.Token)

	// IsHandlerReadStatementContext differentiates from other interfaces.
	IsHandlerReadStatementContext()
}

type HandlerReadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	moveOrder antlr.Token
}

func NewEmptyHandlerReadStatementContext() *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerReadStatement
	return p
}

func (*HandlerReadStatementContext) IsHandlerReadStatementContext() {}

func NewHandlerReadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerReadStatement

	return p
}

func (s *HandlerReadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadStatementContext) GetMoveOrder() antlr.Token { return s.moveOrder }

func (s *HandlerReadStatementContext) SetMoveOrder(v antlr.Token) { s.moveOrder = v }

func (s *HandlerReadStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerReadStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *HandlerReadStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *HandlerReadStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *HandlerReadStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *HandlerReadStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HandlerReadStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *HandlerReadStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *HandlerReadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerReadStatement(s)
	}
}

func (s *HandlerReadStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerReadStatement(s)
	}
}

func (p *MySqlParser) HandlerReadStatement() (localctx IHandlerReadStatementContext) {
	localctx = NewHandlerReadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MySqlParserRULE_handlerReadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3348)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3349)
		p.TableName()
	}
	{
		p.SetState(3350)
		p.Match(MySqlParserREAD)
	}
	{
		p.SetState(3351)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*HandlerReadStatementContext).moveOrder = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFIRST || _la == MySqlParserNEXT) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*HandlerReadStatementContext).moveOrder = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(3354)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3352)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3353)
			p.expression(0)
		}

	}
	p.SetState(3358)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3356)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3357)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IHandlerCloseStatementContext is an interface to support dynamic dispatch.
type IHandlerCloseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerCloseStatementContext differentiates from other interfaces.
	IsHandlerCloseStatementContext()
}

type HandlerCloseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerCloseStatementContext() *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerCloseStatement
	return p
}

func (*HandlerCloseStatementContext) IsHandlerCloseStatementContext() {}

func NewHandlerCloseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerCloseStatement

	return p
}

func (s *HandlerCloseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerCloseStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerCloseStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerCloseStatementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *HandlerCloseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerCloseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerCloseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerCloseStatement(s)
	}
}

func (s *HandlerCloseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerCloseStatement(s)
	}
}

func (p *MySqlParser) HandlerCloseStatement() (localctx IHandlerCloseStatementContext) {
	localctx = NewHandlerCloseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MySqlParserRULE_handlerCloseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3360)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3361)
		p.TableName()
	}
	{
		p.SetState(3362)
		p.Match(MySqlParserCLOSE)
	}

	return localctx
}

// ISingleUpdateStatementContext is an interface to support dynamic dispatch.
type ISingleUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsSingleUpdateStatementContext differentiates from other interfaces.
	IsSingleUpdateStatementContext()
}

type SingleUpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptySingleUpdateStatementContext() *SingleUpdateStatementContext {
	var p = new(SingleUpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_singleUpdateStatement
	return p
}

func (*SingleUpdateStatementContext) IsSingleUpdateStatementContext() {}

func NewSingleUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleUpdateStatementContext {
	var p = new(SingleUpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_singleUpdateStatement

	return p
}

func (s *SingleUpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleUpdateStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *SingleUpdateStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *SingleUpdateStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *SingleUpdateStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SingleUpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SingleUpdateStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *SingleUpdateStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *SingleUpdateStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *SingleUpdateStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SingleUpdateStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SingleUpdateStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SingleUpdateStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *SingleUpdateStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SingleUpdateStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SingleUpdateStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SingleUpdateStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *SingleUpdateStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SingleUpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleUpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleUpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSingleUpdateStatement(s)
	}
}

func (s *SingleUpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSingleUpdateStatement(s)
	}
}

func (p *MySqlParser) SingleUpdateStatement() (localctx ISingleUpdateStatementContext) {
	localctx = NewSingleUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MySqlParserRULE_singleUpdateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3364)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(3366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3365)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*SingleUpdateStatementContext).priority = _m
		}

	}
	p.SetState(3369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3368)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3371)
		p.TableName()
	}
	p.SetState(3376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-12)&-(0x1f+1)) == 0 && ((1<<uint((_la-12)))&((1<<(MySqlParserAS-12))|(1<<(MySqlParserCURRENT-12))|(1<<(MySqlParserDATABASE-12)))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(MySqlParserDIAGNOSTICS-46))|(1<<(MySqlParserEXCEPT-46))|(1<<(MySqlParserGROUP-46))|(1<<(MySqlParserIGNORED-46)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(MySqlParserLEFT-93))|(1<<(MySqlParserNUMBER-93))|(1<<(MySqlParserOPTIONAL-93))|(1<<(MySqlParserORDER-93)))) != 0) || (((_la-142)&-(0x1f+1)) == 0 && ((1<<uint((_la-142)))&((1<<(MySqlParserRIGHT-142))|(1<<(MySqlParserSCHEMA-142))|(1<<(MySqlParserSTACKED-142)))) != 0) || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		p.SetState(3373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3372)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3375)
			p.Uid()
		}

	}
	{
		p.SetState(3378)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3379)
		p.UpdatedElement()
	}
	p.SetState(3384)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3380)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3381)
			p.UpdatedElement()
		}

		p.SetState(3386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3387)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3388)
			p.expression(0)
		}

	}
	p.SetState(3392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(3391)
			p.OrderByClause()
		}

	}
	p.SetState(3395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3394)
			p.LimitClause()
		}

	}

	return localctx
}

// IMultipleUpdateStatementContext is an interface to support dynamic dispatch.
type IMultipleUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsMultipleUpdateStatementContext differentiates from other interfaces.
	IsMultipleUpdateStatementContext()
}

type MultipleUpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptyMultipleUpdateStatementContext() *MultipleUpdateStatementContext {
	var p = new(MultipleUpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multipleUpdateStatement
	return p
}

func (*MultipleUpdateStatementContext) IsMultipleUpdateStatementContext() {}

func NewMultipleUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleUpdateStatementContext {
	var p = new(MultipleUpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multipleUpdateStatement

	return p
}

func (s *MultipleUpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleUpdateStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *MultipleUpdateStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *MultipleUpdateStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *MultipleUpdateStatementContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *MultipleUpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *MultipleUpdateStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *MultipleUpdateStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *MultipleUpdateStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *MultipleUpdateStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MultipleUpdateStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MultipleUpdateStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *MultipleUpdateStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultipleUpdateStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *MultipleUpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleUpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleUpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMultipleUpdateStatement(s)
	}
}

func (s *MultipleUpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMultipleUpdateStatement(s)
	}
}

func (p *MySqlParser) MultipleUpdateStatement() (localctx IMultipleUpdateStatementContext) {
	localctx = NewMultipleUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MySqlParserRULE_multipleUpdateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3397)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(3399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3398)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*MultipleUpdateStatementContext).priority = _m
		}

	}
	p.SetState(3402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3401)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3404)
		p.TableSources()
	}
	{
		p.SetState(3405)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3406)
		p.UpdatedElement()
	}
	p.SetState(3411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3407)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3408)
			p.UpdatedElement()
		}

		p.SetState(3413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3416)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3414)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3415)
			p.expression(0)
		}

	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *OrderByClauseContext) AllOrderByExpression() []IOrderByExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem())
	var tst = make([]IOrderByExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByExpressionContext)
		}
	}

	return tst
}

func (s *OrderByClauseContext) OrderByExpression(i int) IOrderByExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByExpressionContext)
}

func (s *OrderByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *OrderByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *MySqlParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MySqlParserRULE_orderByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3418)
		p.Match(MySqlParserORDER)
	}
	{
		p.SetState(3419)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(3420)
		p.OrderByExpression()
	}
	p.SetState(3425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3421)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3422)
			p.OrderByExpression()
		}

		p.SetState(3427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderByExpressionContext is an interface to support dynamic dispatch.
type IOrderByExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrder returns the order token.
	GetOrder() antlr.Token

	// SetOrder sets the order token.
	SetOrder(antlr.Token)

	// IsOrderByExpressionContext differentiates from other interfaces.
	IsOrderByExpressionContext()
}

type OrderByExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	order  antlr.Token
}

func NewEmptyOrderByExpressionContext() *OrderByExpressionContext {
	var p = new(OrderByExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_orderByExpression
	return p
}

func (*OrderByExpressionContext) IsOrderByExpressionContext() {}

func NewOrderByExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByExpressionContext {
	var p = new(OrderByExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_orderByExpression

	return p
}

func (s *OrderByExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByExpressionContext) GetOrder() antlr.Token { return s.order }

func (s *OrderByExpressionContext) SetOrder(v antlr.Token) { s.order = v }

func (s *OrderByExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrderByExpressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *OrderByExpressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *OrderByExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOrderByExpression(s)
	}
}

func (s *OrderByExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOrderByExpression(s)
	}
}

func (p *MySqlParser) OrderByExpression() (localctx IOrderByExpressionContext) {
	localctx = NewOrderByExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MySqlParserRULE_orderByExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3428)
		p.expression(0)
	}
	p.SetState(3430)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3429)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OrderByExpressionContext).order = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OrderByExpressionContext).order = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITableSourcesContext is an interface to support dynamic dispatch.
type ITableSourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourcesContext differentiates from other interfaces.
	IsTableSourcesContext()
}

type TableSourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourcesContext() *TableSourcesContext {
	var p = new(TableSourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSources
	return p
}

func (*TableSourcesContext) IsTableSourcesContext() {}

func NewTableSourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourcesContext {
	var p = new(TableSourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSources

	return p
}

func (s *TableSourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourcesContext) AllTableSource() []ITableSourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableSourceContext)(nil)).Elem())
	var tst = make([]ITableSourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableSourceContext)
		}
	}

	return tst
}

func (s *TableSourcesContext) TableSource(i int) ITableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableSourceContext)
}

func (s *TableSourcesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *TableSourcesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *TableSourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableSourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableSources(s)
	}
}

func (s *TableSourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableSources(s)
	}
}

func (p *MySqlParser) TableSources() (localctx ITableSourcesContext) {
	localctx = NewTableSourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MySqlParserRULE_tableSources)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3432)
		p.TableSource()
	}
	p.SetState(3437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3433)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3434)
			p.TableSource()
		}

		p.SetState(3439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITableSourceContext is an interface to support dynamic dispatch.
type ITableSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourceContext differentiates from other interfaces.
	IsTableSourceContext()
}

type TableSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourceContext() *TableSourceContext {
	var p = new(TableSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSource
	return p
}

func (*TableSourceContext) IsTableSourceContext() {}

func NewTableSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourceContext {
	var p = new(TableSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSource

	return p
}

func (s *TableSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourceContext) CopyFrom(ctx *TableSourceContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableSourceNestedContext struct {
	*TableSourceContext
}

func NewTableSourceNestedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourceNestedContext {
	var p = new(TableSourceNestedContext)

	p.TableSourceContext = NewEmptyTableSourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceContext))

	return p
}

func (s *TableSourceNestedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceNestedContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableSourceNestedContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *TableSourceNestedContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableSourceNestedContext) AllJoinPart() []IJoinPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinPartContext)(nil)).Elem())
	var tst = make([]IJoinPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinPartContext)
		}
	}

	return tst
}

func (s *TableSourceNestedContext) JoinPart(i int) IJoinPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinPartContext)
}

func (s *TableSourceNestedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableSourceNested(s)
	}
}

func (s *TableSourceNestedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableSourceNested(s)
	}
}

type TableSourceBaseContext struct {
	*TableSourceContext
}

func NewTableSourceBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourceBaseContext {
	var p = new(TableSourceBaseContext)

	p.TableSourceContext = NewEmptyTableSourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceContext))

	return p
}

func (s *TableSourceBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceBaseContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *TableSourceBaseContext) AllJoinPart() []IJoinPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinPartContext)(nil)).Elem())
	var tst = make([]IJoinPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinPartContext)
		}
	}

	return tst
}

func (s *TableSourceBaseContext) JoinPart(i int) IJoinPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinPartContext)
}

func (s *TableSourceBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableSourceBase(s)
	}
}

func (s *TableSourceBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableSourceBase(s)
	}
}

func (p *MySqlParser) TableSource() (localctx ITableSourceContext) {
	localctx = NewTableSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MySqlParserRULE_tableSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3457)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableSourceBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3440)
			p.TableSourceItem()
		}
		p.SetState(3444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 476, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3441)
					p.JoinPart()
				}

			}
			p.SetState(3446)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 476, p.GetParserRuleContext())
		}

	case 2:
		localctx = NewTableSourceNestedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3447)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3448)
			p.TableSourceItem()
		}
		p.SetState(3452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCROSS || (((_la-80)&-(0x1f+1)) == 0 && ((1<<uint((_la-80)))&((1<<(MySqlParserINNER-80))|(1<<(MySqlParserJOIN-80))|(1<<(MySqlParserLEFT-80))|(1<<(MySqlParserNATURAL-80)))) != 0) || _la == MySqlParserRIGHT || _la == MySqlParserSTRAIGHT_JOIN {
			{
				p.SetState(3449)
				p.JoinPart()
			}

			p.SetState(3454)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3455)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITableSourceItemContext is an interface to support dynamic dispatch.
type ITableSourceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourceItemContext differentiates from other interfaces.
	IsTableSourceItemContext()
}

type TableSourceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourceItemContext() *TableSourceItemContext {
	var p = new(TableSourceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSourceItem
	return p
}

func (*TableSourceItemContext) IsTableSourceItemContext() {}

func NewTableSourceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourceItemContext {
	var p = new(TableSourceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSourceItem

	return p
}

func (s *TableSourceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourceItemContext) CopyFrom(ctx *TableSourceItemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableSourceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryTableItemContext struct {
	*TableSourceItemContext
	parenthesisSubquery ISelectStatementContext
	alias               IUidContext
}

func NewSubqueryTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryTableItemContext {
	var p = new(SubqueryTableItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *SubqueryTableItemContext) GetParenthesisSubquery() ISelectStatementContext {
	return s.parenthesisSubquery
}

func (s *SubqueryTableItemContext) GetAlias() IUidContext { return s.alias }

func (s *SubqueryTableItemContext) SetParenthesisSubquery(v ISelectStatementContext) {
	s.parenthesisSubquery = v
}

func (s *SubqueryTableItemContext) SetAlias(v IUidContext) { s.alias = v }

func (s *SubqueryTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryTableItemContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SubqueryTableItemContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryTableItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryTableItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SubqueryTableItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubqueryTableItem(s)
	}
}

func (s *SubqueryTableItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubqueryTableItem(s)
	}
}

type AtomTableItemContext struct {
	*TableSourceItemContext
	alias IUidContext
}

func NewAtomTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtomTableItemContext {
	var p = new(AtomTableItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *AtomTableItemContext) GetAlias() IUidContext { return s.alias }

func (s *AtomTableItemContext) SetAlias(v IUidContext) { s.alias = v }

func (s *AtomTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomTableItemContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AtomTableItemContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AtomTableItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AtomTableItemContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AtomTableItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AtomTableItemContext) AllIndexHint() []IIndexHintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexHintContext)(nil)).Elem())
	var tst = make([]IIndexHintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexHintContext)
		}
	}

	return tst
}

func (s *AtomTableItemContext) IndexHint(i int) IIndexHintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexHintContext)
}

func (s *AtomTableItemContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AtomTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AtomTableItemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AtomTableItemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AtomTableItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAtomTableItem(s)
	}
}

func (s *AtomTableItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAtomTableItem(s)
	}
}

type TableSourcesItemContext struct {
	*TableSourceItemContext
}

func NewTableSourcesItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourcesItemContext {
	var p = new(TableSourcesItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *TableSourcesItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourcesItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableSourcesItemContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *TableSourcesItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableSourcesItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableSourcesItem(s)
	}
}

func (s *TableSourcesItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableSourcesItem(s)
	}
}

func (p *MySqlParser) TableSourceItem() (localctx ITableSourceItemContext) {
	localctx = NewTableSourceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MySqlParserRULE_tableSourceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3499)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 486, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAtomTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3459)
			p.TableName()
		}
		p.SetState(3465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(3460)
				p.Match(MySqlParserPARTITION)
			}
			{
				p.SetState(3461)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3462)
				p.UidList()
			}
			{
				p.SetState(3463)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3471)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 481, p.GetParserRuleContext()) == 1 {
			p.SetState(3468)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3467)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3470)

				var _x = p.Uid()

				localctx.(*AtomTableItemContext).alias = _x
			}

		}
		p.SetState(3481)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3473)
				p.IndexHint()
			}
			p.SetState(3478)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(3474)
						p.Match(MySqlParserCOMMA)
					}
					{
						p.SetState(3475)
						p.IndexHint()
					}

				}
				p.SetState(3480)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())
			}

		}

	case 2:
		localctx = NewSubqueryTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3488)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3483)
				p.SelectStatement()
			}

		case 2:
			{
				p.SetState(3484)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3485)

				var _x = p.SelectStatement()

				localctx.(*SubqueryTableItemContext).parenthesisSubquery = _x
			}
			{
				p.SetState(3486)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3490)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3493)

			var _x = p.Uid()

			localctx.(*SubqueryTableItemContext).alias = _x
		}

	case 3:
		localctx = NewTableSourcesItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3495)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3496)
			p.TableSources()
		}
		{
			p.SetState(3497)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IIndexHintContext is an interface to support dynamic dispatch.
type IIndexHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexHintAction returns the indexHintAction token.
	GetIndexHintAction() antlr.Token

	// GetKeyFormat returns the keyFormat token.
	GetKeyFormat() antlr.Token

	// SetIndexHintAction sets the indexHintAction token.
	SetIndexHintAction(antlr.Token)

	// SetKeyFormat sets the keyFormat token.
	SetKeyFormat(antlr.Token)

	// IsIndexHintContext differentiates from other interfaces.
	IsIndexHintContext()
}

type IndexHintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	indexHintAction antlr.Token
	keyFormat       antlr.Token
}

func NewEmptyIndexHintContext() *IndexHintContext {
	var p = new(IndexHintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexHint
	return p
}

func (*IndexHintContext) IsIndexHintContext() {}

func NewIndexHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintContext {
	var p = new(IndexHintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexHint

	return p
}

func (s *IndexHintContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintContext) GetIndexHintAction() antlr.Token { return s.indexHintAction }

func (s *IndexHintContext) GetKeyFormat() antlr.Token { return s.keyFormat }

func (s *IndexHintContext) SetIndexHintAction(v antlr.Token) { s.indexHintAction = v }

func (s *IndexHintContext) SetKeyFormat(v antlr.Token) { s.keyFormat = v }

func (s *IndexHintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexHintContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *IndexHintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexHintContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *IndexHintContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *IndexHintContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *IndexHintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *IndexHintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *IndexHintContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *IndexHintContext) IndexHintType() IIndexHintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexHintTypeContext)
}

func (s *IndexHintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexHint(s)
	}
}

func (s *IndexHintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexHint(s)
	}
}

func (p *MySqlParser) IndexHint() (localctx IIndexHintContext) {
	localctx = NewIndexHintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MySqlParserRULE_indexHint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3501)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*IndexHintContext).indexHintAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFORCE || _la == MySqlParserIGNORE || _la == MySqlParserUSE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*IndexHintContext).indexHintAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3502)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*IndexHintContext).keyFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*IndexHintContext).keyFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(3505)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3503)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(3504)
			p.IndexHintType()
		}

	}
	{
		p.SetState(3507)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(3508)
		p.UidList()
	}
	{
		p.SetState(3509)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IIndexHintTypeContext is an interface to support dynamic dispatch.
type IIndexHintTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexHintTypeContext differentiates from other interfaces.
	IsIndexHintTypeContext()
}

type IndexHintTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexHintTypeContext() *IndexHintTypeContext {
	var p = new(IndexHintTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexHintType
	return p
}

func (*IndexHintTypeContext) IsIndexHintTypeContext() {}

func NewIndexHintTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintTypeContext {
	var p = new(IndexHintTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexHintType

	return p
}

func (s *IndexHintTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintTypeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *IndexHintTypeContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *IndexHintTypeContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *IndexHintTypeContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *IndexHintTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexHintType(s)
	}
}

func (s *IndexHintTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexHintType(s)
	}
}

func (p *MySqlParser) IndexHintType() (localctx IIndexHintTypeContext) {
	localctx = NewIndexHintTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MySqlParserRULE_indexHintType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3516)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserJOIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3511)
			p.Match(MySqlParserJOIN)
		}

	case MySqlParserORDER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3512)
			p.Match(MySqlParserORDER)
		}
		{
			p.SetState(3513)
			p.Match(MySqlParserBY)
		}

	case MySqlParserGROUP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3514)
			p.Match(MySqlParserGROUP)
		}
		{
			p.SetState(3515)
			p.Match(MySqlParserBY)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoinPartContext is an interface to support dynamic dispatch.
type IJoinPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinPartContext differentiates from other interfaces.
	IsJoinPartContext()
}

type JoinPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinPartContext() *JoinPartContext {
	var p = new(JoinPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_joinPart
	return p
}

func (*JoinPartContext) IsJoinPartContext() {}

func NewJoinPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinPartContext {
	var p = new(JoinPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_joinPart

	return p
}

func (s *JoinPartContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinPartContext) CopyFrom(ctx *JoinPartContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *JoinPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InnerJoinContext struct {
	*JoinPartContext
}

func NewInnerJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InnerJoinContext {
	var p = new(InnerJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *InnerJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *InnerJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *InnerJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *InnerJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InnerJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *InnerJoinContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *InnerJoinContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *InnerJoinContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *InnerJoinContext) INNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNER, 0)
}

func (s *InnerJoinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSS, 0)
}

func (s *InnerJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInnerJoin(s)
	}
}

func (s *InnerJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInnerJoin(s)
	}
}

type NaturalJoinContext struct {
	*JoinPartContext
}

func NewNaturalJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NaturalJoinContext {
	var p = new(NaturalJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *NaturalJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NaturalJoinContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATURAL, 0)
}

func (s *NaturalJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *NaturalJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *NaturalJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *NaturalJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *NaturalJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *NaturalJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNaturalJoin(s)
	}
}

func (s *NaturalJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNaturalJoin(s)
	}
}

type OuterJoinContext struct {
	*JoinPartContext
}

func NewOuterJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OuterJoinContext {
	var p = new(OuterJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *OuterJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OuterJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *OuterJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *OuterJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *OuterJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *OuterJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *OuterJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OuterJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *OuterJoinContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *OuterJoinContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *OuterJoinContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *OuterJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *OuterJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOuterJoin(s)
	}
}

func (s *OuterJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOuterJoin(s)
	}
}

type StraightJoinContext struct {
	*JoinPartContext
}

func NewStraightJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StraightJoinContext {
	var p = new(StraightJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *StraightJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StraightJoinContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *StraightJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *StraightJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *StraightJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StraightJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStraightJoin(s)
	}
}

func (s *StraightJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStraightJoin(s)
	}
}

func (p *MySqlParser) JoinPart() (localctx IJoinPartContext) {
	localctx = NewJoinPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MySqlParserRULE_joinPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3562)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCROSS, MySqlParserINNER, MySqlParserJOIN:
		localctx = NewInnerJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3519)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCROSS || _la == MySqlParserINNER {
			{
				p.SetState(3518)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCROSS || _la == MySqlParserINNER) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(3521)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3522)
			p.TableSourceItem()
		}
		p.SetState(3530)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 490, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3523)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3524)
				p.expression(0)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 490, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3525)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3526)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3527)
				p.UidList()
			}
			{
				p.SetState(3528)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case MySqlParserSTRAIGHT_JOIN:
		localctx = NewStraightJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3532)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}
		{
			p.SetState(3533)
			p.TableSourceItem()
		}
		p.SetState(3536)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3534)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3535)
				p.expression(0)
			}

		}

	case MySqlParserLEFT, MySqlParserRIGHT:
		localctx = NewOuterJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3538)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserOUTER {
			{
				p.SetState(3539)
				p.Match(MySqlParserOUTER)
			}

		}
		{
			p.SetState(3542)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3543)
			p.TableSourceItem()
		}
		p.SetState(3551)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserON:
			{
				p.SetState(3544)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3545)
				p.expression(0)
			}

		case MySqlParserUSING:
			{
				p.SetState(3546)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3547)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3548)
				p.UidList()
			}
			{
				p.SetState(3549)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserNATURAL:
		localctx = NewNaturalJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3553)
			p.Match(MySqlParserNATURAL)
		}
		p.SetState(3558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT {
			{
				p.SetState(3554)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(3556)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserOUTER {
				{
					p.SetState(3555)
					p.Match(MySqlParserOUTER)
				}

			}

		}
		{
			p.SetState(3560)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3561)
			p.TableSourceItem()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueryExpressionContext is an interface to support dynamic dispatch.
type IQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionContext differentiates from other interfaces.
	IsQueryExpressionContext()
}

type QueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionContext() *QueryExpressionContext {
	var p = new(QueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_queryExpression
	return p
}

func (*QueryExpressionContext) IsQueryExpressionContext() {}

func NewQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionContext {
	var p = new(QueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_queryExpression

	return p
}

func (s *QueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *QueryExpressionContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *QueryExpressionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *QueryExpressionContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *QueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQueryExpression(s)
	}
}

func (s *QueryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQueryExpression(s)
	}
}

func (p *MySqlParser) QueryExpression() (localctx IQueryExpressionContext) {
	localctx = NewQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MySqlParserRULE_queryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3572)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 497, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3564)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3565)
			p.QuerySpecification()
		}
		{
			p.SetState(3566)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3568)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3569)
			p.QueryExpression()
		}
		{
			p.SetState(3570)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQueryExpressionNointoContext is an interface to support dynamic dispatch.
type IQueryExpressionNointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionNointoContext differentiates from other interfaces.
	IsQueryExpressionNointoContext()
}

type QueryExpressionNointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionNointoContext() *QueryExpressionNointoContext {
	var p = new(QueryExpressionNointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_queryExpressionNointo
	return p
}

func (*QueryExpressionNointoContext) IsQueryExpressionNointoContext() {}

func NewQueryExpressionNointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionNointoContext {
	var p = new(QueryExpressionNointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_queryExpressionNointo

	return p
}

func (s *QueryExpressionNointoContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionNointoContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *QueryExpressionNointoContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *QueryExpressionNointoContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *QueryExpressionNointoContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *QueryExpressionNointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionNointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionNointoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQueryExpressionNointo(s)
	}
}

func (s *QueryExpressionNointoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQueryExpressionNointo(s)
	}
}

func (p *MySqlParser) QueryExpressionNointo() (localctx IQueryExpressionNointoContext) {
	localctx = NewQueryExpressionNointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MySqlParserRULE_queryExpressionNointo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3582)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3574)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3575)
			p.QuerySpecificationNointo()
		}
		{
			p.SetState(3576)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3578)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3579)
			p.QueryExpressionNointo()
		}
		{
			p.SetState(3580)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuerySpecificationContext is an interface to support dynamic dispatch.
type IQuerySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuerySpecificationContext differentiates from other interfaces.
	IsQuerySpecificationContext()
}

type QuerySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuerySpecificationContext() *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_querySpecification
	return p
}

func (*QuerySpecificationContext) IsQuerySpecificationContext() {}

func NewQuerySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_querySpecification

	return p
}

func (s *QuerySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *QuerySpecificationContext) SelectElements() ISelectElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectElementsContext)
}

func (s *QuerySpecificationContext) AllSelectSpec() []ISelectSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem())
	var tst = make([]ISelectSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectSpecContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) SelectSpec(i int) ISelectSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectSpecContext)
}

func (s *QuerySpecificationContext) SelectIntoExpression() ISelectIntoExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectIntoExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectIntoExpressionContext)
}

func (s *QuerySpecificationContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *QuerySpecificationContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *QuerySpecificationContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *QuerySpecificationContext) WindowClause() IWindowClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowClauseContext)
}

func (s *QuerySpecificationContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *QuerySpecificationContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *QuerySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuerySpecification(s)
	}
}

func (s *QuerySpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuerySpecification(s)
	}
}

func (p *MySqlParser) QuerySpecification() (localctx IQuerySpecificationContext) {
	localctx = NewQuerySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MySqlParserRULE_querySpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3642)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 515, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3584)
			p.Match(MySqlParserSELECT)
		}
		p.SetState(3588)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3585)
					p.SelectSpec()
				}

			}
			p.SetState(3590)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext())
		}
		{
			p.SetState(3591)
			p.SelectElements()
		}
		p.SetState(3593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTO {
			{
				p.SetState(3592)
				p.SelectIntoExpression()
			}

		}
		p.SetState(3596)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 501, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3595)
				p.FromClause()
			}

		}
		p.SetState(3599)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 502, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3598)
				p.GroupByClause()
			}

		}
		p.SetState(3602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserHAVING {
			{
				p.SetState(3601)
				p.HavingClause()
			}

		}
		p.SetState(3605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWINDOW {
			{
				p.SetState(3604)
				p.WindowClause()
			}

		}
		p.SetState(3608)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3607)
				p.OrderByClause()
			}

		}
		p.SetState(3611)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3610)
				p.LimitClause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3613)
			p.Match(MySqlParserSELECT)
		}
		p.SetState(3617)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3614)
					p.SelectSpec()
				}

			}
			p.SetState(3619)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext())
		}
		{
			p.SetState(3620)
			p.SelectElements()
		}
		p.SetState(3622)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 508, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3621)
				p.FromClause()
			}

		}
		p.SetState(3625)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 509, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3624)
				p.GroupByClause()
			}

		}
		p.SetState(3628)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserHAVING {
			{
				p.SetState(3627)
				p.HavingClause()
			}

		}
		p.SetState(3631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWINDOW {
			{
				p.SetState(3630)
				p.WindowClause()
			}

		}
		p.SetState(3634)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 512, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3633)
				p.OrderByClause()
			}

		}
		p.SetState(3637)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 513, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3636)
				p.LimitClause()
			}

		}
		p.SetState(3640)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTO {
			{
				p.SetState(3639)
				p.SelectIntoExpression()
			}

		}

	}

	return localctx
}

// IQuerySpecificationNointoContext is an interface to support dynamic dispatch.
type IQuerySpecificationNointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuerySpecificationNointoContext differentiates from other interfaces.
	IsQuerySpecificationNointoContext()
}

type QuerySpecificationNointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuerySpecificationNointoContext() *QuerySpecificationNointoContext {
	var p = new(QuerySpecificationNointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_querySpecificationNointo
	return p
}

func (*QuerySpecificationNointoContext) IsQuerySpecificationNointoContext() {}

func NewQuerySpecificationNointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationNointoContext {
	var p = new(QuerySpecificationNointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_querySpecificationNointo

	return p
}

func (s *QuerySpecificationNointoContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationNointoContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *QuerySpecificationNointoContext) SelectElements() ISelectElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectElementsContext)
}

func (s *QuerySpecificationNointoContext) AllSelectSpec() []ISelectSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem())
	var tst = make([]ISelectSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectSpecContext)
		}
	}

	return tst
}

func (s *QuerySpecificationNointoContext) SelectSpec(i int) ISelectSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectSpecContext)
}

func (s *QuerySpecificationNointoContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *QuerySpecificationNointoContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *QuerySpecificationNointoContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *QuerySpecificationNointoContext) WindowClause() IWindowClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowClauseContext)
}

func (s *QuerySpecificationNointoContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *QuerySpecificationNointoContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *QuerySpecificationNointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationNointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationNointoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuerySpecificationNointo(s)
	}
}

func (s *QuerySpecificationNointoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuerySpecificationNointo(s)
	}
}

func (p *MySqlParser) QuerySpecificationNointo() (localctx IQuerySpecificationNointoContext) {
	localctx = NewQuerySpecificationNointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MySqlParserRULE_querySpecificationNointo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3644)
		p.Match(MySqlParserSELECT)
	}
	p.SetState(3648)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 516, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3645)
				p.SelectSpec()
			}

		}
		p.SetState(3650)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 516, p.GetParserRuleContext())
	}
	{
		p.SetState(3651)
		p.SelectElements()
	}
	p.SetState(3653)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 517, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3652)
			p.FromClause()
		}

	}
	p.SetState(3656)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 518, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3655)
			p.GroupByClause()
		}

	}
	p.SetState(3659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserHAVING {
		{
			p.SetState(3658)
			p.HavingClause()
		}

	}
	p.SetState(3662)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWINDOW {
		{
			p.SetState(3661)
			p.WindowClause()
		}

	}
	p.SetState(3665)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 521, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3664)
			p.OrderByClause()
		}

	}
	p.SetState(3668)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3667)
			p.LimitClause()
		}

	}

	return localctx
}

// IUnionParenthesisContext is an interface to support dynamic dispatch.
type IUnionParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnionType returns the unionType token.
	GetUnionType() antlr.Token

	// SetUnionType sets the unionType token.
	SetUnionType(antlr.Token)

	// IsUnionParenthesisContext differentiates from other interfaces.
	IsUnionParenthesisContext()
}

type UnionParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	unionType antlr.Token
}

func NewEmptyUnionParenthesisContext() *UnionParenthesisContext {
	var p = new(UnionParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unionParenthesis
	return p
}

func (*UnionParenthesisContext) IsUnionParenthesisContext() {}

func NewUnionParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionParenthesisContext {
	var p = new(UnionParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unionParenthesis

	return p
}

func (s *UnionParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionParenthesisContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionParenthesisContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionParenthesisContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionParenthesisContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionParenthesisContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionParenthesisContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionParenthesisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionParenthesis(s)
	}
}

func (s *UnionParenthesisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionParenthesis(s)
	}
}

func (p *MySqlParser) UnionParenthesis() (localctx IUnionParenthesisContext) {
	localctx = NewUnionParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MySqlParserRULE_unionParenthesis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3670)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		{
			p.SetState(3671)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnionParenthesisContext).unionType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnionParenthesisContext).unionType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3674)
		p.QueryExpressionNointo()
	}

	return localctx
}

// IUnionStatementContext is an interface to support dynamic dispatch.
type IUnionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnionType returns the unionType token.
	GetUnionType() antlr.Token

	// SetUnionType sets the unionType token.
	SetUnionType(antlr.Token)

	// IsUnionStatementContext differentiates from other interfaces.
	IsUnionStatementContext()
}

type UnionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	unionType antlr.Token
}

func NewEmptyUnionStatementContext() *UnionStatementContext {
	var p = new(UnionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unionStatement
	return p
}

func (*UnionStatementContext) IsUnionStatementContext() {}

func NewUnionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionStatementContext {
	var p = new(UnionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unionStatement

	return p
}

func (s *UnionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionStatementContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionStatementContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionStatementContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionStatementContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *UnionStatementContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionStatementContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionStatement(s)
	}
}

func (s *UnionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionStatement(s)
	}
}

func (p *MySqlParser) UnionStatement() (localctx IUnionStatementContext) {
	localctx = NewUnionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MySqlParserRULE_unionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3676)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3678)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		{
			p.SetState(3677)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnionStatementContext).unionType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnionStatementContext).unionType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3682)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT:
		{
			p.SetState(3680)
			p.QuerySpecificationNointo()
		}

	case MySqlParserLR_BRACKET:
		{
			p.SetState(3681)
			p.QueryExpressionNointo()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectSpecContext is an interface to support dynamic dispatch.
type ISelectSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectSpecContext differentiates from other interfaces.
	IsSelectSpecContext()
}

type SelectSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectSpecContext() *SelectSpecContext {
	var p = new(SelectSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectSpec
	return p
}

func (*SelectSpecContext) IsSelectSpecContext() {}

func NewSelectSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectSpecContext {
	var p = new(SelectSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectSpec

	return p
}

func (s *SelectSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectSpecContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *SelectSpecContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *SelectSpecContext) DISTINCTROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCTROW, 0)
}

func (s *SelectSpecContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *SelectSpecContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *SelectSpecContext) SQL_SMALL_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_SMALL_RESULT, 0)
}

func (s *SelectSpecContext) SQL_BIG_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BIG_RESULT, 0)
}

func (s *SelectSpecContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *SelectSpecContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *SelectSpecContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *SelectSpecContext) SQL_CALC_FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CALC_FOUND_ROWS, 0)
}

func (s *SelectSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectSpec(s)
	}
}

func (s *SelectSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectSpec(s)
	}
}

func (p *MySqlParser) SelectSpec() (localctx ISelectSpecContext) {
	localctx = NewSelectSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MySqlParserRULE_selectSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3692)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL, MySqlParserDISTINCT, MySqlParserDISTINCTROW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3684)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT || _la == MySqlParserDISTINCTROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserHIGH_PRIORITY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3685)
			p.Match(MySqlParserHIGH_PRIORITY)
		}

	case MySqlParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3686)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}

	case MySqlParserSQL_SMALL_RESULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3687)
			p.Match(MySqlParserSQL_SMALL_RESULT)
		}

	case MySqlParserSQL_BIG_RESULT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3688)
			p.Match(MySqlParserSQL_BIG_RESULT)
		}

	case MySqlParserSQL_BUFFER_RESULT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3689)
			p.Match(MySqlParserSQL_BUFFER_RESULT)
		}

	case MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3690)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSQL_CACHE || _la == MySqlParserSQL_NO_CACHE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSQL_CALC_FOUND_ROWS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3691)
			p.Match(MySqlParserSQL_CALC_FOUND_ROWS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectElementsContext is an interface to support dynamic dispatch.
type ISelectElementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStar returns the star token.
	GetStar() antlr.Token

	// SetStar sets the star token.
	SetStar(antlr.Token)

	// IsSelectElementsContext differentiates from other interfaces.
	IsSelectElementsContext()
}

type SelectElementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	star   antlr.Token
}

func NewEmptySelectElementsContext() *SelectElementsContext {
	var p = new(SelectElementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectElements
	return p
}

func (*SelectElementsContext) IsSelectElementsContext() {}

func NewSelectElementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectElementsContext {
	var p = new(SelectElementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectElements

	return p
}

func (s *SelectElementsContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectElementsContext) GetStar() antlr.Token { return s.star }

func (s *SelectElementsContext) SetStar(v antlr.Token) { s.star = v }

func (s *SelectElementsContext) AllSelectElement() []ISelectElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectElementContext)(nil)).Elem())
	var tst = make([]ISelectElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectElementContext)
		}
	}

	return tst
}

func (s *SelectElementsContext) SelectElement(i int) ISelectElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectElementContext)
}

func (s *SelectElementsContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *SelectElementsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SelectElementsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SelectElementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectElementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectElementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectElements(s)
	}
}

func (s *SelectElementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectElements(s)
	}
}

func (p *MySqlParser) SelectElements() (localctx ISelectElementsContext) {
	localctx = NewSelectElementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MySqlParserRULE_selectElements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3696)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3694)

			var _m = p.Match(MySqlParserSTAR)

			localctx.(*SelectElementsContext).star = _m
		}

	case 2:
		{
			p.SetState(3695)
			p.SelectElement()
		}

	}
	p.SetState(3702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3698)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3699)
			p.SelectElement()
		}

		p.SetState(3704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectElementContext is an interface to support dynamic dispatch.
type ISelectElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectElementContext differentiates from other interfaces.
	IsSelectElementContext()
}

type SelectElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectElementContext() *SelectElementContext {
	var p = new(SelectElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectElement
	return p
}

func (*SelectElementContext) IsSelectElementContext() {}

func NewSelectElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectElementContext {
	var p = new(SelectElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectElement

	return p
}

func (s *SelectElementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectElementContext) CopyFrom(ctx *SelectElementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectExpressionElementContext struct {
	*SelectElementContext
}

func NewSelectExpressionElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectExpressionElementContext {
	var p = new(SelectExpressionElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectExpressionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectExpressionElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectExpressionElementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *SelectExpressionElementContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *SelectExpressionElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectExpressionElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectExpressionElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectExpressionElement(s)
	}
}

func (s *SelectExpressionElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectExpressionElement(s)
	}
}

type SelectFunctionElementContext struct {
	*SelectElementContext
}

func NewSelectFunctionElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectFunctionElementContext {
	var p = new(SelectFunctionElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectFunctionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectFunctionElementContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *SelectFunctionElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectFunctionElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectFunctionElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectFunctionElement(s)
	}
}

func (s *SelectFunctionElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectFunctionElement(s)
	}
}

type SelectStarElementContext struct {
	*SelectElementContext
}

func NewSelectStarElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectStarElementContext {
	var p = new(SelectStarElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectStarElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStarElementContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *SelectStarElementContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *SelectStarElementContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *SelectStarElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectStarElement(s)
	}
}

func (s *SelectStarElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectStarElement(s)
	}
}

type SelectColumnElementContext struct {
	*SelectElementContext
}

func NewSelectColumnElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectColumnElementContext {
	var p = new(SelectColumnElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectColumnElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectColumnElementContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *SelectColumnElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectColumnElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectColumnElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectColumnElement(s)
	}
}

func (s *SelectColumnElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectColumnElement(s)
	}
}

func (p *MySqlParser) SelectElement() (localctx ISelectElementContext) {
	localctx = NewSelectElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MySqlParserRULE_selectElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3734)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 536, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectStarElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3705)
			p.FullId()
		}
		{
			p.SetState(3706)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(3707)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		localctx = NewSelectColumnElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3709)
			p.FullColumnName()
		}
		p.SetState(3714)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 530, p.GetParserRuleContext()) == 1 {
			p.SetState(3711)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3710)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3713)
				p.Uid()
			}

		}

	case 3:
		localctx = NewSelectFunctionElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3716)
			p.FunctionCall()
		}
		p.SetState(3721)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 532, p.GetParserRuleContext()) == 1 {
			p.SetState(3718)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3717)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3720)
				p.Uid()
			}

		}

	case 4:
		localctx = NewSelectExpressionElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(3725)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 533, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3723)
				p.Match(MySqlParserLOCAL_ID)
			}
			{
				p.SetState(3724)
				p.Match(MySqlParserVAR_ASSIGN)
			}

		}
		{
			p.SetState(3727)
			p.expression(0)
		}
		p.SetState(3732)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 535, p.GetParserRuleContext()) == 1 {
			p.SetState(3729)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3728)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3731)
				p.Uid()
			}

		}

	}

	return localctx
}

// ISelectIntoExpressionContext is an interface to support dynamic dispatch.
type ISelectIntoExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectIntoExpressionContext differentiates from other interfaces.
	IsSelectIntoExpressionContext()
}

type SelectIntoExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectIntoExpressionContext() *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectIntoExpression
	return p
}

func (*SelectIntoExpressionContext) IsSelectIntoExpressionContext() {}

func NewSelectIntoExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectIntoExpression

	return p
}

func (s *SelectIntoExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectIntoExpressionContext) CopyFrom(ctx *SelectIntoExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectIntoExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectIntoVariablesContext struct {
	*SelectIntoExpressionContext
}

func NewSelectIntoVariablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoVariablesContext {
	var p = new(SelectIntoVariablesContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoVariablesContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoVariablesContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *SelectIntoVariablesContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *SelectIntoVariablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SelectIntoVariablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SelectIntoVariablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoVariables(s)
	}
}

func (s *SelectIntoVariablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoVariables(s)
	}
}

type SelectIntoTextFileContext struct {
	*SelectIntoExpressionContext
	filename     antlr.Token
	charset      ICharsetNameContext
	fieldsFormat antlr.Token
}

func NewSelectIntoTextFileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoTextFileContext {
	var p = new(SelectIntoTextFileContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoTextFileContext) GetFilename() antlr.Token { return s.filename }

func (s *SelectIntoTextFileContext) GetFieldsFormat() antlr.Token { return s.fieldsFormat }

func (s *SelectIntoTextFileContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *SelectIntoTextFileContext) SetFieldsFormat(v antlr.Token) { s.fieldsFormat = v }

func (s *SelectIntoTextFileContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *SelectIntoTextFileContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *SelectIntoTextFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoTextFileContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoTextFileContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTFILE, 0)
}

func (s *SelectIntoTextFileContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectIntoTextFileContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *SelectIntoTextFileContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SelectIntoTextFileContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *SelectIntoTextFileContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SelectIntoTextFileContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *SelectIntoTextFileContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *SelectIntoTextFileContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoTextFileContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *SelectIntoTextFileContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoTextFileContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *SelectIntoTextFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoTextFile(s)
	}
}

func (s *SelectIntoTextFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoTextFile(s)
	}
}

type SelectIntoDumpFileContext struct {
	*SelectIntoExpressionContext
}

func NewSelectIntoDumpFileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoDumpFileContext {
	var p = new(SelectIntoDumpFileContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoDumpFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoDumpFileContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoDumpFileContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *SelectIntoDumpFileContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectIntoDumpFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoDumpFile(s)
	}
}

func (s *SelectIntoDumpFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoDumpFile(s)
	}
}

func (p *MySqlParser) SelectIntoExpression() (localctx ISelectIntoExpressionContext) {
	localctx = NewSelectIntoExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MySqlParserRULE_selectIntoExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3772)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectIntoVariablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3736)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3737)
			p.AssignmentField()
		}
		p.SetState(3742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3738)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3739)
				p.AssignmentField()
			}

			p.SetState(3744)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSelectIntoDumpFileContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3745)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3746)
			p.Match(MySqlParserDUMPFILE)
		}
		{
			p.SetState(3747)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 3:
		localctx = NewSelectIntoTextFileContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3748)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3749)
			p.Match(MySqlParserOUTFILE)
		}
		{
			p.SetState(3750)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectIntoTextFileContext).filename = _m
		}
		p.SetState(3754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(3751)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(3752)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(3753)

				var _x = p.CharsetName()

				localctx.(*SelectIntoTextFileContext).charset = _x
			}

		}
		p.SetState(3762)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 540, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3756)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SelectIntoTextFileContext).fieldsFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SelectIntoTextFileContext).fieldsFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(3758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == MySqlParserENCLOSED || _la == MySqlParserESCAPED || _la == MySqlParserOPTIONALLY || _la == MySqlParserTERMINATED {
				{
					p.SetState(3757)
					p.SelectFieldsInto()
				}

				p.SetState(3760)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(3770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINES {
			{
				p.SetState(3764)
				p.Match(MySqlParserLINES)
			}
			p.SetState(3766)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == MySqlParserSTARTING || _la == MySqlParserTERMINATED {
				{
					p.SetState(3765)
					p.SelectLinesInto()
				}

				p.SetState(3768)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}

	return localctx
}

// ISelectFieldsIntoContext is an interface to support dynamic dispatch.
type ISelectFieldsIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTerminationField returns the terminationField token.
	GetTerminationField() antlr.Token

	// GetEnclosion returns the enclosion token.
	GetEnclosion() antlr.Token

	// GetEscaping returns the escaping token.
	GetEscaping() antlr.Token

	// SetTerminationField sets the terminationField token.
	SetTerminationField(antlr.Token)

	// SetEnclosion sets the enclosion token.
	SetEnclosion(antlr.Token)

	// SetEscaping sets the escaping token.
	SetEscaping(antlr.Token)

	// IsSelectFieldsIntoContext differentiates from other interfaces.
	IsSelectFieldsIntoContext()
}

type SelectFieldsIntoContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	terminationField antlr.Token
	enclosion        antlr.Token
	escaping         antlr.Token
}

func NewEmptySelectFieldsIntoContext() *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectFieldsInto
	return p
}

func (*SelectFieldsIntoContext) IsSelectFieldsIntoContext() {}

func NewSelectFieldsIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectFieldsInto

	return p
}

func (s *SelectFieldsIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectFieldsIntoContext) GetTerminationField() antlr.Token { return s.terminationField }

func (s *SelectFieldsIntoContext) GetEnclosion() antlr.Token { return s.enclosion }

func (s *SelectFieldsIntoContext) GetEscaping() antlr.Token { return s.escaping }

func (s *SelectFieldsIntoContext) SetTerminationField(v antlr.Token) { s.terminationField = v }

func (s *SelectFieldsIntoContext) SetEnclosion(v antlr.Token) { s.enclosion = v }

func (s *SelectFieldsIntoContext) SetEscaping(v antlr.Token) { s.escaping = v }

func (s *SelectFieldsIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, 0)
}

func (s *SelectFieldsIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *SelectFieldsIntoContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectFieldsIntoContext) ENCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCLOSED, 0)
}

func (s *SelectFieldsIntoContext) OPTIONALLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONALLY, 0)
}

func (s *SelectFieldsIntoContext) ESCAPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPED, 0)
}

func (s *SelectFieldsIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectFieldsIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectFieldsIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectFieldsInto(s)
	}
}

func (s *SelectFieldsIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectFieldsInto(s)
	}
}

func (p *MySqlParser) SelectFieldsInto() (localctx ISelectFieldsIntoContext) {
	localctx = NewSelectFieldsIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MySqlParserRULE_selectFieldsInto)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3786)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserTERMINATED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3774)
			p.Match(MySqlParserTERMINATED)
		}
		{
			p.SetState(3775)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3776)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).terminationField = _m
		}

	case MySqlParserENCLOSED, MySqlParserOPTIONALLY:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserOPTIONALLY {
			{
				p.SetState(3777)
				p.Match(MySqlParserOPTIONALLY)
			}

		}
		{
			p.SetState(3780)
			p.Match(MySqlParserENCLOSED)
		}
		{
			p.SetState(3781)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3782)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).enclosion = _m
		}

	case MySqlParserESCAPED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3783)
			p.Match(MySqlParserESCAPED)
		}
		{
			p.SetState(3784)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3785)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).escaping = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectLinesIntoContext is an interface to support dynamic dispatch.
type ISelectLinesIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStarting returns the starting token.
	GetStarting() antlr.Token

	// GetTerminationLine returns the terminationLine token.
	GetTerminationLine() antlr.Token

	// SetStarting sets the starting token.
	SetStarting(antlr.Token)

	// SetTerminationLine sets the terminationLine token.
	SetTerminationLine(antlr.Token)

	// IsSelectLinesIntoContext differentiates from other interfaces.
	IsSelectLinesIntoContext()
}

type SelectLinesIntoContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	starting        antlr.Token
	terminationLine antlr.Token
}

func NewEmptySelectLinesIntoContext() *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectLinesInto
	return p
}

func (*SelectLinesIntoContext) IsSelectLinesIntoContext() {}

func NewSelectLinesIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectLinesInto

	return p
}

func (s *SelectLinesIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectLinesIntoContext) GetStarting() antlr.Token { return s.starting }

func (s *SelectLinesIntoContext) GetTerminationLine() antlr.Token { return s.terminationLine }

func (s *SelectLinesIntoContext) SetStarting(v antlr.Token) { s.starting = v }

func (s *SelectLinesIntoContext) SetTerminationLine(v antlr.Token) { s.terminationLine = v }

func (s *SelectLinesIntoContext) STARTING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTING, 0)
}

func (s *SelectLinesIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *SelectLinesIntoContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectLinesIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, 0)
}

func (s *SelectLinesIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectLinesIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectLinesIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectLinesInto(s)
	}
}

func (s *SelectLinesIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectLinesInto(s)
	}
}

func (p *MySqlParser) SelectLinesInto() (localctx ISelectLinesIntoContext) {
	localctx = NewSelectLinesIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MySqlParserRULE_selectLinesInto)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3794)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTARTING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3788)
			p.Match(MySqlParserSTARTING)
		}
		{
			p.SetState(3789)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3790)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectLinesIntoContext).starting = _m
		}

	case MySqlParserTERMINATED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3791)
			p.Match(MySqlParserTERMINATED)
		}
		{
			p.SetState(3792)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3793)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectLinesIntoContext).terminationLine = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhereExpr returns the whereExpr rule contexts.
	GetWhereExpr() IExpressionContext

	// SetWhereExpr sets the whereExpr rule contexts.
	SetWhereExpr(IExpressionContext)

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	whereExpr IExpressionContext
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fromClause
	return p
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) GetWhereExpr() IExpressionContext { return s.whereExpr }

func (s *FromClauseContext) SetWhereExpr(v IExpressionContext) { s.whereExpr = v }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *FromClauseContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *FromClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *FromClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFromClause(s)
	}
}

func (s *FromClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFromClause(s)
	}
}

func (p *MySqlParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MySqlParserRULE_fromClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3798)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFROM {
		{
			p.SetState(3796)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(3797)
			p.TableSources()
		}

	}
	p.SetState(3802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3800)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3801)

			var _x = p.expression(0)

			localctx.(*FromClauseContext).whereExpr = _x
		}

	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *GroupByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *GroupByClauseContext) AllGroupByItem() []IGroupByItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupByItemContext)(nil)).Elem())
	var tst = make([]IGroupByItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupByItemContext)
		}
	}

	return tst
}

func (s *GroupByClauseContext) GroupByItem(i int) IGroupByItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupByItemContext)
}

func (s *GroupByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GroupByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GroupByClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *GroupByClauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (p *MySqlParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MySqlParserRULE_groupByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3804)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(3805)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(3806)
		p.GroupByItem()
	}
	p.SetState(3811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3807)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3808)
			p.GroupByItem()
		}

		p.SetState(3813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3816)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 550, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3814)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(3815)
			p.Match(MySqlParserROLLUP)
		}

	}

	return localctx
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetHavingExpr returns the havingExpr rule contexts.
	GetHavingExpr() IExpressionContext

	// SetHavingExpr sets the havingExpr rule contexts.
	SetHavingExpr(IExpressionContext)

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	havingExpr IExpressionContext
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_havingClause
	return p
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) GetHavingExpr() IExpressionContext { return s.havingExpr }

func (s *HavingClauseContext) SetHavingExpr(v IExpressionContext) { s.havingExpr = v }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(MySqlParserHAVING, 0)
}

func (s *HavingClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHavingClause(s)
	}
}

func (s *HavingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHavingClause(s)
	}
}

func (p *MySqlParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MySqlParserRULE_havingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3818)
		p.Match(MySqlParserHAVING)
	}
	{
		p.SetState(3819)

		var _x = p.expression(0)

		localctx.(*HavingClauseContext).havingExpr = _x
	}

	return localctx
}

// IWindowClauseContext is an interface to support dynamic dispatch.
type IWindowClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowClauseContext differentiates from other interfaces.
	IsWindowClauseContext()
}

type WindowClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowClauseContext() *WindowClauseContext {
	var p = new(WindowClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_windowClause
	return p
}

func (*WindowClauseContext) IsWindowClauseContext() {}

func NewWindowClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowClauseContext {
	var p = new(WindowClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_windowClause

	return p
}

func (s *WindowClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowClauseContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserWINDOW, 0)
}

func (s *WindowClauseContext) AllWindowName() []IWindowNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindowNameContext)(nil)).Elem())
	var tst = make([]IWindowNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindowNameContext)
		}
	}

	return tst
}

func (s *WindowClauseContext) WindowName(i int) IWindowNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindowNameContext)
}

func (s *WindowClauseContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAS)
}

func (s *WindowClauseContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, i)
}

func (s *WindowClauseContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *WindowClauseContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *WindowClauseContext) AllWindowSpec() []IWindowSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindowSpecContext)(nil)).Elem())
	var tst = make([]IWindowSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindowSpecContext)
		}
	}

	return tst
}

func (s *WindowClauseContext) WindowSpec(i int) IWindowSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindowSpecContext)
}

func (s *WindowClauseContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *WindowClauseContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *WindowClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *WindowClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *WindowClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWindowClause(s)
	}
}

func (s *WindowClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWindowClause(s)
	}
}

func (p *MySqlParser) WindowClause() (localctx IWindowClauseContext) {
	localctx = NewWindowClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MySqlParserRULE_windowClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3821)
		p.Match(MySqlParserWINDOW)
	}
	{
		p.SetState(3822)
		p.WindowName()
	}
	{
		p.SetState(3823)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(3824)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(3825)
		p.WindowSpec()
	}
	{
		p.SetState(3826)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(3836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3827)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3828)
			p.WindowName()
		}
		{
			p.SetState(3829)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(3830)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3831)
			p.WindowSpec()
		}
		{
			p.SetState(3832)
			p.Match(MySqlParserRR_BRACKET)
		}

		p.SetState(3838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGroupByItemContext is an interface to support dynamic dispatch.
type IGroupByItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrder returns the order token.
	GetOrder() antlr.Token

	// SetOrder sets the order token.
	SetOrder(antlr.Token)

	// IsGroupByItemContext differentiates from other interfaces.
	IsGroupByItemContext()
}

type GroupByItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	order  antlr.Token
}

func NewEmptyGroupByItemContext() *GroupByItemContext {
	var p = new(GroupByItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_groupByItem
	return p
}

func (*GroupByItemContext) IsGroupByItemContext() {}

func NewGroupByItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByItemContext {
	var p = new(GroupByItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_groupByItem

	return p
}

func (s *GroupByItemContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByItemContext) GetOrder() antlr.Token { return s.order }

func (s *GroupByItemContext) SetOrder(v antlr.Token) { s.order = v }

func (s *GroupByItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupByItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *GroupByItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *GroupByItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGroupByItem(s)
	}
}

func (s *GroupByItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGroupByItem(s)
	}
}

func (p *MySqlParser) GroupByItem() (localctx IGroupByItemContext) {
	localctx = NewGroupByItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MySqlParserRULE_groupByItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3839)
		p.expression(0)
	}
	p.SetState(3841)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 552, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3840)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GroupByItemContext).order = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GroupByItemContext).order = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() ILimitClauseAtomContext

	// GetLimit returns the limit rule contexts.
	GetLimit() ILimitClauseAtomContext

	// SetOffset sets the offset rule contexts.
	SetOffset(ILimitClauseAtomContext)

	// SetLimit sets the limit rule contexts.
	SetLimit(ILimitClauseAtomContext)

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	offset ILimitClauseAtomContext
	limit  ILimitClauseAtomContext
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) GetOffset() ILimitClauseAtomContext { return s.offset }

func (s *LimitClauseContext) GetLimit() ILimitClauseAtomContext { return s.limit }

func (s *LimitClauseContext) SetOffset(v ILimitClauseAtomContext) { s.offset = v }

func (s *LimitClauseContext) SetLimit(v ILimitClauseAtomContext) { s.limit = v }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *LimitClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *LimitClauseContext) AllLimitClauseAtom() []ILimitClauseAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem())
	var tst = make([]ILimitClauseAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILimitClauseAtomContext)
		}
	}

	return tst
}

func (s *LimitClauseContext) LimitClauseAtom(i int) ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *LimitClauseContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *MySqlParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MySqlParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3843)
		p.Match(MySqlParserLIMIT)
	}
	p.SetState(3854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 554, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3847)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 553, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3844)

				var _x = p.LimitClauseAtom()

				localctx.(*LimitClauseContext).offset = _x
			}
			{
				p.SetState(3845)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(3849)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).limit = _x
		}

	case 2:
		{
			p.SetState(3850)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).limit = _x
		}
		{
			p.SetState(3851)
			p.Match(MySqlParserOFFSET)
		}
		{
			p.SetState(3852)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).offset = _x
		}

	}

	return localctx
}

// ILimitClauseAtomContext is an interface to support dynamic dispatch.
type ILimitClauseAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseAtomContext differentiates from other interfaces.
	IsLimitClauseAtomContext()
}

type LimitClauseAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseAtomContext() *LimitClauseAtomContext {
	var p = new(LimitClauseAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_limitClauseAtom
	return p
}

func (*LimitClauseAtomContext) IsLimitClauseAtomContext() {}

func NewLimitClauseAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseAtomContext {
	var p = new(LimitClauseAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_limitClauseAtom

	return p
}

func (s *LimitClauseAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseAtomContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LimitClauseAtomContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *LimitClauseAtomContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *LimitClauseAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLimitClauseAtom(s)
	}
}

func (s *LimitClauseAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLimitClauseAtom(s)
	}
}

func (p *MySqlParser) LimitClauseAtom() (localctx ILimitClauseAtomContext) {
	localctx = NewLimitClauseAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MySqlParserRULE_limitClauseAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3859)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3856)
			p.DecimalLiteral()
		}

	case MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3857)
			p.MysqlVariable()
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3858)
			p.SimpleId()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStartTransactionContext is an interface to support dynamic dispatch.
type IStartTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartTransactionContext differentiates from other interfaces.
	IsStartTransactionContext()
}

type StartTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartTransactionContext() *StartTransactionContext {
	var p = new(StartTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startTransaction
	return p
}

func (*StartTransactionContext) IsStartTransactionContext() {}

func NewStartTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartTransactionContext {
	var p = new(StartTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startTransaction

	return p
}

func (s *StartTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *StartTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartTransactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *StartTransactionContext) AllTransactionMode() []ITransactionModeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem())
	var tst = make([]ITransactionModeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionModeContext)
		}
	}

	return tst
}

func (s *StartTransactionContext) TransactionMode(i int) ITransactionModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionModeContext)
}

func (s *StartTransactionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StartTransactionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StartTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStartTransaction(s)
	}
}

func (s *StartTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStartTransaction(s)
	}
}

func (p *MySqlParser) StartTransaction() (localctx IStartTransactionContext) {
	localctx = NewStartTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MySqlParserRULE_startTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3861)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3862)
		p.Match(MySqlParserTRANSACTION)
	}
	p.SetState(3871)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREAD || _la == MySqlParserWITH {
		{
			p.SetState(3863)
			p.TransactionMode()
		}
		p.SetState(3868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3864)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3865)
				p.TransactionMode()
			}

			p.SetState(3870)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IBeginWorkContext is an interface to support dynamic dispatch.
type IBeginWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBeginWorkContext differentiates from other interfaces.
	IsBeginWorkContext()
}

type BeginWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBeginWorkContext() *BeginWorkContext {
	var p = new(BeginWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_beginWork
	return p
}

func (*BeginWorkContext) IsBeginWorkContext() {}

func NewBeginWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BeginWorkContext {
	var p = new(BeginWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_beginWork

	return p
}

func (s *BeginWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *BeginWorkContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *BeginWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *BeginWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BeginWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BeginWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBeginWork(s)
	}
}

func (s *BeginWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBeginWork(s)
	}
}

func (p *MySqlParser) BeginWork() (localctx IBeginWorkContext) {
	localctx = NewBeginWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MySqlParserRULE_beginWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3873)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(3875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3874)
			p.Match(MySqlParserWORK)
		}

	}

	return localctx
}

// ICommitWorkContext is an interface to support dynamic dispatch.
type ICommitWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNochain returns the nochain token.
	GetNochain() antlr.Token

	// GetNorelease returns the norelease token.
	GetNorelease() antlr.Token

	// SetNochain sets the nochain token.
	SetNochain(antlr.Token)

	// SetNorelease sets the norelease token.
	SetNorelease(antlr.Token)

	// IsCommitWorkContext differentiates from other interfaces.
	IsCommitWorkContext()
}

type CommitWorkContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	nochain   antlr.Token
	norelease antlr.Token
}

func NewEmptyCommitWorkContext() *CommitWorkContext {
	var p = new(CommitWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_commitWork
	return p
}

func (*CommitWorkContext) IsCommitWorkContext() {}

func NewCommitWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommitWorkContext {
	var p = new(CommitWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_commitWork

	return p
}

func (s *CommitWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *CommitWorkContext) GetNochain() antlr.Token { return s.nochain }

func (s *CommitWorkContext) GetNorelease() antlr.Token { return s.norelease }

func (s *CommitWorkContext) SetNochain(v antlr.Token) { s.nochain = v }

func (s *CommitWorkContext) SetNorelease(v antlr.Token) { s.norelease = v }

func (s *CommitWorkContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *CommitWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *CommitWorkContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *CommitWorkContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *CommitWorkContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *CommitWorkContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *CommitWorkContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *CommitWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommitWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCommitWork(s)
	}
}

func (s *CommitWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCommitWork(s)
	}
}

func (p *MySqlParser) CommitWork() (localctx ICommitWorkContext) {
	localctx = NewCommitWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MySqlParserRULE_commitWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3877)
		p.Match(MySqlParserCOMMIT)
	}
	p.SetState(3879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3878)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3881)
			p.Match(MySqlParserAND)
		}
		p.SetState(3883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3882)

				var _m = p.Match(MySqlParserNO)

				localctx.(*CommitWorkContext).nochain = _m
			}

		}
		{
			p.SetState(3885)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3892)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext()) == 1 {
		p.SetState(3889)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3888)

				var _m = p.Match(MySqlParserNO)

				localctx.(*CommitWorkContext).norelease = _m
			}

		}
		{
			p.SetState(3891)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// IRollbackWorkContext is an interface to support dynamic dispatch.
type IRollbackWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNochain returns the nochain token.
	GetNochain() antlr.Token

	// GetNorelease returns the norelease token.
	GetNorelease() antlr.Token

	// SetNochain sets the nochain token.
	SetNochain(antlr.Token)

	// SetNorelease sets the norelease token.
	SetNorelease(antlr.Token)

	// IsRollbackWorkContext differentiates from other interfaces.
	IsRollbackWorkContext()
}

type RollbackWorkContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	nochain   antlr.Token
	norelease antlr.Token
}

func NewEmptyRollbackWorkContext() *RollbackWorkContext {
	var p = new(RollbackWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollbackWork
	return p
}

func (*RollbackWorkContext) IsRollbackWorkContext() {}

func NewRollbackWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackWorkContext {
	var p = new(RollbackWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollbackWork

	return p
}

func (s *RollbackWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackWorkContext) GetNochain() antlr.Token { return s.nochain }

func (s *RollbackWorkContext) GetNorelease() antlr.Token { return s.norelease }

func (s *RollbackWorkContext) SetNochain(v antlr.Token) { s.nochain = v }

func (s *RollbackWorkContext) SetNorelease(v antlr.Token) { s.norelease = v }

func (s *RollbackWorkContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *RollbackWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *RollbackWorkContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *RollbackWorkContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *RollbackWorkContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *RollbackWorkContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *RollbackWorkContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *RollbackWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRollbackWork(s)
	}
}

func (s *RollbackWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRollbackWork(s)
	}
}

func (p *MySqlParser) RollbackWork() (localctx IRollbackWorkContext) {
	localctx = NewRollbackWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MySqlParserRULE_rollbackWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3894)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3896)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3895)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3898)
			p.Match(MySqlParserAND)
		}
		p.SetState(3900)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3899)

				var _m = p.Match(MySqlParserNO)

				localctx.(*RollbackWorkContext).nochain = _m
			}

		}
		{
			p.SetState(3902)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3909)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 568, p.GetParserRuleContext()) == 1 {
		p.SetState(3906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3905)

				var _m = p.Match(MySqlParserNO)

				localctx.(*RollbackWorkContext).norelease = _m
			}

		}
		{
			p.SetState(3908)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// ISavepointStatementContext is an interface to support dynamic dispatch.
type ISavepointStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepointStatementContext differentiates from other interfaces.
	IsSavepointStatementContext()
}

type SavepointStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepointStatementContext() *SavepointStatementContext {
	var p = new(SavepointStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_savepointStatement
	return p
}

func (*SavepointStatementContext) IsSavepointStatementContext() {}

func NewSavepointStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SavepointStatementContext {
	var p = new(SavepointStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_savepointStatement

	return p
}

func (s *SavepointStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SavepointStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *SavepointStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SavepointStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SavepointStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SavepointStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSavepointStatement(s)
	}
}

func (s *SavepointStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSavepointStatement(s)
	}
}

func (p *MySqlParser) SavepointStatement() (localctx ISavepointStatementContext) {
	localctx = NewSavepointStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MySqlParserRULE_savepointStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3911)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3912)
		p.Uid()
	}

	return localctx
}

// IRollbackStatementContext is an interface to support dynamic dispatch.
type IRollbackStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollbackStatementContext differentiates from other interfaces.
	IsRollbackStatementContext()
}

type RollbackStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollbackStatementContext() *RollbackStatementContext {
	var p = new(RollbackStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollbackStatement
	return p
}

func (*RollbackStatementContext) IsRollbackStatementContext() {}

func NewRollbackStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackStatementContext {
	var p = new(RollbackStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollbackStatement

	return p
}

func (s *RollbackStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackStatementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *RollbackStatementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RollbackStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *RollbackStatementContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *RollbackStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *RollbackStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRollbackStatement(s)
	}
}

func (s *RollbackStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRollbackStatement(s)
	}
}

func (p *MySqlParser) RollbackStatement() (localctx IRollbackStatementContext) {
	localctx = NewRollbackStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MySqlParserRULE_rollbackStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3914)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3916)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3915)
			p.Match(MySqlParserWORK)
		}

	}
	{
		p.SetState(3918)
		p.Match(MySqlParserTO)
	}
	p.SetState(3920)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 570, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3919)
			p.Match(MySqlParserSAVEPOINT)
		}

	}
	{
		p.SetState(3922)
		p.Uid()
	}

	return localctx
}

// IReleaseStatementContext is an interface to support dynamic dispatch.
type IReleaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReleaseStatementContext differentiates from other interfaces.
	IsReleaseStatementContext()
}

type ReleaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReleaseStatementContext() *ReleaseStatementContext {
	var p = new(ReleaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_releaseStatement
	return p
}

func (*ReleaseStatementContext) IsReleaseStatementContext() {}

func NewReleaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReleaseStatementContext {
	var p = new(ReleaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_releaseStatement

	return p
}

func (s *ReleaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReleaseStatementContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *ReleaseStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *ReleaseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ReleaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReleaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReleaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReleaseStatement(s)
	}
}

func (s *ReleaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReleaseStatement(s)
	}
}

func (p *MySqlParser) ReleaseStatement() (localctx IReleaseStatementContext) {
	localctx = NewReleaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MySqlParserRULE_releaseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3924)
		p.Match(MySqlParserRELEASE)
	}
	{
		p.SetState(3925)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3926)
		p.Uid()
	}

	return localctx
}

// ILockTablesContext is an interface to support dynamic dispatch.
type ILockTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockTablesContext differentiates from other interfaces.
	IsLockTablesContext()
}

type LockTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockTablesContext() *LockTablesContext {
	var p = new(LockTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockTables
	return p
}

func (*LockTablesContext) IsLockTablesContext() {}

func NewLockTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockTablesContext {
	var p = new(LockTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockTables

	return p
}

func (s *LockTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *LockTablesContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *LockTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *LockTablesContext) AllLockTableElement() []ILockTableElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILockTableElementContext)(nil)).Elem())
	var tst = make([]ILockTableElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILockTableElementContext)
		}
	}

	return tst
}

func (s *LockTablesContext) LockTableElement(i int) ILockTableElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockTableElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILockTableElementContext)
}

func (s *LockTablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LockTablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LockTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLockTables(s)
	}
}

func (s *LockTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLockTables(s)
	}
}

func (p *MySqlParser) LockTables() (localctx ILockTablesContext) {
	localctx = NewLockTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MySqlParserRULE_lockTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3928)
		p.Match(MySqlParserLOCK)
	}
	{
		p.SetState(3929)
		p.Match(MySqlParserTABLES)
	}
	{
		p.SetState(3930)
		p.LockTableElement()
	}
	p.SetState(3935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3931)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3932)
			p.LockTableElement()
		}

		p.SetState(3937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnlockTablesContext is an interface to support dynamic dispatch.
type IUnlockTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlockTablesContext differentiates from other interfaces.
	IsUnlockTablesContext()
}

type UnlockTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlockTablesContext() *UnlockTablesContext {
	var p = new(UnlockTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unlockTables
	return p
}

func (*UnlockTablesContext) IsUnlockTablesContext() {}

func NewUnlockTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnlockTablesContext {
	var p = new(UnlockTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unlockTables

	return p
}

func (s *UnlockTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *UnlockTablesContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *UnlockTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *UnlockTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnlockTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnlockTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnlockTables(s)
	}
}

func (s *UnlockTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnlockTables(s)
	}
}

func (p *MySqlParser) UnlockTables() (localctx IUnlockTablesContext) {
	localctx = NewUnlockTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MySqlParserRULE_unlockTables)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3938)
		p.Match(MySqlParserUNLOCK)
	}
	{
		p.SetState(3939)
		p.Match(MySqlParserTABLES)
	}

	return localctx
}

// ISetAutocommitStatementContext is an interface to support dynamic dispatch.
type ISetAutocommitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAutocommitValue returns the autocommitValue token.
	GetAutocommitValue() antlr.Token

	// SetAutocommitValue sets the autocommitValue token.
	SetAutocommitValue(antlr.Token)

	// IsSetAutocommitStatementContext differentiates from other interfaces.
	IsSetAutocommitStatementContext()
}

type SetAutocommitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	autocommitValue antlr.Token
}

func NewEmptySetAutocommitStatementContext() *SetAutocommitStatementContext {
	var p = new(SetAutocommitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setAutocommitStatement
	return p
}

func (*SetAutocommitStatementContext) IsSetAutocommitStatementContext() {}

func NewSetAutocommitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAutocommitStatementContext {
	var p = new(SetAutocommitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setAutocommitStatement

	return p
}

func (s *SetAutocommitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAutocommitStatementContext) GetAutocommitValue() antlr.Token { return s.autocommitValue }

func (s *SetAutocommitStatementContext) SetAutocommitValue(v antlr.Token) { s.autocommitValue = v }

func (s *SetAutocommitStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetAutocommitStatementContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *SetAutocommitStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SetAutocommitStatementContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *SetAutocommitStatementContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *SetAutocommitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutocommitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAutocommitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetAutocommitStatement(s)
	}
}

func (s *SetAutocommitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetAutocommitStatement(s)
	}
}

func (p *MySqlParser) SetAutocommitStatement() (localctx ISetAutocommitStatementContext) {
	localctx = NewSetAutocommitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MySqlParserRULE_setAutocommitStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3941)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3942)
		p.Match(MySqlParserAUTOCOMMIT)
	}
	{
		p.SetState(3943)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(3944)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SetAutocommitStatementContext).autocommitValue = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SetAutocommitStatementContext).autocommitValue = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISetTransactionStatementContext is an interface to support dynamic dispatch.
type ISetTransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTransactionContext returns the transactionContext token.
	GetTransactionContext() antlr.Token

	// SetTransactionContext sets the transactionContext token.
	SetTransactionContext(antlr.Token)

	// IsSetTransactionStatementContext differentiates from other interfaces.
	IsSetTransactionStatementContext()
}

type SetTransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	transactionContext antlr.Token
}

func NewEmptySetTransactionStatementContext() *SetTransactionStatementContext {
	var p = new(SetTransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setTransactionStatement
	return p
}

func (*SetTransactionStatementContext) IsSetTransactionStatementContext() {}

func NewSetTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetTransactionStatementContext {
	var p = new(SetTransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setTransactionStatement

	return p
}

func (s *SetTransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetTransactionStatementContext) GetTransactionContext() antlr.Token {
	return s.transactionContext
}

func (s *SetTransactionStatementContext) SetTransactionContext(v antlr.Token) {
	s.transactionContext = v
}

func (s *SetTransactionStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetTransactionStatementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *SetTransactionStatementContext) AllTransactionOption() []ITransactionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionOptionContext)(nil)).Elem())
	var tst = make([]ITransactionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionOptionContext)
		}
	}

	return tst
}

func (s *SetTransactionStatementContext) TransactionOption(i int) ITransactionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionOptionContext)
}

func (s *SetTransactionStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetTransactionStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetTransactionStatementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *SetTransactionStatementContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *SetTransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetTransactionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetTransactionStatement(s)
	}
}

func (s *SetTransactionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetTransactionStatement(s)
	}
}

func (p *MySqlParser) SetTransactionStatement() (localctx ISetTransactionStatementContext) {
	localctx = NewSetTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MySqlParserRULE_setTransactionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3946)
		p.Match(MySqlParserSET)
	}
	p.SetState(3948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
		{
			p.SetState(3947)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SetTransactionStatementContext).transactionContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SetTransactionStatementContext).transactionContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3950)
		p.Match(MySqlParserTRANSACTION)
	}
	{
		p.SetState(3951)
		p.TransactionOption()
	}
	p.SetState(3956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3952)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3953)
			p.TransactionOption()
		}

		p.SetState(3958)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITransactionModeContext is an interface to support dynamic dispatch.
type ITransactionModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionModeContext differentiates from other interfaces.
	IsTransactionModeContext()
}

type TransactionModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionModeContext() *TransactionModeContext {
	var p = new(TransactionModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionMode
	return p
}

func (*TransactionModeContext) IsTransactionModeContext() {}

func NewTransactionModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionModeContext {
	var p = new(TransactionModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionMode

	return p
}

func (s *TransactionModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionModeContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *TransactionModeContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *TransactionModeContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *TransactionModeContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionModeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *TransactionModeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *TransactionModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionModeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransactionMode(s)
	}
}

func (s *TransactionModeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransactionMode(s)
	}
}

func (p *MySqlParser) TransactionMode() (localctx ITransactionModeContext) {
	localctx = NewTransactionModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MySqlParserRULE_transactionMode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3966)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 574, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3959)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(3960)
			p.Match(MySqlParserCONSISTENT)
		}
		{
			p.SetState(3961)
			p.Match(MySqlParserSNAPSHOT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3962)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3963)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3964)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3965)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ILockTableElementContext is an interface to support dynamic dispatch.
type ILockTableElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockTableElementContext differentiates from other interfaces.
	IsLockTableElementContext()
}

type LockTableElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockTableElementContext() *LockTableElementContext {
	var p = new(LockTableElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockTableElement
	return p
}

func (*LockTableElementContext) IsLockTableElementContext() {}

func NewLockTableElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockTableElementContext {
	var p = new(LockTableElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockTableElement

	return p
}

func (s *LockTableElementContext) GetParser() antlr.Parser { return s.parser }

func (s *LockTableElementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LockTableElementContext) LockAction() ILockActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockActionContext)
}

func (s *LockTableElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LockTableElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *LockTableElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockTableElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockTableElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLockTableElement(s)
	}
}

func (s *LockTableElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLockTableElement(s)
	}
}

func (p *MySqlParser) LockTableElement() (localctx ILockTableElementContext) {
	localctx = NewLockTableElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MySqlParserRULE_lockTableElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3968)
		p.TableName()
	}
	p.SetState(3973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-12)&-(0x1f+1)) == 0 && ((1<<uint((_la-12)))&((1<<(MySqlParserAS-12))|(1<<(MySqlParserCURRENT-12))|(1<<(MySqlParserDATABASE-12)))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(MySqlParserDIAGNOSTICS-46))|(1<<(MySqlParserEXCEPT-46))|(1<<(MySqlParserGROUP-46))|(1<<(MySqlParserIGNORED-46)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(MySqlParserLEFT-93))|(1<<(MySqlParserNUMBER-93))|(1<<(MySqlParserOPTIONAL-93))|(1<<(MySqlParserORDER-93)))) != 0) || (((_la-142)&-(0x1f+1)) == 0 && ((1<<uint((_la-142)))&((1<<(MySqlParserRIGHT-142))|(1<<(MySqlParserSCHEMA-142))|(1<<(MySqlParserSTACKED-142)))) != 0) || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		p.SetState(3970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3969)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3972)
			p.Uid()
		}

	}
	{
		p.SetState(3975)
		p.LockAction()
	}

	return localctx
}

// ILockActionContext is an interface to support dynamic dispatch.
type ILockActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockActionContext differentiates from other interfaces.
	IsLockActionContext()
}

type LockActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockActionContext() *LockActionContext {
	var p = new(LockActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockAction
	return p
}

func (*LockActionContext) IsLockActionContext() {}

func NewLockActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockActionContext {
	var p = new(LockActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockAction

	return p
}

func (s *LockActionContext) GetParser() antlr.Parser { return s.parser }

func (s *LockActionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *LockActionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LockActionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *LockActionContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LockActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLockAction(s)
	}
}

func (s *LockActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLockAction(s)
	}
}

func (p *MySqlParser) LockAction() (localctx ILockActionContext) {
	localctx = NewLockActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MySqlParserRULE_lockAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3985)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREAD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3977)
			p.Match(MySqlParserREAD)
		}
		p.SetState(3979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOCAL {
			{
				p.SetState(3978)
				p.Match(MySqlParserLOCAL)
			}

		}

	case MySqlParserLOW_PRIORITY, MySqlParserWRITE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOW_PRIORITY {
			{
				p.SetState(3981)
				p.Match(MySqlParserLOW_PRIORITY)
			}

		}
		{
			p.SetState(3984)
			p.Match(MySqlParserWRITE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransactionOptionContext is an interface to support dynamic dispatch.
type ITransactionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionOptionContext differentiates from other interfaces.
	IsTransactionOptionContext()
}

type TransactionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionOptionContext() *TransactionOptionContext {
	var p = new(TransactionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionOption
	return p
}

func (*TransactionOptionContext) IsTransactionOptionContext() {}

func NewTransactionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionOptionContext {
	var p = new(TransactionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionOption

	return p
}

func (s *TransactionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionOptionContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *TransactionOptionContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *TransactionOptionContext) TransactionLevel() ITransactionLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionLevelContext)
}

func (s *TransactionOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionOptionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *TransactionOptionContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *TransactionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransactionOption(s)
	}
}

func (s *TransactionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransactionOption(s)
	}
}

func (p *MySqlParser) TransactionOption() (localctx ITransactionOptionContext) {
	localctx = NewTransactionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MySqlParserRULE_transactionOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3994)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 580, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3987)
			p.Match(MySqlParserISOLATION)
		}
		{
			p.SetState(3988)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(3989)
			p.TransactionLevel()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3990)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3991)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3992)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3993)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ITransactionLevelContext is an interface to support dynamic dispatch.
type ITransactionLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionLevelContext differentiates from other interfaces.
	IsTransactionLevelContext()
}

type TransactionLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionLevelContext() *TransactionLevelContext {
	var p = new(TransactionLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionLevel
	return p
}

func (*TransactionLevelContext) IsTransactionLevelContext() {}

func NewTransactionLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionLevelContext {
	var p = new(TransactionLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionLevel

	return p
}

func (s *TransactionLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionLevelContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *TransactionLevelContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionLevelContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *TransactionLevelContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *TransactionLevelContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *TransactionLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransactionLevel(s)
	}
}

func (s *TransactionLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransactionLevel(s)
	}
}

func (p *MySqlParser) TransactionLevel() (localctx ITransactionLevelContext) {
	localctx = NewTransactionLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MySqlParserRULE_transactionLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4003)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 581, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3996)
			p.Match(MySqlParserREPEATABLE)
		}
		{
			p.SetState(3997)
			p.Match(MySqlParserREAD)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3998)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3999)
			p.Match(MySqlParserCOMMITTED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4000)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(4001)
			p.Match(MySqlParserUNCOMMITTED)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4002)
			p.Match(MySqlParserSERIALIZABLE)
		}

	}

	return localctx
}

// IChangeMasterContext is an interface to support dynamic dispatch.
type IChangeMasterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeMasterContext differentiates from other interfaces.
	IsChangeMasterContext()
}

type ChangeMasterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeMasterContext() *ChangeMasterContext {
	var p = new(ChangeMasterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_changeMaster
	return p
}

func (*ChangeMasterContext) IsChangeMasterContext() {}

func NewChangeMasterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeMasterContext {
	var p = new(ChangeMasterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_changeMaster

	return p
}

func (s *ChangeMasterContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeMasterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *ChangeMasterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ChangeMasterContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *ChangeMasterContext) AllMasterOption() []IMasterOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMasterOptionContext)(nil)).Elem())
	var tst = make([]IMasterOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMasterOptionContext)
		}
	}

	return tst
}

func (s *ChangeMasterContext) MasterOption(i int) IMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMasterOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMasterOptionContext)
}

func (s *ChangeMasterContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ChangeMasterContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ChangeMasterContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChangeMasterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeMasterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeMasterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChangeMaster(s)
	}
}

func (s *ChangeMasterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChangeMaster(s)
	}
}

func (p *MySqlParser) ChangeMaster() (localctx IChangeMasterContext) {
	localctx = NewChangeMasterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MySqlParserRULE_changeMaster)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4005)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(4006)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(4007)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4008)
		p.MasterOption()
	}
	p.SetState(4013)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4009)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4010)
			p.MasterOption()
		}

		p.SetState(4015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4016)
			p.ChannelOption()
		}

	}

	return localctx
}

// IChangeReplicationFilterContext is an interface to support dynamic dispatch.
type IChangeReplicationFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeReplicationFilterContext differentiates from other interfaces.
	IsChangeReplicationFilterContext()
}

type ChangeReplicationFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeReplicationFilterContext() *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_changeReplicationFilter
	return p
}

func (*ChangeReplicationFilterContext) IsChangeReplicationFilterContext() {}

func NewChangeReplicationFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_changeReplicationFilter

	return p
}

func (s *ChangeReplicationFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeReplicationFilterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *ChangeReplicationFilterContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *ChangeReplicationFilterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILTER, 0)
}

func (s *ChangeReplicationFilterContext) AllReplicationFilter() []IReplicationFilterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReplicationFilterContext)(nil)).Elem())
	var tst = make([]IReplicationFilterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReplicationFilterContext)
		}
	}

	return tst
}

func (s *ChangeReplicationFilterContext) ReplicationFilter(i int) IReplicationFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationFilterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReplicationFilterContext)
}

func (s *ChangeReplicationFilterContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ChangeReplicationFilterContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ChangeReplicationFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeReplicationFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeReplicationFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChangeReplicationFilter(s)
	}
}

func (s *ChangeReplicationFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChangeReplicationFilter(s)
	}
}

func (p *MySqlParser) ChangeReplicationFilter() (localctx IChangeReplicationFilterContext) {
	localctx = NewChangeReplicationFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MySqlParserRULE_changeReplicationFilter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4019)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(4020)
		p.Match(MySqlParserREPLICATION)
	}
	{
		p.SetState(4021)
		p.Match(MySqlParserFILTER)
	}
	{
		p.SetState(4022)
		p.ReplicationFilter()
	}
	p.SetState(4027)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4023)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4024)
			p.ReplicationFilter()
		}

		p.SetState(4029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPurgeBinaryLogsContext is an interface to support dynamic dispatch.
type IPurgeBinaryLogsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPurgeFormat returns the purgeFormat token.
	GetPurgeFormat() antlr.Token

	// GetFileName returns the fileName token.
	GetFileName() antlr.Token

	// GetTimeValue returns the timeValue token.
	GetTimeValue() antlr.Token

	// SetPurgeFormat sets the purgeFormat token.
	SetPurgeFormat(antlr.Token)

	// SetFileName sets the fileName token.
	SetFileName(antlr.Token)

	// SetTimeValue sets the timeValue token.
	SetTimeValue(antlr.Token)

	// IsPurgeBinaryLogsContext differentiates from other interfaces.
	IsPurgeBinaryLogsContext()
}

type PurgeBinaryLogsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	purgeFormat antlr.Token
	fileName    antlr.Token
	timeValue   antlr.Token
}

func NewEmptyPurgeBinaryLogsContext() *PurgeBinaryLogsContext {
	var p = new(PurgeBinaryLogsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_purgeBinaryLogs
	return p
}

func (*PurgeBinaryLogsContext) IsPurgeBinaryLogsContext() {}

func NewPurgeBinaryLogsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PurgeBinaryLogsContext {
	var p = new(PurgeBinaryLogsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_purgeBinaryLogs

	return p
}

func (s *PurgeBinaryLogsContext) GetParser() antlr.Parser { return s.parser }

func (s *PurgeBinaryLogsContext) GetPurgeFormat() antlr.Token { return s.purgeFormat }

func (s *PurgeBinaryLogsContext) GetFileName() antlr.Token { return s.fileName }

func (s *PurgeBinaryLogsContext) GetTimeValue() antlr.Token { return s.timeValue }

func (s *PurgeBinaryLogsContext) SetPurgeFormat(v antlr.Token) { s.purgeFormat = v }

func (s *PurgeBinaryLogsContext) SetFileName(v antlr.Token) { s.fileName = v }

func (s *PurgeBinaryLogsContext) SetTimeValue(v antlr.Token) { s.timeValue = v }

func (s *PurgeBinaryLogsContext) PURGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPURGE, 0)
}

func (s *PurgeBinaryLogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *PurgeBinaryLogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *PurgeBinaryLogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *PurgeBinaryLogsContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *PurgeBinaryLogsContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *PurgeBinaryLogsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PurgeBinaryLogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PurgeBinaryLogsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PurgeBinaryLogsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPurgeBinaryLogs(s)
	}
}

func (s *PurgeBinaryLogsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPurgeBinaryLogs(s)
	}
}

func (p *MySqlParser) PurgeBinaryLogs() (localctx IPurgeBinaryLogsContext) {
	localctx = NewPurgeBinaryLogsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MySqlParserRULE_purgeBinaryLogs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4030)
		p.Match(MySqlParserPURGE)
	}
	{
		p.SetState(4031)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PurgeBinaryLogsContext).purgeFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PurgeBinaryLogsContext).purgeFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4032)
		p.Match(MySqlParserLOGS)
	}
	p.SetState(4037)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserTO:
		{
			p.SetState(4033)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(4034)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PurgeBinaryLogsContext).fileName = _m
		}

	case MySqlParserBEFORE:
		{
			p.SetState(4035)
			p.Match(MySqlParserBEFORE)
		}
		{
			p.SetState(4036)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PurgeBinaryLogsContext).timeValue = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IResetMasterContext is an interface to support dynamic dispatch.
type IResetMasterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetMasterContext differentiates from other interfaces.
	IsResetMasterContext()
}

type ResetMasterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetMasterContext() *ResetMasterContext {
	var p = new(ResetMasterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetMaster
	return p
}

func (*ResetMasterContext) IsResetMasterContext() {}

func NewResetMasterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetMasterContext {
	var p = new(ResetMasterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetMaster

	return p
}

func (s *ResetMasterContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetMasterContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetMasterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ResetMasterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetMasterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetMasterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterResetMaster(s)
	}
}

func (s *ResetMasterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitResetMaster(s)
	}
}

func (p *MySqlParser) ResetMaster() (localctx IResetMasterContext) {
	localctx = NewResetMasterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MySqlParserRULE_resetMaster)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4039)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(4040)
		p.Match(MySqlParserMASTER)
	}

	return localctx
}

// IResetSlaveContext is an interface to support dynamic dispatch.
type IResetSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetSlaveContext differentiates from other interfaces.
	IsResetSlaveContext()
}

type ResetSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetSlaveContext() *ResetSlaveContext {
	var p = new(ResetSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetSlave
	return p
}

func (*ResetSlaveContext) IsResetSlaveContext() {}

func NewResetSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetSlaveContext {
	var p = new(ResetSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetSlave

	return p
}

func (s *ResetSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetSlaveContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ResetSlaveContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ResetSlaveContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ResetSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterResetSlave(s)
	}
}

func (s *ResetSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitResetSlave(s)
	}
}

func (p *MySqlParser) ResetSlave() (localctx IResetSlaveContext) {
	localctx = NewResetSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MySqlParserRULE_resetSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4042)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(4043)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(4045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL {
		{
			p.SetState(4044)
			p.Match(MySqlParserALL)
		}

	}
	p.SetState(4048)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4047)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStartSlaveContext is an interface to support dynamic dispatch.
type IStartSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartSlaveContext differentiates from other interfaces.
	IsStartSlaveContext()
}

type StartSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartSlaveContext() *StartSlaveContext {
	var p = new(StartSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startSlave
	return p
}

func (*StartSlaveContext) IsStartSlaveContext() {}

func NewStartSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartSlaveContext {
	var p = new(StartSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startSlave

	return p
}

func (s *StartSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StartSlaveContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *StartSlaveContext) AllThreadType() []IThreadTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem())
	var tst = make([]IThreadTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThreadTypeContext)
		}
	}

	return tst
}

func (s *StartSlaveContext) ThreadType(i int) IThreadTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThreadTypeContext)
}

func (s *StartSlaveContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *StartSlaveContext) UntilOption() IUntilOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUntilOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUntilOptionContext)
}

func (s *StartSlaveContext) AllConnectionOption() []IConnectionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConnectionOptionContext)(nil)).Elem())
	var tst = make([]IConnectionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConnectionOptionContext)
		}
	}

	return tst
}

func (s *StartSlaveContext) ConnectionOption(i int) IConnectionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConnectionOptionContext)
}

func (s *StartSlaveContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *StartSlaveContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StartSlaveContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StartSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStartSlave(s)
	}
}

func (s *StartSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStartSlave(s)
	}
}

func (p *MySqlParser) StartSlave() (localctx IStartSlaveContext) {
	localctx = NewStartSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MySqlParserRULE_startSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4050)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(4051)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(4060)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(4052)
			p.ThreadType()
		}
		p.SetState(4057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4053)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4054)
				p.ThreadType()
			}

			p.SetState(4059)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(4064)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUNTIL {
		{
			p.SetState(4062)
			p.Match(MySqlParserUNTIL)
		}
		{
			p.SetState(4063)
			p.UntilOption()
		}

	}
	p.SetState(4069)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDEFAULT_AUTH || _la == MySqlParserPASSWORD || _la == MySqlParserPLUGIN_DIR || _la == MySqlParserUSER {
		{
			p.SetState(4066)
			p.ConnectionOption()
		}

		p.SetState(4071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4073)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4072)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStopSlaveContext is an interface to support dynamic dispatch.
type IStopSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopSlaveContext differentiates from other interfaces.
	IsStopSlaveContext()
}

type StopSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopSlaveContext() *StopSlaveContext {
	var p = new(StopSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stopSlave
	return p
}

func (*StopSlaveContext) IsStopSlaveContext() {}

func NewStopSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopSlaveContext {
	var p = new(StopSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stopSlave

	return p
}

func (s *StopSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StopSlaveContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *StopSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *StopSlaveContext) AllThreadType() []IThreadTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem())
	var tst = make([]IThreadTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThreadTypeContext)
		}
	}

	return tst
}

func (s *StopSlaveContext) ThreadType(i int) IThreadTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThreadTypeContext)
}

func (s *StopSlaveContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StopSlaveContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StopSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopSlaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStopSlave(s)
	}
}

func (s *StopSlaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStopSlave(s)
	}
}

func (p *MySqlParser) StopSlave() (localctx IStopSlaveContext) {
	localctx = NewStopSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MySqlParserRULE_stopSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4075)
		p.Match(MySqlParserSTOP)
	}
	{
		p.SetState(4076)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(4085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(4077)
			p.ThreadType()
		}
		p.SetState(4082)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4078)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4079)
				p.ThreadType()
			}

			p.SetState(4084)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IStartGroupReplicationContext is an interface to support dynamic dispatch.
type IStartGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartGroupReplicationContext differentiates from other interfaces.
	IsStartGroupReplicationContext()
}

type StartGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartGroupReplicationContext() *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startGroupReplication
	return p
}

func (*StartGroupReplicationContext) IsStartGroupReplicationContext() {}

func NewStartGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startGroupReplication

	return p
}

func (s *StartGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StartGroupReplicationContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *StartGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartGroupReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStartGroupReplication(s)
	}
}

func (s *StartGroupReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStartGroupReplication(s)
	}
}

func (p *MySqlParser) StartGroupReplication() (localctx IStartGroupReplicationContext) {
	localctx = NewStartGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MySqlParserRULE_startGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4087)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(4088)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IStopGroupReplicationContext is an interface to support dynamic dispatch.
type IStopGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopGroupReplicationContext differentiates from other interfaces.
	IsStopGroupReplicationContext()
}

type StopGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopGroupReplicationContext() *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stopGroupReplication
	return p
}

func (*StopGroupReplicationContext) IsStopGroupReplicationContext() {}

func NewStopGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stopGroupReplication

	return p
}

func (s *StopGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StopGroupReplicationContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *StopGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *StopGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopGroupReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStopGroupReplication(s)
	}
}

func (s *StopGroupReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStopGroupReplication(s)
	}
}

func (p *MySqlParser) StopGroupReplication() (localctx IStopGroupReplicationContext) {
	localctx = NewStopGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MySqlParserRULE_stopGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4090)
		p.Match(MySqlParserSTOP)
	}
	{
		p.SetState(4091)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IMasterOptionContext is an interface to support dynamic dispatch.
type IMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMasterOptionContext differentiates from other interfaces.
	IsMasterOptionContext()
}

type MasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMasterOptionContext() *MasterOptionContext {
	var p = new(MasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_masterOption
	return p
}

func (*MasterOptionContext) IsMasterOptionContext() {}

func NewMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MasterOptionContext {
	var p = new(MasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_masterOption

	return p
}

func (s *MasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MasterOptionContext) CopyFrom(ctx *MasterOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *MasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MasterStringOptionContext struct {
	*MasterOptionContext
}

func NewMasterStringOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterStringOptionContext {
	var p = new(MasterStringOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterStringOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterStringOptionContext) StringMasterOption() IStringMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringMasterOptionContext)
}

func (s *MasterStringOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterStringOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *MasterStringOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterStringOption(s)
	}
}

func (s *MasterStringOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterStringOption(s)
	}
}

type MasterRealOptionContext struct {
	*MasterOptionContext
}

func NewMasterRealOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterRealOptionContext {
	var p = new(MasterRealOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterRealOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterRealOptionContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *MasterRealOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterRealOptionContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *MasterRealOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterRealOption(s)
	}
}

func (s *MasterRealOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterRealOption(s)
	}
}

type MasterBoolOptionContext struct {
	*MasterOptionContext
	boolVal antlr.Token
}

func NewMasterBoolOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterBoolOptionContext {
	var p = new(MasterBoolOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterBoolOptionContext) GetBoolVal() antlr.Token { return s.boolVal }

func (s *MasterBoolOptionContext) SetBoolVal(v antlr.Token) { s.boolVal = v }

func (s *MasterBoolOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterBoolOptionContext) BoolMasterOption() IBoolMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolMasterOptionContext)
}

func (s *MasterBoolOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterBoolOptionContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *MasterBoolOptionContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *MasterBoolOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterBoolOption(s)
	}
}

func (s *MasterBoolOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterBoolOption(s)
	}
}

type MasterUidListOptionContext struct {
	*MasterOptionContext
}

func NewMasterUidListOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterUidListOptionContext {
	var p = new(MasterUidListOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterUidListOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterUidListOptionContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE_SERVER_IDS, 0)
}

func (s *MasterUidListOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterUidListOptionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *MasterUidListOptionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *MasterUidListOptionContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *MasterUidListOptionContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *MasterUidListOptionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MasterUidListOptionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MasterUidListOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterUidListOption(s)
	}
}

func (s *MasterUidListOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterUidListOption(s)
	}
}

type MasterDecimalOptionContext struct {
	*MasterOptionContext
}

func NewMasterDecimalOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterDecimalOptionContext {
	var p = new(MasterDecimalOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterDecimalOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterDecimalOptionContext) DecimalMasterOption() IDecimalMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalMasterOptionContext)
}

func (s *MasterDecimalOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterDecimalOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *MasterDecimalOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterDecimalOption(s)
	}
}

func (s *MasterDecimalOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterDecimalOption(s)
	}
}

func (p *MySqlParser) MasterOption() (localctx IMasterOptionContext) {
	localctx = NewMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MySqlParserRULE_masterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4122)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMASTER_BIND, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserRELAY_LOG_FILE:
		localctx = NewMasterStringOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4093)
			p.StringMasterOption()
		}
		{
			p.SetState(4094)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4095)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserRELAY_LOG_POS:
		localctx = NewMasterDecimalOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4097)
			p.DecimalMasterOption()
		}
		{
			p.SetState(4098)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4099)
			p.DecimalLiteral()
		}

	case MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_SSL:
		localctx = NewMasterBoolOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4101)
			p.BoolMasterOption()
		}
		{
			p.SetState(4102)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4103)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*MasterBoolOptionContext).boolVal = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*MasterBoolOptionContext).boolVal = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserMASTER_HEARTBEAT_PERIOD:
		localctx = NewMasterRealOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4105)
			p.Match(MySqlParserMASTER_HEARTBEAT_PERIOD)
		}
		{
			p.SetState(4106)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4107)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case MySqlParserIGNORE_SERVER_IDS:
		localctx = NewMasterUidListOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4108)
			p.Match(MySqlParserIGNORE_SERVER_IDS)
		}
		{
			p.SetState(4109)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4110)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(4119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(4111)
				p.Uid()
			}
			p.SetState(4116)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(4112)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(4113)
					p.Uid()
				}

				p.SetState(4118)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(4121)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringMasterOptionContext is an interface to support dynamic dispatch.
type IStringMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringMasterOptionContext differentiates from other interfaces.
	IsStringMasterOptionContext()
}

type StringMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringMasterOptionContext() *StringMasterOptionContext {
	var p = new(StringMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stringMasterOption
	return p
}

func (*StringMasterOptionContext) IsStringMasterOptionContext() {}

func NewStringMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringMasterOptionContext {
	var p = new(StringMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stringMasterOption

	return p
}

func (s *StringMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *StringMasterOptionContext) MASTER_BIND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_BIND, 0)
}

func (s *StringMasterOptionContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HOST, 0)
}

func (s *StringMasterOptionContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_USER, 0)
}

func (s *StringMasterOptionContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PASSWORD, 0)
}

func (s *StringMasterOptionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *StringMasterOptionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CA, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CAPATH, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CERT, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRL, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRLPATH, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_KEY, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CIPHER, 0)
}

func (s *StringMasterOptionContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_TLS_VERSION, 0)
}

func (s *StringMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringMasterOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStringMasterOption(s)
	}
}

func (s *StringMasterOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStringMasterOption(s)
	}
}

func (p *MySqlParser) StringMasterOption() (localctx IStringMasterOptionContext) {
	localctx = NewStringMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MySqlParserRULE_stringMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4124)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMASTER_BIND || (((_la-464)&-(0x1f+1)) == 0 && ((1<<uint((_la-464)))&((1<<(MySqlParserMASTER_HOST-464))|(1<<(MySqlParserMASTER_LOG_FILE-464))|(1<<(MySqlParserMASTER_PASSWORD-464))|(1<<(MySqlParserMASTER_SSL_CA-464))|(1<<(MySqlParserMASTER_SSL_CAPATH-464))|(1<<(MySqlParserMASTER_SSL_CERT-464))|(1<<(MySqlParserMASTER_SSL_CIPHER-464))|(1<<(MySqlParserMASTER_SSL_CRL-464))|(1<<(MySqlParserMASTER_SSL_CRLPATH-464))|(1<<(MySqlParserMASTER_SSL_KEY-464))|(1<<(MySqlParserMASTER_TLS_VERSION-464))|(1<<(MySqlParserMASTER_USER-464)))) != 0) || _la == MySqlParserRELAY_LOG_FILE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDecimalMasterOptionContext is an interface to support dynamic dispatch.
type IDecimalMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimalMasterOptionContext differentiates from other interfaces.
	IsDecimalMasterOptionContext()
}

type DecimalMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimalMasterOptionContext() *DecimalMasterOptionContext {
	var p = new(DecimalMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimalMasterOption
	return p
}

func (*DecimalMasterOptionContext) IsDecimalMasterOptionContext() {}

func NewDecimalMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecimalMasterOptionContext {
	var p = new(DecimalMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimalMasterOption

	return p
}

func (s *DecimalMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DecimalMasterOptionContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PORT, 0)
}

func (s *DecimalMasterOptionContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_CONNECT_RETRY, 0)
}

func (s *DecimalMasterOptionContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_RETRY_COUNT, 0)
}

func (s *DecimalMasterOptionContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_DELAY, 0)
}

func (s *DecimalMasterOptionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *DecimalMasterOptionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *DecimalMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecimalMasterOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDecimalMasterOption(s)
	}
}

func (s *DecimalMasterOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDecimalMasterOption(s)
	}
}

func (p *MySqlParser) DecimalMasterOption() (localctx IDecimalMasterOptionContext) {
	localctx = NewDecimalMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MySqlParserRULE_decimalMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4126)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-461)&-(0x1f+1)) == 0 && ((1<<uint((_la-461)))&((1<<(MySqlParserMASTER_CONNECT_RETRY-461))|(1<<(MySqlParserMASTER_DELAY-461))|(1<<(MySqlParserMASTER_LOG_POS-461))|(1<<(MySqlParserMASTER_PORT-461))|(1<<(MySqlParserMASTER_RETRY_COUNT-461)))) != 0) || _la == MySqlParserRELAY_LOG_POS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBoolMasterOptionContext is an interface to support dynamic dispatch.
type IBoolMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolMasterOptionContext differentiates from other interfaces.
	IsBoolMasterOptionContext()
}

type BoolMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolMasterOptionContext() *BoolMasterOptionContext {
	var p = new(BoolMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_boolMasterOption
	return p
}

func (*BoolMasterOptionContext) IsBoolMasterOptionContext() {}

func NewBoolMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolMasterOptionContext {
	var p = new(BoolMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_boolMasterOption

	return p
}

func (s *BoolMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolMasterOptionContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_AUTO_POSITION, 0)
}

func (s *BoolMasterOptionContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL, 0)
}

func (s *BoolMasterOptionContext) MASTER_SSL_VERIFY_SERVER_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, 0)
}

func (s *BoolMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolMasterOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBoolMasterOption(s)
	}
}

func (s *BoolMasterOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBoolMasterOption(s)
	}
}

func (p *MySqlParser) BoolMasterOption() (localctx IBoolMasterOptionContext) {
	localctx = NewBoolMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MySqlParserRULE_boolMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4128)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMASTER_SSL_VERIFY_SERVER_CERT || _la == MySqlParserMASTER_AUTO_POSITION || _la == MySqlParserMASTER_SSL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IChannelOptionContext is an interface to support dynamic dispatch.
type IChannelOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelOptionContext differentiates from other interfaces.
	IsChannelOptionContext()
}

type ChannelOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelOptionContext() *ChannelOptionContext {
	var p = new(ChannelOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_channelOption
	return p
}

func (*ChannelOptionContext) IsChannelOptionContext() {}

func NewChannelOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelOptionContext {
	var p = new(ChannelOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_channelOption

	return p
}

func (s *ChannelOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ChannelOptionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *ChannelOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ChannelOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChannelOption(s)
	}
}

func (s *ChannelOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChannelOption(s)
	}
}

func (p *MySqlParser) ChannelOption() (localctx IChannelOptionContext) {
	localctx = NewChannelOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MySqlParserRULE_channelOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4130)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4131)
		p.Match(MySqlParserCHANNEL)
	}
	{
		p.SetState(4132)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IReplicationFilterContext is an interface to support dynamic dispatch.
type IReplicationFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplicationFilterContext differentiates from other interfaces.
	IsReplicationFilterContext()
}

type ReplicationFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplicationFilterContext() *ReplicationFilterContext {
	var p = new(ReplicationFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replicationFilter
	return p
}

func (*ReplicationFilterContext) IsReplicationFilterContext() {}

func NewReplicationFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplicationFilterContext {
	var p = new(ReplicationFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replicationFilter

	return p
}

func (s *ReplicationFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplicationFilterContext) CopyFrom(ctx *ReplicationFilterContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ReplicationFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplicationFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type WildIgnoreTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewWildIgnoreTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildIgnoreTableReplicationContext {
	var p = new(WildIgnoreTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *WildIgnoreTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildIgnoreTableReplicationContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *WildIgnoreTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *WildIgnoreTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *WildIgnoreTableReplicationContext) SimpleStrings() ISimpleStringsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStringsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStringsContext)
}

func (s *WildIgnoreTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *WildIgnoreTableReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWildIgnoreTableReplication(s)
	}
}

func (s *WildIgnoreTableReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWildIgnoreTableReplication(s)
	}
}

type DoTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewDoTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoTableReplicationContext {
	var p = new(DoTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *DoTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoTableReplicationContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_TABLE, 0)
}

func (s *DoTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DoTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DoTableReplicationContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *DoTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DoTableReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDoTableReplication(s)
	}
}

func (s *DoTableReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDoTableReplication(s)
	}
}

type IgnoreTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewIgnoreTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IgnoreTableReplicationContext {
	var p = new(IgnoreTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *IgnoreTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreTableReplicationContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *IgnoreTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IgnoreTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IgnoreTableReplicationContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *IgnoreTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IgnoreTableReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIgnoreTableReplication(s)
	}
}

func (s *IgnoreTableReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIgnoreTableReplication(s)
	}
}

type RewriteDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewRewriteDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RewriteDbReplicationContext {
	var p = new(RewriteDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *RewriteDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RewriteDbReplicationContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_REWRITE_DB, 0)
}

func (s *RewriteDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *RewriteDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *RewriteDbReplicationContext) AllTablePair() []ITablePairContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITablePairContext)(nil)).Elem())
	var tst = make([]ITablePairContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITablePairContext)
		}
	}

	return tst
}

func (s *RewriteDbReplicationContext) TablePair(i int) ITablePairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePairContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITablePairContext)
}

func (s *RewriteDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *RewriteDbReplicationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RewriteDbReplicationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RewriteDbReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRewriteDbReplication(s)
	}
}

func (s *RewriteDbReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRewriteDbReplication(s)
	}
}

type DoDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewDoDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoDbReplicationContext {
	var p = new(DoDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *DoDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoDbReplicationContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_DB, 0)
}

func (s *DoDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DoDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DoDbReplicationContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *DoDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DoDbReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDoDbReplication(s)
	}
}

func (s *DoDbReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDoDbReplication(s)
	}
}

type IgnoreDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewIgnoreDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IgnoreDbReplicationContext {
	var p = new(IgnoreDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *IgnoreDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreDbReplicationContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_DB, 0)
}

func (s *IgnoreDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IgnoreDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IgnoreDbReplicationContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *IgnoreDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IgnoreDbReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIgnoreDbReplication(s)
	}
}

func (s *IgnoreDbReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIgnoreDbReplication(s)
	}
}

type WildDoTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewWildDoTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildDoTableReplicationContext {
	var p = new(WildDoTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *WildDoTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildDoTableReplicationContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *WildDoTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *WildDoTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *WildDoTableReplicationContext) SimpleStrings() ISimpleStringsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStringsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStringsContext)
}

func (s *WildDoTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *WildDoTableReplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWildDoTableReplication(s)
	}
}

func (s *WildDoTableReplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWildDoTableReplication(s)
	}
}

func (p *MySqlParser) ReplicationFilter() (localctx IReplicationFilterContext) {
	localctx = NewReplicationFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MySqlParserRULE_replicationFilter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4183)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREPLICATE_DO_DB:
		localctx = NewDoDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4134)
			p.Match(MySqlParserREPLICATE_DO_DB)
		}
		{
			p.SetState(4135)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4136)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4137)
			p.UidList()
		}
		{
			p.SetState(4138)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_DB:
		localctx = NewIgnoreDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4140)
			p.Match(MySqlParserREPLICATE_IGNORE_DB)
		}
		{
			p.SetState(4141)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4142)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4143)
			p.UidList()
		}
		{
			p.SetState(4144)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_DO_TABLE:
		localctx = NewDoTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4146)
			p.Match(MySqlParserREPLICATE_DO_TABLE)
		}
		{
			p.SetState(4147)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4148)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4149)
			p.Tables()
		}
		{
			p.SetState(4150)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_TABLE:
		localctx = NewIgnoreTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4152)
			p.Match(MySqlParserREPLICATE_IGNORE_TABLE)
		}
		{
			p.SetState(4153)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4154)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4155)
			p.Tables()
		}
		{
			p.SetState(4156)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_DO_TABLE:
		localctx = NewWildDoTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4158)
			p.Match(MySqlParserREPLICATE_WILD_DO_TABLE)
		}
		{
			p.SetState(4159)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4160)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4161)
			p.SimpleStrings()
		}
		{
			p.SetState(4162)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_IGNORE_TABLE:
		localctx = NewWildIgnoreTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4164)
			p.Match(MySqlParserREPLICATE_WILD_IGNORE_TABLE)
		}
		{
			p.SetState(4165)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4166)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4167)
			p.SimpleStrings()
		}
		{
			p.SetState(4168)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_REWRITE_DB:
		localctx = NewRewriteDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4170)
			p.Match(MySqlParserREPLICATE_REWRITE_DB)
		}
		{
			p.SetState(4171)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4172)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4173)
			p.TablePair()
		}
		p.SetState(4178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4174)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4175)
				p.TablePair()
			}

			p.SetState(4180)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4181)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITablePairContext is an interface to support dynamic dispatch.
type ITablePairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirstTable returns the firstTable rule contexts.
	GetFirstTable() ITableNameContext

	// GetSecondTable returns the secondTable rule contexts.
	GetSecondTable() ITableNameContext

	// SetFirstTable sets the firstTable rule contexts.
	SetFirstTable(ITableNameContext)

	// SetSecondTable sets the secondTable rule contexts.
	SetSecondTable(ITableNameContext)

	// IsTablePairContext differentiates from other interfaces.
	IsTablePairContext()
}

type TablePairContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	firstTable  ITableNameContext
	secondTable ITableNameContext
}

func NewEmptyTablePairContext() *TablePairContext {
	var p = new(TablePairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tablePair
	return p
}

func (*TablePairContext) IsTablePairContext() {}

func NewTablePairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePairContext {
	var p = new(TablePairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tablePair

	return p
}

func (s *TablePairContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePairContext) GetFirstTable() ITableNameContext { return s.firstTable }

func (s *TablePairContext) GetSecondTable() ITableNameContext { return s.secondTable }

func (s *TablePairContext) SetFirstTable(v ITableNameContext) { s.firstTable = v }

func (s *TablePairContext) SetSecondTable(v ITableNameContext) { s.secondTable = v }

func (s *TablePairContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TablePairContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *TablePairContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TablePairContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TablePairContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablePairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePairContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTablePair(s)
	}
}

func (s *TablePairContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTablePair(s)
	}
}

func (p *MySqlParser) TablePair() (localctx ITablePairContext) {
	localctx = NewTablePairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, MySqlParserRULE_tablePair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4185)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(4186)

		var _x = p.TableName()

		localctx.(*TablePairContext).firstTable = _x
	}
	{
		p.SetState(4187)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(4188)

		var _x = p.TableName()

		localctx.(*TablePairContext).secondTable = _x
	}
	{
		p.SetState(4189)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IThreadTypeContext is an interface to support dynamic dispatch.
type IThreadTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThreadTypeContext differentiates from other interfaces.
	IsThreadTypeContext()
}

type ThreadTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThreadTypeContext() *ThreadTypeContext {
	var p = new(ThreadTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_threadType
	return p
}

func (*ThreadTypeContext) IsThreadTypeContext() {}

func NewThreadTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThreadTypeContext {
	var p = new(ThreadTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_threadType

	return p
}

func (s *ThreadTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ThreadTypeContext) IO_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO_THREAD, 0)
}

func (s *ThreadTypeContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD, 0)
}

func (s *ThreadTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThreadTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThreadTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterThreadType(s)
	}
}

func (s *ThreadTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitThreadType(s)
	}
}

func (p *MySqlParser) ThreadType() (localctx IThreadTypeContext) {
	localctx = NewThreadTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MySqlParserRULE_threadType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4191)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUntilOptionContext is an interface to support dynamic dispatch.
type IUntilOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUntilOptionContext differentiates from other interfaces.
	IsUntilOptionContext()
}

type UntilOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUntilOptionContext() *UntilOptionContext {
	var p = new(UntilOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_untilOption
	return p
}

func (*UntilOptionContext) IsUntilOptionContext() {}

func NewUntilOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UntilOptionContext {
	var p = new(UntilOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_untilOption

	return p
}

func (s *UntilOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UntilOptionContext) CopyFrom(ctx *UntilOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GtidsUntilOptionContext struct {
	*UntilOptionContext
	gtids antlr.Token
}

func NewGtidsUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GtidsUntilOptionContext {
	var p = new(GtidsUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *GtidsUntilOptionContext) GetGtids() antlr.Token { return s.gtids }

func (s *GtidsUntilOptionContext) SetGtids(v antlr.Token) { s.gtids = v }

func (s *GtidsUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtidsUntilOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *GtidsUntilOptionContext) GtuidSet() IGtuidSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGtuidSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGtuidSetContext)
}

func (s *GtidsUntilOptionContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BEFORE_GTIDS, 0)
}

func (s *GtidsUntilOptionContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_GTIDS, 0)
}

func (s *GtidsUntilOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGtidsUntilOption(s)
	}
}

func (s *GtidsUntilOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGtidsUntilOption(s)
	}
}

type SqlGapsUntilOptionContext struct {
	*UntilOptionContext
}

func NewSqlGapsUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SqlGapsUntilOptionContext {
	var p = new(SqlGapsUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *SqlGapsUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlGapsUntilOptionContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *SqlGapsUntilOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSqlGapsUntilOption(s)
	}
}

func (s *SqlGapsUntilOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSqlGapsUntilOption(s)
	}
}

type MasterLogUntilOptionContext struct {
	*UntilOptionContext
}

func NewMasterLogUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterLogUntilOptionContext {
	var p = new(MasterLogUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *MasterLogUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterLogUntilOptionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *MasterLogUntilOptionContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *MasterLogUntilOptionContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *MasterLogUntilOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *MasterLogUntilOptionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *MasterLogUntilOptionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *MasterLogUntilOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *MasterLogUntilOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterLogUntilOption(s)
	}
}

func (s *MasterLogUntilOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterLogUntilOption(s)
	}
}

type RelayLogUntilOptionContext struct {
	*UntilOptionContext
}

func NewRelayLogUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelayLogUntilOptionContext {
	var p = new(RelayLogUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *RelayLogUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelayLogUntilOptionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *RelayLogUntilOptionContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *RelayLogUntilOptionContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *RelayLogUntilOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *RelayLogUntilOptionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *RelayLogUntilOptionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *RelayLogUntilOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *RelayLogUntilOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRelayLogUntilOption(s)
	}
}

func (s *RelayLogUntilOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRelayLogUntilOption(s)
	}
}

func (p *MySqlParser) UntilOption() (localctx IUntilOptionContext) {
	localctx = NewUntilOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MySqlParserRULE_untilOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4211)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_BEFORE_GTIDS:
		localctx = NewGtidsUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4193)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GtidsUntilOptionContext).gtids = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSQL_AFTER_GTIDS || _la == MySqlParserSQL_BEFORE_GTIDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GtidsUntilOptionContext).gtids = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4194)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4195)
			p.GtuidSet()
		}

	case MySqlParserMASTER_LOG_FILE:
		localctx = NewMasterLogUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4196)
			p.Match(MySqlParserMASTER_LOG_FILE)
		}
		{
			p.SetState(4197)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4198)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(4199)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4200)
			p.Match(MySqlParserMASTER_LOG_POS)
		}
		{
			p.SetState(4201)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4202)
			p.DecimalLiteral()
		}

	case MySqlParserRELAY_LOG_FILE:
		localctx = NewRelayLogUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4203)
			p.Match(MySqlParserRELAY_LOG_FILE)
		}
		{
			p.SetState(4204)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4205)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(4206)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4207)
			p.Match(MySqlParserRELAY_LOG_POS)
		}
		{
			p.SetState(4208)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4209)
			p.DecimalLiteral()
		}

	case MySqlParserSQL_AFTER_MTS_GAPS:
		localctx = NewSqlGapsUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4210)
			p.Match(MySqlParserSQL_AFTER_MTS_GAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConnectionOptionContext is an interface to support dynamic dispatch.
type IConnectionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectionOptionContext differentiates from other interfaces.
	IsConnectionOptionContext()
}

type ConnectionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectionOptionContext() *ConnectionOptionContext {
	var p = new(ConnectionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_connectionOption
	return p
}

func (*ConnectionOptionContext) IsConnectionOptionContext() {}

func NewConnectionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectionOptionContext {
	var p = new(ConnectionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_connectionOption

	return p
}

func (s *ConnectionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectionOptionContext) CopyFrom(ctx *ConnectionOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PluginDirConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptPluginDir antlr.Token
}

func NewPluginDirConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PluginDirConnectionOptionContext {
	var p = new(PluginDirConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *PluginDirConnectionOptionContext) GetConOptPluginDir() antlr.Token { return s.conOptPluginDir }

func (s *PluginDirConnectionOptionContext) SetConOptPluginDir(v antlr.Token) { s.conOptPluginDir = v }

func (s *PluginDirConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PluginDirConnectionOptionContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN_DIR, 0)
}

func (s *PluginDirConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PluginDirConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PluginDirConnectionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPluginDirConnectionOption(s)
	}
}

func (s *PluginDirConnectionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPluginDirConnectionOption(s)
	}
}

type UserConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptUser antlr.Token
}

func NewUserConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UserConnectionOptionContext {
	var p = new(UserConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *UserConnectionOptionContext) GetConOptUser() antlr.Token { return s.conOptUser }

func (s *UserConnectionOptionContext) SetConOptUser(v antlr.Token) { s.conOptUser = v }

func (s *UserConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserConnectionOptionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *UserConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *UserConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UserConnectionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserConnectionOption(s)
	}
}

func (s *UserConnectionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserConnectionOption(s)
	}
}

type DefaultAuthConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptDefAuth antlr.Token
}

func NewDefaultAuthConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefaultAuthConnectionOptionContext {
	var p = new(DefaultAuthConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *DefaultAuthConnectionOptionContext) GetConOptDefAuth() antlr.Token { return s.conOptDefAuth }

func (s *DefaultAuthConnectionOptionContext) SetConOptDefAuth(v antlr.Token) { s.conOptDefAuth = v }

func (s *DefaultAuthConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultAuthConnectionOptionContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT_AUTH, 0)
}

func (s *DefaultAuthConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DefaultAuthConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *DefaultAuthConnectionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefaultAuthConnectionOption(s)
	}
}

func (s *DefaultAuthConnectionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefaultAuthConnectionOption(s)
	}
}

type PasswordConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptPassword antlr.Token
}

func NewPasswordConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordConnectionOptionContext {
	var p = new(PasswordConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *PasswordConnectionOptionContext) GetConOptPassword() antlr.Token { return s.conOptPassword }

func (s *PasswordConnectionOptionContext) SetConOptPassword(v antlr.Token) { s.conOptPassword = v }

func (s *PasswordConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordConnectionOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PasswordConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PasswordConnectionOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPasswordConnectionOption(s)
	}
}

func (s *PasswordConnectionOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPasswordConnectionOption(s)
	}
}

func (p *MySqlParser) ConnectionOption() (localctx IConnectionOptionContext) {
	localctx = NewConnectionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MySqlParserRULE_connectionOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4225)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserUSER:
		localctx = NewUserConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4213)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4214)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4215)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*UserConnectionOptionContext).conOptUser = _m
		}

	case MySqlParserPASSWORD:
		localctx = NewPasswordConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4216)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(4217)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4218)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PasswordConnectionOptionContext).conOptPassword = _m
		}

	case MySqlParserDEFAULT_AUTH:
		localctx = NewDefaultAuthConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4219)
			p.Match(MySqlParserDEFAULT_AUTH)
		}
		{
			p.SetState(4220)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4221)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*DefaultAuthConnectionOptionContext).conOptDefAuth = _m
		}

	case MySqlParserPLUGIN_DIR:
		localctx = NewPluginDirConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4222)
			p.Match(MySqlParserPLUGIN_DIR)
		}
		{
			p.SetState(4223)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4224)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PluginDirConnectionOptionContext).conOptPluginDir = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGtuidSetContext is an interface to support dynamic dispatch.
type IGtuidSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGtuidSetContext differentiates from other interfaces.
	IsGtuidSetContext()
}

type GtuidSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGtuidSetContext() *GtuidSetContext {
	var p = new(GtuidSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_gtuidSet
	return p
}

func (*GtuidSetContext) IsGtuidSetContext() {}

func NewGtuidSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GtuidSetContext {
	var p = new(GtuidSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_gtuidSet

	return p
}

func (s *GtuidSetContext) GetParser() antlr.Parser { return s.parser }

func (s *GtuidSetContext) AllUuidSet() []IUuidSetContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUuidSetContext)(nil)).Elem())
	var tst = make([]IUuidSetContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUuidSetContext)
		}
	}

	return tst
}

func (s *GtuidSetContext) UuidSet(i int) IUuidSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUuidSetContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUuidSetContext)
}

func (s *GtuidSetContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GtuidSetContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GtuidSetContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *GtuidSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtuidSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GtuidSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGtuidSet(s)
	}
}

func (s *GtuidSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGtuidSet(s)
	}
}

func (p *MySqlParser) GtuidSet() (localctx IGtuidSetContext) {
	localctx = NewGtuidSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, MySqlParserRULE_gtuidSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4236)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4227)
			p.UuidSet()
		}
		p.SetState(4232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4228)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4229)
				p.UuidSet()
			}

			p.SetState(4234)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4235)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IXaStartTransactionContext is an interface to support dynamic dispatch.
type IXaStartTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXaStart returns the xaStart token.
	GetXaStart() antlr.Token

	// GetXaAction returns the xaAction token.
	GetXaAction() antlr.Token

	// SetXaStart sets the xaStart token.
	SetXaStart(antlr.Token)

	// SetXaAction sets the xaAction token.
	SetXaAction(antlr.Token)

	// IsXaStartTransactionContext differentiates from other interfaces.
	IsXaStartTransactionContext()
}

type XaStartTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	xaStart  antlr.Token
	xaAction antlr.Token
}

func NewEmptyXaStartTransactionContext() *XaStartTransactionContext {
	var p = new(XaStartTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaStartTransaction
	return p
}

func (*XaStartTransactionContext) IsXaStartTransactionContext() {}

func NewXaStartTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaStartTransactionContext {
	var p = new(XaStartTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaStartTransaction

	return p
}

func (s *XaStartTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *XaStartTransactionContext) GetXaStart() antlr.Token { return s.xaStart }

func (s *XaStartTransactionContext) GetXaAction() antlr.Token { return s.xaAction }

func (s *XaStartTransactionContext) SetXaStart(v antlr.Token) { s.xaStart = v }

func (s *XaStartTransactionContext) SetXaAction(v antlr.Token) { s.xaAction = v }

func (s *XaStartTransactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaStartTransactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaStartTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *XaStartTransactionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *XaStartTransactionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *XaStartTransactionContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESUME, 0)
}

func (s *XaStartTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaStartTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaStartTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaStartTransaction(s)
	}
}

func (s *XaStartTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaStartTransaction(s)
	}
}

func (p *MySqlParser) XaStartTransaction() (localctx IXaStartTransactionContext) {
	localctx = NewXaStartTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, MySqlParserRULE_xaStartTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4238)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4239)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*XaStartTransactionContext).xaStart = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBEGIN || _la == MySqlParserSTART) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*XaStartTransactionContext).xaStart = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4240)
		p.Xid()
	}
	p.SetState(4242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserJOIN || _la == MySqlParserRESUME {
		{
			p.SetState(4241)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*XaStartTransactionContext).xaAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJOIN || _la == MySqlParserRESUME) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*XaStartTransactionContext).xaAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IXaEndTransactionContext is an interface to support dynamic dispatch.
type IXaEndTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaEndTransactionContext differentiates from other interfaces.
	IsXaEndTransactionContext()
}

type XaEndTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaEndTransactionContext() *XaEndTransactionContext {
	var p = new(XaEndTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaEndTransaction
	return p
}

func (*XaEndTransactionContext) IsXaEndTransactionContext() {}

func NewXaEndTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaEndTransactionContext {
	var p = new(XaEndTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaEndTransaction

	return p
}

func (s *XaEndTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *XaEndTransactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaEndTransactionContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *XaEndTransactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaEndTransactionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUSPEND, 0)
}

func (s *XaEndTransactionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *XaEndTransactionContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIGRATE, 0)
}

func (s *XaEndTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaEndTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaEndTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaEndTransaction(s)
	}
}

func (s *XaEndTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaEndTransaction(s)
	}
}

func (p *MySqlParser) XaEndTransaction() (localctx IXaEndTransactionContext) {
	localctx = NewXaEndTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MySqlParserRULE_xaEndTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4244)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4245)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4246)
		p.Xid()
	}
	p.SetState(4252)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUSPEND {
		{
			p.SetState(4247)
			p.Match(MySqlParserSUSPEND)
		}
		p.SetState(4250)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4248)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4249)
				p.Match(MySqlParserMIGRATE)
			}

		}

	}

	return localctx
}

// IXaPrepareStatementContext is an interface to support dynamic dispatch.
type IXaPrepareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaPrepareStatementContext differentiates from other interfaces.
	IsXaPrepareStatementContext()
}

type XaPrepareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaPrepareStatementContext() *XaPrepareStatementContext {
	var p = new(XaPrepareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaPrepareStatement
	return p
}

func (*XaPrepareStatementContext) IsXaPrepareStatementContext() {}

func NewXaPrepareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaPrepareStatementContext {
	var p = new(XaPrepareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaPrepareStatement

	return p
}

func (s *XaPrepareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *XaPrepareStatementContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaPrepareStatementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *XaPrepareStatementContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaPrepareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaPrepareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaPrepareStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaPrepareStatement(s)
	}
}

func (s *XaPrepareStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaPrepareStatement(s)
	}
}

func (p *MySqlParser) XaPrepareStatement() (localctx IXaPrepareStatementContext) {
	localctx = NewXaPrepareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MySqlParserRULE_xaPrepareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4254)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4255)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4256)
		p.Xid()
	}

	return localctx
}

// IXaCommitWorkContext is an interface to support dynamic dispatch.
type IXaCommitWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaCommitWorkContext differentiates from other interfaces.
	IsXaCommitWorkContext()
}

type XaCommitWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaCommitWorkContext() *XaCommitWorkContext {
	var p = new(XaCommitWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaCommitWork
	return p
}

func (*XaCommitWorkContext) IsXaCommitWorkContext() {}

func NewXaCommitWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaCommitWorkContext {
	var p = new(XaCommitWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaCommitWork

	return p
}

func (s *XaCommitWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaCommitWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaCommitWorkContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *XaCommitWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaCommitWorkContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE, 0)
}

func (s *XaCommitWorkContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPHASE, 0)
}

func (s *XaCommitWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaCommitWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaCommitWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaCommitWork(s)
	}
}

func (s *XaCommitWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaCommitWork(s)
	}
}

func (p *MySqlParser) XaCommitWork() (localctx IXaCommitWorkContext) {
	localctx = NewXaCommitWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MySqlParserRULE_xaCommitWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4258)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4259)
		p.Match(MySqlParserCOMMIT)
	}
	{
		p.SetState(4260)
		p.Xid()
	}
	p.SetState(4263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserONE {
		{
			p.SetState(4261)
			p.Match(MySqlParserONE)
		}
		{
			p.SetState(4262)
			p.Match(MySqlParserPHASE)
		}

	}

	return localctx
}

// IXaRollbackWorkContext is an interface to support dynamic dispatch.
type IXaRollbackWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaRollbackWorkContext differentiates from other interfaces.
	IsXaRollbackWorkContext()
}

type XaRollbackWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaRollbackWorkContext() *XaRollbackWorkContext {
	var p = new(XaRollbackWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaRollbackWork
	return p
}

func (*XaRollbackWorkContext) IsXaRollbackWorkContext() {}

func NewXaRollbackWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaRollbackWorkContext {
	var p = new(XaRollbackWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaRollbackWork

	return p
}

func (s *XaRollbackWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaRollbackWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaRollbackWorkContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *XaRollbackWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaRollbackWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaRollbackWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaRollbackWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaRollbackWork(s)
	}
}

func (s *XaRollbackWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaRollbackWork(s)
	}
}

func (p *MySqlParser) XaRollbackWork() (localctx IXaRollbackWorkContext) {
	localctx = NewXaRollbackWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MySqlParserRULE_xaRollbackWork)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4265)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4266)
		p.Match(MySqlParserROLLBACK)
	}
	{
		p.SetState(4267)
		p.Xid()
	}

	return localctx
}

// IXaRecoverWorkContext is an interface to support dynamic dispatch.
type IXaRecoverWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaRecoverWorkContext differentiates from other interfaces.
	IsXaRecoverWorkContext()
}

type XaRecoverWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaRecoverWorkContext() *XaRecoverWorkContext {
	var p = new(XaRecoverWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaRecoverWork
	return p
}

func (*XaRecoverWorkContext) IsXaRecoverWorkContext() {}

func NewXaRecoverWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaRecoverWorkContext {
	var p = new(XaRecoverWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaRecoverWork

	return p
}

func (s *XaRecoverWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaRecoverWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaRecoverWorkContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECOVER, 0)
}

func (s *XaRecoverWorkContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *XaRecoverWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaRecoverWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaRecoverWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaRecoverWorkContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXaRecoverWork(s)
	}
}

func (s *XaRecoverWorkContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXaRecoverWork(s)
	}
}

func (p *MySqlParser) XaRecoverWork() (localctx IXaRecoverWorkContext) {
	localctx = NewXaRecoverWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MySqlParserRULE_xaRecoverWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4269)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4270)
		p.Match(MySqlParserRECOVER)
	}
	p.SetState(4273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONVERT {
		{
			p.SetState(4271)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(4272)
			p.Xid()
		}

	}

	return localctx
}

// IPrepareStatementContext is an interface to support dynamic dispatch.
type IPrepareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery returns the query token.
	GetQuery() antlr.Token

	// GetVariable returns the variable token.
	GetVariable() antlr.Token

	// SetQuery sets the query token.
	SetQuery(antlr.Token)

	// SetVariable sets the variable token.
	SetVariable(antlr.Token)

	// IsPrepareStatementContext differentiates from other interfaces.
	IsPrepareStatementContext()
}

type PrepareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	query    antlr.Token
	variable antlr.Token
}

func NewEmptyPrepareStatementContext() *PrepareStatementContext {
	var p = new(PrepareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_prepareStatement
	return p
}

func (*PrepareStatementContext) IsPrepareStatementContext() {}

func NewPrepareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrepareStatementContext {
	var p = new(PrepareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_prepareStatement

	return p
}

func (s *PrepareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PrepareStatementContext) GetQuery() antlr.Token { return s.query }

func (s *PrepareStatementContext) GetVariable() antlr.Token { return s.variable }

func (s *PrepareStatementContext) SetQuery(v antlr.Token) { s.query = v }

func (s *PrepareStatementContext) SetVariable(v antlr.Token) { s.variable = v }

func (s *PrepareStatementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *PrepareStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PrepareStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *PrepareStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PrepareStatementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *PrepareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrepareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrepareStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrepareStatement(s)
	}
}

func (s *PrepareStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrepareStatement(s)
	}
}

func (p *MySqlParser) PrepareStatement() (localctx IPrepareStatementContext) {
	localctx = NewPrepareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MySqlParserRULE_prepareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4275)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4276)
		p.Uid()
	}
	{
		p.SetState(4277)
		p.Match(MySqlParserFROM)
	}
	p.SetState(4280)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL:
		{
			p.SetState(4278)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PrepareStatementContext).query = _m
		}

	case MySqlParserLOCAL_ID:
		{
			p.SetState(4279)

			var _m = p.Match(MySqlParserLOCAL_ID)

			localctx.(*PrepareStatementContext).variable = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecuteStatementContext is an interface to support dynamic dispatch.
type IExecuteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuteStatementContext differentiates from other interfaces.
	IsExecuteStatementContext()
}

type ExecuteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuteStatementContext() *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_executeStatement
	return p
}

func (*ExecuteStatementContext) IsExecuteStatementContext() {}

func NewExecuteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_executeStatement

	return p
}

func (s *ExecuteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecuteStatementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *ExecuteStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ExecuteStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *ExecuteStatementContext) UserVariables() IUserVariablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserVariablesContext)
}

func (s *ExecuteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecuteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExecuteStatement(s)
	}
}

func (s *ExecuteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExecuteStatement(s)
	}
}

func (p *MySqlParser) ExecuteStatement() (localctx IExecuteStatementContext) {
	localctx = NewExecuteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MySqlParserRULE_executeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4282)
		p.Match(MySqlParserEXECUTE)
	}
	{
		p.SetState(4283)
		p.Uid()
	}
	p.SetState(4286)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(4284)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(4285)
			p.UserVariables()
		}

	}

	return localctx
}

// IDeallocatePrepareContext is an interface to support dynamic dispatch.
type IDeallocatePrepareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropFormat returns the dropFormat token.
	GetDropFormat() antlr.Token

	// SetDropFormat sets the dropFormat token.
	SetDropFormat(antlr.Token)

	// IsDeallocatePrepareContext differentiates from other interfaces.
	IsDeallocatePrepareContext()
}

type DeallocatePrepareContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	dropFormat antlr.Token
}

func NewEmptyDeallocatePrepareContext() *DeallocatePrepareContext {
	var p = new(DeallocatePrepareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_deallocatePrepare
	return p
}

func (*DeallocatePrepareContext) IsDeallocatePrepareContext() {}

func NewDeallocatePrepareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeallocatePrepareContext {
	var p = new(DeallocatePrepareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_deallocatePrepare

	return p
}

func (s *DeallocatePrepareContext) GetParser() antlr.Parser { return s.parser }

func (s *DeallocatePrepareContext) GetDropFormat() antlr.Token { return s.dropFormat }

func (s *DeallocatePrepareContext) SetDropFormat(v antlr.Token) { s.dropFormat = v }

func (s *DeallocatePrepareContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *DeallocatePrepareContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeallocatePrepareContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEALLOCATE, 0)
}

func (s *DeallocatePrepareContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DeallocatePrepareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeallocatePrepareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeallocatePrepareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeallocatePrepare(s)
	}
}

func (s *DeallocatePrepareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeallocatePrepare(s)
	}
}

func (p *MySqlParser) DeallocatePrepare() (localctx IDeallocatePrepareContext) {
	localctx = NewDeallocatePrepareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MySqlParserRULE_deallocatePrepare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4288)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DeallocatePrepareContext).dropFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDROP || _la == MySqlParserDEALLOCATE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DeallocatePrepareContext).dropFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4289)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4290)
		p.Uid()
	}

	return localctx
}

// IRoutineBodyContext is an interface to support dynamic dispatch.
type IRoutineBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineBodyContext differentiates from other interfaces.
	IsRoutineBodyContext()
}

type RoutineBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineBodyContext() *RoutineBodyContext {
	var p = new(RoutineBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routineBody
	return p
}

func (*RoutineBodyContext) IsRoutineBodyContext() {}

func NewRoutineBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineBodyContext {
	var p = new(RoutineBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routineBody

	return p
}

func (s *RoutineBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineBodyContext) BlockStatement() IBlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *RoutineBodyContext) SqlStatement() ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *RoutineBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutineBody(s)
	}
}

func (s *RoutineBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutineBody(s)
	}
}

func (p *MySqlParser) RoutineBody() (localctx IRoutineBodyContext) {
	localctx = NewRoutineBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MySqlParserRULE_routineBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4294)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4292)
			p.BlockStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4293)
			p.SqlStatement()
		}

	}

	return localctx
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_blockStatement
	return p
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *BlockStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *BlockStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *BlockStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *BlockStatementContext) AllDeclareVariable() []IDeclareVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareVariableContext)(nil)).Elem())
	var tst = make([]IDeclareVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareVariableContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareVariable(i int) IDeclareVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableContext)
}

func (s *BlockStatementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *BlockStatementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *BlockStatementContext) AllDeclareCondition() []IDeclareConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareConditionContext)(nil)).Elem())
	var tst = make([]IDeclareConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareConditionContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareCondition(i int) IDeclareConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareConditionContext)
}

func (s *BlockStatementContext) AllDeclareCursor() []IDeclareCursorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareCursorContext)(nil)).Elem())
	var tst = make([]IDeclareCursorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareCursorContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareCursor(i int) IDeclareCursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareCursorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareCursorContext)
}

func (s *BlockStatementContext) AllDeclareHandler() []IDeclareHandlerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareHandlerContext)(nil)).Elem())
	var tst = make([]IDeclareHandlerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareHandlerContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareHandler(i int) IDeclareHandlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareHandlerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareHandlerContext)
}

func (s *BlockStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBlockStatement(s)
	}
}

func (s *BlockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBlockStatement(s)
	}
}

func (p *MySqlParser) BlockStatement() (localctx IBlockStatementContext) {
	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MySqlParserRULE_blockStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4299)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 612, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4296)
			p.Uid()
		}
		{
			p.SetState(4297)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4301)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(4340)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 618, p.GetParserRuleContext()) == 1 {
		p.SetState(4307)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 613, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4302)
					p.DeclareVariable()
				}
				{
					p.SetState(4303)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4309)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 613, p.GetParserRuleContext())
		}
		p.SetState(4315)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4310)
					p.DeclareCondition()
				}
				{
					p.SetState(4311)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4317)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext())
		}
		p.SetState(4323)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 615, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4318)
					p.DeclareCursor()
				}
				{
					p.SetState(4319)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4325)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 615, p.GetParserRuleContext())
		}
		p.SetState(4331)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDECLARE {
			{
				p.SetState(4326)
				p.DeclareHandler()
			}
			{
				p.SetState(4327)
				p.Match(MySqlParserSEMI)
			}

			p.SetState(4333)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4337)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4334)
					p.ProcedureSqlStatement()
				}

			}
			p.SetState(4339)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4342)
		p.Match(MySqlParserEND)
	}
	p.SetState(4344)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 619, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4343)
			p.Uid()
		}

	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCASE)
}

func (s *CaseStatementContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, i)
}

func (s *CaseStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseStatementContext) AllCaseAlternative() []ICaseAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseAlternativeContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) CaseAlternative(i int) ICaseAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseAlternativeContext)
}

func (s *CaseStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseStatement(s)
	}
}

func (s *CaseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseStatement(s)
	}
}

func (p *MySqlParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MySqlParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4346)
		p.Match(MySqlParserCASE)
	}
	p.SetState(4349)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4347)
			p.Uid()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4348)
			p.expression(0)
		}

	}
	p.SetState(4352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserWHEN {
		{
			p.SetState(4351)
			p.CaseAlternative()
		}

		p.SetState(4354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(4356)
			p.Match(MySqlParserELSE)
		}
		p.SetState(4358)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4357)
					p.ProcedureSqlStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4360)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 622, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4364)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4365)
		p.Match(MySqlParserCASE)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_procedureSqlStatement returns the _procedureSqlStatement rule contexts.
	Get_procedureSqlStatement() IProcedureSqlStatementContext

	// Set_procedureSqlStatement sets the _procedureSqlStatement rule contexts.
	Set_procedureSqlStatement(IProcedureSqlStatementContext)

	// GetThenStatements returns the thenStatements rule context list.
	GetThenStatements() []IProcedureSqlStatementContext

	// GetElseStatements returns the elseStatements rule context list.
	GetElseStatements() []IProcedureSqlStatementContext

	// SetThenStatements sets the thenStatements rule context list.
	SetThenStatements([]IProcedureSqlStatementContext)

	// SetElseStatements sets the elseStatements rule context list.
	SetElseStatements([]IProcedureSqlStatementContext)

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	_procedureSqlStatement IProcedureSqlStatementContext
	thenStatements         []IProcedureSqlStatementContext
	elseStatements         []IProcedureSqlStatementContext
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Get_procedureSqlStatement() IProcedureSqlStatementContext {
	return s._procedureSqlStatement
}

func (s *IfStatementContext) Set_procedureSqlStatement(v IProcedureSqlStatementContext) {
	s._procedureSqlStatement = v
}

func (s *IfStatementContext) GetThenStatements() []IProcedureSqlStatementContext {
	return s.thenStatements
}

func (s *IfStatementContext) GetElseStatements() []IProcedureSqlStatementContext {
	return s.elseStatements
}

func (s *IfStatementContext) SetThenStatements(v []IProcedureSqlStatementContext) {
	s.thenStatements = v
}

func (s *IfStatementContext) SetElseStatements(v []IProcedureSqlStatementContext) {
	s.elseStatements = v
}

func (s *IfStatementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIF)
}

func (s *IfStatementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, i)
}

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *IfStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *IfStatementContext) AllElifAlternative() []IElifAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElifAlternativeContext)(nil)).Elem())
	var tst = make([]IElifAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElifAlternativeContext)
		}
	}

	return tst
}

func (s *IfStatementContext) ElifAlternative(i int) IElifAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElifAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElifAlternativeContext)
}

func (s *IfStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *IfStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (p *MySqlParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, MySqlParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4367)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(4368)
		p.expression(0)
	}
	{
		p.SetState(4369)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4371)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4370)

				var _x = p.ProcedureSqlStatement()

				localctx.(*IfStatementContext)._procedureSqlStatement = _x
			}
			localctx.(*IfStatementContext).thenStatements = append(localctx.(*IfStatementContext).thenStatements, localctx.(*IfStatementContext)._procedureSqlStatement)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4373)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 624, p.GetParserRuleContext())
	}
	p.SetState(4378)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserELSEIF {
		{
			p.SetState(4375)
			p.ElifAlternative()
		}

		p.SetState(4380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4387)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(4381)
			p.Match(MySqlParserELSE)
		}
		p.SetState(4383)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4382)

					var _x = p.ProcedureSqlStatement()

					localctx.(*IfStatementContext)._procedureSqlStatement = _x
				}
				localctx.(*IfStatementContext).elseStatements = append(localctx.(*IfStatementContext).elseStatements, localctx.(*IfStatementContext)._procedureSqlStatement)

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4385)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 626, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4389)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4390)
		p.Match(MySqlParserIF)
	}

	return localctx
}

// IIterateStatementContext is an interface to support dynamic dispatch.
type IIterateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterateStatementContext differentiates from other interfaces.
	IsIterateStatementContext()
}

type IterateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterateStatementContext() *IterateStatementContext {
	var p = new(IterateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_iterateStatement
	return p
}

func (*IterateStatementContext) IsIterateStatementContext() {}

func NewIterateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterateStatementContext {
	var p = new(IterateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_iterateStatement

	return p
}

func (s *IterateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterateStatementContext) ITERATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserITERATE, 0)
}

func (s *IterateStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IterateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIterateStatement(s)
	}
}

func (s *IterateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIterateStatement(s)
	}
}

func (p *MySqlParser) IterateStatement() (localctx IIterateStatementContext) {
	localctx = NewIterateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, MySqlParserRULE_iterateStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4392)
		p.Match(MySqlParserITERATE)
	}
	{
		p.SetState(4393)
		p.Uid()
	}

	return localctx
}

// ILeaveStatementContext is an interface to support dynamic dispatch.
type ILeaveStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeaveStatementContext differentiates from other interfaces.
	IsLeaveStatementContext()
}

type LeaveStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeaveStatementContext() *LeaveStatementContext {
	var p = new(LeaveStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_leaveStatement
	return p
}

func (*LeaveStatementContext) IsLeaveStatementContext() {}

func NewLeaveStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeaveStatementContext {
	var p = new(LeaveStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_leaveStatement

	return p
}

func (s *LeaveStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LeaveStatementContext) LEAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVE, 0)
}

func (s *LeaveStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LeaveStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeaveStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeaveStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLeaveStatement(s)
	}
}

func (s *LeaveStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLeaveStatement(s)
	}
}

func (p *MySqlParser) LeaveStatement() (localctx ILeaveStatementContext) {
	localctx = NewLeaveStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, MySqlParserRULE_leaveStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4395)
		p.Match(MySqlParserLEAVE)
	}
	{
		p.SetState(4396)
		p.Uid()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) AllLOOP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOOP)
}

func (s *LoopStatementContext) LOOP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOOP, i)
}

func (s *LoopStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *LoopStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LoopStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *LoopStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoopStatement(s)
	}
}

func (s *LoopStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoopStatement(s)
	}
}

func (p *MySqlParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, MySqlParserRULE_loopStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4398)
			p.Uid()
		}
		{
			p.SetState(4399)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4403)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(4405)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4404)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4407)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext())
	}
	{
		p.SetState(4409)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4410)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(4412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4411)
			p.Uid()
		}

	}

	return localctx
}

// IRepeatStatementContext is an interface to support dynamic dispatch.
type IRepeatStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeatStatementContext differentiates from other interfaces.
	IsRepeatStatementContext()
}

type RepeatStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatStatementContext() *RepeatStatementContext {
	var p = new(RepeatStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repeatStatement
	return p
}

func (*RepeatStatementContext) IsRepeatStatementContext() {}

func NewRepeatStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepeatStatementContext {
	var p = new(RepeatStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repeatStatement

	return p
}

func (s *RepeatStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RepeatStatementContext) AllREPEAT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserREPEAT)
}

func (s *RepeatStatementContext) REPEAT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEAT, i)
}

func (s *RepeatStatementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *RepeatStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RepeatStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *RepeatStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *RepeatStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *RepeatStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *RepeatStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepeatStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepeatStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRepeatStatement(s)
	}
}

func (s *RepeatStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRepeatStatement(s)
	}
}

func (p *MySqlParser) RepeatStatement() (localctx IRepeatStatementContext) {
	localctx = NewRepeatStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, MySqlParserRULE_repeatStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4417)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4414)
			p.Uid()
		}
		{
			p.SetState(4415)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4419)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(4421)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4420)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4423)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 632, p.GetParserRuleContext())
	}
	{
		p.SetState(4425)
		p.Match(MySqlParserUNTIL)
	}
	{
		p.SetState(4426)
		p.expression(0)
	}
	{
		p.SetState(4427)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4428)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(4430)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4429)
			p.Uid()
		}

	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURN, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (p *MySqlParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, MySqlParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4432)
		p.Match(MySqlParserRETURN)
	}
	{
		p.SetState(4433)
		p.expression(0)
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) AllWHILE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWHILE)
}

func (s *WhileStatementContext) WHILE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWHILE, i)
}

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *WhileStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *WhileStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *WhileStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *WhileStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (p *MySqlParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, MySqlParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4435)
			p.Uid()
		}
		{
			p.SetState(4436)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4440)
		p.Match(MySqlParserWHILE)
	}
	{
		p.SetState(4441)
		p.expression(0)
	}
	{
		p.SetState(4442)
		p.Match(MySqlParserDO)
	}
	p.SetState(4444)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4443)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4446)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext())
	}
	{
		p.SetState(4448)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4449)
		p.Match(MySqlParserWHILE)
	}
	p.SetState(4451)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDATABASE-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(MySqlParserGROUP-70))|(1<<(MySqlParserIGNORED-70))|(1<<(MySqlParserLEFT-70)))) != 0) || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111))|(1<<(MySqlParserRIGHT-111)))) != 0) || _la == MySqlParserSCHEMA || _la == MySqlParserSTACKED || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserBINARY-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserCUME_DIST-274))|(1<<(MySqlParserDENSE_RANK-274))|(1<<(MySqlParserFIRST_VALUE-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserLAG-274))|(1<<(MySqlParserLAST_VALUE-274))|(1<<(MySqlParserLEAD-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserNTILE-274))|(1<<(MySqlParserNTH_VALUE-274))|(1<<(MySqlParserPERCENT_RANK-274))|(1<<(MySqlParserRANK-274))|(1<<(MySqlParserROW_NUMBER-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserPOSITION-312))|(1<<(MySqlParserACCOUNT-312))|(1<<(MySqlParserACTION-312))|(1<<(MySqlParserAFTER-312))|(1<<(MySqlParserAGGREGATE-312))|(1<<(MySqlParserALGORITHM-312))|(1<<(MySqlParserANY-312))|(1<<(MySqlParserAT-312))|(1<<(MySqlParserAUTHORS-312))|(1<<(MySqlParserAUTOCOMMIT-312))|(1<<(MySqlParserAUTOEXTEND_SIZE-312))|(1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserBEGIN-312))|(1<<(MySqlParserBINLOG-312))|(1<<(MySqlParserBIT-312))|(1<<(MySqlParserBLOCK-312))|(1<<(MySqlParserBOOL-312))|(1<<(MySqlParserBOOLEAN-312))|(1<<(MySqlParserBTREE-312))|(1<<(MySqlParserCACHE-312))|(1<<(MySqlParserCASCADED-312))|(1<<(MySqlParserCHAIN-312))|(1<<(MySqlParserCHANGED-312))|(1<<(MySqlParserCHANNEL-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCHECKSUM-344))|(1<<(MySqlParserPAGE_CHECKSUM-344))|(1<<(MySqlParserCIPHER-344))|(1<<(MySqlParserCLASS_ORIGIN-344))|(1<<(MySqlParserCLIENT-344))|(1<<(MySqlParserCLOSE-344))|(1<<(MySqlParserCLUSTERING-344))|(1<<(MySqlParserCOALESCE-344))|(1<<(MySqlParserCODE-344))|(1<<(MySqlParserCOLUMNS-344))|(1<<(MySqlParserCOLUMN_FORMAT-344))|(1<<(MySqlParserCOLUMN_NAME-344))|(1<<(MySqlParserCOMMENT-344))|(1<<(MySqlParserCOMMIT-344))|(1<<(MySqlParserCOMPACT-344))|(1<<(MySqlParserCOMPLETION-344))|(1<<(MySqlParserCOMPRESSED-344))|(1<<(MySqlParserCOMPRESSION-344))|(1<<(MySqlParserCONCURRENT-344))|(1<<(MySqlParserCONNECT-344))|(1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserCONSISTENT-344))|(1<<(MySqlParserCONSTRAINT_CATALOG-344))|(1<<(MySqlParserCONSTRAINT_SCHEMA-344))|(1<<(MySqlParserCONSTRAINT_NAME-344))|(1<<(MySqlParserCONTAINS-344))|(1<<(MySqlParserCONTEXT-344))|(1<<(MySqlParserCONTRIBUTORS-344))|(1<<(MySqlParserCOPY-344))|(1<<(MySqlParserCPU-344))|(1<<(MySqlParserCURSOR_NAME-344))|(1<<(MySqlParserDATA-344)))) != 0) || (((_la-376)&-(0x1f+1)) == 0 && ((1<<uint((_la-376)))&((1<<(MySqlParserDATAFILE-376))|(1<<(MySqlParserDEALLOCATE-376))|(1<<(MySqlParserDEFAULT_AUTH-376))|(1<<(MySqlParserDEFINER-376))|(1<<(MySqlParserDELAY_KEY_WRITE-376))|(1<<(MySqlParserDES_KEY_FILE-376))|(1<<(MySqlParserDIRECTORY-376))|(1<<(MySqlParserDISABLE-376))|(1<<(MySqlParserDISCARD-376))|(1<<(MySqlParserDISK-376))|(1<<(MySqlParserDO-376))|(1<<(MySqlParserDUMPFILE-376))|(1<<(MySqlParserDUPLICATE-376))|(1<<(MySqlParserDYNAMIC-376))|(1<<(MySqlParserENABLE-376))|(1<<(MySqlParserENCRYPTION-376))|(1<<(MySqlParserEND-376))|(1<<(MySqlParserENDS-376))|(1<<(MySqlParserENGINE-376))|(1<<(MySqlParserENGINES-376))|(1<<(MySqlParserERROR-376))|(1<<(MySqlParserERRORS-376))|(1<<(MySqlParserESCAPE-376))|(1<<(MySqlParserEVEN-376))|(1<<(MySqlParserEVENT-376))|(1<<(MySqlParserEVENTS-376))|(1<<(MySqlParserEVERY-376))|(1<<(MySqlParserEXCHANGE-376))|(1<<(MySqlParserEXCLUSIVE-376))|(1<<(MySqlParserEXPIRE-376))|(1<<(MySqlParserEXPORT-376))|(1<<(MySqlParserEXTENDED-376)))) != 0) || (((_la-408)&-(0x1f+1)) == 0 && ((1<<uint((_la-408)))&((1<<(MySqlParserEXTENT_SIZE-408))|(1<<(MySqlParserFAST-408))|(1<<(MySqlParserFAULTS-408))|(1<<(MySqlParserFIELDS-408))|(1<<(MySqlParserFILE_BLOCK_SIZE-408))|(1<<(MySqlParserFILTER-408))|(1<<(MySqlParserFIRST-408))|(1<<(MySqlParserFIXED-408))|(1<<(MySqlParserFLUSH-408))|(1<<(MySqlParserFOLLOWS-408))|(1<<(MySqlParserFOUND-408))|(1<<(MySqlParserFULL-408))|(1<<(MySqlParserFUNCTION-408))|(1<<(MySqlParserGENERAL-408))|(1<<(MySqlParserGLOBAL-408))|(1<<(MySqlParserGRANTS-408))|(1<<(MySqlParserGROUP_REPLICATION-408))|(1<<(MySqlParserHANDLER-408))|(1<<(MySqlParserHASH-408))|(1<<(MySqlParserHELP-408))|(1<<(MySqlParserHOST-408))|(1<<(MySqlParserHOSTS-408))|(1<<(MySqlParserIDENTIFIED-408))|(1<<(MySqlParserIGNORE_SERVER_IDS-408))|(1<<(MySqlParserIMPORT-408))|(1<<(MySqlParserINDEXES-408))|(1<<(MySqlParserINITIAL_SIZE-408))|(1<<(MySqlParserINPLACE-408))|(1<<(MySqlParserINSERT_METHOD-408))|(1<<(MySqlParserINSTALL-408))|(1<<(MySqlParserINSTANCE-408)))) != 0) || (((_la-440)&-(0x1f+1)) == 0 && ((1<<uint((_la-440)))&((1<<(MySqlParserINSTANT-440))|(1<<(MySqlParserINVISIBLE-440))|(1<<(MySqlParserINVOKER-440))|(1<<(MySqlParserIO-440))|(1<<(MySqlParserIO_THREAD-440))|(1<<(MySqlParserIPC-440))|(1<<(MySqlParserISOLATION-440))|(1<<(MySqlParserISSUER-440))|(1<<(MySqlParserJSON-440))|(1<<(MySqlParserKEY_BLOCK_SIZE-440))|(1<<(MySqlParserLANGUAGE-440))|(1<<(MySqlParserLAST-440))|(1<<(MySqlParserLEAVES-440))|(1<<(MySqlParserLESS-440))|(1<<(MySqlParserLEVEL-440))|(1<<(MySqlParserLIST-440))|(1<<(MySqlParserLOCAL-440))|(1<<(MySqlParserLOGFILE-440))|(1<<(MySqlParserLOGS-440))|(1<<(MySqlParserMASTER-440))|(1<<(MySqlParserMASTER_AUTO_POSITION-440))|(1<<(MySqlParserMASTER_CONNECT_RETRY-440))|(1<<(MySqlParserMASTER_DELAY-440))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-440))|(1<<(MySqlParserMASTER_HOST-440))|(1<<(MySqlParserMASTER_LOG_FILE-440))|(1<<(MySqlParserMASTER_LOG_POS-440))|(1<<(MySqlParserMASTER_PASSWORD-440))|(1<<(MySqlParserMASTER_PORT-440))|(1<<(MySqlParserMASTER_RETRY_COUNT-440))|(1<<(MySqlParserMASTER_SSL-440))|(1<<(MySqlParserMASTER_SSL_CA-440)))) != 0) || (((_la-472)&-(0x1f+1)) == 0 && ((1<<uint((_la-472)))&((1<<(MySqlParserMASTER_SSL_CAPATH-472))|(1<<(MySqlParserMASTER_SSL_CERT-472))|(1<<(MySqlParserMASTER_SSL_CIPHER-472))|(1<<(MySqlParserMASTER_SSL_CRL-472))|(1<<(MySqlParserMASTER_SSL_CRLPATH-472))|(1<<(MySqlParserMASTER_SSL_KEY-472))|(1<<(MySqlParserMASTER_TLS_VERSION-472))|(1<<(MySqlParserMASTER_USER-472))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-472))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-472))|(1<<(MySqlParserMAX_ROWS-472))|(1<<(MySqlParserMAX_SIZE-472))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-472))|(1<<(MySqlParserMAX_USER_CONNECTIONS-472))|(1<<(MySqlParserMEDIUM-472))|(1<<(MySqlParserMEMBER-472))|(1<<(MySqlParserMERGE-472))|(1<<(MySqlParserMESSAGE_TEXT-472))|(1<<(MySqlParserMID-472))|(1<<(MySqlParserMIGRATE-472))|(1<<(MySqlParserMIN_ROWS-472))|(1<<(MySqlParserMODE-472))|(1<<(MySqlParserMODIFY-472))|(1<<(MySqlParserMUTEX-472))|(1<<(MySqlParserMYSQL-472))|(1<<(MySqlParserMYSQL_ERRNO-472))|(1<<(MySqlParserNAME-472))|(1<<(MySqlParserNAMES-472))|(1<<(MySqlParserNCHAR-472))|(1<<(MySqlParserNEVER-472))|(1<<(MySqlParserNEXT-472))|(1<<(MySqlParserNO-472)))) != 0) || (((_la-504)&-(0x1f+1)) == 0 && ((1<<uint((_la-504)))&((1<<(MySqlParserNOCOPY-504))|(1<<(MySqlParserNOWAIT-504))|(1<<(MySqlParserNODEGROUP-504))|(1<<(MySqlParserNONE-504))|(1<<(MySqlParserODBC-504))|(1<<(MySqlParserOFFLINE-504))|(1<<(MySqlParserOFFSET-504))|(1<<(MySqlParserOF-504))|(1<<(MySqlParserOJ-504))|(1<<(MySqlParserOLD_PASSWORD-504))|(1<<(MySqlParserONE-504))|(1<<(MySqlParserONLINE-504))|(1<<(MySqlParserONLY-504))|(1<<(MySqlParserOPEN-504))|(1<<(MySqlParserOPTIMIZER_COSTS-504))|(1<<(MySqlParserOPTIONS-504))|(1<<(MySqlParserOWNER-504))|(1<<(MySqlParserPACK_KEYS-504))|(1<<(MySqlParserPAGE-504))|(1<<(MySqlParserPARSER-504))|(1<<(MySqlParserPARTIAL-504))|(1<<(MySqlParserPARTITIONING-504))|(1<<(MySqlParserPARTITIONS-504))|(1<<(MySqlParserPASSWORD-504))|(1<<(MySqlParserPHASE-504))|(1<<(MySqlParserPLUGIN-504))|(1<<(MySqlParserPLUGIN_DIR-504))|(1<<(MySqlParserPLUGINS-504))|(1<<(MySqlParserPORT-504))|(1<<(MySqlParserPRECEDES-504))|(1<<(MySqlParserPREPARE-504)))) != 0) || (((_la-536)&-(0x1f+1)) == 0 && ((1<<uint((_la-536)))&((1<<(MySqlParserPRESERVE-536))|(1<<(MySqlParserPREV-536))|(1<<(MySqlParserPROCESSLIST-536))|(1<<(MySqlParserPROFILE-536))|(1<<(MySqlParserPROFILES-536))|(1<<(MySqlParserPROXY-536))|(1<<(MySqlParserQUERY-536))|(1<<(MySqlParserQUICK-536))|(1<<(MySqlParserREBUILD-536))|(1<<(MySqlParserRECOVER-536))|(1<<(MySqlParserRECURSIVE-536))|(1<<(MySqlParserREDO_BUFFER_SIZE-536))|(1<<(MySqlParserREDUNDANT-536))|(1<<(MySqlParserRELAY-536))|(1<<(MySqlParserRELAY_LOG_FILE-536))|(1<<(MySqlParserRELAY_LOG_POS-536))|(1<<(MySqlParserRELAYLOG-536))|(1<<(MySqlParserREMOVE-536))|(1<<(MySqlParserREORGANIZE-536))|(1<<(MySqlParserREPAIR-536))|(1<<(MySqlParserREPLICATE_DO_DB-536))|(1<<(MySqlParserREPLICATE_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_IGNORE_DB-536))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATE_REWRITE_DB-536))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-536))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-536))|(1<<(MySqlParserREPLICATION-536))|(1<<(MySqlParserRESET-536))|(1<<(MySqlParserRESUME-536))|(1<<(MySqlParserRETURNED_SQLSTATE-536)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(MySqlParserRETURNS-568))|(1<<(MySqlParserROLE-568))|(1<<(MySqlParserROLLBACK-568))|(1<<(MySqlParserROLLUP-568))|(1<<(MySqlParserROTATE-568))|(1<<(MySqlParserROW-568))|(1<<(MySqlParserROWS-568))|(1<<(MySqlParserROW_FORMAT-568))|(1<<(MySqlParserRTREE-568))|(1<<(MySqlParserSAVEPOINT-568))|(1<<(MySqlParserSCHEDULE-568))|(1<<(MySqlParserSECURITY-568))|(1<<(MySqlParserSERVER-568))|(1<<(MySqlParserSESSION-568))|(1<<(MySqlParserSHARE-568))|(1<<(MySqlParserSHARED-568))|(1<<(MySqlParserSIGNED-568))|(1<<(MySqlParserSIMPLE-568))|(1<<(MySqlParserSLAVE-568))|(1<<(MySqlParserSLOW-568))|(1<<(MySqlParserSNAPSHOT-568))|(1<<(MySqlParserSOCKET-568))|(1<<(MySqlParserSOME-568))|(1<<(MySqlParserSONAME-568))|(1<<(MySqlParserSOUNDS-568))|(1<<(MySqlParserSOURCE-568))|(1<<(MySqlParserSQL_AFTER_GTIDS-568))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-568))|(1<<(MySqlParserSQL_BEFORE_GTIDS-568))|(1<<(MySqlParserSQL_BUFFER_RESULT-568))|(1<<(MySqlParserSQL_CACHE-568))|(1<<(MySqlParserSQL_NO_CACHE-568)))) != 0) || (((_la-600)&-(0x1f+1)) == 0 && ((1<<uint((_la-600)))&((1<<(MySqlParserSQL_THREAD-600))|(1<<(MySqlParserSTART-600))|(1<<(MySqlParserSTARTS-600))|(1<<(MySqlParserSTATS_AUTO_RECALC-600))|(1<<(MySqlParserSTATS_PERSISTENT-600))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-600))|(1<<(MySqlParserSTATUS-600))|(1<<(MySqlParserSTOP-600))|(1<<(MySqlParserSTORAGE-600))|(1<<(MySqlParserSTRING-600))|(1<<(MySqlParserSUBCLASS_ORIGIN-600))|(1<<(MySqlParserSUBJECT-600))|(1<<(MySqlParserSUBPARTITION-600))|(1<<(MySqlParserSUBPARTITIONS-600))|(1<<(MySqlParserSUSPEND-600))|(1<<(MySqlParserSWAPS-600))|(1<<(MySqlParserSWITCHES-600))|(1<<(MySqlParserTABLE_NAME-600))|(1<<(MySqlParserTABLESPACE-600))|(1<<(MySqlParserTEMPORARY-600))|(1<<(MySqlParserTEMPTABLE-600))|(1<<(MySqlParserTHAN-600))|(1<<(MySqlParserTRADITIONAL-600))|(1<<(MySqlParserTRANSACTION-600))|(1<<(MySqlParserTRANSACTIONAL-600))|(1<<(MySqlParserTRIGGERS-600))|(1<<(MySqlParserTRUNCATE-600))|(1<<(MySqlParserUNDEFINED-600))|(1<<(MySqlParserUNDOFILE-600)))) != 0) || (((_la-632)&-(0x1f+1)) == 0 && ((1<<uint((_la-632)))&((1<<(MySqlParserUNDO_BUFFER_SIZE-632))|(1<<(MySqlParserUNINSTALL-632))|(1<<(MySqlParserUNKNOWN-632))|(1<<(MySqlParserUNTIL-632))|(1<<(MySqlParserUPGRADE-632))|(1<<(MySqlParserUSER-632))|(1<<(MySqlParserUSE_FRM-632))|(1<<(MySqlParserUSER_RESOURCES-632))|(1<<(MySqlParserVALIDATION-632))|(1<<(MySqlParserVALUE-632))|(1<<(MySqlParserVARIABLES-632))|(1<<(MySqlParserVIEW-632))|(1<<(MySqlParserVISIBLE-632))|(1<<(MySqlParserWAIT-632))|(1<<(MySqlParserWARNINGS-632))|(1<<(MySqlParserWITHOUT-632))|(1<<(MySqlParserWORK-632))|(1<<(MySqlParserWRAPPER-632))|(1<<(MySqlParserX509-632))|(1<<(MySqlParserXA-632))|(1<<(MySqlParserXML-632))|(1<<(MySqlParserEUR-632))|(1<<(MySqlParserUSA-632))|(1<<(MySqlParserJIS-632))|(1<<(MySqlParserISO-632))|(1<<(MySqlParserINTERNAL-632))|(1<<(MySqlParserQUARTER-632))|(1<<(MySqlParserMONTH-632))|(1<<(MySqlParserDAY-632)))) != 0) || (((_la-664)&-(0x1f+1)) == 0 && ((1<<uint((_la-664)))&((1<<(MySqlParserHOUR-664))|(1<<(MySqlParserMINUTE-664))|(1<<(MySqlParserWEEK-664))|(1<<(MySqlParserSECOND-664))|(1<<(MySqlParserMICROSECOND-664))|(1<<(MySqlParserTABLES-664))|(1<<(MySqlParserROUTINE-664))|(1<<(MySqlParserEXECUTE-664))|(1<<(MySqlParserFILE-664))|(1<<(MySqlParserPROCESS-664))|(1<<(MySqlParserRELOAD-664))|(1<<(MySqlParserSHUTDOWN-664))|(1<<(MySqlParserSUPER-664))|(1<<(MySqlParserPRIVILEGES-664))|(1<<(MySqlParserAUDIT_ADMIN-664))|(1<<(MySqlParserBACKUP_ADMIN-664))|(1<<(MySqlParserBINLOG_ADMIN-664))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-664))|(1<<(MySqlParserCLONE_ADMIN-664))|(1<<(MySqlParserCONNECTION_ADMIN-664))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-664))|(1<<(MySqlParserFIREWALL_ADMIN-664))|(1<<(MySqlParserFIREWALL_USER-664))|(1<<(MySqlParserADMIN-664))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-664))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-664)))) != 0) || (((_la-696)&-(0x1f+1)) == 0 && ((1<<uint((_la-696)))&((1<<(MySqlParserNDB_STORED_USER-696))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-696))|(1<<(MySqlParserREPLICATION_APPLIER-696))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-696))|(1<<(MySqlParserRESOURCE_GROUP_USER-696))|(1<<(MySqlParserROLE_ADMIN-696))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-696))|(1<<(MySqlParserSET_USER_ID-696))|(1<<(MySqlParserSHOW_ROUTINE-696))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-696))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-696))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-696))|(1<<(MySqlParserXA_RECOVER_ADMIN-696))|(1<<(MySqlParserARMSCII8-696))|(1<<(MySqlParserASCII-696))|(1<<(MySqlParserBIG5-696))|(1<<(MySqlParserCP1250-696))|(1<<(MySqlParserCP1251-696))|(1<<(MySqlParserCP1256-696))|(1<<(MySqlParserCP1257-696))|(1<<(MySqlParserCP850-696))|(1<<(MySqlParserCP852-696))|(1<<(MySqlParserCP866-696))|(1<<(MySqlParserCP932-696))|(1<<(MySqlParserDEC8-696))|(1<<(MySqlParserEUCJPMS-696))|(1<<(MySqlParserEUCKR-696))|(1<<(MySqlParserGB18030-696))|(1<<(MySqlParserGB2312-696))|(1<<(MySqlParserGBK-696)))) != 0) || (((_la-728)&-(0x1f+1)) == 0 && ((1<<uint((_la-728)))&((1<<(MySqlParserGEOSTD8-728))|(1<<(MySqlParserGREEK-728))|(1<<(MySqlParserHEBREW-728))|(1<<(MySqlParserHP8-728))|(1<<(MySqlParserKEYBCS2-728))|(1<<(MySqlParserKOI8R-728))|(1<<(MySqlParserKOI8U-728))|(1<<(MySqlParserLATIN1-728))|(1<<(MySqlParserLATIN2-728))|(1<<(MySqlParserLATIN5-728))|(1<<(MySqlParserLATIN7-728))|(1<<(MySqlParserMACCE-728))|(1<<(MySqlParserMACROMAN-728))|(1<<(MySqlParserSJIS-728))|(1<<(MySqlParserSWE7-728))|(1<<(MySqlParserTIS620-728))|(1<<(MySqlParserUCS2-728))|(1<<(MySqlParserUJIS-728))|(1<<(MySqlParserUTF16-728))|(1<<(MySqlParserUTF16LE-728))|(1<<(MySqlParserUTF32-728))|(1<<(MySqlParserUTF8-728))|(1<<(MySqlParserUTF8MB3-728))|(1<<(MySqlParserUTF8MB4-728))|(1<<(MySqlParserARCHIVE-728))|(1<<(MySqlParserBLACKHOLE-728))|(1<<(MySqlParserCSV-728))|(1<<(MySqlParserFEDERATED-728))|(1<<(MySqlParserINNODB-728))|(1<<(MySqlParserMEMORY-728))|(1<<(MySqlParserMRG_MYISAM-728))|(1<<(MySqlParserMYISAM-728)))) != 0) || (((_la-760)&-(0x1f+1)) == 0 && ((1<<uint((_la-760)))&((1<<(MySqlParserNDB-760))|(1<<(MySqlParserNDBCLUSTER-760))|(1<<(MySqlParserPERFORMANCE_SCHEMA-760))|(1<<(MySqlParserTOKUDB-760))|(1<<(MySqlParserREPEATABLE-760))|(1<<(MySqlParserCOMMITTED-760))|(1<<(MySqlParserUNCOMMITTED-760))|(1<<(MySqlParserSERIALIZABLE-760))|(1<<(MySqlParserGEOMETRYCOLLECTION-760))|(1<<(MySqlParserLINESTRING-760))|(1<<(MySqlParserMULTILINESTRING-760))|(1<<(MySqlParserMULTIPOINT-760))|(1<<(MySqlParserMULTIPOLYGON-760))|(1<<(MySqlParserPOINT-760))|(1<<(MySqlParserPOLYGON-760))|(1<<(MySqlParserABS-760))|(1<<(MySqlParserACOS-760))|(1<<(MySqlParserADDDATE-760))|(1<<(MySqlParserADDTIME-760))|(1<<(MySqlParserAES_DECRYPT-760))|(1<<(MySqlParserAES_ENCRYPT-760))|(1<<(MySqlParserAREA-760))|(1<<(MySqlParserASBINARY-760))|(1<<(MySqlParserASIN-760))|(1<<(MySqlParserASTEXT-760))|(1<<(MySqlParserASWKB-760))|(1<<(MySqlParserASWKT-760))|(1<<(MySqlParserASYMMETRIC_DECRYPT-760))|(1<<(MySqlParserASYMMETRIC_DERIVE-760))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-760)))) != 0) || (((_la-792)&-(0x1f+1)) == 0 && ((1<<uint((_la-792)))&((1<<(MySqlParserASYMMETRIC_SIGN-792))|(1<<(MySqlParserASYMMETRIC_VERIFY-792))|(1<<(MySqlParserATAN-792))|(1<<(MySqlParserATAN2-792))|(1<<(MySqlParserBENCHMARK-792))|(1<<(MySqlParserBIN-792))|(1<<(MySqlParserBIT_COUNT-792))|(1<<(MySqlParserBIT_LENGTH-792))|(1<<(MySqlParserBUFFER-792))|(1<<(MySqlParserCATALOG_NAME-792))|(1<<(MySqlParserCEIL-792))|(1<<(MySqlParserCEILING-792))|(1<<(MySqlParserCENTROID-792))|(1<<(MySqlParserCHARACTER_LENGTH-792))|(1<<(MySqlParserCHARSET-792))|(1<<(MySqlParserCHAR_LENGTH-792))|(1<<(MySqlParserCOERCIBILITY-792))|(1<<(MySqlParserCOLLATION-792))|(1<<(MySqlParserCOMPRESS-792))|(1<<(MySqlParserCONCAT-792))|(1<<(MySqlParserCONCAT_WS-792))|(1<<(MySqlParserCONNECTION_ID-792))|(1<<(MySqlParserCONV-792))|(1<<(MySqlParserCONVERT_TZ-792))|(1<<(MySqlParserCOS-792))|(1<<(MySqlParserCOT-792))|(1<<(MySqlParserCRC32-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-792))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-792))|(1<<(MySqlParserCREATE_DH_PARAMETERS-792))|(1<<(MySqlParserCREATE_DIGEST-792))|(1<<(MySqlParserCROSSES-792)))) != 0) || (((_la-824)&-(0x1f+1)) == 0 && ((1<<uint((_la-824)))&((1<<(MySqlParserDATEDIFF-824))|(1<<(MySqlParserDATE_FORMAT-824))|(1<<(MySqlParserDAYNAME-824))|(1<<(MySqlParserDAYOFMONTH-824))|(1<<(MySqlParserDAYOFWEEK-824))|(1<<(MySqlParserDAYOFYEAR-824))|(1<<(MySqlParserDECODE-824))|(1<<(MySqlParserDEGREES-824))|(1<<(MySqlParserDES_DECRYPT-824))|(1<<(MySqlParserDES_ENCRYPT-824))|(1<<(MySqlParserDIMENSION-824))|(1<<(MySqlParserDISJOINT-824))|(1<<(MySqlParserELT-824))|(1<<(MySqlParserENCODE-824))|(1<<(MySqlParserENCRYPT-824))|(1<<(MySqlParserENDPOINT-824))|(1<<(MySqlParserENGINE_ATTRIBUTE-824))|(1<<(MySqlParserENVELOPE-824))|(1<<(MySqlParserEQUALS-824))|(1<<(MySqlParserEXP-824))|(1<<(MySqlParserEXPORT_SET-824))|(1<<(MySqlParserEXTERIORRING-824))|(1<<(MySqlParserEXTRACTVALUE-824))|(1<<(MySqlParserFIELD-824))|(1<<(MySqlParserFIND_IN_SET-824))|(1<<(MySqlParserFLOOR-824))|(1<<(MySqlParserFORMAT-824))|(1<<(MySqlParserFOUND_ROWS-824))|(1<<(MySqlParserFROM_BASE64-824))|(1<<(MySqlParserFROM_DAYS-824))|(1<<(MySqlParserFROM_UNIXTIME-824))|(1<<(MySqlParserGEOMCOLLFROMTEXT-824)))) != 0) || (((_la-856)&-(0x1f+1)) == 0 && ((1<<uint((_la-856)))&((1<<(MySqlParserGEOMCOLLFROMWKB-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-856))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-856))|(1<<(MySqlParserGEOMETRYFROMTEXT-856))|(1<<(MySqlParserGEOMETRYFROMWKB-856))|(1<<(MySqlParserGEOMETRYN-856))|(1<<(MySqlParserGEOMETRYTYPE-856))|(1<<(MySqlParserGEOMFROMTEXT-856))|(1<<(MySqlParserGEOMFROMWKB-856))|(1<<(MySqlParserGET_FORMAT-856))|(1<<(MySqlParserGET_LOCK-856))|(1<<(MySqlParserGLENGTH-856))|(1<<(MySqlParserGREATEST-856))|(1<<(MySqlParserGTID_SUBSET-856))|(1<<(MySqlParserGTID_SUBTRACT-856))|(1<<(MySqlParserHEX-856))|(1<<(MySqlParserIFNULL-856))|(1<<(MySqlParserINET6_ATON-856))|(1<<(MySqlParserINET6_NTOA-856))|(1<<(MySqlParserINET_ATON-856))|(1<<(MySqlParserINET_NTOA-856))|(1<<(MySqlParserINSTR-856))|(1<<(MySqlParserINTERIORRINGN-856))|(1<<(MySqlParserINTERSECTS-856))|(1<<(MySqlParserISCLOSED-856))|(1<<(MySqlParserISEMPTY-856))|(1<<(MySqlParserISNULL-856))|(1<<(MySqlParserISSIMPLE-856))|(1<<(MySqlParserIS_FREE_LOCK-856))|(1<<(MySqlParserIS_IPV4-856))|(1<<(MySqlParserIS_IPV4_COMPAT-856))|(1<<(MySqlParserIS_IPV4_MAPPED-856)))) != 0) || (((_la-888)&-(0x1f+1)) == 0 && ((1<<uint((_la-888)))&((1<<(MySqlParserIS_IPV6-888))|(1<<(MySqlParserIS_USED_LOCK-888))|(1<<(MySqlParserLAST_INSERT_ID-888))|(1<<(MySqlParserLCASE-888))|(1<<(MySqlParserLEAST-888))|(1<<(MySqlParserLENGTH-888))|(1<<(MySqlParserLINEFROMTEXT-888))|(1<<(MySqlParserLINEFROMWKB-888))|(1<<(MySqlParserLINESTRINGFROMTEXT-888))|(1<<(MySqlParserLINESTRINGFROMWKB-888))|(1<<(MySqlParserLN-888))|(1<<(MySqlParserLOAD_FILE-888))|(1<<(MySqlParserLOCATE-888))|(1<<(MySqlParserLOG-888))|(1<<(MySqlParserLOG10-888))|(1<<(MySqlParserLOG2-888))|(1<<(MySqlParserLOWER-888))|(1<<(MySqlParserLPAD-888))|(1<<(MySqlParserLTRIM-888))|(1<<(MySqlParserMAKEDATE-888))|(1<<(MySqlParserMAKETIME-888))|(1<<(MySqlParserMAKE_SET-888))|(1<<(MySqlParserMASTER_POS_WAIT-888))|(1<<(MySqlParserMBRCONTAINS-888))|(1<<(MySqlParserMBRDISJOINT-888))|(1<<(MySqlParserMBREQUAL-888))|(1<<(MySqlParserMBRINTERSECTS-888))|(1<<(MySqlParserMBROVERLAPS-888))|(1<<(MySqlParserMBRTOUCHES-888))|(1<<(MySqlParserMBRWITHIN-888))|(1<<(MySqlParserMD5-888))|(1<<(MySqlParserMLINEFROMTEXT-888)))) != 0) || (((_la-920)&-(0x1f+1)) == 0 && ((1<<uint((_la-920)))&((1<<(MySqlParserMLINEFROMWKB-920))|(1<<(MySqlParserMONTHNAME-920))|(1<<(MySqlParserMPOINTFROMTEXT-920))|(1<<(MySqlParserMPOINTFROMWKB-920))|(1<<(MySqlParserMPOLYFROMTEXT-920))|(1<<(MySqlParserMPOLYFROMWKB-920))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-920))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-920))|(1<<(MySqlParserMULTIPOINTFROMTEXT-920))|(1<<(MySqlParserMULTIPOINTFROMWKB-920))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-920))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-920))|(1<<(MySqlParserNAME_CONST-920))|(1<<(MySqlParserNULLIF-920))|(1<<(MySqlParserNUMGEOMETRIES-920))|(1<<(MySqlParserNUMINTERIORRINGS-920))|(1<<(MySqlParserNUMPOINTS-920))|(1<<(MySqlParserOCT-920))|(1<<(MySqlParserOCTET_LENGTH-920))|(1<<(MySqlParserORD-920))|(1<<(MySqlParserOVERLAPS-920))|(1<<(MySqlParserPERIOD_ADD-920))|(1<<(MySqlParserPERIOD_DIFF-920))|(1<<(MySqlParserPI-920))|(1<<(MySqlParserPOINTFROMTEXT-920))|(1<<(MySqlParserPOINTFROMWKB-920))|(1<<(MySqlParserPOINTN-920))|(1<<(MySqlParserPOLYFROMTEXT-920))|(1<<(MySqlParserPOLYFROMWKB-920))|(1<<(MySqlParserPOLYGONFROMTEXT-920))|(1<<(MySqlParserPOLYGONFROMWKB-920))|(1<<(MySqlParserPOW-920)))) != 0) || (((_la-952)&-(0x1f+1)) == 0 && ((1<<uint((_la-952)))&((1<<(MySqlParserPOWER-952))|(1<<(MySqlParserQUOTE-952))|(1<<(MySqlParserRADIANS-952))|(1<<(MySqlParserRAND-952))|(1<<(MySqlParserRANDOM_BYTES-952))|(1<<(MySqlParserRELEASE_LOCK-952))|(1<<(MySqlParserREVERSE-952))|(1<<(MySqlParserROUND-952))|(1<<(MySqlParserROW_COUNT-952))|(1<<(MySqlParserRPAD-952))|(1<<(MySqlParserRTRIM-952))|(1<<(MySqlParserSEC_TO_TIME-952))|(1<<(MySqlParserSECONDARY_ENGINE_ATTRIBUTE-952))|(1<<(MySqlParserSESSION_USER-952))|(1<<(MySqlParserSHA-952))|(1<<(MySqlParserSHA1-952))|(1<<(MySqlParserSHA2-952))|(1<<(MySqlParserSCHEMA_NAME-952))|(1<<(MySqlParserSIGN-952))|(1<<(MySqlParserSIN-952))|(1<<(MySqlParserSLEEP-952))|(1<<(MySqlParserSOUNDEX-952))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-952))|(1<<(MySqlParserSQRT-952))|(1<<(MySqlParserSRID-952))|(1<<(MySqlParserSTARTPOINT-952))|(1<<(MySqlParserSTRCMP-952))|(1<<(MySqlParserSTR_TO_DATE-952))|(1<<(MySqlParserST_AREA-952))|(1<<(MySqlParserST_ASBINARY-952))|(1<<(MySqlParserST_ASTEXT-952))|(1<<(MySqlParserST_ASWKB-952)))) != 0) || (((_la-984)&-(0x1f+1)) == 0 && ((1<<uint((_la-984)))&((1<<(MySqlParserST_ASWKT-984))|(1<<(MySqlParserST_BUFFER-984))|(1<<(MySqlParserST_CENTROID-984))|(1<<(MySqlParserST_CONTAINS-984))|(1<<(MySqlParserST_CROSSES-984))|(1<<(MySqlParserST_DIFFERENCE-984))|(1<<(MySqlParserST_DIMENSION-984))|(1<<(MySqlParserST_DISJOINT-984))|(1<<(MySqlParserST_DISTANCE-984))|(1<<(MySqlParserST_ENDPOINT-984))|(1<<(MySqlParserST_ENVELOPE-984))|(1<<(MySqlParserST_EQUALS-984))|(1<<(MySqlParserST_EXTERIORRING-984))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-984))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-984))|(1<<(MySqlParserST_GEOMETRYFROMWKB-984))|(1<<(MySqlParserST_GEOMETRYN-984))|(1<<(MySqlParserST_GEOMETRYTYPE-984))|(1<<(MySqlParserST_GEOMFROMTEXT-984))|(1<<(MySqlParserST_GEOMFROMWKB-984))|(1<<(MySqlParserST_INTERIORRINGN-984))|(1<<(MySqlParserST_INTERSECTION-984))|(1<<(MySqlParserST_INTERSECTS-984))|(1<<(MySqlParserST_ISCLOSED-984))|(1<<(MySqlParserST_ISEMPTY-984))|(1<<(MySqlParserST_ISSIMPLE-984))|(1<<(MySqlParserST_LINEFROMTEXT-984))|(1<<(MySqlParserST_LINEFROMWKB-984)))) != 0) || (((_la-1016)&-(0x1f+1)) == 0 && ((1<<uint((_la-1016)))&((1<<(MySqlParserST_LINESTRINGFROMTEXT-1016))|(1<<(MySqlParserST_LINESTRINGFROMWKB-1016))|(1<<(MySqlParserST_NUMGEOMETRIES-1016))|(1<<(MySqlParserST_NUMINTERIORRING-1016))|(1<<(MySqlParserST_NUMINTERIORRINGS-1016))|(1<<(MySqlParserST_NUMPOINTS-1016))|(1<<(MySqlParserST_OVERLAPS-1016))|(1<<(MySqlParserST_POINTFROMTEXT-1016))|(1<<(MySqlParserST_POINTFROMWKB-1016))|(1<<(MySqlParserST_POINTN-1016))|(1<<(MySqlParserST_POLYFROMTEXT-1016))|(1<<(MySqlParserST_POLYFROMWKB-1016))|(1<<(MySqlParserST_POLYGONFROMTEXT-1016))|(1<<(MySqlParserST_POLYGONFROMWKB-1016))|(1<<(MySqlParserST_SRID-1016))|(1<<(MySqlParserST_STARTPOINT-1016))|(1<<(MySqlParserST_SYMDIFFERENCE-1016))|(1<<(MySqlParserST_TOUCHES-1016))|(1<<(MySqlParserST_UNION-1016))|(1<<(MySqlParserST_WITHIN-1016))|(1<<(MySqlParserST_X-1016))|(1<<(MySqlParserST_Y-1016))|(1<<(MySqlParserSUBDATE-1016))|(1<<(MySqlParserSUBSTRING_INDEX-1016))|(1<<(MySqlParserSUBTIME-1016))|(1<<(MySqlParserSYSTEM_USER-1016))|(1<<(MySqlParserTAN-1016))|(1<<(MySqlParserTIMEDIFF-1016))|(1<<(MySqlParserTIMESTAMPADD-1016))|(1<<(MySqlParserTIMESTAMPDIFF-1016))|(1<<(MySqlParserTIME_FORMAT-1016))|(1<<(MySqlParserTIME_TO_SEC-1016)))) != 0) || (((_la-1048)&-(0x1f+1)) == 0 && ((1<<uint((_la-1048)))&((1<<(MySqlParserTOUCHES-1048))|(1<<(MySqlParserTO_BASE64-1048))|(1<<(MySqlParserTO_DAYS-1048))|(1<<(MySqlParserTO_SECONDS-1048))|(1<<(MySqlParserUCASE-1048))|(1<<(MySqlParserUNCOMPRESS-1048))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1048))|(1<<(MySqlParserUNHEX-1048))|(1<<(MySqlParserUNIX_TIMESTAMP-1048))|(1<<(MySqlParserUPDATEXML-1048))|(1<<(MySqlParserUPPER-1048))|(1<<(MySqlParserUUID-1048))|(1<<(MySqlParserUUID_SHORT-1048))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1048))|(1<<(MySqlParserVERSION-1048))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1048))|(1<<(MySqlParserWEEKDAY-1048))|(1<<(MySqlParserWEEKOFYEAR-1048))|(1<<(MySqlParserWEIGHT_STRING-1048))|(1<<(MySqlParserWITHIN-1048))|(1<<(MySqlParserYEARWEEK-1048))|(1<<(MySqlParserY_FUNCTION-1048))|(1<<(MySqlParserX_FUNCTION-1048)))) != 0) || (((_la-1086)&-(0x1f+1)) == 0 && ((1<<uint((_la-1086)))&((1<<(MySqlParserMOD-1086))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1086))|(1<<(MySqlParserSTRING_LITERAL-1086)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4450)
			p.Uid()
		}

	}

	return localctx
}

// ICursorStatementContext is an interface to support dynamic dispatch.
type ICursorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorStatementContext differentiates from other interfaces.
	IsCursorStatementContext()
}

type CursorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorStatementContext() *CursorStatementContext {
	var p = new(CursorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cursorStatement
	return p
}

func (*CursorStatementContext) IsCursorStatementContext() {}

func NewCursorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorStatementContext {
	var p = new(CursorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cursorStatement

	return p
}

func (s *CursorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorStatementContext) CopyFrom(ctx *CursorStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CursorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CloseCursorContext struct {
	*CursorStatementContext
}

func NewCloseCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CloseCursorContext {
	var p = new(CloseCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *CloseCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloseCursorContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *CloseCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CloseCursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCloseCursor(s)
	}
}

func (s *CloseCursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCloseCursor(s)
	}
}

type OpenCursorContext struct {
	*CursorStatementContext
}

func NewOpenCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OpenCursorContext {
	var p = new(OpenCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *OpenCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenCursorContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *OpenCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *OpenCursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOpenCursor(s)
	}
}

func (s *OpenCursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOpenCursor(s)
	}
}

type FetchCursorContext struct {
	*CursorStatementContext
}

func NewFetchCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FetchCursorContext {
	var p = new(FetchCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *FetchCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FetchCursorContext) FETCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFETCH, 0)
}

func (s *FetchCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FetchCursorContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *FetchCursorContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *FetchCursorContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *FetchCursorContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *FetchCursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFetchCursor(s)
	}
}

func (s *FetchCursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFetchCursor(s)
	}
}

func (p *MySqlParser) CursorStatement() (localctx ICursorStatementContext) {
	localctx = NewCursorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, MySqlParserRULE_cursorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4468)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCLOSE:
		localctx = NewCloseCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4453)
			p.Match(MySqlParserCLOSE)
		}
		{
			p.SetState(4454)
			p.Uid()
		}

	case MySqlParserFETCH:
		localctx = NewFetchCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4455)
			p.Match(MySqlParserFETCH)
		}
		p.SetState(4460)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 638, p.GetParserRuleContext()) == 1 {
			p.SetState(4457)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserNEXT {
				{
					p.SetState(4456)
					p.Match(MySqlParserNEXT)
				}

			}
			{
				p.SetState(4459)
				p.Match(MySqlParserFROM)
			}

		}
		{
			p.SetState(4462)
			p.Uid()
		}
		{
			p.SetState(4463)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(4464)
			p.UidList()
		}

	case MySqlParserOPEN:
		localctx = NewOpenCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4466)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(4467)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclareVariableContext is an interface to support dynamic dispatch.
type IDeclareVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableContext differentiates from other interfaces.
	IsDeclareVariableContext()
}

type DeclareVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableContext() *DeclareVariableContext {
	var p = new(DeclareVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareVariable
	return p
}

func (*DeclareVariableContext) IsDeclareVariableContext() {}

func NewDeclareVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableContext {
	var p = new(DeclareVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareVariable

	return p
}

func (s *DeclareVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareVariableContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *DeclareVariableContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DeclareVariableContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *DeclareVariableContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclareVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclareVariable(s)
	}
}

func (s *DeclareVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclareVariable(s)
	}
}

func (p *MySqlParser) DeclareVariable() (localctx IDeclareVariableContext) {
	localctx = NewDeclareVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, MySqlParserRULE_declareVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4470)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4471)
		p.UidList()
	}
	{
		p.SetState(4472)
		p.DataType()
	}
	p.SetState(4475)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFAULT {
		{
			p.SetState(4473)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(4474)
			p.expression(0)
		}

	}

	return localctx
}

// IDeclareConditionContext is an interface to support dynamic dispatch.
type IDeclareConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareConditionContext differentiates from other interfaces.
	IsDeclareConditionContext()
}

type DeclareConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareConditionContext() *DeclareConditionContext {
	var p = new(DeclareConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareCondition
	return p
}

func (*DeclareConditionContext) IsDeclareConditionContext() {}

func NewDeclareConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareConditionContext {
	var p = new(DeclareConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareCondition

	return p
}

func (s *DeclareConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareConditionContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareConditionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeclareConditionContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONDITION, 0)
}

func (s *DeclareConditionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareConditionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *DeclareConditionContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *DeclareConditionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *DeclareConditionContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *DeclareConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclareCondition(s)
	}
}

func (s *DeclareConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclareCondition(s)
	}
}

func (p *MySqlParser) DeclareCondition() (localctx IDeclareConditionContext) {
	localctx = NewDeclareConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, MySqlParserRULE_declareCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4477)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4478)
		p.Uid()
	}
	{
		p.SetState(4479)
		p.Match(MySqlParserCONDITION)
	}
	{
		p.SetState(4480)
		p.Match(MySqlParserFOR)
	}
	p.SetState(4487)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
		{
			p.SetState(4481)
			p.DecimalLiteral()
		}

	case MySqlParserSQLSTATE:
		{
			p.SetState(4482)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4483)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4486)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclareCursorContext is an interface to support dynamic dispatch.
type IDeclareCursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareCursorContext differentiates from other interfaces.
	IsDeclareCursorContext()
}

type DeclareCursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareCursorContext() *DeclareCursorContext {
	var p = new(DeclareCursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareCursor
	return p
}

func (*DeclareCursorContext) IsDeclareCursorContext() {}

func NewDeclareCursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareCursorContext {
	var p = new(DeclareCursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareCursor

	return p
}

func (s *DeclareCursorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareCursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeclareCursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR, 0)
}

func (s *DeclareCursorContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareCursorContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DeclareCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareCursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareCursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclareCursor(s)
	}
}

func (s *DeclareCursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclareCursor(s)
	}
}

func (p *MySqlParser) DeclareCursor() (localctx IDeclareCursorContext) {
	localctx = NewDeclareCursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, MySqlParserRULE_declareCursor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4489)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4490)
		p.Uid()
	}
	{
		p.SetState(4491)
		p.Match(MySqlParserCURSOR)
	}
	{
		p.SetState(4492)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4493)
		p.SelectStatement()
	}

	return localctx
}

// IDeclareHandlerContext is an interface to support dynamic dispatch.
type IDeclareHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetHandlerAction returns the handlerAction token.
	GetHandlerAction() antlr.Token

	// SetHandlerAction sets the handlerAction token.
	SetHandlerAction(antlr.Token)

	// IsDeclareHandlerContext differentiates from other interfaces.
	IsDeclareHandlerContext()
}

type DeclareHandlerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	handlerAction antlr.Token
}

func NewEmptyDeclareHandlerContext() *DeclareHandlerContext {
	var p = new(DeclareHandlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareHandler
	return p
}

func (*DeclareHandlerContext) IsDeclareHandlerContext() {}

func NewDeclareHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareHandlerContext {
	var p = new(DeclareHandlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareHandler

	return p
}

func (s *DeclareHandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareHandlerContext) GetHandlerAction() antlr.Token { return s.handlerAction }

func (s *DeclareHandlerContext) SetHandlerAction(v antlr.Token) { s.handlerAction = v }

func (s *DeclareHandlerContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareHandlerContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *DeclareHandlerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareHandlerContext) AllHandlerConditionValue() []IHandlerConditionValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHandlerConditionValueContext)(nil)).Elem())
	var tst = make([]IHandlerConditionValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHandlerConditionValueContext)
		}
	}

	return tst
}

func (s *DeclareHandlerContext) HandlerConditionValue(i int) IHandlerConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerConditionValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHandlerConditionValueContext)
}

func (s *DeclareHandlerContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *DeclareHandlerContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTINUE, 0)
}

func (s *DeclareHandlerContext) EXIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXIT, 0)
}

func (s *DeclareHandlerContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO, 0)
}

func (s *DeclareHandlerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DeclareHandlerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DeclareHandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareHandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareHandlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclareHandler(s)
	}
}

func (s *DeclareHandlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclareHandler(s)
	}
}

func (p *MySqlParser) DeclareHandler() (localctx IDeclareHandlerContext) {
	localctx = NewDeclareHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, MySqlParserRULE_declareHandler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4495)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4496)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DeclareHandlerContext).handlerAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCONTINUE || _la == MySqlParserEXIT || _la == MySqlParserUNDO) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DeclareHandlerContext).handlerAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4497)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(4498)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4499)
		p.HandlerConditionValue()
	}
	p.SetState(4504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4500)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4501)
			p.HandlerConditionValue()
		}

		p.SetState(4506)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4507)
		p.RoutineBody()
	}

	return localctx
}

// IHandlerConditionValueContext is an interface to support dynamic dispatch.
type IHandlerConditionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerConditionValueContext differentiates from other interfaces.
	IsHandlerConditionValueContext()
}

type HandlerConditionValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerConditionValueContext() *HandlerConditionValueContext {
	var p = new(HandlerConditionValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerConditionValue
	return p
}

func (*HandlerConditionValueContext) IsHandlerConditionValueContext() {}

func NewHandlerConditionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerConditionValueContext {
	var p = new(HandlerConditionValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerConditionValue

	return p
}

func (s *HandlerConditionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerConditionValueContext) CopyFrom(ctx *HandlerConditionValueContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *HandlerConditionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type HandlerConditionWarningContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionWarningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionWarningContext {
	var p = new(HandlerConditionWarningContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionWarningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionWarningContext) SQLWARNING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLWARNING, 0)
}

func (s *HandlerConditionWarningContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionWarning(s)
	}
}

func (s *HandlerConditionWarningContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionWarning(s)
	}
}

type HandlerConditionCodeContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionCodeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionCodeContext {
	var p = new(HandlerConditionCodeContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionCodeContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *HandlerConditionCodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionCode(s)
	}
}

func (s *HandlerConditionCodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionCode(s)
	}
}

type HandlerConditionNotfoundContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionNotfoundContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionNotfoundContext {
	var p = new(HandlerConditionNotfoundContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionNotfoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionNotfoundContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *HandlerConditionNotfoundContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND, 0)
}

func (s *HandlerConditionNotfoundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionNotfound(s)
	}
}

func (s *HandlerConditionNotfoundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionNotfound(s)
	}
}

type HandlerConditionStateContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionStateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionStateContext {
	var p = new(HandlerConditionStateContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionStateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionStateContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *HandlerConditionStateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HandlerConditionStateContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *HandlerConditionStateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionState(s)
	}
}

func (s *HandlerConditionStateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionState(s)
	}
}

type HandlerConditionExceptionContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionExceptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionExceptionContext {
	var p = new(HandlerConditionExceptionContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionExceptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionExceptionContext) SQLEXCEPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLEXCEPTION, 0)
}

func (s *HandlerConditionExceptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionException(s)
	}
}

func (s *HandlerConditionExceptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionException(s)
	}
}

type HandlerConditionNameContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionNameContext {
	var p = new(HandlerConditionNameContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerConditionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandlerConditionName(s)
	}
}

func (s *HandlerConditionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandlerConditionName(s)
	}
}

func (p *MySqlParser) HandlerConditionValue() (localctx IHandlerConditionValueContext) {
	localctx = NewHandlerConditionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, MySqlParserRULE_handlerConditionValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4520)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
		localctx = NewHandlerConditionCodeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4509)
			p.DecimalLiteral()
		}

	case MySqlParserSQLSTATE:
		localctx = NewHandlerConditionStateContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4510)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4511)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4514)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		localctx = NewHandlerConditionNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4515)
			p.Uid()
		}

	case MySqlParserSQLWARNING:
		localctx = NewHandlerConditionWarningContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4516)
			p.Match(MySqlParserSQLWARNING)
		}

	case MySqlParserNOT:
		localctx = NewHandlerConditionNotfoundContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4517)
			p.Match(MySqlParserNOT)
		}
		{
			p.SetState(4518)
			p.Match(MySqlParserFOUND)
		}

	case MySqlParserSQLEXCEPTION:
		localctx = NewHandlerConditionExceptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4519)
			p.Match(MySqlParserSQLEXCEPTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedureSqlStatementContext is an interface to support dynamic dispatch.
type IProcedureSqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedureSqlStatementContext differentiates from other interfaces.
	IsProcedureSqlStatementContext()
}

type ProcedureSqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedureSqlStatementContext() *ProcedureSqlStatementContext {
	var p = new(ProcedureSqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_procedureSqlStatement
	return p
}

func (*ProcedureSqlStatementContext) IsProcedureSqlStatementContext() {}

func NewProcedureSqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureSqlStatementContext {
	var p = new(ProcedureSqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_procedureSqlStatement

	return p
}

func (s *ProcedureSqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureSqlStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *ProcedureSqlStatementContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *ProcedureSqlStatementContext) SqlStatement() ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *ProcedureSqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureSqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureSqlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterProcedureSqlStatement(s)
	}
}

func (s *ProcedureSqlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitProcedureSqlStatement(s)
	}
}

func (p *MySqlParser) ProcedureSqlStatement() (localctx IProcedureSqlStatementContext) {
	localctx = NewProcedureSqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, MySqlParserRULE_procedureSqlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4524)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4522)
			p.CompoundStatement()
		}

	case 2:
		{
			p.SetState(4523)
			p.SqlStatement()
		}

	}
	{
		p.SetState(4526)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// ICaseAlternativeContext is an interface to support dynamic dispatch.
type ICaseAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseAlternativeContext differentiates from other interfaces.
	IsCaseAlternativeContext()
}

type CaseAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseAlternativeContext() *CaseAlternativeContext {
	var p = new(CaseAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseAlternative
	return p
}

func (*CaseAlternativeContext) IsCaseAlternativeContext() {}

func NewCaseAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseAlternativeContext {
	var p = new(CaseAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseAlternative

	return p
}

func (s *CaseAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseAlternativeContext) WHEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, 0)
}

func (s *CaseAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *CaseAlternativeContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *CaseAlternativeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseAlternativeContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *CaseAlternativeContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *CaseAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseAlternativeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseAlternative(s)
	}
}

func (s *CaseAlternativeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseAlternative(s)
	}
}

func (p *MySqlParser) CaseAlternative() (localctx ICaseAlternativeContext) {
	localctx = NewCaseAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, MySqlParserRULE_caseAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4528)
		p.Match(MySqlParserWHEN)
	}
	p.SetState(4531)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4529)
			p.Constant()
		}

	case 2:
		{
			p.SetState(4530)
			p.expression(0)
		}

	}
	{
		p.SetState(4533)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4535)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4534)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4537)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 648, p.GetParserRuleContext())
	}

	return localctx
}

// IElifAlternativeContext is an interface to support dynamic dispatch.
type IElifAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElifAlternativeContext differentiates from other interfaces.
	IsElifAlternativeContext()
}

type ElifAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElifAlternativeContext() *ElifAlternativeContext {
	var p = new(ElifAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_elifAlternative
	return p
}

func (*ElifAlternativeContext) IsElifAlternativeContext() {}

func NewElifAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElifAlternativeContext {
	var p = new(ElifAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_elifAlternative

	return p
}

func (s *ElifAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *ElifAlternativeContext) ELSEIF() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSEIF, 0)
}

func (s *ElifAlternativeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ElifAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *ElifAlternativeContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *ElifAlternativeContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *ElifAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElifAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElifAlternativeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterElifAlternative(s)
	}
}

func (s *ElifAlternativeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitElifAlternative(s)
	}
}

func (p *MySqlParser) ElifAlternative() (localctx IElifAlternativeContext) {
	localctx = NewElifAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, MySqlParserRULE_elifAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4539)
		p.Match(MySqlParserELSEIF)
	}
	{
		p.SetState(4540)
		p.expression(0)
	}
	{
		p.SetState(4541)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4543)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4542)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4545)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 649, p.GetParserRuleContext())
	}

	return localctx
}

// IAlterUserContext is an interface to support dynamic dispatch.
type IAlterUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterUserContext differentiates from other interfaces.
	IsAlterUserContext()
}

type AlterUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterUserContext() *AlterUserContext {
	var p = new(AlterUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterUser
	return p
}

func (*AlterUserContext) IsAlterUserContext() {}

func NewAlterUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterUserContext {
	var p = new(AlterUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterUser

	return p
}

func (s *AlterUserContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterUserContext) CopyFrom(ctx *AlterUserContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterUserMysqlV56Context struct {
	*AlterUserContext
}

func NewAlterUserMysqlV56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysqlV56Context {
	var p = new(AlterUserMysqlV56Context)

	p.AlterUserContext = NewEmptyAlterUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterUserContext))

	return p
}

func (s *AlterUserMysqlV56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysqlV56Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysqlV56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysqlV56Context) AllUserSpecification() []IUserSpecificationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserSpecificationContext)(nil)).Elem())
	var tst = make([]IUserSpecificationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserSpecificationContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV56Context) UserSpecification(i int) IUserSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserSpecificationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserSpecificationContext)
}

func (s *AlterUserMysqlV56Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterUserMysqlV56Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterUserMysqlV56Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterUserMysqlV56(s)
	}
}

func (s *AlterUserMysqlV56Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterUserMysqlV56(s)
	}
}

type AlterUserMysqlV57Context struct {
	*AlterUserContext
	tlsNone antlr.Token
}

func NewAlterUserMysqlV57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysqlV57Context {
	var p = new(AlterUserMysqlV57Context)

	p.AlterUserContext = NewEmptyAlterUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterUserContext))

	return p
}

func (s *AlterUserMysqlV57Context) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *AlterUserMysqlV57Context) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *AlterUserMysqlV57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysqlV57Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysqlV57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysqlV57Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *AlterUserMysqlV57Context) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *AlterUserMysqlV57Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterUserMysqlV57Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterUserMysqlV57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *AlterUserMysqlV57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterUserMysqlV57Context) AllUserPasswordOption() []IUserPasswordOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem())
	var tst = make([]IUserPasswordOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserPasswordOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserPasswordOption(i int) IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *AlterUserMysqlV57Context) AllUserLockOption() []IUserLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem())
	var tst = make([]IUserLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserLockOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserLockOption(i int) IUserLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserLockOptionContext)
}

func (s *AlterUserMysqlV57Context) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *AlterUserMysqlV57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AlterUserMysqlV57Context) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *AlterUserMysqlV57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *AlterUserMysqlV57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *AlterUserMysqlV57Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterUserMysqlV57(s)
	}
}

func (s *AlterUserMysqlV57Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterUserMysqlV57(s)
	}
}

func (p *MySqlParser) AlterUser() (localctx IAlterUserContext) {
	localctx = NewAlterUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, MySqlParserRULE_alterUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4601)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 661, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterUserMysqlV56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4547)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4548)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4549)
			p.UserSpecification()
		}
		p.SetState(4554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4550)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4551)
				p.UserSpecification()
			}

			p.SetState(4556)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterUserMysqlV57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4557)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4558)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4560)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4559)
				p.IfExists()
			}

		}
		{
			p.SetState(4562)
			p.UserAuthOption()
		}
		p.SetState(4567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4563)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4564)
				p.UserAuthOption()
			}

			p.SetState(4569)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4570)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4582)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4571)

					var _m = p.Match(MySqlParserNONE)

					localctx.(*AlterUserMysqlV57Context).tlsNone = _m
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4572)
					p.TlsOption()
				}
				p.SetState(4579)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4574)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4573)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4576)
						p.TlsOption()
					}

					p.SetState(4581)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4586)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4588)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-480)&-(0x1f+1)) == 0 && ((1<<uint((_la-480)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-480))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-480))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-480))|(1<<(MySqlParserMAX_USER_CONNECTIONS-480)))) != 0) {
				{
					p.SetState(4587)
					p.UserResourceOption()
				}

				p.SetState(4590)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4598)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4596)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4594)
					p.UserPasswordOption()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4595)
					p.UserLockOption()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4600)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreateUserContext is an interface to support dynamic dispatch.
type ICreateUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateUserContext differentiates from other interfaces.
	IsCreateUserContext()
}

type CreateUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateUserContext() *CreateUserContext {
	var p = new(CreateUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createUser
	return p
}

func (*CreateUserContext) IsCreateUserContext() {}

func NewCreateUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUserContext {
	var p = new(CreateUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createUser

	return p
}

func (s *CreateUserContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUserContext) CopyFrom(ctx *CreateUserContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateUserMysqlV57Context struct {
	*CreateUserContext
	tlsNone antlr.Token
}

func NewCreateUserMysqlV57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysqlV57Context {
	var p = new(CreateUserMysqlV57Context)

	p.CreateUserContext = NewEmptyCreateUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserContext))

	return p
}

func (s *CreateUserMysqlV57Context) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *CreateUserMysqlV57Context) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *CreateUserMysqlV57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysqlV57Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysqlV57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysqlV57Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *CreateUserMysqlV57Context) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateUserMysqlV57Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateUserMysqlV57Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateUserMysqlV57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *CreateUserMysqlV57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *CreateUserMysqlV57Context) AllUserPasswordOption() []IUserPasswordOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem())
	var tst = make([]IUserPasswordOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserPasswordOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserPasswordOption(i int) IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *CreateUserMysqlV57Context) AllUserLockOption() []IUserLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem())
	var tst = make([]IUserLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserLockOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserLockOption(i int) IUserLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserLockOptionContext)
}

func (s *CreateUserMysqlV57Context) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *CreateUserMysqlV57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *CreateUserMysqlV57Context) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *CreateUserMysqlV57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *CreateUserMysqlV57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *CreateUserMysqlV57Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateUserMysqlV57(s)
	}
}

func (s *CreateUserMysqlV57Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateUserMysqlV57(s)
	}
}

type CreateUserMysqlV56Context struct {
	*CreateUserContext
}

func NewCreateUserMysqlV56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysqlV56Context {
	var p = new(CreateUserMysqlV56Context)

	p.CreateUserContext = NewEmptyCreateUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserContext))

	return p
}

func (s *CreateUserMysqlV56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysqlV56Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysqlV56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysqlV56Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV56Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *CreateUserMysqlV56Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateUserMysqlV56Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateUserMysqlV56Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateUserMysqlV56(s)
	}
}

func (s *CreateUserMysqlV56Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateUserMysqlV56(s)
	}
}

func (p *MySqlParser) CreateUser() (localctx ICreateUserContext) {
	localctx = NewCreateUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, MySqlParserRULE_createUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4657)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 673, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateUserMysqlV56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4603)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4604)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4605)
			p.UserAuthOption()
		}
		p.SetState(4610)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4606)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4607)
				p.UserAuthOption()
			}

			p.SetState(4612)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewCreateUserMysqlV57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4613)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4614)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4615)
				p.IfNotExists()
			}

		}
		{
			p.SetState(4618)
			p.UserAuthOption()
		}
		p.SetState(4623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4619)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4620)
				p.UserAuthOption()
			}

			p.SetState(4625)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4640)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4626)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4638)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4627)

					var _m = p.Match(MySqlParserNONE)

					localctx.(*CreateUserMysqlV57Context).tlsNone = _m
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4628)
					p.TlsOption()
				}
				p.SetState(4635)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4630)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4629)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4632)
						p.TlsOption()
					}

					p.SetState(4637)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4648)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4642)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4644)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-480)&-(0x1f+1)) == 0 && ((1<<uint((_la-480)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-480))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-480))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-480))|(1<<(MySqlParserMAX_USER_CONNECTIONS-480)))) != 0) {
				{
					p.SetState(4643)
					p.UserResourceOption()
				}

				p.SetState(4646)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4652)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4650)
					p.UserPasswordOption()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4651)
					p.UserLockOption()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4656)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IDropUserContext is an interface to support dynamic dispatch.
type IDropUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropUserContext differentiates from other interfaces.
	IsDropUserContext()
}

type DropUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropUserContext() *DropUserContext {
	var p = new(DropUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropUser
	return p
}

func (*DropUserContext) IsDropUserContext() {}

func NewDropUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropUserContext {
	var p = new(DropUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropUser

	return p
}

func (s *DropUserContext) GetParser() antlr.Parser { return s.parser }

func (s *DropUserContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *DropUserContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *DropUserContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *DropUserContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropUserContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DropUserContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DropUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDropUser(s)
	}
}

func (s *DropUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDropUser(s)
	}
}

func (p *MySqlParser) DropUser() (localctx IDropUserContext) {
	localctx = NewDropUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, MySqlParserRULE_dropUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4659)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(4660)
		p.Match(MySqlParserUSER)
	}
	p.SetState(4662)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(4661)
			p.IfExists()
		}

	}
	{
		p.SetState(4664)
		p.UserName()
	}
	p.SetState(4669)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4665)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4666)
			p.UserName()
		}

		p.SetState(4671)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGrantStatementContext is an interface to support dynamic dispatch.
type IGrantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrivilegeObject returns the privilegeObject token.
	GetPrivilegeObject() antlr.Token

	// GetTlsNone returns the tlsNone token.
	GetTlsNone() antlr.Token

	// SetPrivilegeObject sets the privilegeObject token.
	SetPrivilegeObject(antlr.Token)

	// SetTlsNone sets the tlsNone token.
	SetTlsNone(antlr.Token)

	// IsGrantStatementContext differentiates from other interfaces.
	IsGrantStatementContext()
}

type GrantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	privilegeObject antlr.Token
	tlsNone         antlr.Token
}

func NewEmptyGrantStatementContext() *GrantStatementContext {
	var p = new(GrantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grantStatement
	return p
}

func (*GrantStatementContext) IsGrantStatementContext() {}

func NewGrantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantStatementContext {
	var p = new(GrantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grantStatement

	return p
}

func (s *GrantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantStatementContext) GetPrivilegeObject() antlr.Token { return s.privilegeObject }

func (s *GrantStatementContext) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *GrantStatementContext) SetPrivilegeObject(v antlr.Token) { s.privilegeObject = v }

func (s *GrantStatementContext) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *GrantStatementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *GrantStatementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *GrantStatementContext) AllPrivelegeClause() []IPrivelegeClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem())
	var tst = make([]IPrivelegeClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelegeClauseContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) PrivelegeClause(i int) IPrivelegeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelegeClauseContext)
}

func (s *GrantStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *GrantStatementContext) PrivilegeLevel() IPrivilegeLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeLevelContext)
}

func (s *GrantStatementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *GrantStatementContext) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *GrantStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GrantStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GrantStatementContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *GrantStatementContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWITH)
}

func (s *GrantStatementContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, i)
}

func (s *GrantStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *GrantStatementContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *GrantStatementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE, 0)
}

func (s *GrantStatementContext) RoleOption() IRoleOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoleOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoleOptionContext)
}

func (s *GrantStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *GrantStatementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *GrantStatementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *GrantStatementContext) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *GrantStatementContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *GrantStatementContext) AllOPTION() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserOPTION)
}

func (s *GrantStatementContext) OPTION(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, i)
}

func (s *GrantStatementContext) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *GrantStatementContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *GrantStatementContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *GrantStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *GrantStatementContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserADMIN, 0)
}

func (s *GrantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGrantStatement(s)
	}
}

func (s *GrantStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGrantStatement(s)
	}
}

func (p *MySqlParser) GrantStatement() (localctx IGrantStatementContext) {
	localctx = NewGrantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, MySqlParserRULE_grantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(4765)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4672)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4673)
			p.PrivelegeClause()
		}
		p.SetState(4678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4674)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4675)
				p.PrivelegeClause()
			}

			p.SetState(4680)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4681)
			p.Match(MySqlParserON)
		}
		p.SetState(4683)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 677, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4682)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*GrantStatementContext).privilegeObject = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*GrantStatementContext).privilegeObject = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4685)
			p.PrivilegeLevel()
		}
		{
			p.SetState(4686)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(4687)
			p.UserAuthOption()
		}
		p.SetState(4692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4688)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4689)
				p.UserAuthOption()
			}

			p.SetState(4694)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4695)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4707)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4696)

					var _m = p.Match(MySqlParserNONE)

					localctx.(*GrantStatementContext).tlsNone = _m
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4697)
					p.TlsOption()
				}
				p.SetState(4704)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4699)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4698)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4701)
						p.TlsOption()
					}

					p.SetState(4706)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4720)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4711)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4717)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 684, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					p.SetState(4715)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case MySqlParserGRANT:
						{
							p.SetState(4712)
							p.Match(MySqlParserGRANT)
						}
						{
							p.SetState(4713)
							p.Match(MySqlParserOPTION)
						}

					case MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS:
						{
							p.SetState(4714)
							p.UserResourceOption()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				}
				p.SetState(4719)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 684, p.GetParserRuleContext())
			}

		}
		p.SetState(4728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(4722)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(4723)
				p.UserName()
			}
			{
				p.SetState(4724)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4725)
				p.Match(MySqlParserROLE)
			}
			{
				p.SetState(4726)
				p.RoleOption()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4730)
			p.Match(MySqlParserGRANT)
		}
		p.SetState(4733)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 687, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4731)
				p.UserName()
			}

		case 2:
			{
				p.SetState(4732)
				p.Uid()
			}

		}
		p.SetState(4742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4735)
				p.Match(MySqlParserCOMMA)
			}
			p.SetState(4738)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 688, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4736)
					p.UserName()
				}

			case 2:
				{
					p.SetState(4737)
					p.Uid()
				}

			}

			p.SetState(4744)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4745)
			p.Match(MySqlParserTO)
		}
		p.SetState(4748)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 690, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4746)
				p.UserName()
			}

		case 2:
			{
				p.SetState(4747)
				p.Uid()
			}

		}
		p.SetState(4757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4750)
				p.Match(MySqlParserCOMMA)
			}
			p.SetState(4753)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 691, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4751)
					p.UserName()
				}

			case 2:
				{
					p.SetState(4752)
					p.Uid()
				}

			}

			p.SetState(4759)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4760)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4761)
				p.Match(MySqlParserADMIN)
			}
			{
				p.SetState(4762)
				p.Match(MySqlParserOPTION)
			}

		}

	}

	return localctx
}

// IRoleOptionContext is an interface to support dynamic dispatch.
type IRoleOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoleOptionContext differentiates from other interfaces.
	IsRoleOptionContext()
}

type RoleOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoleOptionContext() *RoleOptionContext {
	var p = new(RoleOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_roleOption
	return p
}

func (*RoleOptionContext) IsRoleOptionContext() {}

func NewRoleOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoleOptionContext {
	var p = new(RoleOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_roleOption

	return p
}

func (s *RoleOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *RoleOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *RoleOptionContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *RoleOptionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *RoleOptionContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCEPT, 0)
}

func (s *RoleOptionContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RoleOptionContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RoleOptionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RoleOptionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RoleOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoleOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoleOption(s)
	}
}

func (s *RoleOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoleOption(s)
	}
}

func (p *MySqlParser) RoleOption() (localctx IRoleOptionContext) {
	localctx = NewRoleOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, MySqlParserRULE_roleOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4789)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4767)
			p.Match(MySqlParserDEFAULT)
		}

	case MySqlParserNONE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4768)
			p.Match(MySqlParserNONE)
		}

	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4769)
			p.Match(MySqlParserALL)
		}
		p.SetState(4779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEXCEPT {
			{
				p.SetState(4770)
				p.Match(MySqlParserEXCEPT)
			}
			{
				p.SetState(4771)
				p.UserName()
			}
			p.SetState(4776)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(4772)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(4773)
					p.UserName()
				}

				p.SetState(4778)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case MySqlParserADMIN, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserSTRING_USER_NAME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4781)
			p.UserName()
		}
		p.SetState(4786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4782)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4783)
				p.UserName()
			}

			p.SetState(4788)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGrantProxyContext is an interface to support dynamic dispatch.
type IGrantProxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// GetToFirst returns the toFirst rule contexts.
	GetToFirst() IUserNameContext

	// Get_userName returns the _userName rule contexts.
	Get_userName() IUserNameContext

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// SetToFirst sets the toFirst rule contexts.
	SetToFirst(IUserNameContext)

	// Set_userName sets the _userName rule contexts.
	Set_userName(IUserNameContext)

	// GetToOther returns the toOther rule context list.
	GetToOther() []IUserNameContext

	// SetToOther sets the toOther rule context list.
	SetToOther([]IUserNameContext)

	// IsGrantProxyContext differentiates from other interfaces.
	IsGrantProxyContext()
}

type GrantProxyContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	fromFirst IUserNameContext
	toFirst   IUserNameContext
	_userName IUserNameContext
	toOther   []IUserNameContext
}

func NewEmptyGrantProxyContext() *GrantProxyContext {
	var p = new(GrantProxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grantProxy
	return p
}

func (*GrantProxyContext) IsGrantProxyContext() {}

func NewGrantProxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantProxyContext {
	var p = new(GrantProxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grantProxy

	return p
}

func (s *GrantProxyContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantProxyContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *GrantProxyContext) GetToFirst() IUserNameContext { return s.toFirst }

func (s *GrantProxyContext) Get_userName() IUserNameContext { return s._userName }

func (s *GrantProxyContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *GrantProxyContext) SetToFirst(v IUserNameContext) { s.toFirst = v }

func (s *GrantProxyContext) Set_userName(v IUserNameContext) { s._userName = v }

func (s *GrantProxyContext) GetToOther() []IUserNameContext { return s.toOther }

func (s *GrantProxyContext) SetToOther(v []IUserNameContext) { s.toOther = v }

func (s *GrantProxyContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *GrantProxyContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *GrantProxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *GrantProxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *GrantProxyContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *GrantProxyContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *GrantProxyContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *GrantProxyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GrantProxyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GrantProxyContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *GrantProxyContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *GrantProxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantProxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantProxyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGrantProxy(s)
	}
}

func (s *GrantProxyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGrantProxy(s)
	}
}

func (p *MySqlParser) GrantProxy() (localctx IGrantProxyContext) {
	localctx = NewGrantProxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, MySqlParserRULE_grantProxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4791)
		p.Match(MySqlParserGRANT)
	}
	{
		p.SetState(4792)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4793)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4794)

		var _x = p.UserName()

		localctx.(*GrantProxyContext).fromFirst = _x
	}
	{
		p.SetState(4795)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4796)

		var _x = p.UserName()

		localctx.(*GrantProxyContext).toFirst = _x
	}
	p.SetState(4801)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4797)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4798)

			var _x = p.UserName()

			localctx.(*GrantProxyContext)._userName = _x
		}
		localctx.(*GrantProxyContext).toOther = append(localctx.(*GrantProxyContext).toOther, localctx.(*GrantProxyContext)._userName)

		p.SetState(4803)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(4804)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4805)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4806)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IRenameUserContext is an interface to support dynamic dispatch.
type IRenameUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameUserContext differentiates from other interfaces.
	IsRenameUserContext()
}

type RenameUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameUserContext() *RenameUserContext {
	var p = new(RenameUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameUser
	return p
}

func (*RenameUserContext) IsRenameUserContext() {}

func NewRenameUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameUserContext {
	var p = new(RenameUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameUser

	return p
}

func (s *RenameUserContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameUserContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *RenameUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *RenameUserContext) AllRenameUserClause() []IRenameUserClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRenameUserClauseContext)(nil)).Elem())
	var tst = make([]IRenameUserClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRenameUserClauseContext)
		}
	}

	return tst
}

func (s *RenameUserContext) RenameUserClause(i int) IRenameUserClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameUserClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRenameUserClauseContext)
}

func (s *RenameUserContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RenameUserContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RenameUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRenameUser(s)
	}
}

func (s *RenameUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRenameUser(s)
	}
}

func (p *MySqlParser) RenameUser() (localctx IRenameUserContext) {
	localctx = NewRenameUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, MySqlParserRULE_renameUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4809)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(4810)
		p.Match(MySqlParserUSER)
	}
	{
		p.SetState(4811)
		p.RenameUserClause()
	}
	p.SetState(4816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4812)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4813)
			p.RenameUserClause()
		}

		p.SetState(4818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRevokeStatementContext is an interface to support dynamic dispatch.
type IRevokeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevokeStatementContext differentiates from other interfaces.
	IsRevokeStatementContext()
}

type RevokeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevokeStatementContext() *RevokeStatementContext {
	var p = new(RevokeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revokeStatement
	return p
}

func (*RevokeStatementContext) IsRevokeStatementContext() {}

func NewRevokeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeStatementContext {
	var p = new(RevokeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revokeStatement

	return p
}

func (s *RevokeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeStatementContext) CopyFrom(ctx *RevokeStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RevokeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DetailRevokeContext struct {
	*RevokeStatementContext
	privilegeObject antlr.Token
}

func NewDetailRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DetailRevokeContext {
	var p = new(DetailRevokeContext)

	p.RevokeStatementContext = NewEmptyRevokeStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeStatementContext))

	return p
}

func (s *DetailRevokeContext) GetPrivilegeObject() antlr.Token { return s.privilegeObject }

func (s *DetailRevokeContext) SetPrivilegeObject(v antlr.Token) { s.privilegeObject = v }

func (s *DetailRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DetailRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *DetailRevokeContext) AllPrivelegeClause() []IPrivelegeClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem())
	var tst = make([]IPrivelegeClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelegeClauseContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) PrivelegeClause(i int) IPrivelegeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelegeClauseContext)
}

func (s *DetailRevokeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DetailRevokeContext) PrivilegeLevel() IPrivilegeLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeLevelContext)
}

func (s *DetailRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *DetailRevokeContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *DetailRevokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DetailRevokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DetailRevokeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *DetailRevokeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *DetailRevokeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *DetailRevokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDetailRevoke(s)
	}
}

func (s *DetailRevokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDetailRevoke(s)
	}
}

type RoleRevokeContext struct {
	*RevokeStatementContext
}

func NewRoleRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoleRevokeContext {
	var p = new(RoleRevokeContext)

	p.RevokeStatementContext = NewEmptyRevokeStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeStatementContext))

	return p
}

func (s *RoleRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoleRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *RoleRevokeContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *RoleRevokeContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *RoleRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *RoleRevokeContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RoleRevokeContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RoleRevokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RoleRevokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RoleRevokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoleRevoke(s)
	}
}

func (s *RoleRevokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoleRevoke(s)
	}
}

type ShortRevokeContext struct {
	*RevokeStatementContext
}

func NewShortRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShortRevokeContext {
	var p = new(ShortRevokeContext)

	p.RevokeStatementContext = NewEmptyRevokeStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeStatementContext))

	return p
}

func (s *ShortRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *ShortRevokeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ShortRevokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ShortRevokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ShortRevokeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *ShortRevokeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *ShortRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShortRevokeContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *ShortRevokeContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShortRevokeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShortRevokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShortRevoke(s)
	}
}

func (s *ShortRevokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShortRevoke(s)
	}
}

func (p *MySqlParser) RevokeStatement() (localctx IRevokeStatementContext) {
	localctx = NewRevokeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, MySqlParserRULE_revokeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4883)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 711, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDetailRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4819)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4820)
			p.PrivelegeClause()
		}
		p.SetState(4825)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4821)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4822)
				p.PrivelegeClause()
			}

			p.SetState(4827)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4828)
			p.Match(MySqlParserON)
		}
		p.SetState(4830)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 703, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4829)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*DetailRevokeContext).privilegeObject = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*DetailRevokeContext).privilegeObject = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4832)
			p.PrivilegeLevel()
		}
		{
			p.SetState(4833)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4834)
			p.UserName()
		}
		p.SetState(4839)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4835)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4836)
				p.UserName()
			}

			p.SetState(4841)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewShortRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4842)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4843)
			p.Match(MySqlParserALL)
		}
		p.SetState(4845)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4844)
				p.Match(MySqlParserPRIVILEGES)
			}

		}
		{
			p.SetState(4847)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4848)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4849)
			p.Match(MySqlParserOPTION)
		}
		{
			p.SetState(4850)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4851)
			p.UserName()
		}
		p.SetState(4856)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4852)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4853)
				p.UserName()
			}

			p.SetState(4858)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		localctx = NewRoleRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4859)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4860)
			p.Uid()
		}
		p.SetState(4865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4861)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4862)
				p.Uid()
			}

			p.SetState(4867)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4868)
			p.Match(MySqlParserFROM)
		}
		p.SetState(4871)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 708, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4869)
				p.UserName()
			}

		case 2:
			{
				p.SetState(4870)
				p.Uid()
			}

		}
		p.SetState(4880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4873)
				p.Match(MySqlParserCOMMA)
			}
			p.SetState(4876)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 709, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4874)
					p.UserName()
				}

			case 2:
				{
					p.SetState(4875)
					p.Uid()
				}

			}

			p.SetState(4882)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IRevokeProxyContext is an interface to support dynamic dispatch.
type IRevokeProxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOnUser returns the onUser rule contexts.
	GetOnUser() IUserNameContext

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// Get_userName returns the _userName rule contexts.
	Get_userName() IUserNameContext

	// SetOnUser sets the onUser rule contexts.
	SetOnUser(IUserNameContext)

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// Set_userName sets the _userName rule contexts.
	Set_userName(IUserNameContext)

	// GetFromOther returns the fromOther rule context list.
	GetFromOther() []IUserNameContext

	// SetFromOther sets the fromOther rule context list.
	SetFromOther([]IUserNameContext)

	// IsRevokeProxyContext differentiates from other interfaces.
	IsRevokeProxyContext()
}

type RevokeProxyContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	onUser    IUserNameContext
	fromFirst IUserNameContext
	_userName IUserNameContext
	fromOther []IUserNameContext
}

func NewEmptyRevokeProxyContext() *RevokeProxyContext {
	var p = new(RevokeProxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revokeProxy
	return p
}

func (*RevokeProxyContext) IsRevokeProxyContext() {}

func NewRevokeProxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeProxyContext {
	var p = new(RevokeProxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revokeProxy

	return p
}

func (s *RevokeProxyContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeProxyContext) GetOnUser() IUserNameContext { return s.onUser }

func (s *RevokeProxyContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *RevokeProxyContext) Get_userName() IUserNameContext { return s._userName }

func (s *RevokeProxyContext) SetOnUser(v IUserNameContext) { s.onUser = v }

func (s *RevokeProxyContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *RevokeProxyContext) Set_userName(v IUserNameContext) { s._userName = v }

func (s *RevokeProxyContext) GetFromOther() []IUserNameContext { return s.fromOther }

func (s *RevokeProxyContext) SetFromOther(v []IUserNameContext) { s.fromOther = v }

func (s *RevokeProxyContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *RevokeProxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *RevokeProxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *RevokeProxyContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *RevokeProxyContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RevokeProxyContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RevokeProxyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RevokeProxyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RevokeProxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeProxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RevokeProxyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRevokeProxy(s)
	}
}

func (s *RevokeProxyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRevokeProxy(s)
	}
}

func (p *MySqlParser) RevokeProxy() (localctx IRevokeProxyContext) {
	localctx = NewRevokeProxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, MySqlParserRULE_revokeProxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4885)
		p.Match(MySqlParserREVOKE)
	}
	{
		p.SetState(4886)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4887)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4888)

		var _x = p.UserName()

		localctx.(*RevokeProxyContext).onUser = _x
	}
	{
		p.SetState(4889)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(4890)

		var _x = p.UserName()

		localctx.(*RevokeProxyContext).fromFirst = _x
	}
	p.SetState(4895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4891)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4892)

			var _x = p.UserName()

			localctx.(*RevokeProxyContext)._userName = _x
		}
		localctx.(*RevokeProxyContext).fromOther = append(localctx.(*RevokeProxyContext).fromOther, localctx.(*RevokeProxyContext)._userName)

		p.SetState(4897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetPasswordStatementContext is an interface to support dynamic dispatch.
type ISetPasswordStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetPasswordStatementContext differentiates from other interfaces.
	IsSetPasswordStatementContext()
}

type SetPasswordStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetPasswordStatementContext() *SetPasswordStatementContext {
	var p = new(SetPasswordStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setPasswordStatement
	return p
}

func (*SetPasswordStatementContext) IsSetPasswordStatementContext() {}

func NewSetPasswordStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetPasswordStatementContext {
	var p = new(SetPasswordStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setPasswordStatement

	return p
}

func (s *SetPasswordStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetPasswordStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetPasswordStatementContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *SetPasswordStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SetPasswordStatementContext) PasswordFunctionClause() IPasswordFunctionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPasswordFunctionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPasswordFunctionClauseContext)
}

func (s *SetPasswordStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SetPasswordStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SetPasswordStatementContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SetPasswordStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetPasswordStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetPasswordStatement(s)
	}
}

func (s *SetPasswordStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetPasswordStatement(s)
	}
}

func (p *MySqlParser) SetPasswordStatement() (localctx ISetPasswordStatementContext) {
	localctx = NewSetPasswordStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, MySqlParserRULE_setPasswordStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4898)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(4899)
		p.Match(MySqlParserPASSWORD)
	}
	p.SetState(4902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4900)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4901)
			p.UserName()
		}

	}
	{
		p.SetState(4904)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(4907)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserOLD_PASSWORD, MySqlParserPASSWORD:
		{
			p.SetState(4905)
			p.PasswordFunctionClause()
		}

	case MySqlParserSTRING_LITERAL:
		{
			p.SetState(4906)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserSpecificationContext is an interface to support dynamic dispatch.
type IUserSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserSpecificationContext differentiates from other interfaces.
	IsUserSpecificationContext()
}

type UserSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserSpecificationContext() *UserSpecificationContext {
	var p = new(UserSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userSpecification
	return p
}

func (*UserSpecificationContext) IsUserSpecificationContext() {}

func NewUserSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserSpecificationContext {
	var p = new(UserSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userSpecification

	return p
}

func (s *UserSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *UserSpecificationContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *UserSpecificationContext) UserPasswordOption() IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *UserSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserSpecification(s)
	}
}

func (s *UserSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserSpecification(s)
	}
}

func (p *MySqlParser) UserSpecification() (localctx IUserSpecificationContext) {
	localctx = NewUserSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, MySqlParserRULE_userSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4909)
		p.UserName()
	}
	{
		p.SetState(4910)
		p.UserPasswordOption()
	}

	return localctx
}

// IUserAuthOptionContext is an interface to support dynamic dispatch.
type IUserAuthOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserAuthOptionContext differentiates from other interfaces.
	IsUserAuthOptionContext()
}

type UserAuthOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserAuthOptionContext() *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userAuthOption
	return p
}

func (*UserAuthOptionContext) IsUserAuthOptionContext() {}

func NewUserAuthOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userAuthOption

	return p
}

func (s *UserAuthOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserAuthOptionContext) CopyFrom(ctx *UserAuthOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UserAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserAuthOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SimpleAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewSimpleAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleAuthOptionContext {
	var p = new(SimpleAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *SimpleAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SimpleAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleAuthOption(s)
	}
}

func (s *SimpleAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleAuthOption(s)
	}
}

type PasswordAuthOptionContext struct {
	*UserAuthOptionContext
	hashed antlr.Token
}

func NewPasswordAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordAuthOptionContext {
	var p = new(PasswordAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *PasswordAuthOptionContext) GetHashed() antlr.Token { return s.hashed }

func (s *PasswordAuthOptionContext) SetHashed(v antlr.Token) { s.hashed = v }

func (s *PasswordAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *PasswordAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *PasswordAuthOptionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *PasswordAuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PasswordAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPasswordAuthOption(s)
	}
}

func (s *PasswordAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPasswordAuthOption(s)
	}
}

type StringAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewStringAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringAuthOptionContext {
	var p = new(StringAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *StringAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *StringAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *StringAuthOptionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *StringAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *StringAuthOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *StringAuthOptionContext) AuthPlugin() IAuthPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthPluginContext)
}

func (s *StringAuthOptionContext) RETAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETAIN, 0)
}

func (s *StringAuthOptionContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *StringAuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *StringAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStringAuthOption(s)
	}
}

func (s *StringAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStringAuthOption(s)
	}
}

type HashAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewHashAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HashAuthOptionContext {
	var p = new(HashAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *HashAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HashAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *HashAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *HashAuthOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *HashAuthOptionContext) AuthPlugin() IAuthPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthPluginContext)
}

func (s *HashAuthOptionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *HashAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HashAuthOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHashAuthOption(s)
	}
}

func (s *HashAuthOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHashAuthOption(s)
	}
}

func (p *MySqlParser) UserAuthOption() (localctx IUserAuthOptionContext) {
	localctx = NewUserAuthOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, MySqlParserRULE_userAuthOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4940)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 718, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPasswordAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4912)
			p.UserName()
		}
		{
			p.SetState(4913)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4914)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4915)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(4916)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PasswordAuthOptionContext).hashed = _m
		}

	case 2:
		localctx = NewStringAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4918)
			p.UserName()
		}
		{
			p.SetState(4919)
			p.Match(MySqlParserIDENTIFIED)
		}
		p.SetState(4922)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4920)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4921)
				p.AuthPlugin()
			}

		}
		{
			p.SetState(4924)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4925)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		p.SetState(4929)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserRETAIN {
			{
				p.SetState(4926)
				p.Match(MySqlParserRETAIN)
			}
			{
				p.SetState(4927)
				p.Match(MySqlParserCURRENT)
			}
			{
				p.SetState(4928)
				p.Match(MySqlParserPASSWORD)
			}

		}

	case 3:
		localctx = NewHashAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4931)
			p.UserName()
		}
		{
			p.SetState(4932)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4933)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4934)
			p.AuthPlugin()
		}
		p.SetState(4937)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 717, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4935)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(4936)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	case 4:
		localctx = NewSimpleAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4939)
			p.UserName()
		}

	}

	return localctx
}

// ITlsOptionContext is an interface to support dynamic dispatch.
type ITlsOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTlsOptionContext differentiates from other interfaces.
	IsTlsOptionContext()
}

type TlsOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTlsOptionContext() *TlsOptionContext {
	var p = new(TlsOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tlsOption
	return p
}

func (*TlsOptionContext) IsTlsOptionContext() {}

func NewTlsOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TlsOptionContext {
	var p = new(TlsOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tlsOption

	return p
}

func (s *TlsOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TlsOptionContext) SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSSL, 0)
}

func (s *TlsOptionContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *TlsOptionContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *TlsOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TlsOptionContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *TlsOptionContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *TlsOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TlsOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TlsOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTlsOption(s)
	}
}

func (s *TlsOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTlsOption(s)
	}
}

func (p *MySqlParser) TlsOption() (localctx ITlsOptionContext) {
	localctx = NewTlsOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, MySqlParserRULE_tlsOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4950)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSSL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4942)
			p.Match(MySqlParserSSL)
		}

	case MySqlParserX509:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4943)
			p.Match(MySqlParserX509)
		}

	case MySqlParserCIPHER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4944)
			p.Match(MySqlParserCIPHER)
		}
		{
			p.SetState(4945)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserISSUER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4946)
			p.Match(MySqlParserISSUER)
		}
		{
			p.SetState(4947)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSUBJECT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4948)
			p.Match(MySqlParserSUBJECT)
		}
		{
			p.SetState(4949)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserResourceOptionContext is an interface to support dynamic dispatch.
type IUserResourceOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserResourceOptionContext differentiates from other interfaces.
	IsUserResourceOptionContext()
}

type UserResourceOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserResourceOptionContext() *UserResourceOptionContext {
	var p = new(UserResourceOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userResourceOption
	return p
}

func (*UserResourceOptionContext) IsUserResourceOptionContext() {}

func NewUserResourceOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserResourceOptionContext {
	var p = new(UserResourceOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userResourceOption

	return p
}

func (s *UserResourceOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserResourceOptionContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UserResourceOptionContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *UserResourceOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserResourceOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserResourceOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserResourceOption(s)
	}
}

func (s *UserResourceOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserResourceOption(s)
	}
}

func (p *MySqlParser) UserResourceOption() (localctx IUserResourceOptionContext) {
	localctx = NewUserResourceOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, MySqlParserRULE_userResourceOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4960)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMAX_QUERIES_PER_HOUR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4952)
			p.Match(MySqlParserMAX_QUERIES_PER_HOUR)
		}
		{
			p.SetState(4953)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_UPDATES_PER_HOUR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4954)
			p.Match(MySqlParserMAX_UPDATES_PER_HOUR)
		}
		{
			p.SetState(4955)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_CONNECTIONS_PER_HOUR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4956)
			p.Match(MySqlParserMAX_CONNECTIONS_PER_HOUR)
		}
		{
			p.SetState(4957)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_USER_CONNECTIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4958)
			p.Match(MySqlParserMAX_USER_CONNECTIONS)
		}
		{
			p.SetState(4959)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserPasswordOptionContext is an interface to support dynamic dispatch.
type IUserPasswordOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpireType returns the expireType token.
	GetExpireType() antlr.Token

	// SetExpireType sets the expireType token.
	SetExpireType(antlr.Token)

	// IsUserPasswordOptionContext differentiates from other interfaces.
	IsUserPasswordOptionContext()
}

type UserPasswordOptionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	expireType antlr.Token
}

func NewEmptyUserPasswordOptionContext() *UserPasswordOptionContext {
	var p = new(UserPasswordOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userPasswordOption
	return p
}

func (*UserPasswordOptionContext) IsUserPasswordOptionContext() {}

func NewUserPasswordOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserPasswordOptionContext {
	var p = new(UserPasswordOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userPasswordOption

	return p
}

func (s *UserPasswordOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserPasswordOptionContext) GetExpireType() antlr.Token { return s.expireType }

func (s *UserPasswordOptionContext) SetExpireType(v antlr.Token) { s.expireType = v }

func (s *UserPasswordOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *UserPasswordOptionContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *UserPasswordOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UserPasswordOptionContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *UserPasswordOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *UserPasswordOptionContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEVER, 0)
}

func (s *UserPasswordOptionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *UserPasswordOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserPasswordOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserPasswordOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserPasswordOption(s)
	}
}

func (s *UserPasswordOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserPasswordOption(s)
	}
}

func (p *MySqlParser) UserPasswordOption() (localctx IUserPasswordOptionContext) {
	localctx = NewUserPasswordOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, MySqlParserRULE_userPasswordOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4962)
		p.Match(MySqlParserPASSWORD)
	}
	{
		p.SetState(4963)
		p.Match(MySqlParserEXPIRE)
	}
	p.SetState(4970)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDEFAULT:
		{
			p.SetState(4964)

			var _m = p.Match(MySqlParserDEFAULT)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}

	case MySqlParserNEVER:
		{
			p.SetState(4965)

			var _m = p.Match(MySqlParserNEVER)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}

	case MySqlParserINTERVAL:
		{
			p.SetState(4966)

			var _m = p.Match(MySqlParserINTERVAL)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}
		{
			p.SetState(4967)
			p.DecimalLiteral()
		}
		{
			p.SetState(4968)
			p.Match(MySqlParserDAY)
		}

	case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserACCOUNT, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPASSWORD, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

	default:
	}

	return localctx
}

// IUserLockOptionContext is an interface to support dynamic dispatch.
type IUserLockOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsUserLockOptionContext differentiates from other interfaces.
	IsUserLockOptionContext()
}

type UserLockOptionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	lockType antlr.Token
}

func NewEmptyUserLockOptionContext() *UserLockOptionContext {
	var p = new(UserLockOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userLockOption
	return p
}

func (*UserLockOptionContext) IsUserLockOptionContext() {}

func NewUserLockOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserLockOptionContext {
	var p = new(UserLockOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userLockOption

	return p
}

func (s *UserLockOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserLockOptionContext) GetLockType() antlr.Token { return s.lockType }

func (s *UserLockOptionContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *UserLockOptionContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserACCOUNT, 0)
}

func (s *UserLockOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *UserLockOptionContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *UserLockOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserLockOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserLockOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserLockOption(s)
	}
}

func (s *UserLockOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserLockOption(s)
	}
}

func (p *MySqlParser) UserLockOption() (localctx IUserLockOptionContext) {
	localctx = NewUserLockOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, MySqlParserRULE_userLockOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4972)
		p.Match(MySqlParserACCOUNT)
	}
	{
		p.SetState(4973)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*UserLockOptionContext).lockType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOCK || _la == MySqlParserUNLOCK) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*UserLockOptionContext).lockType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrivelegeClauseContext is an interface to support dynamic dispatch.
type IPrivelegeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivelegeClauseContext differentiates from other interfaces.
	IsPrivelegeClauseContext()
}

type PrivelegeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivelegeClauseContext() *PrivelegeClauseContext {
	var p = new(PrivelegeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privelegeClause
	return p
}

func (*PrivelegeClauseContext) IsPrivelegeClauseContext() {}

func NewPrivelegeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivelegeClauseContext {
	var p = new(PrivelegeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privelegeClause

	return p
}

func (s *PrivelegeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivelegeClauseContext) Privilege() IPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *PrivelegeClauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PrivelegeClauseContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PrivelegeClauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PrivelegeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivelegeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivelegeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivelegeClause(s)
	}
}

func (s *PrivelegeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivelegeClause(s)
	}
}

func (p *MySqlParser) PrivelegeClause() (localctx IPrivelegeClauseContext) {
	localctx = NewPrivelegeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, MySqlParserRULE_privelegeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4975)
		p.Privilege()
	}
	p.SetState(4980)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(4976)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4977)
			p.UidList()
		}
		{
			p.SetState(4978)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilege
	return p
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *PrivilegeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *PrivilegeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *PrivilegeContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *PrivilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *PrivilegeContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *PrivilegeContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *PrivilegeContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *PrivilegeContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *PrivilegeContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *PrivilegeContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE, 0)
}

func (s *PrivilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *PrivilegeContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *PrivilegeContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *PrivilegeContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *PrivilegeContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *PrivilegeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *PrivilegeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *PrivilegeContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *PrivilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *PrivilegeContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *PrivilegeContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *PrivilegeContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *PrivilegeContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *PrivilegeContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *PrivilegeContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *PrivilegeContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *PrivilegeContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *PrivilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *PrivilegeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *PrivilegeContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *PrivilegeContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *PrivilegeContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *PrivilegeContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *PrivilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *PrivilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSAGE, 0)
}

func (s *PrivilegeContext) APPLICATION_PASSWORD_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAPPLICATION_PASSWORD_ADMIN, 0)
}

func (s *PrivilegeContext) AUDIT_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUDIT_ADMIN, 0)
}

func (s *PrivilegeContext) BACKUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBACKUP_ADMIN, 0)
}

func (s *PrivilegeContext) BINLOG_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ADMIN, 0)
}

func (s *PrivilegeContext) BINLOG_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ENCRYPTION_ADMIN, 0)
}

func (s *PrivilegeContext) CLONE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLONE_ADMIN, 0)
}

func (s *PrivilegeContext) CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ADMIN, 0)
}

func (s *PrivilegeContext) ENCRYPTION_KEY_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION_KEY_ADMIN, 0)
}

func (s *PrivilegeContext) FIREWALL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_ADMIN, 0)
}

func (s *PrivilegeContext) FIREWALL_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_USER, 0)
}

func (s *PrivilegeContext) FLUSH_OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_OPTIMIZER_COSTS, 0)
}

func (s *PrivilegeContext) FLUSH_STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_STATUS, 0)
}

func (s *PrivilegeContext) FLUSH_TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_TABLES, 0)
}

func (s *PrivilegeContext) FLUSH_USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_USER_RESOURCES, 0)
}

func (s *PrivilegeContext) GROUP_REPLICATION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION_ADMIN, 0)
}

func (s *PrivilegeContext) INNODB_REDO_LOG_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ARCHIVE, 0)
}

func (s *PrivilegeContext) INNODB_REDO_LOG_ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ENABLE, 0)
}

func (s *PrivilegeContext) NDB_STORED_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB_STORED_USER, 0)
}

func (s *PrivilegeContext) PERSIST_RO_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERSIST_RO_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) REPLICATION_APPLIER() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_APPLIER, 0)
}

func (s *PrivilegeContext) REPLICATION_SLAVE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_SLAVE_ADMIN, 0)
}

func (s *PrivilegeContext) RESOURCE_GROUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_ADMIN, 0)
}

func (s *PrivilegeContext) RESOURCE_GROUP_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_USER, 0)
}

func (s *PrivilegeContext) ROLE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE_ADMIN, 0)
}

func (s *PrivilegeContext) SERVICE_CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVICE_CONNECTION_ADMIN, 0)
}

func (s *PrivilegeContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) SET_USER_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET_USER_ID, 0)
}

func (s *PrivilegeContext) SHOW_ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW_ROUTINE, 0)
}

func (s *PrivilegeContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_USER, 0)
}

func (s *PrivilegeContext) SYSTEM_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) TABLE_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_ENCRYPTION_ADMIN, 0)
}

func (s *PrivilegeContext) VERSION_TOKEN_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION_TOKEN_ADMIN, 0)
}

func (s *PrivilegeContext) XA_RECOVER_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA_RECOVER_ADMIN, 0)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivilege(s)
	}
}

func (s *PrivilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivilege(s)
	}
}

func (p *MySqlParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, MySqlParserRULE_privilege)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5061)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4982)
			p.Match(MySqlParserALL)
		}
		p.SetState(4984)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4983)
				p.Match(MySqlParserPRIVILEGES)
			}

		}

	case MySqlParserALTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4986)
			p.Match(MySqlParserALTER)
		}
		p.SetState(4988)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserROUTINE {
			{
				p.SetState(4987)
				p.Match(MySqlParserROUTINE)
			}

		}

	case MySqlParserCREATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4990)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(4998)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserTEMPORARY:
			{
				p.SetState(4991)
				p.Match(MySqlParserTEMPORARY)
			}
			{
				p.SetState(4992)
				p.Match(MySqlParserTABLES)
			}

		case MySqlParserROUTINE:
			{
				p.SetState(4993)
				p.Match(MySqlParserROUTINE)
			}

		case MySqlParserVIEW:
			{
				p.SetState(4994)
				p.Match(MySqlParserVIEW)
			}

		case MySqlParserUSER:
			{
				p.SetState(4995)
				p.Match(MySqlParserUSER)
			}

		case MySqlParserTABLESPACE:
			{
				p.SetState(4996)
				p.Match(MySqlParserTABLESPACE)
			}

		case MySqlParserROLE:
			{
				p.SetState(4997)
				p.Match(MySqlParserROLE)
			}

		case MySqlParserON, MySqlParserLR_BRACKET, MySqlParserCOMMA:

		default:
		}

	case MySqlParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5000)
			p.Match(MySqlParserDELETE)
		}

	case MySqlParserDROP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5001)
			p.Match(MySqlParserDROP)
		}
		p.SetState(5003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserROLE {
			{
				p.SetState(5002)
				p.Match(MySqlParserROLE)
			}

		}

	case MySqlParserEVENT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5005)
			p.Match(MySqlParserEVENT)
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5006)
			p.Match(MySqlParserEXECUTE)
		}

	case MySqlParserFILE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5007)
			p.Match(MySqlParserFILE)
		}

	case MySqlParserGRANT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5008)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(5009)
			p.Match(MySqlParserOPTION)
		}

	case MySqlParserINDEX:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5010)
			p.Match(MySqlParserINDEX)
		}

	case MySqlParserINSERT:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5011)
			p.Match(MySqlParserINSERT)
		}

	case MySqlParserLOCK:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5012)
			p.Match(MySqlParserLOCK)
		}
		{
			p.SetState(5013)
			p.Match(MySqlParserTABLES)
		}

	case MySqlParserPROCESS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5014)
			p.Match(MySqlParserPROCESS)
		}

	case MySqlParserPROXY:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5015)
			p.Match(MySqlParserPROXY)
		}

	case MySqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5016)
			p.Match(MySqlParserREFERENCES)
		}

	case MySqlParserRELOAD:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5017)
			p.Match(MySqlParserRELOAD)
		}

	case MySqlParserREPLICATION:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5018)
			p.Match(MySqlParserREPLICATION)
		}
		{
			p.SetState(5019)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCLIENT || _la == MySqlParserSLAVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSELECT:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5020)
			p.Match(MySqlParserSELECT)
		}

	case MySqlParserSHOW:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5021)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5022)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASES || _la == MySqlParserVIEW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSHUTDOWN:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(5023)
			p.Match(MySqlParserSHUTDOWN)
		}

	case MySqlParserSUPER:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(5024)
			p.Match(MySqlParserSUPER)
		}

	case MySqlParserTRIGGER:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(5025)
			p.Match(MySqlParserTRIGGER)
		}

	case MySqlParserUPDATE:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(5026)
			p.Match(MySqlParserUPDATE)
		}

	case MySqlParserUSAGE:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(5027)
			p.Match(MySqlParserUSAGE)
		}

	case MySqlParserAPPLICATION_PASSWORD_ADMIN:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(5028)
			p.Match(MySqlParserAPPLICATION_PASSWORD_ADMIN)
		}

	case MySqlParserAUDIT_ADMIN:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(5029)
			p.Match(MySqlParserAUDIT_ADMIN)
		}

	case MySqlParserBACKUP_ADMIN:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(5030)
			p.Match(MySqlParserBACKUP_ADMIN)
		}

	case MySqlParserBINLOG_ADMIN:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(5031)
			p.Match(MySqlParserBINLOG_ADMIN)
		}

	case MySqlParserBINLOG_ENCRYPTION_ADMIN:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(5032)
			p.Match(MySqlParserBINLOG_ENCRYPTION_ADMIN)
		}

	case MySqlParserCLONE_ADMIN:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(5033)
			p.Match(MySqlParserCLONE_ADMIN)
		}

	case MySqlParserCONNECTION_ADMIN:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(5034)
			p.Match(MySqlParserCONNECTION_ADMIN)
		}

	case MySqlParserENCRYPTION_KEY_ADMIN:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(5035)
			p.Match(MySqlParserENCRYPTION_KEY_ADMIN)
		}

	case MySqlParserFIREWALL_ADMIN:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(5036)
			p.Match(MySqlParserFIREWALL_ADMIN)
		}

	case MySqlParserFIREWALL_USER:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(5037)
			p.Match(MySqlParserFIREWALL_USER)
		}

	case MySqlParserFLUSH_OPTIMIZER_COSTS:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(5038)
			p.Match(MySqlParserFLUSH_OPTIMIZER_COSTS)
		}

	case MySqlParserFLUSH_STATUS:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(5039)
			p.Match(MySqlParserFLUSH_STATUS)
		}

	case MySqlParserFLUSH_TABLES:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(5040)
			p.Match(MySqlParserFLUSH_TABLES)
		}

	case MySqlParserFLUSH_USER_RESOURCES:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(5041)
			p.Match(MySqlParserFLUSH_USER_RESOURCES)
		}

	case MySqlParserGROUP_REPLICATION_ADMIN:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(5042)
			p.Match(MySqlParserGROUP_REPLICATION_ADMIN)
		}

	case MySqlParserINNODB_REDO_LOG_ARCHIVE:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(5043)
			p.Match(MySqlParserINNODB_REDO_LOG_ARCHIVE)
		}

	case MySqlParserINNODB_REDO_LOG_ENABLE:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(5044)
			p.Match(MySqlParserINNODB_REDO_LOG_ENABLE)
		}

	case MySqlParserNDB_STORED_USER:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(5045)
			p.Match(MySqlParserNDB_STORED_USER)
		}

	case MySqlParserPERSIST_RO_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(5046)
			p.Match(MySqlParserPERSIST_RO_VARIABLES_ADMIN)
		}

	case MySqlParserREPLICATION_APPLIER:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(5047)
			p.Match(MySqlParserREPLICATION_APPLIER)
		}

	case MySqlParserREPLICATION_SLAVE_ADMIN:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(5048)
			p.Match(MySqlParserREPLICATION_SLAVE_ADMIN)
		}

	case MySqlParserRESOURCE_GROUP_ADMIN:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(5049)
			p.Match(MySqlParserRESOURCE_GROUP_ADMIN)
		}

	case MySqlParserRESOURCE_GROUP_USER:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(5050)
			p.Match(MySqlParserRESOURCE_GROUP_USER)
		}

	case MySqlParserROLE_ADMIN:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(5051)
			p.Match(MySqlParserROLE_ADMIN)
		}

	case MySqlParserSERVICE_CONNECTION_ADMIN:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(5052)
			p.Match(MySqlParserSERVICE_CONNECTION_ADMIN)
		}

	case MySqlParserSESSION_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(5053)
			p.Match(MySqlParserSESSION_VARIABLES_ADMIN)
		}

	case MySqlParserSET_USER_ID:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(5054)
			p.Match(MySqlParserSET_USER_ID)
		}

	case MySqlParserSHOW_ROUTINE:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(5055)
			p.Match(MySqlParserSHOW_ROUTINE)
		}

	case MySqlParserSYSTEM_USER:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(5056)
			p.Match(MySqlParserSYSTEM_USER)
		}

	case MySqlParserSYSTEM_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(5057)
			p.Match(MySqlParserSYSTEM_VARIABLES_ADMIN)
		}

	case MySqlParserTABLE_ENCRYPTION_ADMIN:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(5058)
			p.Match(MySqlParserTABLE_ENCRYPTION_ADMIN)
		}

	case MySqlParserVERSION_TOKEN_ADMIN:
		p.EnterOuterAlt(localctx, 56)
		{
			p.SetState(5059)
			p.Match(MySqlParserVERSION_TOKEN_ADMIN)
		}

	case MySqlParserXA_RECOVER_ADMIN:
		p.EnterOuterAlt(localctx, 57)
		{
			p.SetState(5060)
			p.Match(MySqlParserXA_RECOVER_ADMIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrivilegeLevelContext is an interface to support dynamic dispatch.
type IPrivilegeLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeLevelContext differentiates from other interfaces.
	IsPrivilegeLevelContext()
}

type PrivilegeLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeLevelContext() *PrivilegeLevelContext {
	var p = new(PrivilegeLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilegeLevel
	return p
}

func (*PrivilegeLevelContext) IsPrivilegeLevelContext() {}

func NewPrivilegeLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeLevelContext {
	var p = new(PrivilegeLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilegeLevel

	return p
}

func (s *PrivilegeLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeLevelContext) CopyFrom(ctx *PrivilegeLevelContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrivilegeLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DefiniteSchemaPrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteSchemaPrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteSchemaPrivLevelContext {
	var p = new(DefiniteSchemaPrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteSchemaPrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteSchemaPrivLevelContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteSchemaPrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DefiniteSchemaPrivLevelContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *DefiniteSchemaPrivLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefiniteSchemaPrivLevel(s)
	}
}

func (s *DefiniteSchemaPrivLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefiniteSchemaPrivLevel(s)
	}
}

type DefiniteFullTablePrivLevel2Context struct {
	*PrivilegeLevelContext
}

func NewDefiniteFullTablePrivLevel2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteFullTablePrivLevel2Context {
	var p = new(DefiniteFullTablePrivLevel2Context)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteFullTablePrivLevel2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteFullTablePrivLevel2Context) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteFullTablePrivLevel2Context) DottedId() IDottedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDottedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDottedIdContext)
}

func (s *DefiniteFullTablePrivLevel2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefiniteFullTablePrivLevel2(s)
	}
}

func (s *DefiniteFullTablePrivLevel2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefiniteFullTablePrivLevel2(s)
	}
}

type DefiniteFullTablePrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteFullTablePrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteFullTablePrivLevelContext {
	var p = new(DefiniteFullTablePrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteFullTablePrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteFullTablePrivLevelContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *DefiniteFullTablePrivLevelContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteFullTablePrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DefiniteFullTablePrivLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefiniteFullTablePrivLevel(s)
	}
}

func (s *DefiniteFullTablePrivLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefiniteFullTablePrivLevel(s)
	}
}

type GlobalPrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewGlobalPrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GlobalPrivLevelContext {
	var p = new(GlobalPrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *GlobalPrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalPrivLevelContext) AllSTAR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTAR)
}

func (s *GlobalPrivLevelContext) STAR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, i)
}

func (s *GlobalPrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *GlobalPrivLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGlobalPrivLevel(s)
	}
}

func (s *GlobalPrivLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGlobalPrivLevel(s)
	}
}

type DefiniteTablePrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteTablePrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteTablePrivLevelContext {
	var p = new(DefiniteTablePrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteTablePrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteTablePrivLevelContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteTablePrivLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefiniteTablePrivLevel(s)
	}
}

func (s *DefiniteTablePrivLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefiniteTablePrivLevel(s)
	}
}

type CurrentSchemaPriviLevelContext struct {
	*PrivilegeLevelContext
}

func NewCurrentSchemaPriviLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CurrentSchemaPriviLevelContext {
	var p = new(CurrentSchemaPriviLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *CurrentSchemaPriviLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentSchemaPriviLevelContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *CurrentSchemaPriviLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCurrentSchemaPriviLevel(s)
	}
}

func (s *CurrentSchemaPriviLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCurrentSchemaPriviLevel(s)
	}
}

func (p *MySqlParser) PrivilegeLevel() (localctx IPrivilegeLevelContext) {
	localctx = NewPrivilegeLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, MySqlParserRULE_privilegeLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5079)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 728, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCurrentSchemaPriviLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5063)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		localctx = NewGlobalPrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5064)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(5065)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5066)
			p.Match(MySqlParserSTAR)
		}

	case 3:
		localctx = NewDefiniteSchemaPrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5067)
			p.Uid()
		}
		{
			p.SetState(5068)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5069)
			p.Match(MySqlParserSTAR)
		}

	case 4:
		localctx = NewDefiniteFullTablePrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5071)
			p.Uid()
		}
		{
			p.SetState(5072)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5073)
			p.Uid()
		}

	case 5:
		localctx = NewDefiniteFullTablePrivLevel2Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5075)
			p.Uid()
		}
		{
			p.SetState(5076)
			p.DottedId()
		}

	case 6:
		localctx = NewDefiniteTablePrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5078)
			p.Uid()
		}

	}

	return localctx
}

// IRenameUserClauseContext is an interface to support dynamic dispatch.
type IRenameUserClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// GetToFirst returns the toFirst rule contexts.
	GetToFirst() IUserNameContext

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// SetToFirst sets the toFirst rule contexts.
	SetToFirst(IUserNameContext)

	// IsRenameUserClauseContext differentiates from other interfaces.
	IsRenameUserClauseContext()
}

type RenameUserClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	fromFirst IUserNameContext
	toFirst   IUserNameContext
}

func NewEmptyRenameUserClauseContext() *RenameUserClauseContext {
	var p = new(RenameUserClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameUserClause
	return p
}

func (*RenameUserClauseContext) IsRenameUserClauseContext() {}

func NewRenameUserClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameUserClauseContext {
	var p = new(RenameUserClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameUserClause

	return p
}

func (s *RenameUserClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameUserClauseContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *RenameUserClauseContext) GetToFirst() IUserNameContext { return s.toFirst }

func (s *RenameUserClauseContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *RenameUserClauseContext) SetToFirst(v IUserNameContext) { s.toFirst = v }

func (s *RenameUserClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RenameUserClauseContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RenameUserClauseContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RenameUserClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameUserClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameUserClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRenameUserClause(s)
	}
}

func (s *RenameUserClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRenameUserClause(s)
	}
}

func (p *MySqlParser) RenameUserClause() (localctx IRenameUserClauseContext) {
	localctx = NewRenameUserClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, MySqlParserRULE_renameUserClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5081)

		var _x = p.UserName()

		localctx.(*RenameUserClauseContext).fromFirst = _x
	}
	{
		p.SetState(5082)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(5083)

		var _x = p.UserName()

		localctx.(*RenameUserClauseContext).toFirst = _x
	}

	return localctx
}

// IAnalyzeTableContext is an interface to support dynamic dispatch.
type IAnalyzeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsAnalyzeTableContext differentiates from other interfaces.
	IsAnalyzeTableContext()
}

type AnalyzeTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyAnalyzeTableContext() *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_analyzeTable
	return p
}

func (*AnalyzeTableContext) IsAnalyzeTableContext() {}

func NewAnalyzeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_analyzeTable

	return p
}

func (s *AnalyzeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalyzeTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *AnalyzeTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *AnalyzeTableContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *AnalyzeTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *AnalyzeTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AnalyzeTableContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *AnalyzeTableContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *AnalyzeTableContext) AllHISTOGRAM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserHISTOGRAM)
}

func (s *AnalyzeTableContext) HISTOGRAM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserHISTOGRAM, i)
}

func (s *AnalyzeTableContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *AnalyzeTableContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *AnalyzeTableContext) AllFullColumnName() []IFullColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem())
	var tst = make([]IFullColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullColumnNameContext)
		}
	}

	return tst
}

func (s *AnalyzeTableContext) FullColumnName(i int) IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *AnalyzeTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AnalyzeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *AnalyzeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *AnalyzeTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AnalyzeTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AnalyzeTableContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AnalyzeTableContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *AnalyzeTableContext) BUCKETS() antlr.TerminalNode {
	return s.GetToken(MySqlParserBUCKETS, 0)
}

func (s *AnalyzeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalyzeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalyzeTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAnalyzeTable(s)
	}
}

func (s *AnalyzeTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAnalyzeTable(s)
	}
}

func (p *MySqlParser) AnalyzeTable() (localctx IAnalyzeTableContext) {
	localctx = NewAnalyzeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, MySqlParserRULE_analyzeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5085)
		p.Match(MySqlParserANALYZE)
	}
	p.SetState(5087)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(5086)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AnalyzeTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AnalyzeTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5089)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserTABLE || _la == MySqlParserTABLES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5090)
		p.Tables()
	}
	p.SetState(5108)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 732, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5091)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(5092)
			p.Match(MySqlParserHISTOGRAM)
		}
		{
			p.SetState(5093)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(5094)
			p.FullColumnName()
		}
		p.SetState(5099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5095)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5096)
				p.FullColumnName()
			}

			p.SetState(5101)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5106)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(5102)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(5103)
				p.DecimalLiteral()
			}
			{
				p.SetState(5104)
				p.Match(MySqlParserBUCKETS)
			}

		}

	}
	p.SetState(5121)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 734, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5110)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(5111)
			p.Match(MySqlParserHISTOGRAM)
		}
		{
			p.SetState(5112)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(5113)
			p.FullColumnName()
		}
		p.SetState(5118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5114)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5115)
				p.FullColumnName()
			}

			p.SetState(5120)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICheckTableContext is an interface to support dynamic dispatch.
type ICheckTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableContext differentiates from other interfaces.
	IsCheckTableContext()
}

type CheckTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableContext() *CheckTableContext {
	var p = new(CheckTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checkTable
	return p
}

func (*CheckTableContext) IsCheckTableContext() {}

func NewCheckTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableContext {
	var p = new(CheckTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checkTable

	return p
}

func (s *CheckTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *CheckTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *CheckTableContext) AllCheckTableOption() []ICheckTableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckTableOptionContext)(nil)).Elem())
	var tst = make([]ICheckTableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckTableOptionContext)
		}
	}

	return tst
}

func (s *CheckTableContext) CheckTableOption(i int) ICheckTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckTableOptionContext)
}

func (s *CheckTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheckTable(s)
	}
}

func (s *CheckTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheckTable(s)
	}
}

func (p *MySqlParser) CheckTable() (localctx ICheckTableContext) {
	localctx = NewCheckTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, MySqlParserRULE_checkTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5123)
		p.Match(MySqlParserCHECK)
	}
	{
		p.SetState(5124)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(5125)
		p.Tables()
	}
	p.SetState(5129)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserFOR || _la == MySqlParserCHANGED || _la == MySqlParserEXTENDED || _la == MySqlParserFAST || _la == MySqlParserMEDIUM || _la == MySqlParserQUICK {
		{
			p.SetState(5126)
			p.CheckTableOption()
		}

		p.SetState(5131)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChecksumTableContext is an interface to support dynamic dispatch.
type IChecksumTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsChecksumTableContext differentiates from other interfaces.
	IsChecksumTableContext()
}

type ChecksumTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyChecksumTableContext() *ChecksumTableContext {
	var p = new(ChecksumTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checksumTable
	return p
}

func (*ChecksumTableContext) IsChecksumTableContext() {}

func NewChecksumTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChecksumTableContext {
	var p = new(ChecksumTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checksumTable

	return p
}

func (s *ChecksumTableContext) GetParser() antlr.Parser { return s.parser }

func (s *ChecksumTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *ChecksumTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *ChecksumTableContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *ChecksumTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ChecksumTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *ChecksumTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *ChecksumTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *ChecksumTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChecksumTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChecksumTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChecksumTable(s)
	}
}

func (s *ChecksumTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChecksumTable(s)
	}
}

func (p *MySqlParser) ChecksumTable() (localctx IChecksumTableContext) {
	localctx = NewChecksumTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, MySqlParserRULE_checksumTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5132)
		p.Match(MySqlParserCHECKSUM)
	}
	{
		p.SetState(5133)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(5134)
		p.Tables()
	}
	p.SetState(5136)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED || _la == MySqlParserQUICK {
		{
			p.SetState(5135)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ChecksumTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserEXTENDED || _la == MySqlParserQUICK) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ChecksumTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IOptimizeTableContext is an interface to support dynamic dispatch.
type IOptimizeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsOptimizeTableContext differentiates from other interfaces.
	IsOptimizeTableContext()
}

type OptimizeTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyOptimizeTableContext() *OptimizeTableContext {
	var p = new(OptimizeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_optimizeTable
	return p
}

func (*OptimizeTableContext) IsOptimizeTableContext() {}

func NewOptimizeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptimizeTableContext {
	var p = new(OptimizeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_optimizeTable

	return p
}

func (s *OptimizeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *OptimizeTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *OptimizeTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *OptimizeTableContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *OptimizeTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *OptimizeTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *OptimizeTableContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *OptimizeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *OptimizeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *OptimizeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptimizeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptimizeTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOptimizeTable(s)
	}
}

func (s *OptimizeTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOptimizeTable(s)
	}
}

func (p *MySqlParser) OptimizeTable() (localctx IOptimizeTableContext) {
	localctx = NewOptimizeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, MySqlParserRULE_optimizeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5138)
		p.Match(MySqlParserOPTIMIZE)
	}
	p.SetState(5140)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(5139)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OptimizeTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OptimizeTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5142)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserTABLE || _la == MySqlParserTABLES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5143)
		p.Tables()
	}

	return localctx
}

// IRepairTableContext is an interface to support dynamic dispatch.
type IRepairTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsRepairTableContext differentiates from other interfaces.
	IsRepairTableContext()
}

type RepairTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyRepairTableContext() *RepairTableContext {
	var p = new(RepairTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repairTable
	return p
}

func (*RepairTableContext) IsRepairTableContext() {}

func NewRepairTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepairTableContext {
	var p = new(RepairTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repairTable

	return p
}

func (s *RepairTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RepairTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *RepairTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *RepairTableContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *RepairTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *RepairTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *RepairTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *RepairTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *RepairTableContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE_FRM, 0)
}

func (s *RepairTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *RepairTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *RepairTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepairTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepairTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRepairTable(s)
	}
}

func (s *RepairTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRepairTable(s)
	}
}

func (p *MySqlParser) RepairTable() (localctx IRepairTableContext) {
	localctx = NewRepairTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, MySqlParserRULE_repairTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5145)
		p.Match(MySqlParserREPAIR)
	}
	p.SetState(5147)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(5146)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RepairTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RepairTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5149)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(5150)
		p.Tables()
	}
	p.SetState(5152)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(5151)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(5155)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED {
		{
			p.SetState(5154)
			p.Match(MySqlParserEXTENDED)
		}

	}
	p.SetState(5158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSE_FRM {
		{
			p.SetState(5157)
			p.Match(MySqlParserUSE_FRM)
		}

	}

	return localctx
}

// ICheckTableOptionContext is an interface to support dynamic dispatch.
type ICheckTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableOptionContext differentiates from other interfaces.
	IsCheckTableOptionContext()
}

type CheckTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableOptionContext() *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checkTableOption
	return p
}

func (*CheckTableOptionContext) IsCheckTableOptionContext() {}

func NewCheckTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checkTableOption

	return p
}

func (s *CheckTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *CheckTableOptionContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *CheckTableOptionContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *CheckTableOptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAST, 0)
}

func (s *CheckTableOptionContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUM, 0)
}

func (s *CheckTableOptionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *CheckTableOptionContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGED, 0)
}

func (s *CheckTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheckTableOption(s)
	}
}

func (s *CheckTableOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheckTableOption(s)
	}
}

func (p *MySqlParser) CheckTableOption() (localctx ICheckTableOptionContext) {
	localctx = NewCheckTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, MySqlParserRULE_checkTableOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5167)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5160)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(5161)
			p.Match(MySqlParserUPGRADE)
		}

	case MySqlParserQUICK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5162)
			p.Match(MySqlParserQUICK)
		}

	case MySqlParserFAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5163)
			p.Match(MySqlParserFAST)
		}

	case MySqlParserMEDIUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5164)
			p.Match(MySqlParserMEDIUM)
		}

	case MySqlParserEXTENDED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5165)
			p.Match(MySqlParserEXTENDED)
		}

	case MySqlParserCHANGED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5166)
			p.Match(MySqlParserCHANGED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateUdfunctionContext is an interface to support dynamic dispatch.
type ICreateUdfunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturnType returns the returnType token.
	GetReturnType() antlr.Token

	// SetReturnType sets the returnType token.
	SetReturnType(antlr.Token)

	// IsCreateUdfunctionContext differentiates from other interfaces.
	IsCreateUdfunctionContext()
}

type CreateUdfunctionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	returnType antlr.Token
}

func NewEmptyCreateUdfunctionContext() *CreateUdfunctionContext {
	var p = new(CreateUdfunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createUdfunction
	return p
}

func (*CreateUdfunctionContext) IsCreateUdfunctionContext() {}

func NewCreateUdfunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUdfunctionContext {
	var p = new(CreateUdfunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createUdfunction

	return p
}

func (s *CreateUdfunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUdfunctionContext) GetReturnType() antlr.Token { return s.returnType }

func (s *CreateUdfunctionContext) SetReturnType(v antlr.Token) { s.returnType = v }

func (s *CreateUdfunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUdfunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *CreateUdfunctionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateUdfunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *CreateUdfunctionContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *CreateUdfunctionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateUdfunctionContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING, 0)
}

func (s *CreateUdfunctionContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *CreateUdfunctionContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *CreateUdfunctionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *CreateUdfunctionContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAGGREGATE, 0)
}

func (s *CreateUdfunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUdfunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateUdfunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateUdfunction(s)
	}
}

func (s *CreateUdfunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateUdfunction(s)
	}
}

func (p *MySqlParser) CreateUdfunction() (localctx ICreateUdfunctionContext) {
	localctx = NewCreateUdfunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, MySqlParserRULE_createUdfunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5169)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(5171)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAGGREGATE {
		{
			p.SetState(5170)
			p.Match(MySqlParserAGGREGATE)
		}

	}
	{
		p.SetState(5173)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(5174)
		p.Uid()
	}
	{
		p.SetState(5175)
		p.Match(MySqlParserRETURNS)
	}
	{
		p.SetState(5176)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateUdfunctionContext).returnType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(MySqlParserINTEGER-197))|(1<<(MySqlParserREAL-197))|(1<<(MySqlParserDECIMAL-197)))) != 0) || _la == MySqlParserSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateUdfunctionContext).returnType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5177)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(5178)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IInstallPluginContext is an interface to support dynamic dispatch.
type IInstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstallPluginContext differentiates from other interfaces.
	IsInstallPluginContext()
}

type InstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstallPluginContext() *InstallPluginContext {
	var p = new(InstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_installPlugin
	return p
}

func (*InstallPluginContext) IsInstallPluginContext() {}

func NewInstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstallPluginContext {
	var p = new(InstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_installPlugin

	return p
}

func (s *InstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *InstallPluginContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTALL, 0)
}

func (s *InstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *InstallPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *InstallPluginContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *InstallPluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *InstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstallPluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInstallPlugin(s)
	}
}

func (s *InstallPluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInstallPlugin(s)
	}
}

func (p *MySqlParser) InstallPlugin() (localctx IInstallPluginContext) {
	localctx = NewInstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, MySqlParserRULE_installPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5180)
		p.Match(MySqlParserINSTALL)
	}
	{
		p.SetState(5181)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(5182)
		p.Uid()
	}
	{
		p.SetState(5183)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(5184)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUninstallPluginContext is an interface to support dynamic dispatch.
type IUninstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstallPluginContext differentiates from other interfaces.
	IsUninstallPluginContext()
}

type UninstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstallPluginContext() *UninstallPluginContext {
	var p = new(UninstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uninstallPlugin
	return p
}

func (*UninstallPluginContext) IsUninstallPluginContext() {}

func NewUninstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UninstallPluginContext {
	var p = new(UninstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uninstallPlugin

	return p
}

func (s *UninstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *UninstallPluginContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNINSTALL, 0)
}

func (s *UninstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *UninstallPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UninstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UninstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UninstallPluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUninstallPlugin(s)
	}
}

func (s *UninstallPluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUninstallPlugin(s)
	}
}

func (p *MySqlParser) UninstallPlugin() (localctx IUninstallPluginContext) {
	localctx = NewUninstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, MySqlParserRULE_uninstallPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5186)
		p.Match(MySqlParserUNINSTALL)
	}
	{
		p.SetState(5187)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(5188)
		p.Uid()
	}

	return localctx
}

// ISetStatementContext is an interface to support dynamic dispatch.
type ISetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetStatementContext differentiates from other interfaces.
	IsSetStatementContext()
}

type SetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetStatementContext() *SetStatementContext {
	var p = new(SetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setStatement
	return p
}

func (*SetStatementContext) IsSetStatementContext() {}

func NewSetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetStatementContext {
	var p = new(SetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setStatement

	return p
}

func (s *SetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetStatementContext) CopyFrom(ctx *SetStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SetTransactionContext struct {
	*SetStatementContext
}

func NewSetTransactionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetTransactionContext {
	var p = new(SetTransactionContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionContext) SetTransactionStatement() ISetTransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetTransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetTransactionStatementContext)
}

func (s *SetTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetTransaction(s)
	}
}

func (s *SetTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetTransaction(s)
	}
}

type SetCharsetContext struct {
	*SetStatementContext
}

func NewSetCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetCharsetContext {
	var p = new(SetCharsetContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetCharsetContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *SetCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SetCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetCharset(s)
	}
}

func (s *SetCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetCharset(s)
	}
}

type SetNamesContext struct {
	*SetStatementContext
}

func NewSetNamesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetNamesContext {
	var p = new(SetNamesContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetNamesContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetNamesContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *SetNamesContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SetNamesContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetNamesContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *SetNamesContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *SetNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetNames(s)
	}
}

func (s *SetNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetNames(s)
	}
}

type SetPasswordContext struct {
	*SetStatementContext
}

func NewSetPasswordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetPasswordContext {
	var p = new(SetPasswordContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordContext) SetPasswordStatement() ISetPasswordStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetPasswordStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetPasswordStatementContext)
}

func (s *SetPasswordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetPassword(s)
	}
}

func (s *SetPasswordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetPassword(s)
	}
}

type SetAutocommitContext struct {
	*SetStatementContext
}

func NewSetAutocommitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetAutocommitContext {
	var p = new(SetAutocommitContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetAutocommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutocommitContext) SetAutocommitStatement() ISetAutocommitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAutocommitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAutocommitStatementContext)
}

func (s *SetAutocommitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetAutocommit(s)
	}
}

func (s *SetAutocommitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetAutocommit(s)
	}
}

type SetNewValueInsideTriggerContext struct {
	*SetStatementContext
}

func NewSetNewValueInsideTriggerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetNewValueInsideTriggerContext {
	var p = new(SetNewValueInsideTriggerContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetNewValueInsideTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetNewValueInsideTriggerContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetNewValueInsideTriggerContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *SetNewValueInsideTriggerContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *SetNewValueInsideTriggerContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetNewValueInsideTriggerContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetNewValueInsideTriggerContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *SetNewValueInsideTriggerContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *SetNewValueInsideTriggerContext) AllVAR_ASSIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserVAR_ASSIGN)
}

func (s *SetNewValueInsideTriggerContext) VAR_ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, i)
}

func (s *SetNewValueInsideTriggerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetNewValueInsideTriggerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetNewValueInsideTriggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetNewValueInsideTrigger(s)
	}
}

func (s *SetNewValueInsideTriggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetNewValueInsideTrigger(s)
	}
}

type SetVariableContext struct {
	*SetStatementContext
}

func NewSetVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetVariableContext {
	var p = new(SetVariableContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetVariableContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetVariableContext) AllVariableClause() []IVariableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem())
	var tst = make([]IVariableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableClauseContext)
		}
	}

	return tst
}

func (s *SetVariableContext) VariableClause(i int) IVariableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableClauseContext)
}

func (s *SetVariableContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *SetVariableContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *SetVariableContext) AllVAR_ASSIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserVAR_ASSIGN)
}

func (s *SetVariableContext) VAR_ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, i)
}

func (s *SetVariableContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetVariableContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetVariableContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *SetVariableContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *SetVariableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetVariableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetVariable(s)
	}
}

func (s *SetVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetVariable(s)
	}
}

func (p *MySqlParser) SetStatement() (localctx ISetStatementContext) {
	localctx = NewSetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, MySqlParserRULE_setStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5242)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 751, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSetVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5190)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5191)
			p.VariableClause()
		}
		{
			p.SetState(5192)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5195)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 744, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5193)
				p.expression(0)
			}

		case 2:
			{
				p.SetState(5194)
				p.Match(MySqlParserON)
			}

		}
		p.SetState(5206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5197)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5198)
				p.VariableClause()
			}
			{
				p.SetState(5199)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(5202)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 745, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(5200)
					p.expression(0)
				}

			case 2:
				{
					p.SetState(5201)
					p.Match(MySqlParserON)
				}

			}

			p.SetState(5208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSetCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5209)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5210)
			p.CharSet()
		}
		p.SetState(5213)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(5211)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(5212)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		localctx = NewSetNamesContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5215)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5216)
			p.Match(MySqlParserNAMES)
		}
		p.SetState(5223)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(5217)
				p.CharsetName()
			}
			p.SetState(5220)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserCOLLATE {
				{
					p.SetState(5218)
					p.Match(MySqlParserCOLLATE)
				}
				{
					p.SetState(5219)
					p.CollationName()
				}

			}

		case MySqlParserDEFAULT:
			{
				p.SetState(5222)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewSetPasswordContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5225)
			p.SetPasswordStatement()
		}

	case 5:
		localctx = NewSetTransactionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5226)
			p.SetTransactionStatement()
		}

	case 6:
		localctx = NewSetAutocommitContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5227)
			p.SetAutocommitStatement()
		}

	case 7:
		localctx = NewSetNewValueInsideTriggerContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5228)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5229)
			p.FullId()
		}
		{
			p.SetState(5230)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5231)
			p.expression(0)
		}
		p.SetState(5239)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5232)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5233)
				p.FullId()
			}
			{
				p.SetState(5234)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5235)
				p.expression(0)
			}

			p.SetState(5241)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IShowStatementContext is an interface to support dynamic dispatch.
type IShowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowStatementContext differentiates from other interfaces.
	IsShowStatementContext()
}

type ShowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStatementContext() *ShowStatementContext {
	var p = new(ShowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showStatement
	return p
}

func (*ShowStatementContext) IsShowStatementContext() {}

func NewShowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStatementContext {
	var p = new(ShowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showStatement

	return p
}

func (s *ShowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStatementContext) CopyFrom(ctx *ShowStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ShowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ShowOpenTablesContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowOpenTablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowOpenTablesContext {
	var p = new(ShowOpenTablesContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowOpenTablesContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowOpenTablesContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowOpenTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowOpenTablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowOpenTablesContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *ShowOpenTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowOpenTablesContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowOpenTablesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowOpenTablesContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowOpenTablesContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowOpenTablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowOpenTables(s)
	}
}

func (s *ShowOpenTablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowOpenTables(s)
	}
}

type ShowGlobalInfoContext struct {
	*ShowStatementContext
}

func NewShowGlobalInfoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGlobalInfoContext {
	var p = new(ShowGlobalInfoContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowGlobalInfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGlobalInfoContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGlobalInfoContext) ShowGlobalInfoClause() IShowGlobalInfoClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowGlobalInfoClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowGlobalInfoClauseContext)
}

func (s *ShowGlobalInfoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowGlobalInfo(s)
	}
}

func (s *ShowGlobalInfoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowGlobalInfo(s)
	}
}

type ShowCreateFullIdObjectContext struct {
	*ShowStatementContext
	namedEntity antlr.Token
}

func NewShowCreateFullIdObjectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateFullIdObjectContext {
	var p = new(ShowCreateFullIdObjectContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateFullIdObjectContext) GetNamedEntity() antlr.Token { return s.namedEntity }

func (s *ShowCreateFullIdObjectContext) SetNamedEntity(v antlr.Token) { s.namedEntity = v }

func (s *ShowCreateFullIdObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateFullIdObjectContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateFullIdObjectContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateFullIdObjectContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *ShowCreateFullIdObjectContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *ShowCreateFullIdObjectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowCreateFullIdObjectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowCreateFullIdObjectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowCreateFullIdObjectContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *ShowCreateFullIdObjectContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *ShowCreateFullIdObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateFullIdObject(s)
	}
}

func (s *ShowCreateFullIdObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateFullIdObject(s)
	}
}

type ShowCreateUserContext struct {
	*ShowStatementContext
}

func NewShowCreateUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateUserContext {
	var p = new(ShowCreateUserContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateUserContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *ShowCreateUserContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowCreateUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateUser(s)
	}
}

func (s *ShowCreateUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateUser(s)
	}
}

type ShowErrorsContext struct {
	*ShowStatementContext
	errorFormat antlr.Token
	offset      IDecimalLiteralContext
	rowCount    IDecimalLiteralContext
}

func NewShowErrorsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowErrorsContext {
	var p = new(ShowErrorsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowErrorsContext) GetErrorFormat() antlr.Token { return s.errorFormat }

func (s *ShowErrorsContext) SetErrorFormat(v antlr.Token) { s.errorFormat = v }

func (s *ShowErrorsContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowErrorsContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowErrorsContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowErrorsContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowErrorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowErrorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowErrorsContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowErrorsContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowErrorsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowErrorsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowErrorsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowErrorsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *ShowErrorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowErrors(s)
	}
}

func (s *ShowErrorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowErrors(s)
	}
}

type ShowCountErrorsContext struct {
	*ShowStatementContext
	errorFormat antlr.Token
}

func NewShowCountErrorsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCountErrorsContext {
	var p = new(ShowCountErrorsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCountErrorsContext) GetErrorFormat() antlr.Token { return s.errorFormat }

func (s *ShowCountErrorsContext) SetErrorFormat(v antlr.Token) { s.errorFormat = v }

func (s *ShowCountErrorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCountErrorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCountErrorsContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *ShowCountErrorsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ShowCountErrorsContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *ShowCountErrorsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ShowCountErrorsContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowCountErrorsContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowCountErrorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCountErrors(s)
	}
}

func (s *ShowCountErrorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCountErrors(s)
	}
}

type ShowObjectFilterContext struct {
	*ShowStatementContext
}

func NewShowObjectFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowObjectFilterContext {
	var p = new(ShowObjectFilterContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowObjectFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowObjectFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowObjectFilterContext) ShowCommonEntity() IShowCommonEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCommonEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCommonEntityContext)
}

func (s *ShowObjectFilterContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowObjectFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowObjectFilter(s)
	}
}

func (s *ShowObjectFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowObjectFilter(s)
	}
}

type ShowCreateDbContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowCreateDbContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateDbContext {
	var p = new(ShowCreateDbContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateDbContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowCreateDbContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowCreateDbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDbContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateDbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateDbContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowCreateDbContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *ShowCreateDbContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *ShowCreateDbContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *ShowCreateDbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateDb(s)
	}
}

func (s *ShowCreateDbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateDb(s)
	}
}

type ShowEngineContext struct {
	*ShowStatementContext
	engineOption antlr.Token
}

func NewShowEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowEngineContext {
	var p = new(ShowEngineContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowEngineContext) GetEngineOption() antlr.Token { return s.engineOption }

func (s *ShowEngineContext) SetEngineOption(v antlr.Token) { s.engineOption = v }

func (s *ShowEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEngineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *ShowEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *ShowEngineContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowEngineContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *ShowEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowEngine(s)
	}
}

func (s *ShowEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowEngine(s)
	}
}

type ShowSchemaFilterContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowSchemaFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSchemaFilterContext {
	var p = new(ShowSchemaFilterContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowSchemaFilterContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowSchemaFilterContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowSchemaFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSchemaFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowSchemaFilterContext) ShowSchemaEntity() IShowSchemaEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowSchemaEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowSchemaEntityContext)
}

func (s *ShowSchemaFilterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowSchemaFilterContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowSchemaFilterContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowSchemaFilterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowSchemaFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowSchemaFilter(s)
	}
}

func (s *ShowSchemaFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowSchemaFilter(s)
	}
}

type ShowIndexesContext struct {
	*ShowStatementContext
	indexFormat  antlr.Token
	tableFormat  antlr.Token
	schemaFormat antlr.Token
}

func NewShowIndexesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowIndexesContext {
	var p = new(ShowIndexesContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *ShowIndexesContext) GetTableFormat() antlr.Token { return s.tableFormat }

func (s *ShowIndexesContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *ShowIndexesContext) SetTableFormat(v antlr.Token) { s.tableFormat = v }

func (s *ShowIndexesContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowIndexesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *ShowIndexesContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEXES, 0)
}

func (s *ShowIndexesContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *ShowIndexesContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowIndexesContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowIndexesContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowIndexesContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowIndexesContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowIndexesContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *ShowIndexesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShowIndexesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowIndexes(s)
	}
}

func (s *ShowIndexesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowIndexes(s)
	}
}

type ShowLogEventsContext struct {
	*ShowStatementContext
	logFormat    antlr.Token
	filename     antlr.Token
	fromPosition IDecimalLiteralContext
	offset       IDecimalLiteralContext
	rowCount     IDecimalLiteralContext
}

func NewShowLogEventsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowLogEventsContext {
	var p = new(ShowLogEventsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowLogEventsContext) GetLogFormat() antlr.Token { return s.logFormat }

func (s *ShowLogEventsContext) GetFilename() antlr.Token { return s.filename }

func (s *ShowLogEventsContext) SetLogFormat(v antlr.Token) { s.logFormat = v }

func (s *ShowLogEventsContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *ShowLogEventsContext) GetFromPosition() IDecimalLiteralContext { return s.fromPosition }

func (s *ShowLogEventsContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowLogEventsContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowLogEventsContext) SetFromPosition(v IDecimalLiteralContext) { s.fromPosition = v }

func (s *ShowLogEventsContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowLogEventsContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowLogEventsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowLogEventsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowLogEventsContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowLogEventsContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *ShowLogEventsContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *ShowLogEventsContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowLogEventsContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowLogEventsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowLogEventsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowLogEventsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowLogEventsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowLogEventsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *ShowLogEventsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowLogEvents(s)
	}
}

func (s *ShowLogEventsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowLogEvents(s)
	}
}

type ShowMasterLogsContext struct {
	*ShowStatementContext
	logFormat antlr.Token
}

func NewShowMasterLogsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowMasterLogsContext {
	var p = new(ShowMasterLogsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowMasterLogsContext) GetLogFormat() antlr.Token { return s.logFormat }

func (s *ShowMasterLogsContext) SetLogFormat(v antlr.Token) { s.logFormat = v }

func (s *ShowMasterLogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowMasterLogsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowMasterLogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *ShowMasterLogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *ShowMasterLogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowMasterLogsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowMasterLogs(s)
	}
}

func (s *ShowMasterLogsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowMasterLogs(s)
	}
}

type ShowGrantsContext struct {
	*ShowStatementContext
}

func NewShowGrantsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGrantsContext {
	var p = new(ShowGrantsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGrantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *ShowGrantsContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowGrantsContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowGrantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowGrants(s)
	}
}

func (s *ShowGrantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowGrants(s)
	}
}

type ShowSlaveStatusContext struct {
	*ShowStatementContext
}

func NewShowSlaveStatusContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSlaveStatusContext {
	var p = new(ShowSlaveStatusContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowSlaveStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSlaveStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowSlaveStatusContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowSlaveStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowSlaveStatusContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowSlaveStatusContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *ShowSlaveStatusContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowSlaveStatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowSlaveStatus(s)
	}
}

func (s *ShowSlaveStatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowSlaveStatus(s)
	}
}

type ShowRoutineContext struct {
	*ShowStatementContext
	routine antlr.Token
}

func NewShowRoutineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowRoutineContext {
	var p = new(ShowRoutineContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowRoutineContext) GetRoutine() antlr.Token { return s.routine }

func (s *ShowRoutineContext) SetRoutine(v antlr.Token) { s.routine = v }

func (s *ShowRoutineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRoutineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowRoutineContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *ShowRoutineContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *ShowRoutineContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowRoutineContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowRoutineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowRoutine(s)
	}
}

func (s *ShowRoutineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowRoutine(s)
	}
}

type ShowProfileContext struct {
	*ShowStatementContext
	queryCount IDecimalLiteralContext
	offset     IDecimalLiteralContext
	rowCount   IDecimalLiteralContext
}

func NewShowProfileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowProfileContext {
	var p = new(ShowProfileContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowProfileContext) GetQueryCount() IDecimalLiteralContext { return s.queryCount }

func (s *ShowProfileContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowProfileContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowProfileContext) SetQueryCount(v IDecimalLiteralContext) { s.queryCount = v }

func (s *ShowProfileContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowProfileContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowProfileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowProfileContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *ShowProfileContext) AllShowProfileType() []IShowProfileTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem())
	var tst = make([]IShowProfileTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShowProfileTypeContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) ShowProfileType(i int) IShowProfileTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShowProfileTypeContext)
}

func (s *ShowProfileContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowProfileContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ShowProfileContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ShowProfileContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowProfileContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *ShowProfileContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowProfileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowProfile(s)
	}
}

func (s *ShowProfileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowProfile(s)
	}
}

type ShowColumnsContext struct {
	*ShowStatementContext
	columnsFormat antlr.Token
	tableFormat   antlr.Token
	schemaFormat  antlr.Token
}

func NewShowColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowColumnsContext {
	var p = new(ShowColumnsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowColumnsContext) GetColumnsFormat() antlr.Token { return s.columnsFormat }

func (s *ShowColumnsContext) GetTableFormat() antlr.Token { return s.tableFormat }

func (s *ShowColumnsContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowColumnsContext) SetColumnsFormat(v antlr.Token) { s.columnsFormat = v }

func (s *ShowColumnsContext) SetTableFormat(v antlr.Token) { s.tableFormat = v }

func (s *ShowColumnsContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowColumnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowColumnsContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowColumnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *ShowColumnsContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *ShowColumnsContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowColumnsContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowColumnsContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowColumnsContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowColumnsContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowColumnsContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowColumnsContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowColumns(s)
	}
}

func (s *ShowColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowColumns(s)
	}
}

func (p *MySqlParser) ShowStatement() (localctx IShowStatementContext) {
	localctx = NewShowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, MySqlParserRULE_showStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5397)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 774, p.GetParserRuleContext()) {
	case 1:
		localctx = NewShowMasterLogsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5244)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5245)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowMasterLogsContext).logFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowMasterLogsContext).logFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5246)
			p.Match(MySqlParserLOGS)
		}

	case 2:
		localctx = NewShowLogEventsContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5247)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5248)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowLogEventsContext).logFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINLOG || _la == MySqlParserRELAYLOG) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowLogEventsContext).logFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5249)
			p.Match(MySqlParserEVENTS)
		}
		p.SetState(5252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIN {
			{
				p.SetState(5250)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(5251)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*ShowLogEventsContext).filename = _m
			}

		}
		p.SetState(5256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM {
			{
				p.SetState(5254)
				p.Match(MySqlParserFROM)
			}
			{
				p.SetState(5255)

				var _x = p.DecimalLiteral()

				localctx.(*ShowLogEventsContext).fromPosition = _x
			}

		}
		p.SetState(5265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(5258)
				p.Match(MySqlParserLIMIT)
			}
			p.SetState(5262)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 754, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5259)

					var _x = p.DecimalLiteral()

					localctx.(*ShowLogEventsContext).offset = _x
				}
				{
					p.SetState(5260)
					p.Match(MySqlParserCOMMA)
				}

			}
			{
				p.SetState(5264)

				var _x = p.DecimalLiteral()

				localctx.(*ShowLogEventsContext).rowCount = _x
			}

		}

	case 3:
		localctx = NewShowObjectFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5267)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5268)
			p.ShowCommonEntity()
		}
		p.SetState(5270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5269)
				p.ShowFilter()
			}

		}

	case 4:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5272)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(5274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(5273)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(5276)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowColumnsContext).columnsFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowColumnsContext).columnsFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5277)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowColumnsContext).tableFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowColumnsContext).tableFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5278)
			p.TableName()
		}
		p.SetState(5281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5279)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowColumnsContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowColumnsContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5280)
				p.Uid()
			}

		}
		p.SetState(5284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5283)
				p.ShowFilter()
			}

		}

	case 5:
		localctx = NewShowCreateDbContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5286)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5287)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5288)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCreateDbContext).schemaFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCreateDbContext).schemaFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5290)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(5289)
				p.IfNotExists()
			}

		}
		{
			p.SetState(5292)
			p.Uid()
		}

	case 6:
		localctx = NewShowCreateFullIdObjectContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5293)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5294)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5295)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCreateFullIdObjectContext).namedEntity = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserTRIGGER || _la == MySqlParserEVENT || _la == MySqlParserFUNCTION || _la == MySqlParserVIEW) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCreateFullIdObjectContext).namedEntity = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5296)
			p.FullId()
		}

	case 7:
		localctx = NewShowCreateUserContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5297)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5298)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5299)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(5300)
			p.UserName()
		}

	case 8:
		localctx = NewShowEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5301)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5302)
			p.Match(MySqlParserENGINE)
		}
		{
			p.SetState(5303)
			p.EngineName()
		}
		{
			p.SetState(5304)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowEngineContext).engineOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMUTEX || _la == MySqlParserSTATUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowEngineContext).engineOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 9:
		localctx = NewShowGlobalInfoContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5306)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5307)
			p.ShowGlobalInfoClause()
		}

	case 10:
		localctx = NewShowErrorsContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5308)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5309)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowErrorsContext).errorFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowErrorsContext).errorFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(5310)
				p.Match(MySqlParserLIMIT)
			}
			p.SetState(5314)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 761, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5311)

					var _x = p.DecimalLiteral()

					localctx.(*ShowErrorsContext).offset = _x
				}
				{
					p.SetState(5312)
					p.Match(MySqlParserCOMMA)
				}

			}
			{
				p.SetState(5316)

				var _x = p.DecimalLiteral()

				localctx.(*ShowErrorsContext).rowCount = _x
			}

		}

	case 11:
		localctx = NewShowCountErrorsContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5319)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5320)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(5321)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5322)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(5323)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(5324)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCountErrorsContext).errorFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCountErrorsContext).errorFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 12:
		localctx = NewShowSchemaFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5325)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5326)
			p.ShowSchemaEntity()
		}
		p.SetState(5329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5327)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowSchemaFilterContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowSchemaFilterContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5328)
				p.Uid()
			}

		}
		p.SetState(5332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5331)
				p.ShowFilter()
			}

		}

	case 13:
		localctx = NewShowRoutineContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5334)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5335)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowRoutineContext).routine = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserFUNCTION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowRoutineContext).routine = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5336)
			p.Match(MySqlParserCODE)
		}
		{
			p.SetState(5337)
			p.FullId()
		}

	case 14:
		localctx = NewShowGrantsContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5338)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5339)
			p.Match(MySqlParserGRANTS)
		}
		p.SetState(5342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5340)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5341)
				p.UserName()
			}

		}

	case 15:
		localctx = NewShowIndexesContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5344)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5345)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowIndexesContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEYS || _la == MySqlParserINDEXES) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowIndexesContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5346)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowIndexesContext).tableFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowIndexesContext).tableFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5347)
			p.TableName()
		}
		p.SetState(5350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5348)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowIndexesContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowIndexesContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5349)
				p.Uid()
			}

		}
		p.SetState(5354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWHERE {
			{
				p.SetState(5352)
				p.Match(MySqlParserWHERE)
			}
			{
				p.SetState(5353)
				p.expression(0)
			}

		}

	case 16:
		localctx = NewShowOpenTablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5356)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5357)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(5358)
			p.Match(MySqlParserTABLES)
		}
		p.SetState(5361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5359)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowOpenTablesContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowOpenTablesContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5360)
				p.Uid()
			}

		}
		p.SetState(5364)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5363)
				p.ShowFilter()
			}

		}

	case 17:
		localctx = NewShowProfileContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5366)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5367)
			p.Match(MySqlParserPROFILE)
		}
		{
			p.SetState(5368)
			p.ShowProfileType()
		}
		p.SetState(5373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5369)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5370)
				p.ShowProfileType()
			}

			p.SetState(5375)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5376)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5377)
				p.Match(MySqlParserQUERY)
			}
			{
				p.SetState(5378)

				var _x = p.DecimalLiteral()

				localctx.(*ShowProfileContext).queryCount = _x
			}

		}

		{
			p.SetState(5381)
			p.Match(MySqlParserLIMIT)
		}
		p.SetState(5385)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 772, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5382)

				var _x = p.DecimalLiteral()

				localctx.(*ShowProfileContext).offset = _x
			}
			{
				p.SetState(5383)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(5387)

			var _x = p.DecimalLiteral()

			localctx.(*ShowProfileContext).rowCount = _x
		}

	case 18:
		localctx = NewShowSlaveStatusContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5389)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5390)
			p.Match(MySqlParserSLAVE)
		}
		{
			p.SetState(5391)
			p.Match(MySqlParserSTATUS)
		}
		p.SetState(5395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5392)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5393)
				p.Match(MySqlParserCHANNEL)
			}
			{
				p.SetState(5394)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	}

	return localctx
}

// IVariableClauseContext is an interface to support dynamic dispatch.
type IVariableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableClauseContext differentiates from other interfaces.
	IsVariableClauseContext()
}

type VariableClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableClauseContext() *VariableClauseContext {
	var p = new(VariableClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_variableClause
	return p
}

func (*VariableClauseContext) IsVariableClauseContext() {}

func NewVariableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableClauseContext {
	var p = new(VariableClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_variableClause

	return p
}

func (s *VariableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableClauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *VariableClauseContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *VariableClauseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *VariableClauseContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *VariableClauseContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *VariableClauseContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *VariableClauseContext) AllAT_SIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAT_SIGN)
}

func (s *VariableClauseContext) AT_SIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAT_SIGN, i)
}

func (s *VariableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterVariableClause(s)
	}
}

func (s *VariableClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitVariableClause(s)
	}
}

func (p *MySqlParser) VariableClause() (localctx IVariableClauseContext) {
	localctx = NewVariableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, MySqlParserRULE_variableClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5409)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5399)
			p.Match(MySqlParserLOCAL_ID)
		}

	case MySqlParserGLOBAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5400)
			p.Match(MySqlParserGLOBAL_ID)
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5406)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 776, p.GetParserRuleContext()) == 1 {
			p.SetState(5403)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAT_SIGN {
				{
					p.SetState(5401)
					p.Match(MySqlParserAT_SIGN)
				}
				{
					p.SetState(5402)
					p.Match(MySqlParserAT_SIGN)
				}

			}
			{
				p.SetState(5405)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserGLOBAL || _la == MySqlParserLOCAL || _la == MySqlParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5408)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowCommonEntityContext is an interface to support dynamic dispatch.
type IShowCommonEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCommonEntityContext differentiates from other interfaces.
	IsShowCommonEntityContext()
}

type ShowCommonEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCommonEntityContext() *ShowCommonEntityContext {
	var p = new(ShowCommonEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showCommonEntity
	return p
}

func (*ShowCommonEntityContext) IsShowCommonEntityContext() {}

func NewShowCommonEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCommonEntityContext {
	var p = new(ShowCommonEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showCommonEntity

	return p
}

func (s *ShowCommonEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCommonEntityContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *ShowCommonEntityContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ShowCommonEntityContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *ShowCommonEntityContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *ShowCommonEntityContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMAS, 0)
}

func (s *ShowCommonEntityContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowCommonEntityContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowCommonEntityContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowCommonEntityContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *ShowCommonEntityContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *ShowCommonEntityContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *ShowCommonEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCommonEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCommonEntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCommonEntity(s)
	}
}

func (s *ShowCommonEntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCommonEntity(s)
	}
}

func (p *MySqlParser) ShowCommonEntity() (localctx IShowCommonEntityContext) {
	localctx = NewShowCommonEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, MySqlParserRULE_showCommonEntity)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5424)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCHARACTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5411)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(5412)
			p.Match(MySqlParserSET)
		}

	case MySqlParserCOLLATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5413)
			p.Match(MySqlParserCOLLATION)
		}

	case MySqlParserDATABASES:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5414)
			p.Match(MySqlParserDATABASES)
		}

	case MySqlParserSCHEMAS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5415)
			p.Match(MySqlParserSCHEMAS)
		}

	case MySqlParserFUNCTION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5416)
			p.Match(MySqlParserFUNCTION)
		}
		{
			p.SetState(5417)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserPROCEDURE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5418)
			p.Match(MySqlParserPROCEDURE)
		}
		{
			p.SetState(5419)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserGLOBAL, MySqlParserSESSION, MySqlParserSTATUS, MySqlParserVARIABLES:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(5421)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
			{
				p.SetState(5420)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5423)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSTATUS || _la == MySqlParserVARIABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowFilterContext is an interface to support dynamic dispatch.
type IShowFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFilterContext differentiates from other interfaces.
	IsShowFilterContext()
}

type ShowFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFilterContext() *ShowFilterContext {
	var p = new(ShowFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showFilter
	return p
}

func (*ShowFilterContext) IsShowFilterContext() {}

func NewShowFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFilterContext {
	var p = new(ShowFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showFilter

	return p
}

func (s *ShowFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFilterContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *ShowFilterContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowFilterContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *ShowFilterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShowFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowFilter(s)
	}
}

func (s *ShowFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowFilter(s)
	}
}

func (p *MySqlParser) ShowFilter() (localctx IShowFilterContext) {
	localctx = NewShowFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, MySqlParserRULE_showFilter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5430)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLIKE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5426)
			p.Match(MySqlParserLIKE)
		}
		{
			p.SetState(5427)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserWHERE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5428)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(5429)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowGlobalInfoClauseContext is an interface to support dynamic dispatch.
type IShowGlobalInfoClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowGlobalInfoClauseContext differentiates from other interfaces.
	IsShowGlobalInfoClauseContext()
}

type ShowGlobalInfoClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowGlobalInfoClauseContext() *ShowGlobalInfoClauseContext {
	var p = new(ShowGlobalInfoClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showGlobalInfoClause
	return p
}

func (*ShowGlobalInfoClauseContext) IsShowGlobalInfoClauseContext() {}

func NewShowGlobalInfoClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowGlobalInfoClauseContext {
	var p = new(ShowGlobalInfoClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showGlobalInfoClause

	return p
}

func (s *ShowGlobalInfoClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowGlobalInfoClauseContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *ShowGlobalInfoClauseContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *ShowGlobalInfoClauseContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowGlobalInfoClauseContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowGlobalInfoClauseContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *ShowGlobalInfoClauseContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShowGlobalInfoClauseContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *ShowGlobalInfoClauseContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowGlobalInfoClauseContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *ShowGlobalInfoClauseContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowGlobalInfoClauseContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *ShowGlobalInfoClauseContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *ShowGlobalInfoClauseContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *ShowGlobalInfoClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGlobalInfoClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowGlobalInfoClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowGlobalInfoClause(s)
	}
}

func (s *ShowGlobalInfoClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowGlobalInfoClause(s)
	}
}

func (p *MySqlParser) ShowGlobalInfoClause() (localctx IShowGlobalInfoClauseContext) {
	localctx = NewShowGlobalInfoClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, MySqlParserRULE_showGlobalInfoClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5449)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserENGINES, MySqlParserSTORAGE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(5432)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(5435)
			p.Match(MySqlParserENGINES)
		}

	case MySqlParserMASTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5436)
			p.Match(MySqlParserMASTER)
		}
		{
			p.SetState(5437)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserPLUGINS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5438)
			p.Match(MySqlParserPLUGINS)
		}

	case MySqlParserPRIVILEGES:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5439)
			p.Match(MySqlParserPRIVILEGES)
		}

	case MySqlParserFULL, MySqlParserPROCESSLIST:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(5441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(5440)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(5443)
			p.Match(MySqlParserPROCESSLIST)
		}

	case MySqlParserPROFILES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5444)
			p.Match(MySqlParserPROFILES)
		}

	case MySqlParserSLAVE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5445)
			p.Match(MySqlParserSLAVE)
		}
		{
			p.SetState(5446)
			p.Match(MySqlParserHOSTS)
		}

	case MySqlParserAUTHORS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5447)
			p.Match(MySqlParserAUTHORS)
		}

	case MySqlParserCONTRIBUTORS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5448)
			p.Match(MySqlParserCONTRIBUTORS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowSchemaEntityContext is an interface to support dynamic dispatch.
type IShowSchemaEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowSchemaEntityContext differentiates from other interfaces.
	IsShowSchemaEntityContext()
}

type ShowSchemaEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowSchemaEntityContext() *ShowSchemaEntityContext {
	var p = new(ShowSchemaEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showSchemaEntity
	return p
}

func (*ShowSchemaEntityContext) IsShowSchemaEntityContext() {}

func NewShowSchemaEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowSchemaEntityContext {
	var p = new(ShowSchemaEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showSchemaEntity

	return p
}

func (s *ShowSchemaEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowSchemaEntityContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowSchemaEntityContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowSchemaEntityContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowSchemaEntityContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowSchemaEntityContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowSchemaEntityContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGERS, 0)
}

func (s *ShowSchemaEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSchemaEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowSchemaEntityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowSchemaEntity(s)
	}
}

func (s *ShowSchemaEntityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowSchemaEntity(s)
	}
}

func (p *MySqlParser) ShowSchemaEntity() (localctx IShowSchemaEntityContext) {
	localctx = NewShowSchemaEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, MySqlParserRULE_showSchemaEntity)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5459)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEVENTS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5451)
			p.Match(MySqlParserEVENTS)
		}

	case MySqlParserTABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5452)
			p.Match(MySqlParserTABLE)
		}
		{
			p.SetState(5453)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserFULL, MySqlParserTABLES:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(5454)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(5457)
			p.Match(MySqlParserTABLES)
		}

	case MySqlParserTRIGGERS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5458)
			p.Match(MySqlParserTRIGGERS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowProfileTypeContext is an interface to support dynamic dispatch.
type IShowProfileTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProfileTypeContext differentiates from other interfaces.
	IsShowProfileTypeContext()
}

type ShowProfileTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProfileTypeContext() *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showProfileType
	return p
}

func (*ShowProfileTypeContext) IsShowProfileTypeContext() {}

func NewShowProfileTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showProfileType

	return p
}

func (s *ShowProfileTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProfileTypeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ShowProfileTypeContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOCK, 0)
}

func (s *ShowProfileTypeContext) IO() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO, 0)
}

func (s *ShowProfileTypeContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTEXT, 0)
}

func (s *ShowProfileTypeContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWITCHES, 0)
}

func (s *ShowProfileTypeContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySqlParserCPU, 0)
}

func (s *ShowProfileTypeContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySqlParserIPC, 0)
}

func (s *ShowProfileTypeContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *ShowProfileTypeContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE, 0)
}

func (s *ShowProfileTypeContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAULTS, 0)
}

func (s *ShowProfileTypeContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOURCE, 0)
}

func (s *ShowProfileTypeContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWAPS, 0)
}

func (s *ShowProfileTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProfileTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowProfileType(s)
	}
}

func (s *ShowProfileTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowProfileType(s)
	}
}

func (p *MySqlParser) ShowProfileType() (localctx IShowProfileTypeContext) {
	localctx = NewShowProfileTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, MySqlParserRULE_showProfileType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5473)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5461)
			p.Match(MySqlParserALL)
		}

	case MySqlParserBLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5462)
			p.Match(MySqlParserBLOCK)
		}
		{
			p.SetState(5463)
			p.Match(MySqlParserIO)
		}

	case MySqlParserCONTEXT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5464)
			p.Match(MySqlParserCONTEXT)
		}
		{
			p.SetState(5465)
			p.Match(MySqlParserSWITCHES)
		}

	case MySqlParserCPU:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5466)
			p.Match(MySqlParserCPU)
		}

	case MySqlParserIPC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5467)
			p.Match(MySqlParserIPC)
		}

	case MySqlParserMEMORY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5468)
			p.Match(MySqlParserMEMORY)
		}

	case MySqlParserPAGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5469)
			p.Match(MySqlParserPAGE)
		}
		{
			p.SetState(5470)
			p.Match(MySqlParserFAULTS)
		}

	case MySqlParserSOURCE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5471)
			p.Match(MySqlParserSOURCE)
		}

	case MySqlParserSWAPS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5472)
			p.Match(MySqlParserSWAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBinlogStatementContext is an interface to support dynamic dispatch.
type IBinlogStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinlogStatementContext differentiates from other interfaces.
	IsBinlogStatementContext()
}

type BinlogStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinlogStatementContext() *BinlogStatementContext {
	var p = new(BinlogStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_binlogStatement
	return p
}

func (*BinlogStatementContext) IsBinlogStatementContext() {}

func NewBinlogStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinlogStatementContext {
	var p = new(BinlogStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_binlogStatement

	return p
}

func (s *BinlogStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BinlogStatementContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *BinlogStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *BinlogStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinlogStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinlogStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinlogStatement(s)
	}
}

func (s *BinlogStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinlogStatement(s)
	}
}

func (p *MySqlParser) BinlogStatement() (localctx IBinlogStatementContext) {
	localctx = NewBinlogStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, MySqlParserRULE_binlogStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5475)
		p.Match(MySqlParserBINLOG)
	}
	{
		p.SetState(5476)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// ICacheIndexStatementContext is an interface to support dynamic dispatch.
type ICacheIndexStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IUidContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IUidContext)

	// IsCacheIndexStatementContext differentiates from other interfaces.
	IsCacheIndexStatementContext()
}

type CacheIndexStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IUidContext
}

func NewEmptyCacheIndexStatementContext() *CacheIndexStatementContext {
	var p = new(CacheIndexStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cacheIndexStatement
	return p
}

func (*CacheIndexStatementContext) IsCacheIndexStatementContext() {}

func NewCacheIndexStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CacheIndexStatementContext {
	var p = new(CacheIndexStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cacheIndexStatement

	return p
}

func (s *CacheIndexStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CacheIndexStatementContext) GetSchema() IUidContext { return s.schema }

func (s *CacheIndexStatementContext) SetSchema(v IUidContext) { s.schema = v }

func (s *CacheIndexStatementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *CacheIndexStatementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *CacheIndexStatementContext) AllTableIndexes() []ITableIndexesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableIndexesContext)(nil)).Elem())
	var tst = make([]ITableIndexesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableIndexesContext)
		}
	}

	return tst
}

func (s *CacheIndexStatementContext) TableIndexes(i int) ITableIndexesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableIndexesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableIndexesContext)
}

func (s *CacheIndexStatementContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *CacheIndexStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CacheIndexStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CacheIndexStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CacheIndexStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *CacheIndexStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CacheIndexStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CacheIndexStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *CacheIndexStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *CacheIndexStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CacheIndexStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CacheIndexStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCacheIndexStatement(s)
	}
}

func (s *CacheIndexStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCacheIndexStatement(s)
	}
}

func (p *MySqlParser) CacheIndexStatement() (localctx ICacheIndexStatementContext) {
	localctx = NewCacheIndexStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, MySqlParserRULE_cacheIndexStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5478)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(5479)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(5480)
		p.TableIndexes()
	}
	p.SetState(5485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5481)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5482)
			p.TableIndexes()
		}

		p.SetState(5487)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(5488)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(5489)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5492)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(5490)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(5491)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5494)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(5497)
		p.Match(MySqlParserIN)
	}
	{
		p.SetState(5498)

		var _x = p.Uid()

		localctx.(*CacheIndexStatementContext).schema = _x
	}

	return localctx
}

// IFlushStatementContext is an interface to support dynamic dispatch.
type IFlushStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFlushFormat returns the flushFormat token.
	GetFlushFormat() antlr.Token

	// SetFlushFormat sets the flushFormat token.
	SetFlushFormat(antlr.Token)

	// IsFlushStatementContext differentiates from other interfaces.
	IsFlushStatementContext()
}

type FlushStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	flushFormat antlr.Token
}

func NewEmptyFlushStatementContext() *FlushStatementContext {
	var p = new(FlushStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushStatement
	return p
}

func (*FlushStatementContext) IsFlushStatementContext() {}

func NewFlushStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushStatementContext {
	var p = new(FlushStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushStatement

	return p
}

func (s *FlushStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushStatementContext) GetFlushFormat() antlr.Token { return s.flushFormat }

func (s *FlushStatementContext) SetFlushFormat(v antlr.Token) { s.flushFormat = v }

func (s *FlushStatementContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH, 0)
}

func (s *FlushStatementContext) AllFlushOption() []IFlushOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem())
	var tst = make([]IFlushOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFlushOptionContext)
		}
	}

	return tst
}

func (s *FlushStatementContext) FlushOption(i int) IFlushOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFlushOptionContext)
}

func (s *FlushStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *FlushStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *FlushStatementContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *FlushStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *FlushStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFlushStatement(s)
	}
}

func (s *FlushStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFlushStatement(s)
	}
}

func (p *MySqlParser) FlushStatement() (localctx IFlushStatementContext) {
	localctx = NewFlushStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, MySqlParserRULE_flushStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5500)
		p.Match(MySqlParserFLUSH)
	}
	p.SetState(5502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(5501)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FlushStatementContext).flushFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FlushStatementContext).flushFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5504)
		p.FlushOption()
	}
	p.SetState(5509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5505)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5506)
			p.FlushOption()
		}

		p.SetState(5511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IKillStatementContext is an interface to support dynamic dispatch.
type IKillStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConnectionFormat returns the connectionFormat token.
	GetConnectionFormat() antlr.Token

	// SetConnectionFormat sets the connectionFormat token.
	SetConnectionFormat(antlr.Token)

	// IsKillStatementContext differentiates from other interfaces.
	IsKillStatementContext()
}

type KillStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	connectionFormat antlr.Token
}

func NewEmptyKillStatementContext() *KillStatementContext {
	var p = new(KillStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_killStatement
	return p
}

func (*KillStatementContext) IsKillStatementContext() {}

func NewKillStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KillStatementContext {
	var p = new(KillStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_killStatement

	return p
}

func (s *KillStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *KillStatementContext) GetConnectionFormat() antlr.Token { return s.connectionFormat }

func (s *KillStatementContext) SetConnectionFormat(v antlr.Token) { s.connectionFormat = v }

func (s *KillStatementContext) KILL() antlr.TerminalNode {
	return s.GetToken(MySqlParserKILL, 0)
}

func (s *KillStatementContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *KillStatementContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *KillStatementContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *KillStatementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *KillStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KillStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterKillStatement(s)
	}
}

func (s *KillStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitKillStatement(s)
	}
}

func (p *MySqlParser) KillStatement() (localctx IKillStatementContext) {
	localctx = NewKillStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, MySqlParserRULE_killStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5512)
		p.Match(MySqlParserKILL)
	}
	p.SetState(5514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONNECTION || _la == MySqlParserQUERY {
		{
			p.SetState(5513)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*KillStatementContext).connectionFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCONNECTION || _la == MySqlParserQUERY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*KillStatementContext).connectionFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(5517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-1101)&-(0x1f+1)) == 0 && ((1<<uint((_la-1101)))&((1<<(MySqlParserZERO_DECIMAL-1101))|(1<<(MySqlParserONE_DECIMAL-1101))|(1<<(MySqlParserTWO_DECIMAL-1101))|(1<<(MySqlParserDECIMAL_LITERAL-1101))|(1<<(MySqlParserREAL_LITERAL-1101)))) != 0) {
		{
			p.SetState(5516)
			p.DecimalLiteral()
		}

		p.SetState(5519)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoadIndexIntoCacheContext is an interface to support dynamic dispatch.
type ILoadIndexIntoCacheContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadIndexIntoCacheContext differentiates from other interfaces.
	IsLoadIndexIntoCacheContext()
}

type LoadIndexIntoCacheContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadIndexIntoCacheContext() *LoadIndexIntoCacheContext {
	var p = new(LoadIndexIntoCacheContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadIndexIntoCache
	return p
}

func (*LoadIndexIntoCacheContext) IsLoadIndexIntoCacheContext() {}

func NewLoadIndexIntoCacheContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadIndexIntoCacheContext {
	var p = new(LoadIndexIntoCacheContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadIndexIntoCache

	return p
}

func (s *LoadIndexIntoCacheContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadIndexIntoCacheContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadIndexIntoCacheContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *LoadIndexIntoCacheContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadIndexIntoCacheContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *LoadIndexIntoCacheContext) AllLoadedTableIndexes() []ILoadedTableIndexesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILoadedTableIndexesContext)(nil)).Elem())
	var tst = make([]ILoadedTableIndexesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILoadedTableIndexesContext)
		}
	}

	return tst
}

func (s *LoadIndexIntoCacheContext) LoadedTableIndexes(i int) ILoadedTableIndexesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadedTableIndexesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILoadedTableIndexesContext)
}

func (s *LoadIndexIntoCacheContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadIndexIntoCacheContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadIndexIntoCacheContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadIndexIntoCacheContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadIndexIntoCacheContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoadIndexIntoCache(s)
	}
}

func (s *LoadIndexIntoCacheContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoadIndexIntoCache(s)
	}
}

func (p *MySqlParser) LoadIndexIntoCache() (localctx ILoadIndexIntoCacheContext) {
	localctx = NewLoadIndexIntoCacheContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, MySqlParserRULE_loadIndexIntoCache)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5521)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(5522)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(5523)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(5524)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(5525)
		p.LoadedTableIndexes()
	}
	p.SetState(5530)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5526)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5527)
			p.LoadedTableIndexes()
		}

		p.SetState(5532)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IResetStatementContext is an interface to support dynamic dispatch.
type IResetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetStatementContext differentiates from other interfaces.
	IsResetStatementContext()
}

type ResetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetStatementContext() *ResetStatementContext {
	var p = new(ResetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetStatement
	return p
}

func (*ResetStatementContext) IsResetStatementContext() {}

func NewResetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetStatementContext {
	var p = new(ResetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetStatement

	return p
}

func (s *ResetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetStatementContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetStatementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *ResetStatementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *ResetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterResetStatement(s)
	}
}

func (s *ResetStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitResetStatement(s)
	}
}

func (p *MySqlParser) ResetStatement() (localctx IResetStatementContext) {
	localctx = NewResetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, MySqlParserRULE_resetStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5533)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(5534)
		p.Match(MySqlParserQUERY)
	}
	{
		p.SetState(5535)
		p.Match(MySqlParserCACHE)
	}

	return localctx
}

// IShutdownStatementContext is an interface to support dynamic dispatch.
type IShutdownStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShutdownStatementContext differentiates from other interfaces.
	IsShutdownStatementContext()
}

type ShutdownStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShutdownStatementContext() *ShutdownStatementContext {
	var p = new(ShutdownStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_shutdownStatement
	return p
}

func (*ShutdownStatementContext) IsShutdownStatementContext() {}

func NewShutdownStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShutdownStatementContext {
	var p = new(ShutdownStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_shutdownStatement

	return p
}

func (s *ShutdownStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ShutdownStatementContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *ShutdownStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShutdownStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShutdownStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShutdownStatement(s)
	}
}

func (s *ShutdownStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShutdownStatement(s)
	}
}

func (p *MySqlParser) ShutdownStatement() (localctx IShutdownStatementContext) {
	localctx = NewShutdownStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, MySqlParserRULE_shutdownStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5537)
		p.Match(MySqlParserSHUTDOWN)
	}

	return localctx
}

// ITableIndexesContext is an interface to support dynamic dispatch.
type ITableIndexesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexFormat returns the indexFormat token.
	GetIndexFormat() antlr.Token

	// SetIndexFormat sets the indexFormat token.
	SetIndexFormat(antlr.Token)

	// IsTableIndexesContext differentiates from other interfaces.
	IsTableIndexesContext()
}

type TableIndexesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	indexFormat antlr.Token
}

func NewEmptyTableIndexesContext() *TableIndexesContext {
	var p = new(TableIndexesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableIndexes
	return p
}

func (*TableIndexesContext) IsTableIndexesContext() {}

func NewTableIndexesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIndexesContext {
	var p = new(TableIndexesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableIndexes

	return p
}

func (s *TableIndexesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *TableIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *TableIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableIndexesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableIndexesContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *TableIndexesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TableIndexesContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *TableIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIndexesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIndexesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableIndexes(s)
	}
}

func (s *TableIndexesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableIndexes(s)
	}
}

func (p *MySqlParser) TableIndexes() (localctx ITableIndexesContext) {
	localctx = NewTableIndexesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, MySqlParserRULE_tableIndexes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5539)
		p.TableName()
	}
	p.SetState(5547)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX || _la == MySqlParserKEY || _la == MySqlParserLR_BRACKET {
		p.SetState(5541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(5540)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*TableIndexesContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*TableIndexesContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5543)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5544)
			p.UidList()
		}
		{
			p.SetState(5545)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFlushOptionContext is an interface to support dynamic dispatch.
type IFlushOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushOptionContext differentiates from other interfaces.
	IsFlushOptionContext()
}

type FlushOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushOptionContext() *FlushOptionContext {
	var p = new(FlushOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushOption
	return p
}

func (*FlushOptionContext) IsFlushOptionContext() {}

func NewFlushOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushOptionContext {
	var p = new(FlushOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushOption

	return p
}

func (s *FlushOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushOptionContext) CopyFrom(ctx *FlushOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableFlushOptionContext struct {
	*FlushOptionContext
}

func NewTableFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableFlushOptionContext {
	var p = new(TableFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *TableFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFlushOptionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *TableFlushOptionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *TableFlushOptionContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *TableFlushOptionContext) FlushTableOption() IFlushTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushTableOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlushTableOptionContext)
}

func (s *TableFlushOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableFlushOption(s)
	}
}

func (s *TableFlushOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableFlushOption(s)
	}
}

type ChannelFlushOptionContext struct {
	*FlushOptionContext
}

func NewChannelFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChannelFlushOptionContext {
	var p = new(ChannelFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *ChannelFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelFlushOptionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *ChannelFlushOptionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *ChannelFlushOptionContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChannelFlushOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChannelFlushOption(s)
	}
}

func (s *ChannelFlushOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChannelFlushOption(s)
	}
}

type SimpleFlushOptionContext struct {
	*FlushOptionContext
}

func NewSimpleFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleFlushOptionContext {
	var p = new(SimpleFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *SimpleFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleFlushOptionContext) DES_KEY_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_KEY_FILE, 0)
}

func (s *SimpleFlushOptionContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *SimpleFlushOptionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *SimpleFlushOptionContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZER_COSTS, 0)
}

func (s *SimpleFlushOptionContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *SimpleFlushOptionContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *SimpleFlushOptionContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *SimpleFlushOptionContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *SimpleFlushOptionContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER_RESOURCES, 0)
}

func (s *SimpleFlushOptionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *SimpleFlushOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *SimpleFlushOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *SimpleFlushOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *SimpleFlushOptionContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *SimpleFlushOptionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *SimpleFlushOptionContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, 0)
}

func (s *SimpleFlushOptionContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERAL, 0)
}

func (s *SimpleFlushOptionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *SimpleFlushOptionContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLOW, 0)
}

func (s *SimpleFlushOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleFlushOption(s)
	}
}

func (s *SimpleFlushOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleFlushOption(s)
	}
}

func (p *MySqlParser) FlushOption() (localctx IFlushOptionContext) {
	localctx = NewFlushOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, MySqlParserRULE_flushOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5581)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 803, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5567)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserDES_KEY_FILE:
			{
				p.SetState(5549)
				p.Match(MySqlParserDES_KEY_FILE)
			}

		case MySqlParserHOSTS:
			{
				p.SetState(5550)
				p.Match(MySqlParserHOSTS)
			}

		case MySqlParserBINARY, MySqlParserENGINE, MySqlParserERROR, MySqlParserGENERAL, MySqlParserLOGS, MySqlParserRELAY, MySqlParserSLOW:
			p.SetState(5552)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserBINARY || (((_la-394)&-(0x1f+1)) == 0 && ((1<<uint((_la-394)))&((1<<(MySqlParserENGINE-394))|(1<<(MySqlParserERROR-394))|(1<<(MySqlParserGENERAL-394)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW {
				{
					p.SetState(5551)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserBINARY || (((_la-394)&-(0x1f+1)) == 0 && ((1<<uint((_la-394)))&((1<<(MySqlParserENGINE-394))|(1<<(MySqlParserERROR-394))|(1<<(MySqlParserGENERAL-394)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(5554)
				p.Match(MySqlParserLOGS)
			}

		case MySqlParserOPTIMIZER_COSTS:
			{
				p.SetState(5555)
				p.Match(MySqlParserOPTIMIZER_COSTS)
			}

		case MySqlParserPRIVILEGES:
			{
				p.SetState(5556)
				p.Match(MySqlParserPRIVILEGES)
			}

		case MySqlParserQUERY:
			{
				p.SetState(5557)
				p.Match(MySqlParserQUERY)
			}
			{
				p.SetState(5558)
				p.Match(MySqlParserCACHE)
			}

		case MySqlParserSTATUS:
			{
				p.SetState(5559)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserUSER_RESOURCES:
			{
				p.SetState(5560)
				p.Match(MySqlParserUSER_RESOURCES)
			}

		case MySqlParserTABLES:
			{
				p.SetState(5561)
				p.Match(MySqlParserTABLES)
			}
			p.SetState(5565)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserWITH {
				{
					p.SetState(5562)
					p.Match(MySqlParserWITH)
				}
				{
					p.SetState(5563)
					p.Match(MySqlParserREAD)
				}
				{
					p.SetState(5564)
					p.Match(MySqlParserLOCK)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewChannelFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5569)
			p.Match(MySqlParserRELAY)
		}
		{
			p.SetState(5570)
			p.Match(MySqlParserLOGS)
		}
		p.SetState(5572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5571)
				p.ChannelOption()
			}

		}

	case 3:
		localctx = NewTableFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5574)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserTABLE || _la == MySqlParserTABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5576)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 801, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5575)
				p.Tables()
			}

		}
		p.SetState(5579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR || _la == MySqlParserWITH {
			{
				p.SetState(5578)
				p.FlushTableOption()
			}

		}

	}

	return localctx
}

// IFlushTableOptionContext is an interface to support dynamic dispatch.
type IFlushTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushTableOptionContext differentiates from other interfaces.
	IsFlushTableOptionContext()
}

type FlushTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushTableOptionContext() *FlushTableOptionContext {
	var p = new(FlushTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushTableOption
	return p
}

func (*FlushTableOptionContext) IsFlushTableOptionContext() {}

func NewFlushTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushTableOptionContext {
	var p = new(FlushTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushTableOption

	return p
}

func (s *FlushTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushTableOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *FlushTableOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *FlushTableOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *FlushTableOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *FlushTableOptionContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT, 0)
}

func (s *FlushTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushTableOptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFlushTableOption(s)
	}
}

func (s *FlushTableOptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFlushTableOption(s)
	}
}

func (p *MySqlParser) FlushTableOption() (localctx IFlushTableOptionContext) {
	localctx = NewFlushTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, MySqlParserRULE_flushTableOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5588)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5583)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(5584)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(5585)
			p.Match(MySqlParserLOCK)
		}

	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5586)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(5587)
			p.Match(MySqlParserEXPORT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILoadedTableIndexesContext is an interface to support dynamic dispatch.
type ILoadedTableIndexesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexFormat returns the indexFormat token.
	GetIndexFormat() antlr.Token

	// SetIndexFormat sets the indexFormat token.
	SetIndexFormat(antlr.Token)

	// GetPartitionList returns the partitionList rule contexts.
	GetPartitionList() IUidListContext

	// GetIndexList returns the indexList rule contexts.
	GetIndexList() IUidListContext

	// SetPartitionList sets the partitionList rule contexts.
	SetPartitionList(IUidListContext)

	// SetIndexList sets the indexList rule contexts.
	SetIndexList(IUidListContext)

	// IsLoadedTableIndexesContext differentiates from other interfaces.
	IsLoadedTableIndexesContext()
}

type LoadedTableIndexesContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	partitionList IUidListContext
	indexFormat   antlr.Token
	indexList     IUidListContext
}

func NewEmptyLoadedTableIndexesContext() *LoadedTableIndexesContext {
	var p = new(LoadedTableIndexesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadedTableIndexes
	return p
}

func (*LoadedTableIndexesContext) IsLoadedTableIndexesContext() {}

func NewLoadedTableIndexesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadedTableIndexesContext {
	var p = new(LoadedTableIndexesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadedTableIndexes

	return p
}

func (s *LoadedTableIndexesContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadedTableIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *LoadedTableIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *LoadedTableIndexesContext) GetPartitionList() IUidListContext { return s.partitionList }

func (s *LoadedTableIndexesContext) GetIndexList() IUidListContext { return s.indexList }

func (s *LoadedTableIndexesContext) SetPartitionList(v IUidListContext) { s.partitionList = v }

func (s *LoadedTableIndexesContext) SetIndexList(v IUidListContext) { s.indexList = v }

func (s *LoadedTableIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadedTableIndexesContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *LoadedTableIndexesContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *LoadedTableIndexesContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *LoadedTableIndexesContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *LoadedTableIndexesContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *LoadedTableIndexesContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *LoadedTableIndexesContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVES, 0)
}

func (s *LoadedTableIndexesContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *LoadedTableIndexesContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *LoadedTableIndexesContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *LoadedTableIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *LoadedTableIndexesContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *LoadedTableIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadedTableIndexesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadedTableIndexesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoadedTableIndexes(s)
	}
}

func (s *LoadedTableIndexesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoadedTableIndexes(s)
	}
}

func (p *MySqlParser) LoadedTableIndexes() (localctx ILoadedTableIndexesContext) {
	localctx = NewLoadedTableIndexesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, MySqlParserRULE_loadedTableIndexes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5590)
		p.TableName()
	}
	p.SetState(5598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(5591)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(5592)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5595)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(5593)

				var _x = p.UidList()

				localctx.(*LoadedTableIndexesContext).partitionList = _x
			}

		case MySqlParserALL:
			{
				p.SetState(5594)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5597)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5607)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 808, p.GetParserRuleContext()) == 1 {
		p.SetState(5601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(5600)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*LoadedTableIndexesContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*LoadedTableIndexesContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5603)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5604)

			var _x = p.UidList()

			localctx.(*LoadedTableIndexesContext).indexList = _x
		}
		{
			p.SetState(5605)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(5609)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(5610)
			p.Match(MySqlParserLEAVES)
		}

	}

	return localctx
}

// ISimpleDescribeStatementContext is an interface to support dynamic dispatch.
type ISimpleDescribeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCommand returns the command token.
	GetCommand() antlr.Token

	// GetPattern returns the pattern token.
	GetPattern() antlr.Token

	// SetCommand sets the command token.
	SetCommand(antlr.Token)

	// SetPattern sets the pattern token.
	SetPattern(antlr.Token)

	// GetColumn returns the column rule contexts.
	GetColumn() IUidContext

	// SetColumn sets the column rule contexts.
	SetColumn(IUidContext)

	// IsSimpleDescribeStatementContext differentiates from other interfaces.
	IsSimpleDescribeStatementContext()
}

type SimpleDescribeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	command antlr.Token
	column  IUidContext
	pattern antlr.Token
}

func NewEmptySimpleDescribeStatementContext() *SimpleDescribeStatementContext {
	var p = new(SimpleDescribeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleDescribeStatement
	return p
}

func (*SimpleDescribeStatementContext) IsSimpleDescribeStatementContext() {}

func NewSimpleDescribeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleDescribeStatementContext {
	var p = new(SimpleDescribeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleDescribeStatement

	return p
}

func (s *SimpleDescribeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleDescribeStatementContext) GetCommand() antlr.Token { return s.command }

func (s *SimpleDescribeStatementContext) GetPattern() antlr.Token { return s.pattern }

func (s *SimpleDescribeStatementContext) SetCommand(v antlr.Token) { s.command = v }

func (s *SimpleDescribeStatementContext) SetPattern(v antlr.Token) { s.pattern = v }

func (s *SimpleDescribeStatementContext) GetColumn() IUidContext { return s.column }

func (s *SimpleDescribeStatementContext) SetColumn(v IUidContext) { s.column = v }

func (s *SimpleDescribeStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SimpleDescribeStatementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *SimpleDescribeStatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *SimpleDescribeStatementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *SimpleDescribeStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SimpleDescribeStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SimpleDescribeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDescribeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleDescribeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleDescribeStatement(s)
	}
}

func (s *SimpleDescribeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleDescribeStatement(s)
	}
}

func (p *MySqlParser) SimpleDescribeStatement() (localctx ISimpleDescribeStatementContext) {
	localctx = NewSimpleDescribeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, MySqlParserRULE_simpleDescribeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5613)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SimpleDescribeStatementContext).command = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-43)&-(0x1f+1)) == 0 && ((1<<uint((_la-43)))&((1<<(MySqlParserDESC-43))|(1<<(MySqlParserDESCRIBE-43))|(1<<(MySqlParserEXPLAIN-43)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SimpleDescribeStatementContext).command = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5614)
		p.TableName()
	}
	p.SetState(5617)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 810, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5615)

			var _x = p.Uid()

			localctx.(*SimpleDescribeStatementContext).column = _x
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 810, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5616)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SimpleDescribeStatementContext).pattern = _m
		}

	}

	return localctx
}

// IFullDescribeStatementContext is an interface to support dynamic dispatch.
type IFullDescribeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCommand returns the command token.
	GetCommand() antlr.Token

	// GetFormatType returns the formatType token.
	GetFormatType() antlr.Token

	// GetFormatValue returns the formatValue token.
	GetFormatValue() antlr.Token

	// SetCommand sets the command token.
	SetCommand(antlr.Token)

	// SetFormatType sets the formatType token.
	SetFormatType(antlr.Token)

	// SetFormatValue sets the formatValue token.
	SetFormatValue(antlr.Token)

	// IsFullDescribeStatementContext differentiates from other interfaces.
	IsFullDescribeStatementContext()
}

type FullDescribeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	command     antlr.Token
	formatType  antlr.Token
	formatValue antlr.Token
}

func NewEmptyFullDescribeStatementContext() *FullDescribeStatementContext {
	var p = new(FullDescribeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullDescribeStatement
	return p
}

func (*FullDescribeStatementContext) IsFullDescribeStatementContext() {}

func NewFullDescribeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullDescribeStatementContext {
	var p = new(FullDescribeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullDescribeStatement

	return p
}

func (s *FullDescribeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FullDescribeStatementContext) GetCommand() antlr.Token { return s.command }

func (s *FullDescribeStatementContext) GetFormatType() antlr.Token { return s.formatType }

func (s *FullDescribeStatementContext) GetFormatValue() antlr.Token { return s.formatValue }

func (s *FullDescribeStatementContext) SetCommand(v antlr.Token) { s.command = v }

func (s *FullDescribeStatementContext) SetFormatType(v antlr.Token) { s.formatType = v }

func (s *FullDescribeStatementContext) SetFormatValue(v antlr.Token) { s.formatValue = v }

func (s *FullDescribeStatementContext) DescribeObjectClause() IDescribeObjectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescribeObjectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescribeObjectClauseContext)
}

func (s *FullDescribeStatementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *FullDescribeStatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *FullDescribeStatementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *FullDescribeStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *FullDescribeStatementContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *FullDescribeStatementContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *FullDescribeStatementContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *FullDescribeStatementContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRADITIONAL, 0)
}

func (s *FullDescribeStatementContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *FullDescribeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullDescribeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullDescribeStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFullDescribeStatement(s)
	}
}

func (s *FullDescribeStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFullDescribeStatement(s)
	}
}

func (p *MySqlParser) FullDescribeStatement() (localctx IFullDescribeStatementContext) {
	localctx = NewFullDescribeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, MySqlParserRULE_fullDescribeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5619)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FullDescribeStatementContext).command = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-43)&-(0x1f+1)) == 0 && ((1<<uint((_la-43)))&((1<<(MySqlParserDESC-43))|(1<<(MySqlParserDESCRIBE-43))|(1<<(MySqlParserEXPLAIN-43)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FullDescribeStatementContext).command = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5623)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED || _la == MySqlParserPARTITIONS || _la == MySqlParserFORMAT {
		{
			p.SetState(5620)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FullDescribeStatementContext).formatType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserEXTENDED || _la == MySqlParserPARTITIONS || _la == MySqlParserFORMAT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FullDescribeStatementContext).formatType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5621)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5622)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FullDescribeStatementContext).formatValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJSON || _la == MySqlParserTRADITIONAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FullDescribeStatementContext).formatValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5625)
		p.DescribeObjectClause()
	}

	return localctx
}

// IHelpStatementContext is an interface to support dynamic dispatch.
type IHelpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHelpStatementContext differentiates from other interfaces.
	IsHelpStatementContext()
}

type HelpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHelpStatementContext() *HelpStatementContext {
	var p = new(HelpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_helpStatement
	return p
}

func (*HelpStatementContext) IsHelpStatementContext() {}

func NewHelpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HelpStatementContext {
	var p = new(HelpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_helpStatement

	return p
}

func (s *HelpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HelpStatementContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySqlParserHELP, 0)
}

func (s *HelpStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HelpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HelpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HelpStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHelpStatement(s)
	}
}

func (s *HelpStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHelpStatement(s)
	}
}

func (p *MySqlParser) HelpStatement() (localctx IHelpStatementContext) {
	localctx = NewHelpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, MySqlParserRULE_helpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5627)
		p.Match(MySqlParserHELP)
	}
	{
		p.SetState(5628)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUseStatementContext is an interface to support dynamic dispatch.
type IUseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseStatementContext differentiates from other interfaces.
	IsUseStatementContext()
}

type UseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStatementContext() *UseStatementContext {
	var p = new(UseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_useStatement
	return p
}

func (*UseStatementContext) IsUseStatementContext() {}

func NewUseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStatementContext {
	var p = new(UseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_useStatement

	return p
}

func (s *UseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStatementContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *UseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUseStatement(s)
	}
}

func (s *UseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUseStatement(s)
	}
}

func (p *MySqlParser) UseStatement() (localctx IUseStatementContext) {
	localctx = NewUseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, MySqlParserRULE_useStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5630)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(5631)
		p.Uid()
	}

	return localctx
}

// ISignalStatementContext is an interface to support dynamic dispatch.
type ISignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalStatementContext differentiates from other interfaces.
	IsSignalStatementContext()
}

type SignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalStatementContext() *SignalStatementContext {
	var p = new(SignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_signalStatement
	return p
}

func (*SignalStatementContext) IsSignalStatementContext() {}

func NewSignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalStatementContext {
	var p = new(SignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_signalStatement

	return p
}

func (s *SignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalStatementContext) SIGNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNAL, 0)
}

func (s *SignalStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *SignalStatementContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *SignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SignalStatementContext) AllSignalConditionInformation() []ISignalConditionInformationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem())
	var tst = make([]ISignalConditionInformationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalConditionInformationContext)
		}
	}

	return tst
}

func (s *SignalStatementContext) SignalConditionInformation(i int) ISignalConditionInformationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalConditionInformationContext)
}

func (s *SignalStatementContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *SignalStatementContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SignalStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SignalStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SignalStatementContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *SignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSignalStatement(s)
	}
}

func (s *SignalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSignalStatement(s)
	}
}

func (p *MySqlParser) SignalStatement() (localctx ISignalStatementContext) {
	localctx = NewSignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, MySqlParserRULE_signalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5633)
		p.Match(MySqlParserSIGNAL)
	}
	p.SetState(5641)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQLSTATE:
		{
			p.SetState(5634)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(5636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(5635)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(5638)
			p.StringLiteral()
		}

	case MySqlParserID:
		{
			p.SetState(5639)
			p.Match(MySqlParserID)
		}

	case MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(5640)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5652)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 815, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5643)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5644)
			p.SignalConditionInformation()
		}
		p.SetState(5649)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5645)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5646)
				p.SignalConditionInformation()
			}

			p.SetState(5651)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IResignalStatementContext is an interface to support dynamic dispatch.
type IResignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResignalStatementContext differentiates from other interfaces.
	IsResignalStatementContext()
}

type ResignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResignalStatementContext() *ResignalStatementContext {
	var p = new(ResignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resignalStatement
	return p
}

func (*ResignalStatementContext) IsResignalStatementContext() {}

func NewResignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResignalStatementContext {
	var p = new(ResignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resignalStatement

	return p
}

func (s *ResignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResignalStatementContext) RESIGNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESIGNAL, 0)
}

func (s *ResignalStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *ResignalStatementContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *ResignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ResignalStatementContext) AllSignalConditionInformation() []ISignalConditionInformationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem())
	var tst = make([]ISignalConditionInformationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalConditionInformationContext)
		}
	}

	return tst
}

func (s *ResignalStatementContext) SignalConditionInformation(i int) ISignalConditionInformationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalConditionInformationContext)
}

func (s *ResignalStatementContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *ResignalStatementContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ResignalStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ResignalStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ResignalStatementContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *ResignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResignalStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterResignalStatement(s)
	}
}

func (s *ResignalStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitResignalStatement(s)
	}
}

func (p *MySqlParser) ResignalStatement() (localctx IResignalStatementContext) {
	localctx = NewResignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, MySqlParserRULE_resignalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5654)
		p.Match(MySqlParserRESIGNAL)
	}
	p.SetState(5662)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQLSTATE:
		{
			p.SetState(5655)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(5657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(5656)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(5659)
			p.StringLiteral()
		}

	case MySqlParserID:
		{
			p.SetState(5660)
			p.Match(MySqlParserID)
		}

	case MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(5661)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUS, MySqlParserLR_BRACKET, MySqlParserSEMI:

	default:
	}
	p.SetState(5673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 819, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5664)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5665)
			p.SignalConditionInformation()
		}
		p.SetState(5670)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5666)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5667)
				p.SignalConditionInformation()
			}

			p.SetState(5672)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ISignalConditionInformationContext is an interface to support dynamic dispatch.
type ISignalConditionInformationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalConditionInformationContext differentiates from other interfaces.
	IsSignalConditionInformationContext()
}

type SignalConditionInformationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalConditionInformationContext() *SignalConditionInformationContext {
	var p = new(SignalConditionInformationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_signalConditionInformation
	return p
}

func (*SignalConditionInformationContext) IsSignalConditionInformationContext() {}

func NewSignalConditionInformationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalConditionInformationContext {
	var p = new(SignalConditionInformationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_signalConditionInformation

	return p
}

func (s *SignalConditionInformationContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalConditionInformationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SignalConditionInformationContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *SignalConditionInformationContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *SignalConditionInformationContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *SignalConditionInformationContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *SignalConditionInformationContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *SignalConditionInformationContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *SignalConditionInformationContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *SignalConditionInformationContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *SignalConditionInformationContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *SignalConditionInformationContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SignalConditionInformationContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL_LITERAL, 0)
}

func (s *SignalConditionInformationContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *SignalConditionInformationContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *SignalConditionInformationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalConditionInformationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalConditionInformationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSignalConditionInformation(s)
	}
}

func (s *SignalConditionInformationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSignalConditionInformation(s)
	}
}

func (p *MySqlParser) SignalConditionInformation() (localctx ISignalConditionInformationContext) {
	localctx = NewSignalConditionInformationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, MySqlParserRULE_signalConditionInformation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5675)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-347)&-(0x1f+1)) == 0 && ((1<<uint((_la-347)))&((1<<(MySqlParserCLASS_ORIGIN-347))|(1<<(MySqlParserCOLUMN_NAME-347))|(1<<(MySqlParserCONSTRAINT_CATALOG-347))|(1<<(MySqlParserCONSTRAINT_SCHEMA-347))|(1<<(MySqlParserCONSTRAINT_NAME-347))|(1<<(MySqlParserCURSOR_NAME-347)))) != 0) || _la == MySqlParserMESSAGE_TEXT || _la == MySqlParserMYSQL_ERRNO || _la == MySqlParserSUBCLASS_ORIGIN || _la == MySqlParserTABLE_NAME || _la == MySqlParserCATALOG_NAME || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5676)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(5681)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 820, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5677)
			p.StringLiteral()
		}

	case 2:
		{
			p.SetState(5678)
			p.Match(MySqlParserDECIMAL_LITERAL)
		}

	case 3:
		{
			p.SetState(5679)
			p.MysqlVariable()
		}

	case 4:
		{
			p.SetState(5680)
			p.SimpleId()
		}

	}

	return localctx
}

// IDiagnosticsStatementContext is an interface to support dynamic dispatch.
type IDiagnosticsStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiagnosticsStatementContext differentiates from other interfaces.
	IsDiagnosticsStatementContext()
}

type DiagnosticsStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiagnosticsStatementContext() *DiagnosticsStatementContext {
	var p = new(DiagnosticsStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_diagnosticsStatement
	return p
}

func (*DiagnosticsStatementContext) IsDiagnosticsStatementContext() {}

func NewDiagnosticsStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DiagnosticsStatementContext {
	var p = new(DiagnosticsStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_diagnosticsStatement

	return p
}

func (s *DiagnosticsStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DiagnosticsStatementContext) GET() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET, 0)
}

func (s *DiagnosticsStatementContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIAGNOSTICS, 0)
}

func (s *DiagnosticsStatementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *DiagnosticsStatementContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTACKED, 0)
}

func (s *DiagnosticsStatementContext) AllVariableClause() []IVariableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem())
	var tst = make([]IVariableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableClauseContext)
		}
	}

	return tst
}

func (s *DiagnosticsStatementContext) VariableClause(i int) IVariableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableClauseContext)
}

func (s *DiagnosticsStatementContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *DiagnosticsStatementContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *DiagnosticsStatementContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONDITION, 0)
}

func (s *DiagnosticsStatementContext) AllDiagnosticsConditionInformationName() []IDiagnosticsConditionInformationNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDiagnosticsConditionInformationNameContext)(nil)).Elem())
	var tst = make([]IDiagnosticsConditionInformationNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDiagnosticsConditionInformationNameContext)
		}
	}

	return tst
}

func (s *DiagnosticsStatementContext) DiagnosticsConditionInformationName(i int) IDiagnosticsConditionInformationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiagnosticsConditionInformationNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDiagnosticsConditionInformationNameContext)
}

func (s *DiagnosticsStatementContext) AllNUMBER() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNUMBER)
}

func (s *DiagnosticsStatementContext) NUMBER(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMBER, i)
}

func (s *DiagnosticsStatementContext) AllROW_COUNT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserROW_COUNT)
}

func (s *DiagnosticsStatementContext) ROW_COUNT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_COUNT, i)
}

func (s *DiagnosticsStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *DiagnosticsStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DiagnosticsStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DiagnosticsStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DiagnosticsStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DiagnosticsStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDiagnosticsStatement(s)
	}
}

func (s *DiagnosticsStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDiagnosticsStatement(s)
	}
}

func (p *MySqlParser) DiagnosticsStatement() (localctx IDiagnosticsStatementContext) {
	localctx = NewDiagnosticsStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, MySqlParserRULE_diagnosticsStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5683)
		p.Match(MySqlParserGET)
	}
	p.SetState(5685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCURRENT || _la == MySqlParserSTACKED {
		{
			p.SetState(5684)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCURRENT || _la == MySqlParserSTACKED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5687)
		p.Match(MySqlParserDIAGNOSTICS)
	}
	p.SetState(5719)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
		{
			p.SetState(5688)
			p.VariableClause()
		}
		{
			p.SetState(5689)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5690)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNUMBER || _la == MySqlParserROW_COUNT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5691)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5692)
				p.VariableClause()
			}
			{
				p.SetState(5693)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(5694)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserNUMBER || _la == MySqlParserROW_COUNT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

			p.SetState(5700)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserCONDITION:
		{
			p.SetState(5701)
			p.Match(MySqlParserCONDITION)
		}
		p.SetState(5704)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
			{
				p.SetState(5702)
				p.DecimalLiteral()
			}

		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
			{
				p.SetState(5703)
				p.VariableClause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5706)
			p.VariableClause()
		}
		{
			p.SetState(5707)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5708)
			p.DiagnosticsConditionInformationName()
		}
		p.SetState(5716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5709)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5710)
				p.VariableClause()
			}
			{
				p.SetState(5711)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(5712)
				p.DiagnosticsConditionInformationName()
			}

			p.SetState(5718)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDiagnosticsConditionInformationNameContext is an interface to support dynamic dispatch.
type IDiagnosticsConditionInformationNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiagnosticsConditionInformationNameContext differentiates from other interfaces.
	IsDiagnosticsConditionInformationNameContext()
}

type DiagnosticsConditionInformationNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiagnosticsConditionInformationNameContext() *DiagnosticsConditionInformationNameContext {
	var p = new(DiagnosticsConditionInformationNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_diagnosticsConditionInformationName
	return p
}

func (*DiagnosticsConditionInformationNameContext) IsDiagnosticsConditionInformationNameContext() {}

func NewDiagnosticsConditionInformationNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DiagnosticsConditionInformationNameContext {
	var p = new(DiagnosticsConditionInformationNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_diagnosticsConditionInformationName

	return p
}

func (s *DiagnosticsConditionInformationNameContext) GetParser() antlr.Parser { return s.parser }

func (s *DiagnosticsConditionInformationNameContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *DiagnosticsConditionInformationNameContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *DiagnosticsConditionInformationNameContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNED_SQLSTATE, 0)
}

func (s *DiagnosticsConditionInformationNameContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *DiagnosticsConditionInformationNameContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DiagnosticsConditionInformationNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DiagnosticsConditionInformationNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDiagnosticsConditionInformationName(s)
	}
}

func (s *DiagnosticsConditionInformationNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDiagnosticsConditionInformationName(s)
	}
}

func (p *MySqlParser) DiagnosticsConditionInformationName() (localctx IDiagnosticsConditionInformationNameContext) {
	localctx = NewDiagnosticsConditionInformationNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, MySqlParserRULE_diagnosticsConditionInformationName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5721)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-347)&-(0x1f+1)) == 0 && ((1<<uint((_la-347)))&((1<<(MySqlParserCLASS_ORIGIN-347))|(1<<(MySqlParserCOLUMN_NAME-347))|(1<<(MySqlParserCONSTRAINT_CATALOG-347))|(1<<(MySqlParserCONSTRAINT_SCHEMA-347))|(1<<(MySqlParserCONSTRAINT_NAME-347))|(1<<(MySqlParserCURSOR_NAME-347)))) != 0) || _la == MySqlParserMESSAGE_TEXT || _la == MySqlParserMYSQL_ERRNO || _la == MySqlParserRETURNED_SQLSTATE || _la == MySqlParserSUBCLASS_ORIGIN || _la == MySqlParserTABLE_NAME || _la == MySqlParserCATALOG_NAME || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDescribeObjectClauseContext is an interface to support dynamic dispatch.
type IDescribeObjectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribeObjectClauseContext differentiates from other interfaces.
	IsDescribeObjectClauseContext()
}

type DescribeObjectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribeObjectClauseContext() *DescribeObjectClauseContext {
	var p = new(DescribeObjectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_describeObjectClause
	return p
}

func (*DescribeObjectClauseContext) IsDescribeObjectClauseContext() {}

func NewDescribeObjectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescribeObjectClauseContext {
	var p = new(DescribeObjectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_describeObjectClause

	return p
}

func (s *DescribeObjectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DescribeObjectClauseContext) CopyFrom(ctx *DescribeObjectClauseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *DescribeObjectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeObjectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DescribeStatementsContext struct {
	*DescribeObjectClauseContext
}

func NewDescribeStatementsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeStatementsContext {
	var p = new(DescribeStatementsContext)

	p.DescribeObjectClauseContext = NewEmptyDescribeObjectClauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DescribeObjectClauseContext))

	return p
}

func (s *DescribeStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeStatementsContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DescribeStatementsContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *DescribeStatementsContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *DescribeStatementsContext) ReplaceStatement() IReplaceStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceStatementContext)
}

func (s *DescribeStatementsContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *DescribeStatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDescribeStatements(s)
	}
}

func (s *DescribeStatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDescribeStatements(s)
	}
}

type DescribeConnectionContext struct {
	*DescribeObjectClauseContext
}

func NewDescribeConnectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeConnectionContext {
	var p = new(DescribeConnectionContext)

	p.DescribeObjectClauseContext = NewEmptyDescribeObjectClauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DescribeObjectClauseContext))

	return p
}

func (s *DescribeConnectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeConnectionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DescribeConnectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *DescribeConnectionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DescribeConnectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDescribeConnection(s)
	}
}

func (s *DescribeConnectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDescribeConnection(s)
	}
}

func (p *MySqlParser) DescribeObjectClause() (localctx IDescribeObjectClauseContext) {
	localctx = NewDescribeObjectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, MySqlParserRULE_describeObjectClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5733)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDELETE, MySqlParserINSERT, MySqlParserREPLACE, MySqlParserSELECT, MySqlParserUPDATE, MySqlParserLR_BRACKET:
		localctx = NewDescribeStatementsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5728)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSELECT, MySqlParserLR_BRACKET:
			{
				p.SetState(5723)
				p.SelectStatement()
			}

		case MySqlParserDELETE:
			{
				p.SetState(5724)
				p.DeleteStatement()
			}

		case MySqlParserINSERT:
			{
				p.SetState(5725)
				p.InsertStatement()
			}

		case MySqlParserREPLACE:
			{
				p.SetState(5726)
				p.ReplaceStatement()
			}

		case MySqlParserUPDATE:
			{
				p.SetState(5727)
				p.UpdateStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserFOR:
		localctx = NewDescribeConnectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5730)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(5731)
			p.Match(MySqlParserCONNECTION)
		}
		{
			p.SetState(5732)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFullIdContext is an interface to support dynamic dispatch.
type IFullIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullIdContext differentiates from other interfaces.
	IsFullIdContext()
}

type FullIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullIdContext() *FullIdContext {
	var p = new(FullIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullId
	return p
}

func (*FullIdContext) IsFullIdContext() {}

func NewFullIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullIdContext {
	var p = new(FullIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullId

	return p
}

func (s *FullIdContext) GetParser() antlr.Parser { return s.parser }

func (s *FullIdContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *FullIdContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FullIdContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *FullIdContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *FullIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFullId(s)
	}
}

func (s *FullIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFullId(s)
	}
}

func (p *MySqlParser) FullId() (localctx IFullIdContext) {
	localctx = NewFullIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, MySqlParserRULE_fullId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5735)
		p.Uid()
	}
	p.SetState(5739)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 828, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5736)
			p.Match(MySqlParserDOT_ID)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 828, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5737)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5738)
			p.Uid()
		}

	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *MySqlParser) TableName() (localctx ITableNameContext) {
	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, MySqlParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5741)
		p.FullId()
	}

	return localctx
}

// IFullColumnNameContext is an interface to support dynamic dispatch.
type IFullColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullColumnNameContext differentiates from other interfaces.
	IsFullColumnNameContext()
}

type FullColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullColumnNameContext() *FullColumnNameContext {
	var p = new(FullColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullColumnName
	return p
}

func (*FullColumnNameContext) IsFullColumnNameContext() {}

func NewFullColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullColumnNameContext {
	var p = new(FullColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullColumnName

	return p
}

func (s *FullColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FullColumnNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FullColumnNameContext) AllDottedId() []IDottedIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDottedIdContext)(nil)).Elem())
	var tst = make([]IDottedIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDottedIdContext)
		}
	}

	return tst
}

func (s *FullColumnNameContext) DottedId(i int) IDottedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDottedIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDottedIdContext)
}

func (s *FullColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFullColumnName(s)
	}
}

func (s *FullColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFullColumnName(s)
	}
}

func (p *MySqlParser) FullColumnName() (localctx IFullColumnNameContext) {
	localctx = NewFullColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, MySqlParserRULE_fullColumnName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5755)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 832, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5743)
			p.Uid()
		}
		p.SetState(5748)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5744)
				p.DottedId()
			}
			p.SetState(5746)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 829, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5745)
					p.DottedId()
				}

			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5750)
		p.MatchWildcard()

		{
			p.SetState(5751)
			p.DottedId()
		}
		p.SetState(5753)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 831, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5752)
				p.DottedId()
			}

		}

	}

	return localctx
}

// IIndexColumnNameContext is an interface to support dynamic dispatch.
type IIndexColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSortType returns the sortType token.
	GetSortType() antlr.Token

	// SetSortType sets the sortType token.
	SetSortType(antlr.Token)

	// IsIndexColumnNameContext differentiates from other interfaces.
	IsIndexColumnNameContext()
}

type IndexColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	sortType antlr.Token
}

func NewEmptyIndexColumnNameContext() *IndexColumnNameContext {
	var p = new(IndexColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnName
	return p
}

func (*IndexColumnNameContext) IsIndexColumnNameContext() {}

func NewIndexColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnNameContext {
	var p = new(IndexColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnName

	return p
}

func (s *IndexColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnNameContext) GetSortType() antlr.Token { return s.sortType }

func (s *IndexColumnNameContext) SetSortType(v antlr.Token) { s.sortType = v }

func (s *IndexColumnNameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexColumnNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IndexColumnNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *IndexColumnNameContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexColumnNameContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IndexColumnNameContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexColumnNameContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *IndexColumnNameContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *IndexColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexColumnNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexColumnName(s)
	}
}

func (s *IndexColumnNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexColumnName(s)
	}
}

func (p *MySqlParser) IndexColumnName() (localctx IIndexColumnNameContext) {
	localctx = NewIndexColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, MySqlParserRULE_indexColumnName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5768)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 835, p.GetParserRuleContext()) {
	case 1:
		p.SetState(5759)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 833, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5757)
				p.Uid()
			}

		case 2:
			{
				p.SetState(5758)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}
		p.SetState(5765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5761)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(5762)
				p.DecimalLiteral()
			}
			{
				p.SetState(5763)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 2:
		{
			p.SetState(5767)
			p.expression(0)
		}

	}
	p.SetState(5771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC {
		{
			p.SetState(5770)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IndexColumnNameContext).sortType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IndexColumnNameContext).sortType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IUserNameContext is an interface to support dynamic dispatch.
type IUserNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserNameContext differentiates from other interfaces.
	IsUserNameContext()
}

type UserNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserNameContext() *UserNameContext {
	var p = new(UserNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userName
	return p
}

func (*UserNameContext) IsUserNameContext() {}

func NewUserNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserNameContext {
	var p = new(UserNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userName

	return p
}

func (s *UserNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserNameContext) STRING_USER_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_USER_NAME, 0)
}

func (s *UserNameContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *UserNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UserNameContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserADMIN, 0)
}

func (s *UserNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserName(s)
	}
}

func (s *UserNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserName(s)
	}
}

func (p *MySqlParser) UserName() (localctx IUserNameContext) {
	localctx = NewUserNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, MySqlParserRULE_userName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5773)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserADMIN || (((_la-1111)&-(0x1f+1)) == 0 && ((1<<uint((_la-1111)))&((1<<(MySqlParserSTRING_LITERAL-1111))|(1<<(MySqlParserID-1111))|(1<<(MySqlParserSTRING_USER_NAME-1111)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMysqlVariableContext is an interface to support dynamic dispatch.
type IMysqlVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMysqlVariableContext differentiates from other interfaces.
	IsMysqlVariableContext()
}

type MysqlVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMysqlVariableContext() *MysqlVariableContext {
	var p = new(MysqlVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_mysqlVariable
	return p
}

func (*MysqlVariableContext) IsMysqlVariableContext() {}

func NewMysqlVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MysqlVariableContext {
	var p = new(MysqlVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_mysqlVariable

	return p
}

func (s *MysqlVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *MysqlVariableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *MysqlVariableContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *MysqlVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MysqlVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MysqlVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMysqlVariable(s)
	}
}

func (s *MysqlVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMysqlVariable(s)
	}
}

func (p *MySqlParser) MysqlVariable() (localctx IMysqlVariableContext) {
	localctx = NewMysqlVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, MySqlParserRULE_mysqlVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5775)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOCAL_ID || _la == MySqlParserGLOBAL_ID) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICharsetNameContext is an interface to support dynamic dispatch.
type ICharsetNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetNameContext differentiates from other interfaces.
	IsCharsetNameContext()
}

type CharsetNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetNameContext() *CharsetNameContext {
	var p = new(CharsetNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charsetName
	return p
}

func (*CharsetNameContext) IsCharsetNameContext() {}

func NewCharsetNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetNameContext {
	var p = new(CharsetNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charsetName

	return p
}

func (s *CharsetNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetNameContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CharsetNameContext) CharsetNameBase() ICharsetNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameBaseContext)
}

func (s *CharsetNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CharsetNameContext) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *CharsetNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharsetName(s)
	}
}

func (s *CharsetNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharsetName(s)
	}
}

func (p *MySqlParser) CharsetName() (localctx ICharsetNameContext) {
	localctx = NewCharsetNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, MySqlParserRULE_charsetName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5781)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 837, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5777)
			p.Match(MySqlParserBINARY)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5778)
			p.CharsetNameBase()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5779)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5780)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	}

	return localctx
}

// ICollationNameContext is an interface to support dynamic dispatch.
type ICollationNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollationNameContext differentiates from other interfaces.
	IsCollationNameContext()
}

type CollationNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollationNameContext() *CollationNameContext {
	var p = new(CollationNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_collationName
	return p
}

func (*CollationNameContext) IsCollationNameContext() {}

func NewCollationNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollationNameContext {
	var p = new(CollationNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_collationName

	return p
}

func (s *CollationNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CollationNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CollationNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CollationNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollationNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollationNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollationName(s)
	}
}

func (s *CollationNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollationName(s)
	}
}

func (p *MySqlParser) CollationName() (localctx ICollationNameContext) {
	localctx = NewCollationNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, MySqlParserRULE_collationName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5785)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5783)
			p.Uid()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5784)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}

	return localctx
}

// IEngineNameContext is an interface to support dynamic dispatch.
type IEngineNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEngineNameContext differentiates from other interfaces.
	IsEngineNameContext()
}

type EngineNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEngineNameContext() *EngineNameContext {
	var p = new(EngineNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_engineName
	return p
}

func (*EngineNameContext) IsEngineNameContext() {}

func NewEngineNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EngineNameContext {
	var p = new(EngineNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_engineName

	return p
}

func (s *EngineNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EngineNameContext) ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserARCHIVE, 0)
}

func (s *EngineNameContext) BLACKHOLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLACKHOLE, 0)
}

func (s *EngineNameContext) CSV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCSV, 0)
}

func (s *EngineNameContext) FEDERATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFEDERATED, 0)
}

func (s *EngineNameContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *EngineNameContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *EngineNameContext) MRG_MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMRG_MYISAM, 0)
}

func (s *EngineNameContext) MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYISAM, 0)
}

func (s *EngineNameContext) NDB() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB, 0)
}

func (s *EngineNameContext) NDBCLUSTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDBCLUSTER, 0)
}

func (s *EngineNameContext) PERFORMANCE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERFORMANCE_SCHEMA, 0)
}

func (s *EngineNameContext) TOKUDB() antlr.TerminalNode {
	return s.GetToken(MySqlParserTOKUDB, 0)
}

func (s *EngineNameContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *EngineNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *EngineNameContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *EngineNameContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECT, 0)
}

func (s *EngineNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EngineNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EngineNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterEngineName(s)
	}
}

func (s *EngineNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitEngineName(s)
	}
}

func (p *MySqlParser) EngineName() (localctx IEngineNameContext) {
	localctx = NewEngineNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, MySqlParserRULE_engineName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5787)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCONNECT || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(MySqlParserARCHIVE-752))|(1<<(MySqlParserBLACKHOLE-752))|(1<<(MySqlParserCSV-752))|(1<<(MySqlParserFEDERATED-752))|(1<<(MySqlParserINNODB-752))|(1<<(MySqlParserMEMORY-752))|(1<<(MySqlParserMRG_MYISAM-752))|(1<<(MySqlParserMYISAM-752))|(1<<(MySqlParserNDB-752))|(1<<(MySqlParserNDBCLUSTER-752))|(1<<(MySqlParserPERFORMANCE_SCHEMA-752))|(1<<(MySqlParserTOKUDB-752)))) != 0) || (((_la-1111)&-(0x1f+1)) == 0 && ((1<<uint((_la-1111)))&((1<<(MySqlParserSTRING_LITERAL-1111))|(1<<(MySqlParserID-1111))|(1<<(MySqlParserREVERSE_QUOTE_ID-1111)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUuidSetContext is an interface to support dynamic dispatch.
type IUuidSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUuidSetContext differentiates from other interfaces.
	IsUuidSetContext()
}

type UuidSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUuidSetContext() *UuidSetContext {
	var p = new(UuidSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uuidSet
	return p
}

func (*UuidSetContext) IsUuidSetContext() {}

func NewUuidSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UuidSetContext {
	var p = new(UuidSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uuidSet

	return p
}

func (s *UuidSetContext) GetParser() antlr.Parser { return s.parser }

func (s *UuidSetContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *UuidSetContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UuidSetContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *UuidSetContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *UuidSetContext) AllCOLON_SYMB() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOLON_SYMB)
}

func (s *UuidSetContext) COLON_SYMB(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, i)
}

func (s *UuidSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UuidSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UuidSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUuidSet(s)
	}
}

func (s *UuidSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUuidSet(s)
	}
}

func (p *MySqlParser) UuidSet() (localctx IUuidSetContext) {
	localctx = NewUuidSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, MySqlParserRULE_uuidSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5789)
		p.DecimalLiteral()
	}
	{
		p.SetState(5790)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5791)
		p.DecimalLiteral()
	}
	{
		p.SetState(5792)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5793)
		p.DecimalLiteral()
	}
	{
		p.SetState(5794)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5795)
		p.DecimalLiteral()
	}
	{
		p.SetState(5796)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5797)
		p.DecimalLiteral()
	}
	p.SetState(5803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserCOLON_SYMB {
		{
			p.SetState(5798)
			p.Match(MySqlParserCOLON_SYMB)
		}
		{
			p.SetState(5799)
			p.DecimalLiteral()
		}
		{
			p.SetState(5800)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5801)
			p.DecimalLiteral()
		}

		p.SetState(5805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IXidContext is an interface to support dynamic dispatch.
type IXidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGlobalTableUid returns the globalTableUid rule contexts.
	GetGlobalTableUid() IXuidStringIdContext

	// GetQualifier returns the qualifier rule contexts.
	GetQualifier() IXuidStringIdContext

	// GetIdFormat returns the idFormat rule contexts.
	GetIdFormat() IDecimalLiteralContext

	// SetGlobalTableUid sets the globalTableUid rule contexts.
	SetGlobalTableUid(IXuidStringIdContext)

	// SetQualifier sets the qualifier rule contexts.
	SetQualifier(IXuidStringIdContext)

	// SetIdFormat sets the idFormat rule contexts.
	SetIdFormat(IDecimalLiteralContext)

	// IsXidContext differentiates from other interfaces.
	IsXidContext()
}

type XidContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	globalTableUid IXuidStringIdContext
	qualifier      IXuidStringIdContext
	idFormat       IDecimalLiteralContext
}

func NewEmptyXidContext() *XidContext {
	var p = new(XidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xid
	return p
}

func (*XidContext) IsXidContext() {}

func NewXidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XidContext {
	var p = new(XidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xid

	return p
}

func (s *XidContext) GetParser() antlr.Parser { return s.parser }

func (s *XidContext) GetGlobalTableUid() IXuidStringIdContext { return s.globalTableUid }

func (s *XidContext) GetQualifier() IXuidStringIdContext { return s.qualifier }

func (s *XidContext) GetIdFormat() IDecimalLiteralContext { return s.idFormat }

func (s *XidContext) SetGlobalTableUid(v IXuidStringIdContext) { s.globalTableUid = v }

func (s *XidContext) SetQualifier(v IXuidStringIdContext) { s.qualifier = v }

func (s *XidContext) SetIdFormat(v IDecimalLiteralContext) { s.idFormat = v }

func (s *XidContext) AllXuidStringId() []IXuidStringIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IXuidStringIdContext)(nil)).Elem())
	var tst = make([]IXuidStringIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IXuidStringIdContext)
		}
	}

	return tst
}

func (s *XidContext) XuidStringId(i int) IXuidStringIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXuidStringIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IXuidStringIdContext)
}

func (s *XidContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *XidContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *XidContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *XidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXid(s)
	}
}

func (s *XidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXid(s)
	}
}

func (p *MySqlParser) Xid() (localctx IXidContext) {
	localctx = NewXidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, MySqlParserRULE_xid)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5807)

		var _x = p.XuidStringId()

		localctx.(*XidContext).globalTableUid = _x
	}
	p.SetState(5814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(5808)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5809)

			var _x = p.XuidStringId()

			localctx.(*XidContext).qualifier = _x
		}
		p.SetState(5812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOMMA {
			{
				p.SetState(5810)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5811)

				var _x = p.DecimalLiteral()

				localctx.(*XidContext).idFormat = _x
			}

		}

	}

	return localctx
}

// IXuidStringIdContext is an interface to support dynamic dispatch.
type IXuidStringIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXuidStringIdContext differentiates from other interfaces.
	IsXuidStringIdContext()
}

type XuidStringIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXuidStringIdContext() *XuidStringIdContext {
	var p = new(XuidStringIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xuidStringId
	return p
}

func (*XuidStringIdContext) IsXuidStringIdContext() {}

func NewXuidStringIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XuidStringIdContext {
	var p = new(XuidStringIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xuidStringId

	return p
}

func (s *XuidStringIdContext) GetParser() antlr.Parser { return s.parser }

func (s *XuidStringIdContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *XuidStringIdContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *XuidStringIdContext) AllHEXADECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserHEXADECIMAL_LITERAL)
}

func (s *XuidStringIdContext) HEXADECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, i)
}

func (s *XuidStringIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XuidStringIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XuidStringIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXuidStringId(s)
	}
}

func (s *XuidStringIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXuidStringId(s)
	}
}

func (p *MySqlParser) XuidStringId() (localctx IXuidStringIdContext) {
	localctx = NewXuidStringIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, MySqlParserRULE_xuidStringId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5823)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5816)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserBIT_STRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5817)
			p.Match(MySqlParserBIT_STRING)
		}

	case MySqlParserHEXADECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserHEXADECIMAL_LITERAL {
			{
				p.SetState(5818)
				p.Match(MySqlParserHEXADECIMAL_LITERAL)
			}

			p.SetState(5821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAuthPluginContext is an interface to support dynamic dispatch.
type IAuthPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuthPluginContext differentiates from other interfaces.
	IsAuthPluginContext()
}

type AuthPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuthPluginContext() *AuthPluginContext {
	var p = new(AuthPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_authPlugin
	return p
}

func (*AuthPluginContext) IsAuthPluginContext() {}

func NewAuthPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuthPluginContext {
	var p = new(AuthPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_authPlugin

	return p
}

func (s *AuthPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *AuthPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AuthPluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AuthPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuthPluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAuthPlugin(s)
	}
}

func (s *AuthPluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAuthPlugin(s)
	}
}

func (p *MySqlParser) AuthPlugin() (localctx IAuthPluginContext) {
	localctx = NewAuthPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, MySqlParserRULE_authPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5827)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 844, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5825)
			p.Uid()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5826)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}

	return localctx
}

// IUidContext is an interface to support dynamic dispatch.
type IUidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUidContext differentiates from other interfaces.
	IsUidContext()
}

type UidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUidContext() *UidContext {
	var p = new(UidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uid
	return p
}

func (*UidContext) IsUidContext() {}

func NewUidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UidContext {
	var p = new(UidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uid

	return p
}

func (s *UidContext) GetParser() antlr.Parser { return s.parser }

func (s *UidContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *UidContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *UidContext) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *UidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUid(s)
	}
}

func (s *UidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUid(s)
	}
}

func (p *MySqlParser) Uid() (localctx IUidContext) {
	localctx = NewUidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, MySqlParserRULE_uid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5832)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 845, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5829)
			p.SimpleId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5830)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5831)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	}

	return localctx
}

// ISimpleIdContext is an interface to support dynamic dispatch.
type ISimpleIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleIdContext differentiates from other interfaces.
	IsSimpleIdContext()
}

type SimpleIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleIdContext() *SimpleIdContext {
	var p = new(SimpleIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleId
	return p
}

func (*SimpleIdContext) IsSimpleIdContext() {}

func NewSimpleIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleIdContext {
	var p = new(SimpleIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleId

	return p
}

func (s *SimpleIdContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleIdContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *SimpleIdContext) CharsetNameBase() ICharsetNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameBaseContext)
}

func (s *SimpleIdContext) TransactionLevelBase() ITransactionLevelBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionLevelBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionLevelBaseContext)
}

func (s *SimpleIdContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *SimpleIdContext) PrivilegesBase() IPrivilegesBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegesBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegesBaseContext)
}

func (s *SimpleIdContext) IntervalTypeBase() IIntervalTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeBaseContext)
}

func (s *SimpleIdContext) DataTypeBase() IDataTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeBaseContext)
}

func (s *SimpleIdContext) KeywordsCanBeId() IKeywordsCanBeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordsCanBeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordsCanBeIdContext)
}

func (s *SimpleIdContext) FunctionNameBase() IFunctionNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameBaseContext)
}

func (s *SimpleIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleId(s)
	}
}

func (s *SimpleIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleId(s)
	}
}

func (p *MySqlParser) SimpleId() (localctx ISimpleIdContext) {
	localctx = NewSimpleIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, MySqlParserRULE_simpleId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 846, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5834)
			p.Match(MySqlParserID)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5835)
			p.CharsetNameBase()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5836)
			p.TransactionLevelBase()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5837)
			p.EngineName()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5838)
			p.PrivilegesBase()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5839)
			p.IntervalTypeBase()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5840)
			p.DataTypeBase()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5841)
			p.KeywordsCanBeId()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5842)
			p.FunctionNameBase()
		}

	}

	return localctx
}

// IDottedIdContext is an interface to support dynamic dispatch.
type IDottedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDottedIdContext differentiates from other interfaces.
	IsDottedIdContext()
}

type DottedIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDottedIdContext() *DottedIdContext {
	var p = new(DottedIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dottedId
	return p
}

func (*DottedIdContext) IsDottedIdContext() {}

func NewDottedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DottedIdContext {
	var p = new(DottedIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dottedId

	return p
}

func (s *DottedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *DottedIdContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *DottedIdContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DottedIdContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DottedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DottedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DottedIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDottedId(s)
	}
}

func (s *DottedIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDottedId(s)
	}
}

func (p *MySqlParser) DottedId() (localctx IDottedIdContext) {
	localctx = NewDottedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, MySqlParserRULE_dottedId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5848)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDOT_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5845)
			p.Match(MySqlParserDOT_ID)
		}

	case MySqlParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5846)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5847)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDecimalLiteralContext is an interface to support dynamic dispatch.
type IDecimalLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimalLiteralContext differentiates from other interfaces.
	IsDecimalLiteralContext()
}

type DecimalLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimalLiteralContext() *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimalLiteral
	return p
}

func (*DecimalLiteralContext) IsDecimalLiteralContext() {}

func NewDecimalLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimalLiteral

	return p
}

func (s *DecimalLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *DecimalLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL_LITERAL, 0)
}

func (s *DecimalLiteralContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *DecimalLiteralContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *DecimalLiteralContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *DecimalLiteralContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *DecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecimalLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDecimalLiteral(s)
	}
}

func (s *DecimalLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDecimalLiteral(s)
	}
}

func (p *MySqlParser) DecimalLiteral() (localctx IDecimalLiteralContext) {
	localctx = NewDecimalLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, MySqlParserRULE_decimalLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5850)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-1101)&-(0x1f+1)) == 0 && ((1<<uint((_la-1101)))&((1<<(MySqlParserZERO_DECIMAL-1101))|(1<<(MySqlParserONE_DECIMAL-1101))|(1<<(MySqlParserTWO_DECIMAL-1101))|(1<<(MySqlParserDECIMAL_LITERAL-1101))|(1<<(MySqlParserREAL_LITERAL-1101)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFileSizeLiteralContext is an interface to support dynamic dispatch.
type IFileSizeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileSizeLiteralContext differentiates from other interfaces.
	IsFileSizeLiteralContext()
}

type FileSizeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileSizeLiteralContext() *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fileSizeLiteral
	return p
}

func (*FileSizeLiteralContext) IsFileSizeLiteralContext() {}

func NewFileSizeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fileSizeLiteral

	return p
}

func (s *FileSizeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FileSizeLiteralContext) FILESIZE_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILESIZE_LITERAL, 0)
}

func (s *FileSizeLiteralContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *FileSizeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileSizeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileSizeLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFileSizeLiteral(s)
	}
}

func (s *FileSizeLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFileSizeLiteral(s)
	}
}

func (p *MySqlParser) FileSizeLiteral() (localctx IFileSizeLiteralContext) {
	localctx = NewFileSizeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, MySqlParserRULE_fileSizeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5854)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFILESIZE_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5852)
			p.Match(MySqlParserFILESIZE_LITERAL)
		}

	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL, MySqlParserREAL_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5853)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *StringLiteralContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *StringLiteralContext) START_NATIONAL_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART_NATIONAL_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *StringLiteralContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *StringLiteralContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStringLiteral(s)
	}
}

func (s *StringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStringLiteral(s)
	}
}

func (p *MySqlParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, MySqlParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5879)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 855, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5861)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5857)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5856)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5859)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5860)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5864)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5863)
					p.Match(MySqlParserSTRING_LITERAL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5866)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 851, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5873)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5869)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5868)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5871)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5872)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5877)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 854, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5875)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5876)
				p.CollationName()
			}

		}

	}

	return localctx
}

// IBooleanLiteralContext is an interface to support dynamic dispatch.
type IBooleanLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanLiteralContext differentiates from other interfaces.
	IsBooleanLiteralContext()
}

type BooleanLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanLiteralContext() *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_booleanLiteral
	return p
}

func (*BooleanLiteralContext) IsBooleanLiteralContext() {}

func NewBooleanLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_booleanLiteral

	return p
}

func (s *BooleanLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanLiteralContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *BooleanLiteralContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBooleanLiteral(s)
	}
}

func (s *BooleanLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBooleanLiteral(s)
	}
}

func (p *MySqlParser) BooleanLiteral() (localctx IBooleanLiteralContext) {
	localctx = NewBooleanLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, MySqlParserRULE_booleanLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5881)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IHexadecimalLiteralContext is an interface to support dynamic dispatch.
type IHexadecimalLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexadecimalLiteralContext differentiates from other interfaces.
	IsHexadecimalLiteralContext()
}

type HexadecimalLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexadecimalLiteralContext() *HexadecimalLiteralContext {
	var p = new(HexadecimalLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_hexadecimalLiteral
	return p
}

func (*HexadecimalLiteralContext) IsHexadecimalLiteralContext() {}

func NewHexadecimalLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexadecimalLiteralContext {
	var p = new(HexadecimalLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_hexadecimalLiteral

	return p
}

func (s *HexadecimalLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *HexadecimalLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, 0)
}

func (s *HexadecimalLiteralContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *HexadecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexadecimalLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexadecimalLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHexadecimalLiteral(s)
	}
}

func (s *HexadecimalLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHexadecimalLiteral(s)
	}
}

func (p *MySqlParser) HexadecimalLiteral() (localctx IHexadecimalLiteralContext) {
	localctx = NewHexadecimalLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, MySqlParserRULE_hexadecimalLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSTRING_CHARSET_NAME {
		{
			p.SetState(5883)
			p.Match(MySqlParserSTRING_CHARSET_NAME)
		}

	}
	{
		p.SetState(5886)
		p.Match(MySqlParserHEXADECIMAL_LITERAL)
	}

	return localctx
}

// INullNotnullContext is an interface to support dynamic dispatch.
type INullNotnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullNotnullContext differentiates from other interfaces.
	IsNullNotnullContext()
}

type NullNotnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullNotnullContext() *NullNotnullContext {
	var p = new(NullNotnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_nullNotnull
	return p
}

func (*NullNotnullContext) IsNullNotnullContext() {}

func NewNullNotnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullNotnullContext {
	var p = new(NullNotnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_nullNotnull

	return p
}

func (s *NullNotnullContext) GetParser() antlr.Parser { return s.parser }

func (s *NullNotnullContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *NullNotnullContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *NullNotnullContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *NullNotnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullNotnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullNotnullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNullNotnull(s)
	}
}

func (s *NullNotnullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNullNotnull(s)
	}
}

func (p *MySqlParser) NullNotnull() (localctx INullNotnullContext) {
	localctx = NewNullNotnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, MySqlParserRULE_nullNotnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNOT {
		{
			p.SetState(5888)
			p.Match(MySqlParserNOT)
		}

	}
	{
		p.SetState(5891)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNullLiteral returns the nullLiteral token.
	GetNullLiteral() antlr.Token

	// SetNullLiteral sets the nullLiteral token.
	SetNullLiteral(antlr.Token)

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	nullLiteral antlr.Token
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) GetNullLiteral() antlr.Token { return s.nullLiteral }

func (s *ConstantContext) SetNullLiteral(v antlr.Token) { s.nullLiteral = v }

func (s *ConstantContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ConstantContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ConstantContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *ConstantContext) HexadecimalLiteral() IHexadecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexadecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexadecimalLiteralContext)
}

func (s *ConstantContext) BooleanLiteral() IBooleanLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanLiteralContext)
}

func (s *ConstantContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *ConstantContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *ConstantContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *ConstantContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *ConstantContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (p *MySqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, MySqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5905)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 859, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5893)
			p.StringLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5894)
			p.DecimalLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5895)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5896)
			p.DecimalLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5897)
			p.HexadecimalLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5898)
			p.BooleanLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5899)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5900)
			p.Match(MySqlParserBIT_STRING)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(5902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(5901)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(5904)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConstantContext).nullLiteral = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConstantContext).nullLiteral = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDataTypeContext is an interface to support dynamic dispatch.
type IDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeContext differentiates from other interfaces.
	IsDataTypeContext()
}

type DataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeContext() *DataTypeContext {
	var p = new(DataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dataType
	return p
}

func (*DataTypeContext) IsDataTypeContext() {}

func NewDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeContext {
	var p = new(DataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dataType

	return p
}

func (s *DataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeContext) CopyFrom(ctx *DataTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *DataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpatialDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewSpatialDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpatialDataTypeContext {
	var p = new(SpatialDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *SpatialDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *SpatialDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *SpatialDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpatialDataTypeContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *SpatialDataTypeContext) GEOMCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLECTION, 0)
}

func (s *SpatialDataTypeContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *SpatialDataTypeContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *SpatialDataTypeContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *SpatialDataTypeContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *SpatialDataTypeContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *SpatialDataTypeContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *SpatialDataTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *SpatialDataTypeContext) GEOMETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRY, 0)
}

func (s *SpatialDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpatialDataType(s)
	}
}

func (s *SpatialDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpatialDataType(s)
	}
}

type LongVarbinaryDataTypeContext struct {
	*DataTypeContext
}

func NewLongVarbinaryDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LongVarbinaryDataTypeContext {
	var p = new(LongVarbinaryDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *LongVarbinaryDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LongVarbinaryDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *LongVarbinaryDataTypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARBINARY, 0)
}

func (s *LongVarbinaryDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLongVarbinaryDataType(s)
	}
}

func (s *LongVarbinaryDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLongVarbinaryDataType(s)
	}
}

type CollectionDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewCollectionDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollectionDataTypeContext {
	var p = new(CollectionDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *CollectionDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *CollectionDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *CollectionDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionDataTypeContext) CollectionOptions() ICollectionOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionOptionsContext)
}

func (s *CollectionDataTypeContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *CollectionDataTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *CollectionDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CollectionDataTypeContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *CollectionDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CollectionDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollectionDataType(s)
	}
}

func (s *CollectionDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollectionDataType(s)
	}
}

type NationalVaryingStringDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewNationalVaryingStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NationalVaryingStringDataTypeContext {
	var p = new(NationalVaryingStringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *NationalVaryingStringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *NationalVaryingStringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *NationalVaryingStringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NationalVaryingStringDataTypeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATIONAL, 0)
}

func (s *NationalVaryingStringDataTypeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARYING, 0)
}

func (s *NationalVaryingStringDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *NationalVaryingStringDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *NationalVaryingStringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *NationalVaryingStringDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *NationalVaryingStringDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNationalVaryingStringDataType(s)
	}
}

func (s *NationalVaryingStringDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNationalVaryingStringDataType(s)
	}
}

type DimensionDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewDimensionDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DimensionDataTypeContext {
	var p = new(DimensionDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *DimensionDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *DimensionDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *DimensionDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimensionDataTypeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYINT, 0)
}

func (s *DimensionDataTypeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSMALLINT, 0)
}

func (s *DimensionDataTypeContext) MEDIUMINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMINT, 0)
}

func (s *DimensionDataTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT, 0)
}

func (s *DimensionDataTypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *DimensionDataTypeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIGINT, 0)
}

func (s *DimensionDataTypeContext) MIDDLEINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIDDLEINT, 0)
}

func (s *DimensionDataTypeContext) INT1() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT1, 0)
}

func (s *DimensionDataTypeContext) INT2() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT2, 0)
}

func (s *DimensionDataTypeContext) INT3() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT3, 0)
}

func (s *DimensionDataTypeContext) INT4() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT4, 0)
}

func (s *DimensionDataTypeContext) INT8() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT8, 0)
}

func (s *DimensionDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *DimensionDataTypeContext) AllSIGNED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSIGNED)
}

func (s *DimensionDataTypeContext) SIGNED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, i)
}

func (s *DimensionDataTypeContext) AllUNSIGNED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserUNSIGNED)
}

func (s *DimensionDataTypeContext) UNSIGNED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, i)
}

func (s *DimensionDataTypeContext) AllZEROFILL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserZEROFILL)
}

func (s *DimensionDataTypeContext) ZEROFILL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserZEROFILL, i)
}

func (s *DimensionDataTypeContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *DimensionDataTypeContext) LengthTwoDimension() ILengthTwoDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoDimensionContext)
}

func (s *DimensionDataTypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOUBLE, 0)
}

func (s *DimensionDataTypeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECISION, 0)
}

func (s *DimensionDataTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *DimensionDataTypeContext) DEC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEC, 0)
}

func (s *DimensionDataTypeContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *DimensionDataTypeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMERIC, 0)
}

func (s *DimensionDataTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT, 0)
}

func (s *DimensionDataTypeContext) FLOAT4() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT4, 0)
}

func (s *DimensionDataTypeContext) FLOAT8() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT8, 0)
}

func (s *DimensionDataTypeContext) LengthTwoOptionalDimension() ILengthTwoOptionalDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoOptionalDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoOptionalDimensionContext)
}

func (s *DimensionDataTypeContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *DimensionDataTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *DimensionDataTypeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *DimensionDataTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *DimensionDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *DimensionDataTypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARBINARY, 0)
}

func (s *DimensionDataTypeContext) BLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOB, 0)
}

func (s *DimensionDataTypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *DimensionDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDimensionDataType(s)
	}
}

func (s *DimensionDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDimensionDataType(s)
	}
}

type StringDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringDataTypeContext {
	var p = new(StringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *StringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *StringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *StringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *StringDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *StringDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *StringDataTypeContext) TINYTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYTEXT, 0)
}

func (s *StringDataTypeContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *StringDataTypeContext) MEDIUMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMTEXT, 0)
}

func (s *StringDataTypeContext) LONGTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGTEXT, 0)
}

func (s *StringDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *StringDataTypeContext) NVARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNVARCHAR, 0)
}

func (s *StringDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *StringDataTypeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARYING, 0)
}

func (s *StringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *StringDataTypeContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBINARY)
}

func (s *StringDataTypeContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, i)
}

func (s *StringDataTypeContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *StringDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *StringDataTypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *StringDataTypeContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *StringDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStringDataType(s)
	}
}

func (s *StringDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStringDataType(s)
	}
}

type LongVarcharDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewLongVarcharDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LongVarcharDataTypeContext {
	var p = new(LongVarcharDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *LongVarcharDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *LongVarcharDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *LongVarcharDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LongVarcharDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *LongVarcharDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *LongVarcharDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *LongVarcharDataTypeContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *LongVarcharDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LongVarcharDataTypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *LongVarcharDataTypeContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *LongVarcharDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLongVarcharDataType(s)
	}
}

func (s *LongVarcharDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLongVarcharDataType(s)
	}
}

type NationalStringDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewNationalStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NationalStringDataTypeContext {
	var p = new(NationalStringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *NationalStringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *NationalStringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *NationalStringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NationalStringDataTypeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATIONAL, 0)
}

func (s *NationalStringDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *NationalStringDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *NationalStringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *NationalStringDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *NationalStringDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *NationalStringDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNationalStringDataType(s)
	}
}

func (s *NationalStringDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNationalStringDataType(s)
	}
}

type SimpleDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewSimpleDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleDataTypeContext {
	var p = new(SimpleDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *SimpleDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *SimpleDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *SimpleDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDataTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *SimpleDataTypeContext) TINYBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYBLOB, 0)
}

func (s *SimpleDataTypeContext) MEDIUMBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMBLOB, 0)
}

func (s *SimpleDataTypeContext) LONGBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGBLOB, 0)
}

func (s *SimpleDataTypeContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOL, 0)
}

func (s *SimpleDataTypeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOLEAN, 0)
}

func (s *SimpleDataTypeContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *SimpleDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleDataType(s)
	}
}

func (s *SimpleDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleDataType(s)
	}
}

func (p *MySqlParser) DataType() (localctx IDataTypeContext) {
	localctx = NewDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, MySqlParserRULE_dataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(6029)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 887, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5907)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*StringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || (((_la-213)&-(0x1f+1)) == 0 && ((1<<uint((_la-213)))&((1<<(MySqlParserCHAR-213))|(1<<(MySqlParserVARCHAR-213))|(1<<(MySqlParserNVARCHAR-213))|(1<<(MySqlParserLONG-213))|(1<<(MySqlParserTINYTEXT-213))|(1<<(MySqlParserTEXT-213))|(1<<(MySqlParserMEDIUMTEXT-213))|(1<<(MySqlParserLONGTEXT-213)))) != 0) || _la == MySqlParserNCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*StringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVARYING {
			{
				p.SetState(5908)
				p.Match(MySqlParserVARYING)
			}

		}
		p.SetState(5912)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 861, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5911)
				p.LengthOneDimension()
			}

		}
		p.SetState(5915)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 862, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5914)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(5920)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 863, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5917)
				p.CharSet()
			}
			{
				p.SetState(5918)
				p.CharsetName()
			}

		}
		p.SetState(5925)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 864, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5922)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5923)
				p.CollationName()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 864, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5924)
				p.Match(MySqlParserBINARY)
			}

		}

	case 2:
		localctx = NewNationalStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5927)
			p.Match(MySqlParserNATIONAL)
		}
		{
			p.SetState(5928)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NationalStringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || _la == MySqlParserVARCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NationalStringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5930)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 865, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5929)
				p.LengthOneDimension()
			}

		}
		p.SetState(5933)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 866, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5932)
				p.Match(MySqlParserBINARY)
			}

		}

	case 3:
		localctx = NewNationalStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5935)
			p.Match(MySqlParserNCHAR)
		}
		{
			p.SetState(5936)

			var _m = p.Match(MySqlParserVARCHAR)

			localctx.(*NationalStringDataTypeContext).typeName = _m
		}
		p.SetState(5938)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 867, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5937)
				p.LengthOneDimension()
			}

		}
		p.SetState(5941)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 868, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5940)
				p.Match(MySqlParserBINARY)
			}

		}

	case 4:
		localctx = NewNationalVaryingStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5943)
			p.Match(MySqlParserNATIONAL)
		}
		{
			p.SetState(5944)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NationalVaryingStringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || _la == MySqlParserCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NationalVaryingStringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5945)
			p.Match(MySqlParserVARYING)
		}
		p.SetState(5947)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 869, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5946)
				p.LengthOneDimension()
			}

		}
		p.SetState(5950)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 870, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5949)
				p.Match(MySqlParserBINARY)
			}

		}

	case 5:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5952)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-187)&-(0x1f+1)) == 0 && ((1<<uint((_la-187)))&((1<<(MySqlParserTINYINT-187))|(1<<(MySqlParserSMALLINT-187))|(1<<(MySqlParserMEDIUMINT-187))|(1<<(MySqlParserMIDDLEINT-187))|(1<<(MySqlParserINT-187))|(1<<(MySqlParserINT1-187))|(1<<(MySqlParserINT2-187))|(1<<(MySqlParserINT3-187))|(1<<(MySqlParserINT4-187))|(1<<(MySqlParserINT8-187))|(1<<(MySqlParserINTEGER-187))|(1<<(MySqlParserBIGINT-187)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5954)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 871, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5953)
				p.LengthOneDimension()
			}

		}
		p.SetState(5959)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 872, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5956)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserUNSIGNED || _la == MySqlParserZEROFILL || _la == MySqlParserSIGNED) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(5961)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 872, p.GetParserRuleContext())
		}

	case 6:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5962)

			var _m = p.Match(MySqlParserREAL)

			localctx.(*DimensionDataTypeContext).typeName = _m
		}
		p.SetState(5964)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 873, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5963)
				p.LengthTwoDimension()
			}

		}
		p.SetState(5969)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 874, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5966)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserUNSIGNED || _la == MySqlParserZEROFILL || _la == MySqlParserSIGNED) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(5971)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 874, p.GetParserRuleContext())
		}

	case 7:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5972)

			var _m = p.Match(MySqlParserDOUBLE)

			localctx.(*DimensionDataTypeContext).typeName = _m
		}
		p.SetState(5974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRECISION {
			{
				p.SetState(5973)
				p.Match(MySqlParserPRECISION)
			}

		}
		p.SetState(5977)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 876, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5976)
				p.LengthTwoDimension()
			}

		}
		p.SetState(5982)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 877, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5979)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserUNSIGNED || _la == MySqlParserZEROFILL || _la == MySqlParserSIGNED) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(5984)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 877, p.GetParserRuleContext())
		}

	case 8:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5985)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-202)&-(0x1f+1)) == 0 && ((1<<uint((_la-202)))&((1<<(MySqlParserFLOAT-202))|(1<<(MySqlParserFLOAT4-202))|(1<<(MySqlParserFLOAT8-202))|(1<<(MySqlParserDECIMAL-202))|(1<<(MySqlParserDEC-202))|(1<<(MySqlParserNUMERIC-202)))) != 0) || _la == MySqlParserFIXED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5987)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 878, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5986)
				p.LengthTwoOptionalDimension()
			}

		}
		p.SetState(5992)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 879, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5989)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserUNSIGNED || _la == MySqlParserZEROFILL || _la == MySqlParserSIGNED) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(5994)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 879, p.GetParserRuleContext())
		}

	case 9:
		localctx = NewSimpleDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5995)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SimpleDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTINYBLOB-208))|(1<<(MySqlParserMEDIUMBLOB-208))|(1<<(MySqlParserLONGBLOB-208))|(1<<(MySqlParserSERIAL-208)))) != 0) || _la == MySqlParserBOOL || _la == MySqlParserBOOLEAN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SimpleDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 10:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5996)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-209)&-(0x1f+1)) == 0 && ((1<<uint((_la-209)))&((1<<(MySqlParserTIME-209))|(1<<(MySqlParserTIMESTAMP-209))|(1<<(MySqlParserDATETIME-209))|(1<<(MySqlParserYEAR-209))|(1<<(MySqlParserBINARY-209))|(1<<(MySqlParserVARBINARY-209))|(1<<(MySqlParserBLOB-209)))) != 0) || _la == MySqlParserBIT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5998)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 880, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5997)
				p.LengthOneDimension()
			}

		}

	case 11:
		localctx = NewCollectionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6000)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CollectionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSET || _la == MySqlParserENUM) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CollectionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6001)
			p.CollectionOptions()
		}
		p.SetState(6003)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 881, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6002)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(6008)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 882, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6005)
				p.CharSet()
			}
			{
				p.SetState(6006)
				p.CharsetName()
			}

		}

	case 12:
		localctx = NewSpatialDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6010)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SpatialDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJSON || (((_la-768)&-(0x1f+1)) == 0 && ((1<<uint((_la-768)))&((1<<(MySqlParserGEOMETRYCOLLECTION-768))|(1<<(MySqlParserGEOMCOLLECTION-768))|(1<<(MySqlParserGEOMETRY-768))|(1<<(MySqlParserLINESTRING-768))|(1<<(MySqlParserMULTILINESTRING-768))|(1<<(MySqlParserMULTIPOINT-768))|(1<<(MySqlParserMULTIPOLYGON-768))|(1<<(MySqlParserPOINT-768))|(1<<(MySqlParserPOLYGON-768)))) != 0)) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SpatialDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 13:
		localctx = NewLongVarcharDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6011)

			var _m = p.Match(MySqlParserLONG)

			localctx.(*LongVarcharDataTypeContext).typeName = _m
		}
		p.SetState(6013)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVARCHAR {
			{
				p.SetState(6012)
				p.Match(MySqlParserVARCHAR)
			}

		}
		p.SetState(6016)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 884, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6015)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(6021)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 885, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6018)
				p.CharSet()
			}
			{
				p.SetState(6019)
				p.CharsetName()
			}

		}
		p.SetState(6025)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 886, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6023)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(6024)
				p.CollationName()
			}

		}

	case 14:
		localctx = NewLongVarbinaryDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6027)
			p.Match(MySqlParserLONG)
		}
		{
			p.SetState(6028)
			p.Match(MySqlParserVARBINARY)
		}

	}

	return localctx
}

// ICollectionOptionsContext is an interface to support dynamic dispatch.
type ICollectionOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionOptionsContext differentiates from other interfaces.
	IsCollectionOptionsContext()
}

type CollectionOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionOptionsContext() *CollectionOptionsContext {
	var p = new(CollectionOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_collectionOptions
	return p
}

func (*CollectionOptionsContext) IsCollectionOptionsContext() {}

func NewCollectionOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionOptionsContext {
	var p = new(CollectionOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_collectionOptions

	return p
}

func (s *CollectionOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionOptionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CollectionOptionsContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CollectionOptionsContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CollectionOptionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CollectionOptionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CollectionOptionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CollectionOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollectionOptions(s)
	}
}

func (s *CollectionOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollectionOptions(s)
	}
}

func (p *MySqlParser) CollectionOptions() (localctx ICollectionOptionsContext) {
	localctx = NewCollectionOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, MySqlParserRULE_collectionOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6031)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6032)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(6037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6033)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6034)
			p.Match(MySqlParserSTRING_LITERAL)
		}

		p.SetState(6039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6040)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IConvertedDataTypeContext is an interface to support dynamic dispatch.
type IConvertedDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTypeName returns the typeName token.
	GetTypeName() antlr.Token

	// SetTypeName sets the typeName token.
	SetTypeName(antlr.Token)

	// IsConvertedDataTypeContext differentiates from other interfaces.
	IsConvertedDataTypeContext()
}

type ConvertedDataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	typeName antlr.Token
}

func NewEmptyConvertedDataTypeContext() *ConvertedDataTypeContext {
	var p = new(ConvertedDataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_convertedDataType
	return p
}

func (*ConvertedDataTypeContext) IsConvertedDataTypeContext() {}

func NewConvertedDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConvertedDataTypeContext {
	var p = new(ConvertedDataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_convertedDataType

	return p
}

func (s *ConvertedDataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ConvertedDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *ConvertedDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *ConvertedDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *ConvertedDataTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *ConvertedDataTypeContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *ConvertedDataTypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, 0)
}

func (s *ConvertedDataTypeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserARRAY, 0)
}

func (s *ConvertedDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *ConvertedDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *ConvertedDataTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *ConvertedDataTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *ConvertedDataTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *ConvertedDataTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *ConvertedDataTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT, 0)
}

func (s *ConvertedDataTypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *ConvertedDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *ConvertedDataTypeContext) CharSet() ICharSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharSetContext)
}

func (s *ConvertedDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *ConvertedDataTypeContext) LengthTwoOptionalDimension() ILengthTwoOptionalDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoOptionalDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoOptionalDimensionContext)
}

func (s *ConvertedDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConvertedDataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConvertedDataTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConvertedDataType(s)
	}
}

func (s *ConvertedDataTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConvertedDataType(s)
	}
}

func (p *MySqlParser) ConvertedDataType() (localctx IConvertedDataTypeContext) {
	localctx = NewConvertedDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, MySqlParserRULE_convertedDataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6064)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserBINARY, MySqlParserNCHAR:
		{
			p.SetState(6042)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConvertedDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINARY || _la == MySqlParserNCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConvertedDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(6043)
				p.LengthOneDimension()
			}

		}

	case MySqlParserCHAR:
		{
			p.SetState(6046)

			var _m = p.Match(MySqlParserCHAR)

			localctx.(*ConvertedDataTypeContext).typeName = _m
		}
		p.SetState(6048)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(6047)
				p.LengthOneDimension()
			}

		}
		p.SetState(6053)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER || _la == MySqlParserCHAR || _la == MySqlParserCHARSET {
			{
				p.SetState(6050)
				p.CharSet()
			}
			{
				p.SetState(6051)
				p.CharsetName()
			}

		}

	case MySqlParserINT, MySqlParserINTEGER, MySqlParserDATE, MySqlParserTIME, MySqlParserDATETIME, MySqlParserJSON:
		{
			p.SetState(6055)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConvertedDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-191)&-(0x1f+1)) == 0 && ((1<<uint((_la-191)))&((1<<(MySqlParserINT-191))|(1<<(MySqlParserINTEGER-191))|(1<<(MySqlParserDATE-191))|(1<<(MySqlParserTIME-191))|(1<<(MySqlParserDATETIME-191)))) != 0) || _la == MySqlParserJSON) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConvertedDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserDECIMAL:
		{
			p.SetState(6056)

			var _m = p.Match(MySqlParserDECIMAL)

			localctx.(*ConvertedDataTypeContext).typeName = _m
		}
		p.SetState(6058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(6057)
				p.LengthTwoOptionalDimension()
			}

		}

	case MySqlParserUNSIGNED, MySqlParserSIGNED:
		{
			p.SetState(6060)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTEGER {
			{
				p.SetState(6061)
				p.Match(MySqlParserINTEGER)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6067)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserARRAY {
		{
			p.SetState(6066)
			p.Match(MySqlParserARRAY)
		}

	}

	return localctx
}

// ILengthOneDimensionContext is an interface to support dynamic dispatch.
type ILengthOneDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthOneDimensionContext differentiates from other interfaces.
	IsLengthOneDimensionContext()
}

type LengthOneDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthOneDimensionContext() *LengthOneDimensionContext {
	var p = new(LengthOneDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthOneDimension
	return p
}

func (*LengthOneDimensionContext) IsLengthOneDimensionContext() {}

func NewLengthOneDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthOneDimensionContext {
	var p = new(LengthOneDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthOneDimension

	return p
}

func (s *LengthOneDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthOneDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthOneDimensionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthOneDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthOneDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthOneDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthOneDimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLengthOneDimension(s)
	}
}

func (s *LengthOneDimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLengthOneDimension(s)
	}
}

func (p *MySqlParser) LengthOneDimension() (localctx ILengthOneDimensionContext) {
	localctx = NewLengthOneDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, MySqlParserRULE_lengthOneDimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6069)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6070)
		p.DecimalLiteral()
	}
	{
		p.SetState(6071)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILengthTwoDimensionContext is an interface to support dynamic dispatch.
type ILengthTwoDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthTwoDimensionContext differentiates from other interfaces.
	IsLengthTwoDimensionContext()
}

type LengthTwoDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthTwoDimensionContext() *LengthTwoDimensionContext {
	var p = new(LengthTwoDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthTwoDimension
	return p
}

func (*LengthTwoDimensionContext) IsLengthTwoDimensionContext() {}

func NewLengthTwoDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthTwoDimensionContext {
	var p = new(LengthTwoDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthTwoDimension

	return p
}

func (s *LengthTwoDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthTwoDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthTwoDimensionContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LengthTwoDimensionContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthTwoDimensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LengthTwoDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthTwoDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthTwoDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthTwoDimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLengthTwoDimension(s)
	}
}

func (s *LengthTwoDimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLengthTwoDimension(s)
	}
}

func (p *MySqlParser) LengthTwoDimension() (localctx ILengthTwoDimensionContext) {
	localctx = NewLengthTwoDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, MySqlParserRULE_lengthTwoDimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6073)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6074)
		p.DecimalLiteral()
	}
	{
		p.SetState(6075)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(6076)
		p.DecimalLiteral()
	}
	{
		p.SetState(6077)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILengthTwoOptionalDimensionContext is an interface to support dynamic dispatch.
type ILengthTwoOptionalDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthTwoOptionalDimensionContext differentiates from other interfaces.
	IsLengthTwoOptionalDimensionContext()
}

type LengthTwoOptionalDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthTwoOptionalDimensionContext() *LengthTwoOptionalDimensionContext {
	var p = new(LengthTwoOptionalDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthTwoOptionalDimension
	return p
}

func (*LengthTwoOptionalDimensionContext) IsLengthTwoOptionalDimensionContext() {}

func NewLengthTwoOptionalDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthTwoOptionalDimensionContext {
	var p = new(LengthTwoOptionalDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthTwoOptionalDimension

	return p
}

func (s *LengthTwoOptionalDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthTwoOptionalDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthTwoOptionalDimensionContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LengthTwoOptionalDimensionContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthTwoOptionalDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthTwoOptionalDimensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LengthTwoOptionalDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthTwoOptionalDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthTwoOptionalDimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLengthTwoOptionalDimension(s)
	}
}

func (s *LengthTwoOptionalDimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLengthTwoOptionalDimension(s)
	}
}

func (p *MySqlParser) LengthTwoOptionalDimension() (localctx ILengthTwoOptionalDimensionContext) {
	localctx = NewLengthTwoOptionalDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, MySqlParserRULE_lengthTwoOptionalDimension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6079)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6080)
		p.DecimalLiteral()
	}
	p.SetState(6083)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(6081)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6082)
			p.DecimalLiteral()
		}

	}
	{
		p.SetState(6085)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IUidListContext is an interface to support dynamic dispatch.
type IUidListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUidListContext differentiates from other interfaces.
	IsUidListContext()
}

type UidListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUidListContext() *UidListContext {
	var p = new(UidListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uidList
	return p
}

func (*UidListContext) IsUidListContext() {}

func NewUidListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UidListContext {
	var p = new(UidListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uidList

	return p
}

func (s *UidListContext) GetParser() antlr.Parser { return s.parser }

func (s *UidListContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *UidListContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UidListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *UidListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *UidListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UidListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UidListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUidList(s)
	}
}

func (s *UidListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUidList(s)
	}
}

func (p *MySqlParser) UidList() (localctx IUidListContext) {
	localctx = NewUidListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, MySqlParserRULE_uidList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6087)
		p.Uid()
	}
	p.SetState(6092)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 897, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6088)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6089)
				p.Uid()
			}

		}
		p.SetState(6094)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 897, p.GetParserRuleContext())
	}

	return localctx
}

// ITablesContext is an interface to support dynamic dispatch.
type ITablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablesContext differentiates from other interfaces.
	IsTablesContext()
}

type TablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablesContext() *TablesContext {
	var p = new(TablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tables
	return p
}

func (*TablesContext) IsTablesContext() {}

func NewTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablesContext {
	var p = new(TablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tables

	return p
}

func (s *TablesContext) GetParser() antlr.Parser { return s.parser }

func (s *TablesContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TablesContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *TablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *TablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTables(s)
	}
}

func (s *TablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTables(s)
	}
}

func (p *MySqlParser) Tables() (localctx ITablesContext) {
	localctx = NewTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, MySqlParserRULE_tables)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6095)
		p.TableName()
	}
	p.SetState(6100)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 898, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6096)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6097)
				p.TableName()
			}

		}
		p.SetState(6102)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 898, p.GetParserRuleContext())
	}

	return localctx
}

// IIndexColumnNamesContext is an interface to support dynamic dispatch.
type IIndexColumnNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexColumnNamesContext differentiates from other interfaces.
	IsIndexColumnNamesContext()
}

type IndexColumnNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexColumnNamesContext() *IndexColumnNamesContext {
	var p = new(IndexColumnNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnNames
	return p
}

func (*IndexColumnNamesContext) IsIndexColumnNamesContext() {}

func NewIndexColumnNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnNamesContext {
	var p = new(IndexColumnNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnNames

	return p
}

func (s *IndexColumnNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnNamesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexColumnNamesContext) AllIndexColumnName() []IIndexColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexColumnNameContext)(nil)).Elem())
	var tst = make([]IIndexColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexColumnNameContext)
		}
	}

	return tst
}

func (s *IndexColumnNamesContext) IndexColumnName(i int) IIndexColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNameContext)
}

func (s *IndexColumnNamesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexColumnNamesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *IndexColumnNamesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *IndexColumnNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexColumnNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexColumnNames(s)
	}
}

func (s *IndexColumnNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexColumnNames(s)
	}
}

func (p *MySqlParser) IndexColumnNames() (localctx IIndexColumnNamesContext) {
	localctx = NewIndexColumnNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, MySqlParserRULE_indexColumnNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6103)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6104)
		p.IndexColumnName()
	}
	p.SetState(6109)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6105)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6106)
			p.IndexColumnName()
		}

		p.SetState(6111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6112)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ExpressionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpressions(s)
	}
}

func (s *ExpressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpressions(s)
	}
}

func (p *MySqlParser) Expressions() (localctx IExpressionsContext) {
	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, MySqlParserRULE_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6114)
		p.expression(0)
	}
	p.SetState(6119)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6115)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6116)
			p.expression(0)
		}

		p.SetState(6121)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpressionsWithDefaultsContext is an interface to support dynamic dispatch.
type IExpressionsWithDefaultsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsWithDefaultsContext differentiates from other interfaces.
	IsExpressionsWithDefaultsContext()
}

type ExpressionsWithDefaultsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsWithDefaultsContext() *ExpressionsWithDefaultsContext {
	var p = new(ExpressionsWithDefaultsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionsWithDefaults
	return p
}

func (*ExpressionsWithDefaultsContext) IsExpressionsWithDefaultsContext() {}

func NewExpressionsWithDefaultsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsWithDefaultsContext {
	var p = new(ExpressionsWithDefaultsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionsWithDefaults

	return p
}

func (s *ExpressionsWithDefaultsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsWithDefaultsContext) AllExpressionOrDefault() []IExpressionOrDefaultContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionOrDefaultContext)(nil)).Elem())
	var tst = make([]IExpressionOrDefaultContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionOrDefaultContext)
		}
	}

	return tst
}

func (s *ExpressionsWithDefaultsContext) ExpressionOrDefault(i int) IExpressionOrDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionOrDefaultContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionOrDefaultContext)
}

func (s *ExpressionsWithDefaultsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ExpressionsWithDefaultsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ExpressionsWithDefaultsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsWithDefaultsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsWithDefaultsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpressionsWithDefaults(s)
	}
}

func (s *ExpressionsWithDefaultsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpressionsWithDefaults(s)
	}
}

func (p *MySqlParser) ExpressionsWithDefaults() (localctx IExpressionsWithDefaultsContext) {
	localctx = NewExpressionsWithDefaultsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, MySqlParserRULE_expressionsWithDefaults)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6122)
		p.ExpressionOrDefault()
	}
	p.SetState(6127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6123)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6124)
			p.ExpressionOrDefault()
		}

		p.SetState(6129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConstantsContext is an interface to support dynamic dispatch.
type IConstantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantsContext differentiates from other interfaces.
	IsConstantsContext()
}

type ConstantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantsContext() *ConstantsContext {
	var p = new(ConstantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constants
	return p
}

func (*ConstantsContext) IsConstantsContext() {}

func NewConstantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantsContext {
	var p = new(ConstantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constants

	return p
}

func (s *ConstantsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantsContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *ConstantsContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ConstantsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ConstantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstants(s)
	}
}

func (s *ConstantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstants(s)
	}
}

func (p *MySqlParser) Constants() (localctx IConstantsContext) {
	localctx = NewConstantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, MySqlParserRULE_constants)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6130)
		p.Constant()
	}
	p.SetState(6135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6131)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6132)
			p.Constant()
		}

		p.SetState(6137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISimpleStringsContext is an interface to support dynamic dispatch.
type ISimpleStringsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStringsContext differentiates from other interfaces.
	IsSimpleStringsContext()
}

type SimpleStringsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStringsContext() *SimpleStringsContext {
	var p = new(SimpleStringsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleStrings
	return p
}

func (*SimpleStringsContext) IsSimpleStringsContext() {}

func NewSimpleStringsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStringsContext {
	var p = new(SimpleStringsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleStrings

	return p
}

func (s *SimpleStringsContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStringsContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *SimpleStringsContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *SimpleStringsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SimpleStringsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SimpleStringsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStringsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStringsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleStrings(s)
	}
}

func (s *SimpleStringsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleStrings(s)
	}
}

func (p *MySqlParser) SimpleStrings() (localctx ISimpleStringsContext) {
	localctx = NewSimpleStringsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, MySqlParserRULE_simpleStrings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6138)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(6143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6139)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6140)
			p.Match(MySqlParserSTRING_LITERAL)
		}

		p.SetState(6145)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUserVariablesContext is an interface to support dynamic dispatch.
type IUserVariablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserVariablesContext differentiates from other interfaces.
	IsUserVariablesContext()
}

type UserVariablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserVariablesContext() *UserVariablesContext {
	var p = new(UserVariablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userVariables
	return p
}

func (*UserVariablesContext) IsUserVariablesContext() {}

func NewUserVariablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserVariablesContext {
	var p = new(UserVariablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userVariables

	return p
}

func (s *UserVariablesContext) GetParser() antlr.Parser { return s.parser }

func (s *UserVariablesContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCAL_ID)
}

func (s *UserVariablesContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, i)
}

func (s *UserVariablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *UserVariablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *UserVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserVariablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserVariablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUserVariables(s)
	}
}

func (s *UserVariablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUserVariables(s)
	}
}

func (p *MySqlParser) UserVariables() (localctx IUserVariablesContext) {
	localctx = NewUserVariablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, MySqlParserRULE_userVariables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6146)
		p.Match(MySqlParserLOCAL_ID)
	}
	p.SetState(6151)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6147)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6148)
			p.Match(MySqlParserLOCAL_ID)
		}

		p.SetState(6153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDefaultValueContext is an interface to support dynamic dispatch.
type IDefaultValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultValueContext differentiates from other interfaces.
	IsDefaultValueContext()
}

type DefaultValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultValueContext() *DefaultValueContext {
	var p = new(DefaultValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_defaultValue
	return p
}

func (*DefaultValueContext) IsDefaultValueContext() {}

func NewDefaultValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueContext {
	var p = new(DefaultValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_defaultValue

	return p
}

func (s *DefaultValueContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *DefaultValueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *DefaultValueContext) AllCurrentTimestamp() []ICurrentTimestampContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem())
	var tst = make([]ICurrentTimestampContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICurrentTimestampContext)
		}
	}

	return tst
}

func (s *DefaultValueContext) CurrentTimestamp(i int) ICurrentTimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICurrentTimestampContext)
}

func (s *DefaultValueContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DefaultValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DefaultValueContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DefaultValueContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DefaultValueContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *DefaultValueContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *DefaultValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefaultValue(s)
	}
}

func (s *DefaultValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefaultValue(s)
	}
}

func (p *MySqlParser) DefaultValue() (localctx IDefaultValueContext) {
	localctx = NewDefaultValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, MySqlParserRULE_defaultValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 906, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6154)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case 2:
		p.SetState(6156)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 905, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6155)
				p.UnaryOperator()
			}

		}
		{
			p.SetState(6158)
			p.Constant()
		}

	case 3:
		{
			p.SetState(6159)
			p.CurrentTimestamp()
		}

	case 4:
		{
			p.SetState(6160)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6161)
			p.expression(0)
		}
		{
			p.SetState(6162)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(6169)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 907, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6166)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(6167)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(6168)
			p.CurrentTimestamp()
		}

	}

	return localctx
}

// ICurrentTimestampContext is an interface to support dynamic dispatch.
type ICurrentTimestampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCurrentTimestampContext differentiates from other interfaces.
	IsCurrentTimestampContext()
}

type CurrentTimestampContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCurrentTimestampContext() *CurrentTimestampContext {
	var p = new(CurrentTimestampContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_currentTimestamp
	return p
}

func (*CurrentTimestampContext) IsCurrentTimestampContext() {}

func NewCurrentTimestampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CurrentTimestampContext {
	var p = new(CurrentTimestampContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_currentTimestamp

	return p
}

func (s *CurrentTimestampContext) GetParser() antlr.Parser { return s.parser }

func (s *CurrentTimestampContext) NOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOW, 0)
}

func (s *CurrentTimestampContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CurrentTimestampContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CurrentTimestampContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *CurrentTimestampContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *CurrentTimestampContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIMESTAMP, 0)
}

func (s *CurrentTimestampContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *CurrentTimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentTimestampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CurrentTimestampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCurrentTimestamp(s)
	}
}

func (s *CurrentTimestampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCurrentTimestamp(s)
	}
}

func (p *MySqlParser) CurrentTimestamp() (localctx ICurrentTimestampContext) {
	localctx = NewCurrentTimestampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, MySqlParserRULE_currentTimestamp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6185)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT_TIMESTAMP, MySqlParserLOCALTIME, MySqlParserLOCALTIMESTAMP:
		{
			p.SetState(6171)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-303)&-(0x1f+1)) == 0 && ((1<<uint((_la-303)))&((1<<(MySqlParserCURRENT_TIMESTAMP-303))|(1<<(MySqlParserLOCALTIME-303))|(1<<(MySqlParserLOCALTIMESTAMP-303)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6177)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 909, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6172)
				p.Match(MySqlParserLR_BRACKET)
			}
			p.SetState(6174)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la-1101)&-(0x1f+1)) == 0 && ((1<<uint((_la-1101)))&((1<<(MySqlParserZERO_DECIMAL-1101))|(1<<(MySqlParserONE_DECIMAL-1101))|(1<<(MySqlParserTWO_DECIMAL-1101))|(1<<(MySqlParserDECIMAL_LITERAL-1101))|(1<<(MySqlParserREAL_LITERAL-1101)))) != 0 {
				{
					p.SetState(6173)
					p.DecimalLiteral()
				}

			}
			{
				p.SetState(6176)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case MySqlParserNOW:
		{
			p.SetState(6179)
			p.Match(MySqlParserNOW)
		}
		{
			p.SetState(6180)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-1101)&-(0x1f+1)) == 0 && ((1<<uint((_la-1101)))&((1<<(MySqlParserZERO_DECIMAL-1101))|(1<<(MySqlParserONE_DECIMAL-1101))|(1<<(MySqlParserTWO_DECIMAL-1101))|(1<<(MySqlParserDECIMAL_LITERAL-1101))|(1<<(MySqlParserREAL_LITERAL-1101)))) != 0 {
			{
				p.SetState(6181)
				p.DecimalLiteral()
			}

		}
		{
			p.SetState(6184)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionOrDefaultContext is an interface to support dynamic dispatch.
type IExpressionOrDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionOrDefaultContext differentiates from other interfaces.
	IsExpressionOrDefaultContext()
}

type ExpressionOrDefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionOrDefaultContext() *ExpressionOrDefaultContext {
	var p = new(ExpressionOrDefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionOrDefault
	return p
}

func (*ExpressionOrDefaultContext) IsExpressionOrDefaultContext() {}

func NewExpressionOrDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionOrDefaultContext {
	var p = new(ExpressionOrDefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionOrDefault

	return p
}

func (s *ExpressionOrDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionOrDefaultContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionOrDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *ExpressionOrDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionOrDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionOrDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpressionOrDefault(s)
	}
}

func (s *ExpressionOrDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpressionOrDefault(s)
	}
}

func (p *MySqlParser) ExpressionOrDefault() (localctx IExpressionOrDefaultContext) {
	localctx = NewExpressionOrDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, MySqlParserRULE_expressionOrDefault)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6189)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 912, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6187)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6188)
			p.Match(MySqlParserDEFAULT)
		}

	}

	return localctx
}

// IIfExistsContext is an interface to support dynamic dispatch.
type IIfExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfExistsContext differentiates from other interfaces.
	IsIfExistsContext()
}

type IfExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfExistsContext() *IfExistsContext {
	var p = new(IfExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifExists
	return p
}

func (*IfExistsContext) IsIfExistsContext() {}

func NewIfExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfExistsContext {
	var p = new(IfExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifExists

	return p
}

func (s *IfExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfExistsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *IfExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *IfExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfExistsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIfExists(s)
	}
}

func (s *IfExistsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIfExists(s)
	}
}

func (p *MySqlParser) IfExists() (localctx IIfExistsContext) {
	localctx = NewIfExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, MySqlParserRULE_ifExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6191)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(6192)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IIfNotExistsContext is an interface to support dynamic dispatch.
type IIfNotExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfNotExistsContext differentiates from other interfaces.
	IsIfNotExistsContext()
}

type IfNotExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfNotExistsContext() *IfNotExistsContext {
	var p = new(IfNotExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifNotExists
	return p
}

func (*IfNotExistsContext) IsIfNotExistsContext() {}

func NewIfNotExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfNotExistsContext {
	var p = new(IfNotExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifNotExists

	return p
}

func (s *IfNotExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfNotExistsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *IfNotExistsContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IfNotExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *IfNotExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfNotExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfNotExistsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIfNotExists(s)
	}
}

func (s *IfNotExistsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIfNotExists(s)
	}
}

func (p *MySqlParser) IfNotExists() (localctx IIfNotExistsContext) {
	localctx = NewIfNotExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, MySqlParserRULE_ifNotExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6194)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(6195)
		p.Match(MySqlParserNOT)
	}
	{
		p.SetState(6196)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) CopyFrom(ctx *FunctionCallContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecificFunctionCallContext struct {
	*FunctionCallContext
}

func NewSpecificFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecificFunctionCallContext {
	var p = new(SpecificFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *SpecificFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificFunctionCallContext) SpecificFunction() ISpecificFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecificFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecificFunctionContext)
}

func (s *SpecificFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpecificFunctionCall(s)
	}
}

func (s *SpecificFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpecificFunctionCall(s)
	}
}

type PasswordFunctionCallContext struct {
	*FunctionCallContext
}

func NewPasswordFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordFunctionCallContext {
	var p = new(PasswordFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *PasswordFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordFunctionCallContext) PasswordFunctionClause() IPasswordFunctionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPasswordFunctionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPasswordFunctionClauseContext)
}

func (s *PasswordFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPasswordFunctionCall(s)
	}
}

func (s *PasswordFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPasswordFunctionCall(s)
	}
}

type UdfFunctionCallContext struct {
	*FunctionCallContext
}

func NewUdfFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UdfFunctionCallContext {
	var p = new(UdfFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *UdfFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdfFunctionCallContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *UdfFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *UdfFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *UdfFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *UdfFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUdfFunctionCall(s)
	}
}

func (s *UdfFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUdfFunctionCall(s)
	}
}

type NonAggregateFunctionCallContext struct {
	*FunctionCallContext
}

func NewNonAggregateFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NonAggregateFunctionCallContext {
	var p = new(NonAggregateFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *NonAggregateFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonAggregateFunctionCallContext) NonAggregateWindowedFunction() INonAggregateWindowedFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonAggregateWindowedFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonAggregateWindowedFunctionContext)
}

func (s *NonAggregateFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNonAggregateFunctionCall(s)
	}
}

func (s *NonAggregateFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNonAggregateFunctionCall(s)
	}
}

type AggregateFunctionCallContext struct {
	*FunctionCallContext
}

func NewAggregateFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AggregateFunctionCallContext {
	var p = new(AggregateFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *AggregateFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateFunctionCallContext) AggregateWindowedFunction() IAggregateWindowedFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregateWindowedFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregateWindowedFunctionContext)
}

func (s *AggregateFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAggregateFunctionCall(s)
	}
}

func (s *AggregateFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAggregateFunctionCall(s)
	}
}

type ScalarFunctionCallContext struct {
	*FunctionCallContext
}

func NewScalarFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ScalarFunctionCallContext {
	var p = new(ScalarFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *ScalarFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarFunctionCallContext) ScalarFunctionName() IScalarFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalarFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalarFunctionNameContext)
}

func (s *ScalarFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ScalarFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ScalarFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *ScalarFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterScalarFunctionCall(s)
	}
}

func (s *ScalarFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitScalarFunctionCall(s)
	}
}

func (p *MySqlParser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, MySqlParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6216)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 915, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSpecificFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6198)
			p.SpecificFunction()
		}

	case 2:
		localctx = NewAggregateFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6199)
			p.AggregateWindowedFunction()
		}

	case 3:
		localctx = NewNonAggregateFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6200)
			p.NonAggregateWindowedFunction()
		}

	case 4:
		localctx = NewScalarFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6201)
			p.ScalarFunctionName()
		}
		{
			p.SetState(6202)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6204)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 913, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6203)
				p.FunctionArgs()
			}

		}
		{
			p.SetState(6206)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewUdfFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6208)
			p.FullId()
		}
		{
			p.SetState(6209)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6211)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 914, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6210)
				p.FunctionArgs()
			}

		}
		{
			p.SetState(6213)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewPasswordFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6215)
			p.PasswordFunctionClause()
		}

	}

	return localctx
}

// ISpecificFunctionContext is an interface to support dynamic dispatch.
type ISpecificFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecificFunctionContext differentiates from other interfaces.
	IsSpecificFunctionContext()
}

type SpecificFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecificFunctionContext() *SpecificFunctionContext {
	var p = new(SpecificFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_specificFunction
	return p
}

func (*SpecificFunctionContext) IsSpecificFunctionContext() {}

func NewSpecificFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecificFunctionContext {
	var p = new(SpecificFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_specificFunction

	return p
}

func (s *SpecificFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecificFunctionContext) CopyFrom(ctx *SpecificFunctionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SpecificFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PositionFunctionCallContext struct {
	*SpecificFunctionContext
	positionString     IStringLiteralContext
	positionExpression IExpressionContext
	inString           IStringLiteralContext
	inExpression       IExpressionContext
}

func NewPositionFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionFunctionCallContext {
	var p = new(PositionFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *PositionFunctionCallContext) GetPositionString() IStringLiteralContext {
	return s.positionString
}

func (s *PositionFunctionCallContext) GetPositionExpression() IExpressionContext {
	return s.positionExpression
}

func (s *PositionFunctionCallContext) GetInString() IStringLiteralContext { return s.inString }

func (s *PositionFunctionCallContext) GetInExpression() IExpressionContext { return s.inExpression }

func (s *PositionFunctionCallContext) SetPositionString(v IStringLiteralContext) {
	s.positionString = v
}

func (s *PositionFunctionCallContext) SetPositionExpression(v IExpressionContext) {
	s.positionExpression = v
}

func (s *PositionFunctionCallContext) SetInString(v IStringLiteralContext) { s.inString = v }

func (s *PositionFunctionCallContext) SetInExpression(v IExpressionContext) { s.inExpression = v }

func (s *PositionFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionFunctionCallContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *PositionFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PositionFunctionCallContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PositionFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PositionFunctionCallContext) AllStringLiteral() []IStringLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem())
	var tst = make([]IStringLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringLiteralContext)
		}
	}

	return tst
}

func (s *PositionFunctionCallContext) StringLiteral(i int) IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *PositionFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PositionFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PositionFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPositionFunctionCall(s)
	}
}

func (s *PositionFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPositionFunctionCall(s)
	}
}

type TrimFunctionCallContext struct {
	*SpecificFunctionContext
	positioinForm    antlr.Token
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
	fromString       IStringLiteralContext
	fromExpression   IExpressionContext
}

func NewTrimFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TrimFunctionCallContext {
	var p = new(TrimFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *TrimFunctionCallContext) GetPositioinForm() antlr.Token { return s.positioinForm }

func (s *TrimFunctionCallContext) SetPositioinForm(v antlr.Token) { s.positioinForm = v }

func (s *TrimFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *TrimFunctionCallContext) GetSourceExpression() IExpressionContext { return s.sourceExpression }

func (s *TrimFunctionCallContext) GetFromString() IStringLiteralContext { return s.fromString }

func (s *TrimFunctionCallContext) GetFromExpression() IExpressionContext { return s.fromExpression }

func (s *TrimFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *TrimFunctionCallContext) SetSourceExpression(v IExpressionContext) { s.sourceExpression = v }

func (s *TrimFunctionCallContext) SetFromString(v IStringLiteralContext) { s.fromString = v }

func (s *TrimFunctionCallContext) SetFromExpression(v IExpressionContext) { s.fromExpression = v }

func (s *TrimFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrimFunctionCallContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *TrimFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TrimFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *TrimFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TrimFunctionCallContext) BOTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOTH, 0)
}

func (s *TrimFunctionCallContext) LEADING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEADING, 0)
}

func (s *TrimFunctionCallContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRAILING, 0)
}

func (s *TrimFunctionCallContext) AllStringLiteral() []IStringLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem())
	var tst = make([]IStringLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringLiteralContext)
		}
	}

	return tst
}

func (s *TrimFunctionCallContext) StringLiteral(i int) IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *TrimFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TrimFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TrimFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTrimFunctionCall(s)
	}
}

func (s *TrimFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTrimFunctionCall(s)
	}
}

type JsonValueFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewJsonValueFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonValueFunctionCallContext {
	var p = new(JsonValueFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *JsonValueFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonValueFunctionCallContext) JSON_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALUE, 0)
}

func (s *JsonValueFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *JsonValueFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *JsonValueFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JsonValueFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *JsonValueFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *JsonValueFunctionCallContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNING, 0)
}

func (s *JsonValueFunctionCallContext) ConvertedDataType() IConvertedDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConvertedDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConvertedDataTypeContext)
}

func (s *JsonValueFunctionCallContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *JsonValueFunctionCallContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *JsonValueFunctionCallContext) EMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEMPTY, 0)
}

func (s *JsonValueFunctionCallContext) AllERROR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserERROR)
}

func (s *JsonValueFunctionCallContext) ERROR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, i)
}

func (s *JsonValueFunctionCallContext) AllNULL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNULL_LITERAL)
}

func (s *JsonValueFunctionCallContext) NULL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, i)
}

func (s *JsonValueFunctionCallContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *JsonValueFunctionCallContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *JsonValueFunctionCallContext) AllDefaultValue() []IDefaultValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem())
	var tst = make([]IDefaultValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDefaultValueContext)
		}
	}

	return tst
}

func (s *JsonValueFunctionCallContext) DefaultValue(i int) IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *JsonValueFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterJsonValueFunctionCall(s)
	}
}

func (s *JsonValueFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitJsonValueFunctionCall(s)
	}
}

type CaseFunctionCallContext struct {
	*SpecificFunctionContext
	elseArg IFunctionArgContext
}

func NewCaseFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CaseFunctionCallContext {
	var p = new(CaseFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CaseFunctionCallContext) GetElseArg() IFunctionArgContext { return s.elseArg }

func (s *CaseFunctionCallContext) SetElseArg(v IFunctionArgContext) { s.elseArg = v }

func (s *CaseFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseFunctionCallContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, 0)
}

func (s *CaseFunctionCallContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseFunctionCallContext) AllCaseFuncAlternative() []ICaseFuncAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseFuncAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseFuncAlternativeContext)
		}
	}

	return tst
}

func (s *CaseFunctionCallContext) CaseFuncAlternative(i int) ICaseFuncAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseFuncAlternativeContext)
}

func (s *CaseFunctionCallContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseFunctionCallContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseFunctionCall(s)
	}
}

func (s *CaseFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseFunctionCall(s)
	}
}

type ExtractFunctionCallContext struct {
	*SpecificFunctionContext
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
}

func NewExtractFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExtractFunctionCallContext {
	var p = new(ExtractFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *ExtractFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *ExtractFunctionCallContext) GetSourceExpression() IExpressionContext {
	return s.sourceExpression
}

func (s *ExtractFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *ExtractFunctionCallContext) SetSourceExpression(v IExpressionContext) {
	s.sourceExpression = v
}

func (s *ExtractFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractFunctionCallContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACT, 0)
}

func (s *ExtractFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ExtractFunctionCallContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *ExtractFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ExtractFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ExtractFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ExtractFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExtractFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExtractFunctionCall(s)
	}
}

func (s *ExtractFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExtractFunctionCall(s)
	}
}

type DataTypeFunctionCallContext struct {
	*SpecificFunctionContext
	separator antlr.Token
}

func NewDataTypeFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DataTypeFunctionCallContext {
	var p = new(DataTypeFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *DataTypeFunctionCallContext) GetSeparator() antlr.Token { return s.separator }

func (s *DataTypeFunctionCallContext) SetSeparator(v antlr.Token) { s.separator = v }

func (s *DataTypeFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeFunctionCallContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *DataTypeFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DataTypeFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DataTypeFunctionCallContext) ConvertedDataType() IConvertedDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConvertedDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConvertedDataTypeContext)
}

func (s *DataTypeFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DataTypeFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *DataTypeFunctionCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *DataTypeFunctionCallContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *DataTypeFunctionCallContext) CAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCAST, 0)
}

func (s *DataTypeFunctionCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *DataTypeFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDataTypeFunctionCall(s)
	}
}

func (s *DataTypeFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDataTypeFunctionCall(s)
	}
}

type ValuesFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewValuesFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValuesFunctionCallContext {
	var p = new(ValuesFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *ValuesFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesFunctionCallContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *ValuesFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ValuesFunctionCallContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *ValuesFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ValuesFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterValuesFunctionCall(s)
	}
}

func (s *ValuesFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitValuesFunctionCall(s)
	}
}

type CaseExpressionFunctionCallContext struct {
	*SpecificFunctionContext
	elseArg IFunctionArgContext
}

func NewCaseExpressionFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CaseExpressionFunctionCallContext {
	var p = new(CaseExpressionFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CaseExpressionFunctionCallContext) GetElseArg() IFunctionArgContext { return s.elseArg }

func (s *CaseExpressionFunctionCallContext) SetElseArg(v IFunctionArgContext) { s.elseArg = v }

func (s *CaseExpressionFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionFunctionCallContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, 0)
}

func (s *CaseExpressionFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExpressionFunctionCallContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseExpressionFunctionCallContext) AllCaseFuncAlternative() []ICaseFuncAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseFuncAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseFuncAlternativeContext)
		}
	}

	return tst
}

func (s *CaseExpressionFunctionCallContext) CaseFuncAlternative(i int) ICaseFuncAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseFuncAlternativeContext)
}

func (s *CaseExpressionFunctionCallContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseExpressionFunctionCallContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseExpressionFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseExpressionFunctionCall(s)
	}
}

func (s *CaseExpressionFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseExpressionFunctionCall(s)
	}
}

type SimpleFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewSimpleFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleFunctionCallContext {
	var p = new(SimpleFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *SimpleFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleFunctionCallContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *SimpleFunctionCallContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *SimpleFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SimpleFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SimpleFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleFunctionCall(s)
	}
}

func (s *SimpleFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleFunctionCall(s)
	}
}

type CharFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewCharFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharFunctionCallContext {
	var p = new(CharFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CharFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharFunctionCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *CharFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CharFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *CharFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CharFunctionCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *CharFunctionCallContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CharFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharFunctionCall(s)
	}
}

func (s *CharFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharFunctionCall(s)
	}
}

type WeightFunctionCallContext struct {
	*SpecificFunctionContext
	stringFormat antlr.Token
}

func NewWeightFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WeightFunctionCallContext {
	var p = new(WeightFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *WeightFunctionCallContext) GetStringFormat() antlr.Token { return s.stringFormat }

func (s *WeightFunctionCallContext) SetStringFormat(v antlr.Token) { s.stringFormat = v }

func (s *WeightFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WeightFunctionCallContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *WeightFunctionCallContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *WeightFunctionCallContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *WeightFunctionCallContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *WeightFunctionCallContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *WeightFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *WeightFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WeightFunctionCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *WeightFunctionCallContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *WeightFunctionCallContext) LevelsInWeightString() ILevelsInWeightStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelsInWeightStringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevelsInWeightStringContext)
}

func (s *WeightFunctionCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *WeightFunctionCallContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *WeightFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWeightFunctionCall(s)
	}
}

func (s *WeightFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWeightFunctionCall(s)
	}
}

type GetFormatFunctionCallContext struct {
	*SpecificFunctionContext
	datetimeFormat antlr.Token
}

func NewGetFormatFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GetFormatFunctionCallContext {
	var p = new(GetFormatFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *GetFormatFunctionCallContext) GetDatetimeFormat() antlr.Token { return s.datetimeFormat }

func (s *GetFormatFunctionCallContext) SetDatetimeFormat(v antlr.Token) { s.datetimeFormat = v }

func (s *GetFormatFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetFormatFunctionCallContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *GetFormatFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *GetFormatFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *GetFormatFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *GetFormatFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *GetFormatFunctionCallContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *GetFormatFunctionCallContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *GetFormatFunctionCallContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *GetFormatFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGetFormatFunctionCall(s)
	}
}

func (s *GetFormatFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGetFormatFunctionCall(s)
	}
}

type SubstrFunctionCallContext struct {
	*SpecificFunctionContext
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
	fromDecimal      IDecimalLiteralContext
	fromExpression   IExpressionContext
	forDecimal       IDecimalLiteralContext
	forExpression    IExpressionContext
}

func NewSubstrFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstrFunctionCallContext {
	var p = new(SubstrFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *SubstrFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *SubstrFunctionCallContext) GetSourceExpression() IExpressionContext {
	return s.sourceExpression
}

func (s *SubstrFunctionCallContext) GetFromDecimal() IDecimalLiteralContext { return s.fromDecimal }

func (s *SubstrFunctionCallContext) GetFromExpression() IExpressionContext { return s.fromExpression }

func (s *SubstrFunctionCallContext) GetForDecimal() IDecimalLiteralContext { return s.forDecimal }

func (s *SubstrFunctionCallContext) GetForExpression() IExpressionContext { return s.forExpression }

func (s *SubstrFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *SubstrFunctionCallContext) SetSourceExpression(v IExpressionContext) { s.sourceExpression = v }

func (s *SubstrFunctionCallContext) SetFromDecimal(v IDecimalLiteralContext) { s.fromDecimal = v }

func (s *SubstrFunctionCallContext) SetFromExpression(v IExpressionContext) { s.fromExpression = v }

func (s *SubstrFunctionCallContext) SetForDecimal(v IDecimalLiteralContext) { s.forDecimal = v }

func (s *SubstrFunctionCallContext) SetForExpression(v IExpressionContext) { s.forExpression = v }

func (s *SubstrFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstrFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubstrFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *SubstrFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubstrFunctionCallContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *SubstrFunctionCallContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *SubstrFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SubstrFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SubstrFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubstrFunctionCallContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *SubstrFunctionCallContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *SubstrFunctionCallContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SubstrFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubstrFunctionCall(s)
	}
}

func (s *SubstrFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubstrFunctionCall(s)
	}
}

func (p *MySqlParser) SpecificFunction() (localctx ISpecificFunctionContext) {
	localctx = NewSpecificFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, MySqlParserRULE_specificFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6410)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 941, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6218)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCURRENT_USER || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserCURRENT_DATE-301))|(1<<(MySqlParserCURRENT_TIME-301))|(1<<(MySqlParserCURRENT_TIMESTAMP-301))|(1<<(MySqlParserLOCALTIME-301)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6221)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 916, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6219)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(6220)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 2:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6223)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(6224)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6225)
			p.expression(0)
		}
		{
			p.SetState(6226)

			var _m = p.Match(MySqlParserCOMMA)

			localctx.(*DataTypeFunctionCallContext).separator = _m
		}
		{
			p.SetState(6227)
			p.ConvertedDataType()
		}
		{
			p.SetState(6228)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6230)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(6231)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6232)
			p.expression(0)
		}
		{
			p.SetState(6233)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(6234)
			p.CharsetName()
		}
		{
			p.SetState(6235)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6237)
			p.Match(MySqlParserCAST)
		}
		{
			p.SetState(6238)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6239)
			p.expression(0)
		}
		{
			p.SetState(6240)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(6241)
			p.ConvertedDataType()
		}
		{
			p.SetState(6242)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewValuesFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6244)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(6245)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6246)
			p.FullColumnName()
		}
		{
			p.SetState(6247)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewCaseExpressionFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6249)
			p.Match(MySqlParserCASE)
		}
		{
			p.SetState(6250)
			p.expression(0)
		}
		p.SetState(6252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(6251)
				p.CaseFuncAlternative()
			}

			p.SetState(6254)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6258)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(6256)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(6257)

				var _x = p.FunctionArg()

				localctx.(*CaseExpressionFunctionCallContext).elseArg = _x
			}

		}
		{
			p.SetState(6260)
			p.Match(MySqlParserEND)
		}

	case 7:
		localctx = NewCaseFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6262)
			p.Match(MySqlParserCASE)
		}
		p.SetState(6264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(6263)
				p.CaseFuncAlternative()
			}

			p.SetState(6266)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(6268)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(6269)

				var _x = p.FunctionArg()

				localctx.(*CaseFunctionCallContext).elseArg = _x
			}

		}
		{
			p.SetState(6272)
			p.Match(MySqlParserEND)
		}

	case 8:
		localctx = NewCharFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6274)
			p.Match(MySqlParserCHAR)
		}
		{
			p.SetState(6275)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6276)
			p.FunctionArgs()
		}
		p.SetState(6279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(6277)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(6278)
				p.CharsetName()
			}

		}
		{
			p.SetState(6281)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewPositionFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6283)
			p.Match(MySqlParserPOSITION)
		}
		{
			p.SetState(6284)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6287)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 922, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6285)

				var _x = p.StringLiteral()

				localctx.(*PositionFunctionCallContext).positionString = _x
			}

		case 2:
			{
				p.SetState(6286)

				var _x = p.expression(0)

				localctx.(*PositionFunctionCallContext).positionExpression = _x
			}

		}
		{
			p.SetState(6289)
			p.Match(MySqlParserIN)
		}
		p.SetState(6292)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 923, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6290)

				var _x = p.StringLiteral()

				localctx.(*PositionFunctionCallContext).inString = _x
			}

		case 2:
			{
				p.SetState(6291)

				var _x = p.expression(0)

				localctx.(*PositionFunctionCallContext).inExpression = _x
			}

		}
		{
			p.SetState(6294)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubstrFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6296)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSUBSTR || _la == MySqlParserSUBSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6297)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6300)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 924, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6298)

				var _x = p.StringLiteral()

				localctx.(*SubstrFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6299)

				var _x = p.expression(0)

				localctx.(*SubstrFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6302)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6305)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 925, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6303)

				var _x = p.DecimalLiteral()

				localctx.(*SubstrFunctionCallContext).fromDecimal = _x
			}

		case 2:
			{
				p.SetState(6304)

				var _x = p.expression(0)

				localctx.(*SubstrFunctionCallContext).fromExpression = _x
			}

		}
		p.SetState(6312)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(6307)
				p.Match(MySqlParserFOR)
			}
			p.SetState(6310)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 926, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(6308)

					var _x = p.DecimalLiteral()

					localctx.(*SubstrFunctionCallContext).forDecimal = _x
				}

			case 2:
				{
					p.SetState(6309)

					var _x = p.expression(0)

					localctx.(*SubstrFunctionCallContext).forExpression = _x
				}

			}

		}
		{
			p.SetState(6314)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewTrimFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6316)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(6317)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6318)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TrimFunctionCallContext).positioinForm = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBOTH || _la == MySqlParserLEADING || _la == MySqlParserTRAILING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TrimFunctionCallContext).positioinForm = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6321)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 928, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6319)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).sourceString = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 928, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(6320)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6323)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6326)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 929, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6324)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).fromString = _x
			}

		case 2:
			{
				p.SetState(6325)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).fromExpression = _x
			}

		}
		{
			p.SetState(6328)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 12:
		localctx = NewTrimFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6330)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(6331)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6334)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 930, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6332)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6333)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6336)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6339)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 931, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6337)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).fromString = _x
			}

		case 2:
			{
				p.SetState(6338)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).fromExpression = _x
			}

		}
		{
			p.SetState(6341)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 13:
		localctx = NewWeightFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6343)
			p.Match(MySqlParserWEIGHT_STRING)
		}
		{
			p.SetState(6344)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6347)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6345)
				p.StringLiteral()
			}

		case 2:
			{
				p.SetState(6346)
				p.expression(0)
			}

		}
		p.SetState(6355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(6349)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(6350)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*WeightFunctionCallContext).stringFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCHAR || _la == MySqlParserBINARY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*WeightFunctionCallContext).stringFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(6351)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(6352)
				p.DecimalLiteral()
			}
			{
				p.SetState(6353)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(6358)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEVEL {
			{
				p.SetState(6357)
				p.LevelsInWeightString()
			}

		}
		{
			p.SetState(6360)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 14:
		localctx = NewExtractFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6362)
			p.Match(MySqlParserEXTRACT)
		}
		{
			p.SetState(6363)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6364)
			p.IntervalType()
		}
		{
			p.SetState(6365)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6368)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 935, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6366)

				var _x = p.StringLiteral()

				localctx.(*ExtractFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6367)

				var _x = p.expression(0)

				localctx.(*ExtractFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6370)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 15:
		localctx = NewGetFormatFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6372)
			p.Match(MySqlParserGET_FORMAT)
		}
		{
			p.SetState(6373)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6374)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GetFormatFunctionCallContext).datetimeFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserDATETIME-208)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GetFormatFunctionCallContext).datetimeFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6375)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6376)
			p.StringLiteral()
		}
		{
			p.SetState(6377)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 16:
		localctx = NewJsonValueFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6379)
			p.Match(MySqlParserJSON_VALUE)
		}
		{
			p.SetState(6380)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6381)
			p.expression(0)
		}
		{
			p.SetState(6382)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6383)
			p.expression(0)
		}
		p.SetState(6386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserRETURNING {
			{
				p.SetState(6384)
				p.Match(MySqlParserRETURNING)
			}
			{
				p.SetState(6385)
				p.ConvertedDataType()
			}

		}
		p.SetState(6396)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 938, p.GetParserRuleContext()) == 1 {
			p.SetState(6392)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNULL_LITERAL:
				{
					p.SetState(6388)
					p.Match(MySqlParserNULL_LITERAL)
				}

			case MySqlParserERROR:
				{
					p.SetState(6389)
					p.Match(MySqlParserERROR)
				}

			case MySqlParserDEFAULT:
				{
					p.SetState(6390)
					p.Match(MySqlParserDEFAULT)
				}
				{
					p.SetState(6391)
					p.DefaultValue()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(6394)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(6395)
				p.Match(MySqlParserEMPTY)
			}

		}
		p.SetState(6406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT || _la == MySqlParserNULL_LITERAL || _la == MySqlParserERROR {
			p.SetState(6402)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNULL_LITERAL:
				{
					p.SetState(6398)
					p.Match(MySqlParserNULL_LITERAL)
				}

			case MySqlParserERROR:
				{
					p.SetState(6399)
					p.Match(MySqlParserERROR)
				}

			case MySqlParserDEFAULT:
				{
					p.SetState(6400)
					p.Match(MySqlParserDEFAULT)
				}
				{
					p.SetState(6401)
					p.DefaultValue()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(6404)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(6405)
				p.Match(MySqlParserERROR)
			}

		}
		{
			p.SetState(6408)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICaseFuncAlternativeContext is an interface to support dynamic dispatch.
type ICaseFuncAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IFunctionArgContext

	// GetConsequent returns the consequent rule contexts.
	GetConsequent() IFunctionArgContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IFunctionArgContext)

	// SetConsequent sets the consequent rule contexts.
	SetConsequent(IFunctionArgContext)

	// IsCaseFuncAlternativeContext differentiates from other interfaces.
	IsCaseFuncAlternativeContext()
}

type CaseFuncAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	condition  IFunctionArgContext
	consequent IFunctionArgContext
}

func NewEmptyCaseFuncAlternativeContext() *CaseFuncAlternativeContext {
	var p = new(CaseFuncAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseFuncAlternative
	return p
}

func (*CaseFuncAlternativeContext) IsCaseFuncAlternativeContext() {}

func NewCaseFuncAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseFuncAlternativeContext {
	var p = new(CaseFuncAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseFuncAlternative

	return p
}

func (s *CaseFuncAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseFuncAlternativeContext) GetCondition() IFunctionArgContext { return s.condition }

func (s *CaseFuncAlternativeContext) GetConsequent() IFunctionArgContext { return s.consequent }

func (s *CaseFuncAlternativeContext) SetCondition(v IFunctionArgContext) { s.condition = v }

func (s *CaseFuncAlternativeContext) SetConsequent(v IFunctionArgContext) { s.consequent = v }

func (s *CaseFuncAlternativeContext) WHEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, 0)
}

func (s *CaseFuncAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *CaseFuncAlternativeContext) AllFunctionArg() []IFunctionArgContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem())
	var tst = make([]IFunctionArgContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionArgContext)
		}
	}

	return tst
}

func (s *CaseFuncAlternativeContext) FunctionArg(i int) IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseFuncAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseFuncAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseFuncAlternativeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseFuncAlternative(s)
	}
}

func (s *CaseFuncAlternativeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseFuncAlternative(s)
	}
}

func (p *MySqlParser) CaseFuncAlternative() (localctx ICaseFuncAlternativeContext) {
	localctx = NewCaseFuncAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, MySqlParserRULE_caseFuncAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6412)
		p.Match(MySqlParserWHEN)
	}
	{
		p.SetState(6413)

		var _x = p.FunctionArg()

		localctx.(*CaseFuncAlternativeContext).condition = _x
	}
	{
		p.SetState(6414)
		p.Match(MySqlParserTHEN)
	}
	{
		p.SetState(6415)

		var _x = p.FunctionArg()

		localctx.(*CaseFuncAlternativeContext).consequent = _x
	}

	return localctx
}

// ILevelsInWeightStringContext is an interface to support dynamic dispatch.
type ILevelsInWeightStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelsInWeightStringContext differentiates from other interfaces.
	IsLevelsInWeightStringContext()
}

type LevelsInWeightStringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelsInWeightStringContext() *LevelsInWeightStringContext {
	var p = new(LevelsInWeightStringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_levelsInWeightString
	return p
}

func (*LevelsInWeightStringContext) IsLevelsInWeightStringContext() {}

func NewLevelsInWeightStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelsInWeightStringContext {
	var p = new(LevelsInWeightStringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_levelsInWeightString

	return p
}

func (s *LevelsInWeightStringContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelsInWeightStringContext) CopyFrom(ctx *LevelsInWeightStringContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LevelsInWeightStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelsInWeightStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LevelWeightRangeContext struct {
	*LevelsInWeightStringContext
	firstLevel IDecimalLiteralContext
	lastLevel  IDecimalLiteralContext
}

func NewLevelWeightRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightRangeContext {
	var p = new(LevelWeightRangeContext)

	p.LevelsInWeightStringContext = NewEmptyLevelsInWeightStringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelsInWeightStringContext))

	return p
}

func (s *LevelWeightRangeContext) GetFirstLevel() IDecimalLiteralContext { return s.firstLevel }

func (s *LevelWeightRangeContext) GetLastLevel() IDecimalLiteralContext { return s.lastLevel }

func (s *LevelWeightRangeContext) SetFirstLevel(v IDecimalLiteralContext) { s.firstLevel = v }

func (s *LevelWeightRangeContext) SetLastLevel(v IDecimalLiteralContext) { s.lastLevel = v }

func (s *LevelWeightRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightRangeContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightRangeContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *LevelWeightRangeContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LevelWeightRangeContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LevelWeightRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLevelWeightRange(s)
	}
}

func (s *LevelWeightRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLevelWeightRange(s)
	}
}

type LevelWeightListContext struct {
	*LevelsInWeightStringContext
}

func NewLevelWeightListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightListContext {
	var p = new(LevelWeightListContext)

	p.LevelsInWeightStringContext = NewEmptyLevelsInWeightStringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelsInWeightStringContext))

	return p
}

func (s *LevelWeightListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightListContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightListContext) AllLevelInWeightListElement() []ILevelInWeightListElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem())
	var tst = make([]ILevelInWeightListElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILevelInWeightListElementContext)
		}
	}

	return tst
}

func (s *LevelWeightListContext) LevelInWeightListElement(i int) ILevelInWeightListElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILevelInWeightListElementContext)
}

func (s *LevelWeightListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LevelWeightListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LevelWeightListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLevelWeightList(s)
	}
}

func (s *LevelWeightListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLevelWeightList(s)
	}
}

func (p *MySqlParser) LevelsInWeightString() (localctx ILevelsInWeightStringContext) {
	localctx = NewLevelsInWeightStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, MySqlParserRULE_levelsInWeightString)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6431)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 943, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLevelWeightListContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6417)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(6418)
			p.LevelInWeightListElement()
		}
		p.SetState(6423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(6419)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6420)
				p.LevelInWeightListElement()
			}

			p.SetState(6425)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewLevelWeightRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6426)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(6427)

			var _x = p.DecimalLiteral()

			localctx.(*LevelWeightRangeContext).firstLevel = _x
		}
		{
			p.SetState(6428)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6429)

			var _x = p.DecimalLiteral()

			localctx.(*LevelWeightRangeContext).lastLevel = _x
		}

	}

	return localctx
}

// ILevelInWeightListElementContext is an interface to support dynamic dispatch.
type ILevelInWeightListElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrderType returns the orderType token.
	GetOrderType() antlr.Token

	// SetOrderType sets the orderType token.
	SetOrderType(antlr.Token)

	// IsLevelInWeightListElementContext differentiates from other interfaces.
	IsLevelInWeightListElementContext()
}

type LevelInWeightListElementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	orderType antlr.Token
}

func NewEmptyLevelInWeightListElementContext() *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_levelInWeightListElement
	return p
}

func (*LevelInWeightListElementContext) IsLevelInWeightListElementContext() {}

func NewLevelInWeightListElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_levelInWeightListElement

	return p
}

func (s *LevelInWeightListElementContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelInWeightListElementContext) GetOrderType() antlr.Token { return s.orderType }

func (s *LevelInWeightListElementContext) SetOrderType(v antlr.Token) { s.orderType = v }

func (s *LevelInWeightListElementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LevelInWeightListElementContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *LevelInWeightListElementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *LevelInWeightListElementContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, 0)
}

func (s *LevelInWeightListElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelInWeightListElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LevelInWeightListElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLevelInWeightListElement(s)
	}
}

func (s *LevelInWeightListElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLevelInWeightListElement(s)
	}
}

func (p *MySqlParser) LevelInWeightListElement() (localctx ILevelInWeightListElementContext) {
	localctx = NewLevelInWeightListElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, MySqlParserRULE_levelInWeightListElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6433)
		p.DecimalLiteral()
	}
	p.SetState(6435)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE {
		{
			p.SetState(6434)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LevelInWeightListElementContext).orderType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LevelInWeightListElementContext).orderType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IAggregateWindowedFunctionContext is an interface to support dynamic dispatch.
type IAggregateWindowedFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAggregator returns the aggregator token.
	GetAggregator() antlr.Token

	// GetStarArg returns the starArg token.
	GetStarArg() antlr.Token

	// GetSeparator returns the separator token.
	GetSeparator() antlr.Token

	// SetAggregator sets the aggregator token.
	SetAggregator(antlr.Token)

	// SetStarArg sets the starArg token.
	SetStarArg(antlr.Token)

	// SetSeparator sets the separator token.
	SetSeparator(antlr.Token)

	// IsAggregateWindowedFunctionContext differentiates from other interfaces.
	IsAggregateWindowedFunctionContext()
}

type AggregateWindowedFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	aggregator antlr.Token
	starArg    antlr.Token
	separator  antlr.Token
}

func NewEmptyAggregateWindowedFunctionContext() *AggregateWindowedFunctionContext {
	var p = new(AggregateWindowedFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_aggregateWindowedFunction
	return p
}

func (*AggregateWindowedFunctionContext) IsAggregateWindowedFunctionContext() {}

func NewAggregateWindowedFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregateWindowedFunctionContext {
	var p = new(AggregateWindowedFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_aggregateWindowedFunction

	return p
}

func (s *AggregateWindowedFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregateWindowedFunctionContext) GetAggregator() antlr.Token { return s.aggregator }

func (s *AggregateWindowedFunctionContext) GetStarArg() antlr.Token { return s.starArg }

func (s *AggregateWindowedFunctionContext) GetSeparator() antlr.Token { return s.separator }

func (s *AggregateWindowedFunctionContext) SetAggregator(v antlr.Token) { s.aggregator = v }

func (s *AggregateWindowedFunctionContext) SetStarArg(v antlr.Token) { s.starArg = v }

func (s *AggregateWindowedFunctionContext) SetSeparator(v antlr.Token) { s.separator = v }

func (s *AggregateWindowedFunctionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AggregateWindowedFunctionContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *AggregateWindowedFunctionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AggregateWindowedFunctionContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG, 0)
}

func (s *AggregateWindowedFunctionContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX, 0)
}

func (s *AggregateWindowedFunctionContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN, 0)
}

func (s *AggregateWindowedFunctionContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUM, 0)
}

func (s *AggregateWindowedFunctionContext) OverClause() IOverClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverClauseContext)
}

func (s *AggregateWindowedFunctionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AggregateWindowedFunctionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *AggregateWindowedFunctionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *AggregateWindowedFunctionContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *AggregateWindowedFunctionContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *AggregateWindowedFunctionContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND, 0)
}

func (s *AggregateWindowedFunctionContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR, 0)
}

func (s *AggregateWindowedFunctionContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR, 0)
}

func (s *AggregateWindowedFunctionContext) STD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTD, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_POP, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_SAMP, 0)
}

func (s *AggregateWindowedFunctionContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_POP, 0)
}

func (s *AggregateWindowedFunctionContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_SAMP, 0)
}

func (s *AggregateWindowedFunctionContext) VARIANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIANCE, 0)
}

func (s *AggregateWindowedFunctionContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_CONCAT, 0)
}

func (s *AggregateWindowedFunctionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *AggregateWindowedFunctionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AggregateWindowedFunctionContext) AllOrderByExpression() []IOrderByExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem())
	var tst = make([]IOrderByExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByExpressionContext)
		}
	}

	return tst
}

func (s *AggregateWindowedFunctionContext) OrderByExpression(i int) IOrderByExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByExpressionContext)
}

func (s *AggregateWindowedFunctionContext) SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEPARATOR, 0)
}

func (s *AggregateWindowedFunctionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AggregateWindowedFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AggregateWindowedFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AggregateWindowedFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateWindowedFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggregateWindowedFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAggregateWindowedFunction(s)
	}
}

func (s *AggregateWindowedFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAggregateWindowedFunction(s)
	}
}

func (p *MySqlParser) AggregateWindowedFunction() (localctx IAggregateWindowedFunctionContext) {
	localctx = NewAggregateWindowedFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, MySqlParserRULE_aggregateWindowedFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6496)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAVG, MySqlParserMAX, MySqlParserMIN, MySqlParserSUM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6437)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserSUM-274)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6438)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6440)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 945, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6439)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AggregateWindowedFunctionContext).aggregator = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(6442)
			p.FunctionArg()
		}
		{
			p.SetState(6443)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(6445)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 946, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6444)
				p.OverClause()
			}

		}

	case MySqlParserCOUNT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6447)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(6448)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6456)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 948, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6449)

				var _m = p.Match(MySqlParserSTAR)

				localctx.(*AggregateWindowedFunctionContext).starArg = _m
			}

		case 2:
			p.SetState(6451)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 947, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6450)

					var _m = p.Match(MySqlParserALL)

					localctx.(*AggregateWindowedFunctionContext).aggregator = _m
				}

			}
			{
				p.SetState(6453)
				p.FunctionArg()
			}

		case 3:
			{
				p.SetState(6454)

				var _m = p.Match(MySqlParserDISTINCT)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _m
			}
			{
				p.SetState(6455)
				p.FunctionArgs()
			}

		}
		{
			p.SetState(6458)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(6460)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 949, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6459)
				p.OverClause()
			}

		}

	case MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6462)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-275)&-(0x1f+1)) == 0 && ((1<<uint((_la-275)))&((1<<(MySqlParserBIT_AND-275))|(1<<(MySqlParserBIT_OR-275))|(1<<(MySqlParserBIT_XOR-275))|(1<<(MySqlParserSTD-275))|(1<<(MySqlParserSTDDEV-275))|(1<<(MySqlParserSTDDEV_POP-275))|(1<<(MySqlParserSTDDEV_SAMP-275))|(1<<(MySqlParserVAR_POP-275))|(1<<(MySqlParserVAR_SAMP-275))|(1<<(MySqlParserVARIANCE-275)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6463)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6465)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 950, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6464)

				var _m = p.Match(MySqlParserALL)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _m
			}

		}
		{
			p.SetState(6467)
			p.FunctionArg()
		}
		{
			p.SetState(6468)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(6470)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 951, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6469)
				p.OverClause()
			}

		}

	case MySqlParserGROUP_CONCAT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6472)
			p.Match(MySqlParserGROUP_CONCAT)
		}
		{
			p.SetState(6473)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6475)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 952, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6474)

				var _m = p.Match(MySqlParserDISTINCT)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _m
			}

		}
		{
			p.SetState(6477)
			p.FunctionArgs()
		}
		p.SetState(6488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserORDER {
			{
				p.SetState(6478)
				p.Match(MySqlParserORDER)
			}
			{
				p.SetState(6479)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(6480)
				p.OrderByExpression()
			}
			p.SetState(6485)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(6481)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(6482)
					p.OrderByExpression()
				}

				p.SetState(6487)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(6492)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSEPARATOR {
			{
				p.SetState(6490)
				p.Match(MySqlParserSEPARATOR)
			}
			{
				p.SetState(6491)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*AggregateWindowedFunctionContext).separator = _m
			}

		}
		{
			p.SetState(6494)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonAggregateWindowedFunctionContext is an interface to support dynamic dispatch.
type INonAggregateWindowedFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonAggregateWindowedFunctionContext differentiates from other interfaces.
	IsNonAggregateWindowedFunctionContext()
}

type NonAggregateWindowedFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonAggregateWindowedFunctionContext() *NonAggregateWindowedFunctionContext {
	var p = new(NonAggregateWindowedFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_nonAggregateWindowedFunction
	return p
}

func (*NonAggregateWindowedFunctionContext) IsNonAggregateWindowedFunctionContext() {}

func NewNonAggregateWindowedFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonAggregateWindowedFunctionContext {
	var p = new(NonAggregateWindowedFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_nonAggregateWindowedFunction

	return p
}

func (s *NonAggregateWindowedFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *NonAggregateWindowedFunctionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *NonAggregateWindowedFunctionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NonAggregateWindowedFunctionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *NonAggregateWindowedFunctionContext) OverClause() IOverClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverClauseContext)
}

func (s *NonAggregateWindowedFunctionContext) LAG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAG, 0)
}

func (s *NonAggregateWindowedFunctionContext) LEAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAD, 0)
}

func (s *NonAggregateWindowedFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *NonAggregateWindowedFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *NonAggregateWindowedFunctionContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *NonAggregateWindowedFunctionContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *NonAggregateWindowedFunctionContext) FIRST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST_VALUE, 0)
}

func (s *NonAggregateWindowedFunctionContext) LAST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST_VALUE, 0)
}

func (s *NonAggregateWindowedFunctionContext) CUME_DIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCUME_DIST, 0)
}

func (s *NonAggregateWindowedFunctionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDENSE_RANK, 0)
}

func (s *NonAggregateWindowedFunctionContext) PERCENT_RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERCENT_RANK, 0)
}

func (s *NonAggregateWindowedFunctionContext) RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANK, 0)
}

func (s *NonAggregateWindowedFunctionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_NUMBER, 0)
}

func (s *NonAggregateWindowedFunctionContext) NTH_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNTH_VALUE, 0)
}

func (s *NonAggregateWindowedFunctionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNTILE, 0)
}

func (s *NonAggregateWindowedFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonAggregateWindowedFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonAggregateWindowedFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNonAggregateWindowedFunction(s)
	}
}

func (s *NonAggregateWindowedFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNonAggregateWindowedFunction(s)
	}
}

func (p *MySqlParser) NonAggregateWindowedFunction() (localctx INonAggregateWindowedFunctionContext) {
	localctx = NewNonAggregateWindowedFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, MySqlParserRULE_nonAggregateWindowedFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6536)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLAG, MySqlParserLEAD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6498)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLAG || _la == MySqlParserLEAD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6499)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6500)
			p.expression(0)
		}
		p.SetState(6503)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 957, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6501)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6502)
				p.DecimalLiteral()
			}

		}
		p.SetState(6507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOMMA {
			{
				p.SetState(6505)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6506)
				p.DecimalLiteral()
			}

		}
		{
			p.SetState(6509)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(6510)
			p.OverClause()
		}

	case MySqlParserFIRST_VALUE, MySqlParserLAST_VALUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6512)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFIRST_VALUE || _la == MySqlParserLAST_VALUE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6513)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6514)
			p.expression(0)
		}
		{
			p.SetState(6515)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(6516)
			p.OverClause()
		}

	case MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6518)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-279)&-(0x1f+1)) == 0 && ((1<<uint((_la-279)))&((1<<(MySqlParserCUME_DIST-279))|(1<<(MySqlParserDENSE_RANK-279))|(1<<(MySqlParserPERCENT_RANK-279))|(1<<(MySqlParserRANK-279))|(1<<(MySqlParserROW_NUMBER-279)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6519)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6520)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(6521)
			p.OverClause()
		}

	case MySqlParserNTH_VALUE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6522)
			p.Match(MySqlParserNTH_VALUE)
		}
		{
			p.SetState(6523)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6524)
			p.expression(0)
		}
		{
			p.SetState(6525)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6526)
			p.DecimalLiteral()
		}
		{
			p.SetState(6527)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(6528)
			p.OverClause()
		}

	case MySqlParserNTILE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6530)
			p.Match(MySqlParserNTILE)
		}
		{
			p.SetState(6531)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6532)
			p.DecimalLiteral()
		}
		{
			p.SetState(6533)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(6534)
			p.OverClause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOverClauseContext is an interface to support dynamic dispatch.
type IOverClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOverClauseContext differentiates from other interfaces.
	IsOverClauseContext()
}

type OverClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverClauseContext() *OverClauseContext {
	var p = new(OverClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_overClause
	return p
}

func (*OverClauseContext) IsOverClauseContext() {}

func NewOverClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverClauseContext {
	var p = new(OverClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_overClause

	return p
}

func (s *OverClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OverClauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOVER, 0)
}

func (s *OverClauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *OverClauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *OverClauseContext) WindowName() IWindowNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowNameContext)
}

func (s *OverClauseContext) WindowSpec() IWindowSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowSpecContext)
}

func (s *OverClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOverClause(s)
	}
}

func (s *OverClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOverClause(s)
	}
}

func (p *MySqlParser) OverClause() (localctx IOverClauseContext) {
	localctx = NewOverClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, MySqlParserRULE_overClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6538)
		p.Match(MySqlParserOVER)
	}
	p.SetState(6545)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLR_BRACKET:
		{
			p.SetState(6539)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6541)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 960, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6540)
				p.WindowSpec()
			}

		}
		{
			p.SetState(6543)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserEXCEPT, MySqlParserGROUP, MySqlParserIGNORED, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserOPTIONAL, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserGROUP_CONCAT, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserMAX, MySqlParserMIN, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCLUSTERING, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINSTANT, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNOCOPY, MySqlParserNOWAIT, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserODBC, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserRECURSIVE, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserRTREE, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserEUR, MySqlParserUSA, MySqlParserJIS, MySqlParserISO, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserADMIN, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB18030, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENGINE_ATTRIBUTE, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSECONDARY_ENGINE_ATTRIBUTE, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(6544)
			p.WindowName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindowSpecContext is an interface to support dynamic dispatch.
type IWindowSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowSpecContext differentiates from other interfaces.
	IsWindowSpecContext()
}

type WindowSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowSpecContext() *WindowSpecContext {
	var p = new(WindowSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_windowSpec
	return p
}

func (*WindowSpecContext) IsWindowSpecContext() {}

func NewWindowSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowSpecContext {
	var p = new(WindowSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_windowSpec

	return p
}

func (s *WindowSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowSpecContext) WindowName() IWindowNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowNameContext)
}

func (s *WindowSpecContext) PartitionClause() IPartitionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionClauseContext)
}

func (s *WindowSpecContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *WindowSpecContext) FrameClause() IFrameClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameClauseContext)
}

func (s *WindowSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWindowSpec(s)
	}
}

func (s *WindowSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWindowSpec(s)
	}
}

func (p *MySqlParser) WindowSpec() (localctx IWindowSpecContext) {
	localctx = NewWindowSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, MySqlParserRULE_windowSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6548)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 962, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6547)
			p.WindowName()
		}

	}
	p.SetState(6551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(6550)
			p.PartitionClause()
		}

	}
	p.SetState(6554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(6553)
			p.OrderByClause()
		}

	}
	p.SetState(6557)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserRANGE || _la == MySqlParserROWS {
		{
			p.SetState(6556)
			p.FrameClause()
		}

	}

	return localctx
}

// IWindowNameContext is an interface to support dynamic dispatch.
type IWindowNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindowNameContext differentiates from other interfaces.
	IsWindowNameContext()
}

type WindowNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindowNameContext() *WindowNameContext {
	var p = new(WindowNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_windowName
	return p
}

func (*WindowNameContext) IsWindowNameContext() {}

func NewWindowNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowNameContext {
	var p = new(WindowNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_windowName

	return p
}

func (s *WindowNameContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *WindowNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWindowName(s)
	}
}

func (s *WindowNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWindowName(s)
	}
}

func (p *MySqlParser) WindowName() (localctx IWindowNameContext) {
	localctx = NewWindowNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, MySqlParserRULE_windowName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6559)
		p.Uid()
	}

	return localctx
}

// IFrameClauseContext is an interface to support dynamic dispatch.
type IFrameClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameClauseContext differentiates from other interfaces.
	IsFrameClauseContext()
}

type FrameClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameClauseContext() *FrameClauseContext {
	var p = new(FrameClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_frameClause
	return p
}

func (*FrameClauseContext) IsFrameClauseContext() {}

func NewFrameClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameClauseContext {
	var p = new(FrameClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_frameClause

	return p
}

func (s *FrameClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameClauseContext) FrameUnits() IFrameUnitsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameUnitsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameUnitsContext)
}

func (s *FrameClauseContext) FrameExtent() IFrameExtentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameExtentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameExtentContext)
}

func (s *FrameClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrameClause(s)
	}
}

func (s *FrameClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrameClause(s)
	}
}

func (p *MySqlParser) FrameClause() (localctx IFrameClauseContext) {
	localctx = NewFrameClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, MySqlParserRULE_frameClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6561)
		p.FrameUnits()
	}
	{
		p.SetState(6562)
		p.FrameExtent()
	}

	return localctx
}

// IFrameUnitsContext is an interface to support dynamic dispatch.
type IFrameUnitsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameUnitsContext differentiates from other interfaces.
	IsFrameUnitsContext()
}

type FrameUnitsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameUnitsContext() *FrameUnitsContext {
	var p = new(FrameUnitsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_frameUnits
	return p
}

func (*FrameUnitsContext) IsFrameUnitsContext() {}

func NewFrameUnitsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameUnitsContext {
	var p = new(FrameUnitsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_frameUnits

	return p
}

func (s *FrameUnitsContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameUnitsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *FrameUnitsContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANGE, 0)
}

func (s *FrameUnitsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameUnitsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameUnitsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrameUnits(s)
	}
}

func (s *FrameUnitsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrameUnits(s)
	}
}

func (p *MySqlParser) FrameUnits() (localctx IFrameUnitsContext) {
	localctx = NewFrameUnitsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, MySqlParserRULE_frameUnits)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6564)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserRANGE || _la == MySqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFrameExtentContext is an interface to support dynamic dispatch.
type IFrameExtentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameExtentContext differentiates from other interfaces.
	IsFrameExtentContext()
}

type FrameExtentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameExtentContext() *FrameExtentContext {
	var p = new(FrameExtentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_frameExtent
	return p
}

func (*FrameExtentContext) IsFrameExtentContext() {}

func NewFrameExtentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameExtentContext {
	var p = new(FrameExtentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_frameExtent

	return p
}

func (s *FrameExtentContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameExtentContext) FrameRange() IFrameRangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameRangeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameRangeContext)
}

func (s *FrameExtentContext) FrameBetween() IFrameBetweenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameBetweenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameBetweenContext)
}

func (s *FrameExtentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameExtentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameExtentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrameExtent(s)
	}
}

func (s *FrameExtentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrameExtent(s)
	}
}

func (p *MySqlParser) FrameExtent() (localctx IFrameExtentContext) {
	localctx = NewFrameExtentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, MySqlParserRULE_frameExtent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6568)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 966, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6566)
			p.FrameRange()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6567)
			p.FrameBetween()
		}

	}

	return localctx
}

// IFrameBetweenContext is an interface to support dynamic dispatch.
type IFrameBetweenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameBetweenContext differentiates from other interfaces.
	IsFrameBetweenContext()
}

type FrameBetweenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameBetweenContext() *FrameBetweenContext {
	var p = new(FrameBetweenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_frameBetween
	return p
}

func (*FrameBetweenContext) IsFrameBetweenContext() {}

func NewFrameBetweenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameBetweenContext {
	var p = new(FrameBetweenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_frameBetween

	return p
}

func (s *FrameBetweenContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameBetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBETWEEN, 0)
}

func (s *FrameBetweenContext) AllFrameRange() []IFrameRangeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrameRangeContext)(nil)).Elem())
	var tst = make([]IFrameRangeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrameRangeContext)
		}
	}

	return tst
}

func (s *FrameBetweenContext) FrameRange(i int) IFrameRangeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameRangeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrameRangeContext)
}

func (s *FrameBetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *FrameBetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBetweenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameBetweenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrameBetween(s)
	}
}

func (s *FrameBetweenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrameBetween(s)
	}
}

func (p *MySqlParser) FrameBetween() (localctx IFrameBetweenContext) {
	localctx = NewFrameBetweenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, MySqlParserRULE_frameBetween)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6570)
		p.Match(MySqlParserBETWEEN)
	}
	{
		p.SetState(6571)
		p.FrameRange()
	}
	{
		p.SetState(6572)
		p.Match(MySqlParserAND)
	}
	{
		p.SetState(6573)
		p.FrameRange()
	}

	return localctx
}

// IFrameRangeContext is an interface to support dynamic dispatch.
type IFrameRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameRangeContext differentiates from other interfaces.
	IsFrameRangeContext()
}

type FrameRangeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameRangeContext() *FrameRangeContext {
	var p = new(FrameRangeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_frameRange
	return p
}

func (*FrameRangeContext) IsFrameRangeContext() {}

func NewFrameRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameRangeContext {
	var p = new(FrameRangeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_frameRange

	return p
}

func (s *FrameRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameRangeContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *FrameRangeContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *FrameRangeContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNBOUNDED, 0)
}

func (s *FrameRangeContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDING, 0)
}

func (s *FrameRangeContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWING, 0)
}

func (s *FrameRangeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FrameRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrameRange(s)
	}
}

func (s *FrameRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrameRange(s)
	}
}

func (p *MySqlParser) FrameRange() (localctx IFrameRangeContext) {
	localctx = NewFrameRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, MySqlParserRULE_frameRange)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6582)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 967, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6575)
			p.Match(MySqlParserCURRENT)
		}
		{
			p.SetState(6576)
			p.Match(MySqlParserROW)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6577)
			p.Match(MySqlParserUNBOUNDED)
		}
		{
			p.SetState(6578)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFOLLOWING || _la == MySqlParserPRECEDING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6579)
			p.expression(0)
		}
		{
			p.SetState(6580)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFOLLOWING || _la == MySqlParserPRECEDING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IPartitionClauseContext is an interface to support dynamic dispatch.
type IPartitionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionClauseContext differentiates from other interfaces.
	IsPartitionClauseContext()
}

type PartitionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionClauseContext() *PartitionClauseContext {
	var p = new(PartitionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionClause
	return p
}

func (*PartitionClauseContext) IsPartitionClauseContext() {}

func NewPartitionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionClauseContext {
	var p = new(PartitionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionClause

	return p
}

func (s *PartitionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionClauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *PartitionClauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PartitionClauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartitionClause(s)
	}
}

func (s *PartitionClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartitionClause(s)
	}
}

func (p *MySqlParser) PartitionClause() (localctx IPartitionClauseContext) {
	localctx = NewPartitionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, MySqlParserRULE_partitionClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6584)
		p.Match(MySqlParserPARTITION)
	}
	{
		p.SetState(6585)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(6586)
		p.expression(0)
	}
	p.SetState(6591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6587)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6588)
			p.expression(0)
		}

		p.SetState(6593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IScalarFunctionNameContext is an interface to support dynamic dispatch.
type IScalarFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalarFunctionNameContext differentiates from other interfaces.
	IsScalarFunctionNameContext()
}

type ScalarFunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalarFunctionNameContext() *ScalarFunctionNameContext {
	var p = new(ScalarFunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_scalarFunctionName
	return p
}

func (*ScalarFunctionNameContext) IsScalarFunctionNameContext() {}

func NewScalarFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScalarFunctionNameContext {
	var p = new(ScalarFunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_scalarFunctionName

	return p
}

func (s *ScalarFunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ScalarFunctionNameContext) FunctionNameBase() IFunctionNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameBaseContext)
}

func (s *ScalarFunctionNameContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *ScalarFunctionNameContext) CURDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURDATE, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) CURTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURTIME, 0)
}

func (s *ScalarFunctionNameContext) DATE_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_ADD, 0)
}

func (s *ScalarFunctionNameContext) DATE_SUB() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_SUB, 0)
}

func (s *ScalarFunctionNameContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *ScalarFunctionNameContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *ScalarFunctionNameContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *ScalarFunctionNameContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *ScalarFunctionNameContext) NOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOW, 0)
}

func (s *ScalarFunctionNameContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *ScalarFunctionNameContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *ScalarFunctionNameContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *ScalarFunctionNameContext) SYSDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSDATE, 0)
}

func (s *ScalarFunctionNameContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *ScalarFunctionNameContext) UTC_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_DATE, 0)
}

func (s *ScalarFunctionNameContext) UTC_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIME, 0)
}

func (s *ScalarFunctionNameContext) UTC_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarFunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScalarFunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterScalarFunctionName(s)
	}
}

func (s *ScalarFunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitScalarFunctionName(s)
	}
}

func (p *MySqlParser) ScalarFunctionName() (localctx IScalarFunctionNameContext) {
	localctx = NewScalarFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, MySqlParserRULE_scalarFunctionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6617)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDATABASE, MySqlParserLEFT, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserYEAR, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserCOUNT, MySqlParserCUME_DIST, MySqlParserDENSE_RANK, MySqlParserFIRST_VALUE, MySqlParserLAG, MySqlParserLAST_VALUE, MySqlParserLEAD, MySqlParserNTILE, MySqlParserNTH_VALUE, MySqlParserPERCENT_RANK, MySqlParserRANK, MySqlParserROW_NUMBER, MySqlParserPOSITION, MySqlParserINVISIBLE, MySqlParserVISIBLE, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6594)
			p.FunctionNameBase()
		}

	case MySqlParserASCII:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6595)
			p.Match(MySqlParserASCII)
		}

	case MySqlParserCURDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6596)
			p.Match(MySqlParserCURDATE)
		}

	case MySqlParserCURRENT_DATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6597)
			p.Match(MySqlParserCURRENT_DATE)
		}

	case MySqlParserCURRENT_TIME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6598)
			p.Match(MySqlParserCURRENT_TIME)
		}

	case MySqlParserCURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6599)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case MySqlParserCURTIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6600)
			p.Match(MySqlParserCURTIME)
		}

	case MySqlParserDATE_ADD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6601)
			p.Match(MySqlParserDATE_ADD)
		}

	case MySqlParserDATE_SUB:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6602)
			p.Match(MySqlParserDATE_SUB)
		}

	case MySqlParserIF:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6603)
			p.Match(MySqlParserIF)
		}

	case MySqlParserINSERT:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6604)
			p.Match(MySqlParserINSERT)
		}

	case MySqlParserLOCALTIME:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6605)
			p.Match(MySqlParserLOCALTIME)
		}

	case MySqlParserLOCALTIMESTAMP:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6606)
			p.Match(MySqlParserLOCALTIMESTAMP)
		}

	case MySqlParserMID:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6607)
			p.Match(MySqlParserMID)
		}

	case MySqlParserNOW:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6608)
			p.Match(MySqlParserNOW)
		}

	case MySqlParserREPLACE:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6609)
			p.Match(MySqlParserREPLACE)
		}

	case MySqlParserSUBSTR:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(6610)
			p.Match(MySqlParserSUBSTR)
		}

	case MySqlParserSUBSTRING:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(6611)
			p.Match(MySqlParserSUBSTRING)
		}

	case MySqlParserSYSDATE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(6612)
			p.Match(MySqlParserSYSDATE)
		}

	case MySqlParserTRIM:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(6613)
			p.Match(MySqlParserTRIM)
		}

	case MySqlParserUTC_DATE:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(6614)
			p.Match(MySqlParserUTC_DATE)
		}

	case MySqlParserUTC_TIME:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(6615)
			p.Match(MySqlParserUTC_TIME)
		}

	case MySqlParserUTC_TIMESTAMP:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(6616)
			p.Match(MySqlParserUTC_TIMESTAMP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPasswordFunctionClauseContext is an interface to support dynamic dispatch.
type IPasswordFunctionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunctionName returns the functionName token.
	GetFunctionName() antlr.Token

	// SetFunctionName sets the functionName token.
	SetFunctionName(antlr.Token)

	// IsPasswordFunctionClauseContext differentiates from other interfaces.
	IsPasswordFunctionClauseContext()
}

type PasswordFunctionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	functionName antlr.Token
}

func NewEmptyPasswordFunctionClauseContext() *PasswordFunctionClauseContext {
	var p = new(PasswordFunctionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_passwordFunctionClause
	return p
}

func (*PasswordFunctionClauseContext) IsPasswordFunctionClauseContext() {}

func NewPasswordFunctionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PasswordFunctionClauseContext {
	var p = new(PasswordFunctionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_passwordFunctionClause

	return p
}

func (s *PasswordFunctionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PasswordFunctionClauseContext) GetFunctionName() antlr.Token { return s.functionName }

func (s *PasswordFunctionClauseContext) SetFunctionName(v antlr.Token) { s.functionName = v }

func (s *PasswordFunctionClauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PasswordFunctionClauseContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *PasswordFunctionClauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PasswordFunctionClauseContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordFunctionClauseContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *PasswordFunctionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordFunctionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PasswordFunctionClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPasswordFunctionClause(s)
	}
}

func (s *PasswordFunctionClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPasswordFunctionClause(s)
	}
}

func (p *MySqlParser) PasswordFunctionClause() (localctx IPasswordFunctionClauseContext) {
	localctx = NewPasswordFunctionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, MySqlParserRULE_passwordFunctionClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6619)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PasswordFunctionClauseContext).functionName = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOLD_PASSWORD || _la == MySqlParserPASSWORD) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PasswordFunctionClauseContext).functionName = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6620)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6621)
		p.FunctionArg()
	}
	{
		p.SetState(6622)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IFunctionArgsContext is an interface to support dynamic dispatch.
type IFunctionArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgsContext differentiates from other interfaces.
	IsFunctionArgsContext()
}

type FunctionArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgsContext() *FunctionArgsContext {
	var p = new(FunctionArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionArgs
	return p
}

func (*FunctionArgsContext) IsFunctionArgsContext() {}

func NewFunctionArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgsContext {
	var p = new(FunctionArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionArgs

	return p
}

func (s *FunctionArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgsContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *FunctionArgsContext) AllFullColumnName() []IFullColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem())
	var tst = make([]IFullColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullColumnNameContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FullColumnName(i int) IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FunctionArgsContext) AllFunctionCall() []IFunctionCallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem())
	var tst = make([]IFunctionCallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionCallContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FunctionCall(i int) IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionArgsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionArgsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *FunctionArgsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *FunctionArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionArgs(s)
	}
}

func (s *FunctionArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionArgs(s)
	}
}

func (p *MySqlParser) FunctionArgs() (localctx IFunctionArgsContext) {
	localctx = NewFunctionArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, MySqlParserRULE_functionArgs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6628)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 970, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6624)
			p.Constant()
		}

	case 2:
		{
			p.SetState(6625)
			p.FullColumnName()
		}

	case 3:
		{
			p.SetState(6626)
			p.FunctionCall()
		}

	case 4:
		{
			p.SetState(6627)
			p.expression(0)
		}

	}
	p.SetState(6639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6630)
			p.Match(MySqlParserCOMMA)
		}
		p.SetState(6635)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 971, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6631)
				p.Constant()
			}

		case 2:
			{
				p.SetState(6632)
				p.FullColumnName()
			}

		case 3:
			{
				p.SetState(6633)
				p.FunctionCall()
			}

		case 4:
			{
				p.SetState(6634)
				p.expression(0)
			}

		}

		p.SetState(6641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionArgContext is an interface to support dynamic dispatch.
type IFunctionArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgContext differentiates from other interfaces.
	IsFunctionArgContext()
}

type FunctionArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgContext() *FunctionArgContext {
	var p = new(FunctionArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionArg
	return p
}

func (*FunctionArgContext) IsFunctionArgContext() {}

func NewFunctionArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgContext {
	var p = new(FunctionArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionArg

	return p
}

func (s *FunctionArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *FunctionArgContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FunctionArgContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionArgContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionArg(s)
	}
}

func (s *FunctionArgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionArg(s)
	}
}

func (p *MySqlParser) FunctionArg() (localctx IFunctionArgContext) {
	localctx = NewFunctionArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, MySqlParserRULE_functionArg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6646)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 973, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6642)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6643)
			p.FullColumnName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6644)
			p.FunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6645)
			p.expression(0)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IsExpressionContext struct {
	*ExpressionContext
	testValue antlr.Token
}

func NewIsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsExpressionContext {
	var p = new(IsExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IsExpressionContext) GetTestValue() antlr.Token { return s.testValue }

func (s *IsExpressionContext) SetTestValue(v antlr.Token) { s.testValue = v }

func (s *IsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsExpressionContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsExpressionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *IsExpressionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *IsExpressionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *IsExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IsExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIsExpression(s)
	}
}

func (s *IsExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIsExpression(s)
	}
}

type NotExpressionContext struct {
	*ExpressionContext
	notOperator antlr.Token
}

func NewNotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NotExpressionContext {
	var p = new(NotExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NotExpressionContext) GetNotOperator() antlr.Token { return s.notOperator }

func (s *NotExpressionContext) SetNotOperator(v antlr.Token) { s.notOperator = v }

func (s *NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NotExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *NotExpressionContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *NotExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNotExpression(s)
	}
}

func (s *NotExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNotExpression(s)
	}
}

type LogicalExpressionContext struct {
	*ExpressionContext
}

func NewLogicalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalExpressionContext {
	var p = new(LogicalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *LogicalExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalExpressionContext) LogicalOperator() ILogicalOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOperatorContext)
}

func (s *LogicalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLogicalExpression(s)
	}
}

func (s *LogicalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLogicalExpression(s)
	}
}

type PredicateExpressionContext struct {
	*ExpressionContext
}

func NewPredicateExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateExpressionContext {
	var p = new(PredicateExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PredicateExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicateExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPredicateExpression(s)
	}
}

func (s *PredicateExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPredicateExpression(s)
	}
}

func (p *MySqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *MySqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 640
	p.EnterRecursionRule(localctx, 640, MySqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6659)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 975, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNotExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(6649)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NotExpressionContext).notOperator = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNOT || _la == MySqlParserEXCLAMATION_SYMBOL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NotExpressionContext).notOperator = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6650)
			p.expression(4)
		}

	case 2:
		localctx = NewIsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6651)
			p.predicate(0)
		}
		{
			p.SetState(6652)
			p.Match(MySqlParserIS)
		}
		p.SetState(6654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(6653)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(6656)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IsExpressionContext).testValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE || _la == MySqlParserUNKNOWN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IsExpressionContext).testValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 3:
		localctx = NewPredicateExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6658)
			p.predicate(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6667)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 976, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expression)
			p.SetState(6661)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(6662)
				p.LogicalOperator()
			}
			{
				p.SetState(6663)
				p.expression(4)
			}

		}
		p.SetState(6669)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 976, p.GetParserRuleContext())
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SoundsLikePredicateContext struct {
	*PredicateContext
}

func NewSoundsLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SoundsLikePredicateContext {
	var p = new(SoundsLikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SoundsLikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SoundsLikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *SoundsLikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SoundsLikePredicateContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *SoundsLikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *SoundsLikePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSoundsLikePredicate(s)
	}
}

func (s *SoundsLikePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSoundsLikePredicate(s)
	}
}

type ExpressionAtomPredicateContext struct {
	*PredicateContext
}

func NewExpressionAtomPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionAtomPredicateContext {
	var p = new(ExpressionAtomPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ExpressionAtomPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAtomPredicateContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *ExpressionAtomPredicateContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *ExpressionAtomPredicateContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *ExpressionAtomPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpressionAtomPredicate(s)
	}
}

func (s *ExpressionAtomPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpressionAtomPredicate(s)
	}
}

type SubqueryComparisonPredicateContext struct {
	*PredicateContext
	quantifier antlr.Token
}

func NewSubqueryComparisonPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryComparisonPredicateContext {
	var p = new(SubqueryComparisonPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SubqueryComparisonPredicateContext) GetQuantifier() antlr.Token { return s.quantifier }

func (s *SubqueryComparisonPredicateContext) SetQuantifier(v antlr.Token) { s.quantifier = v }

func (s *SubqueryComparisonPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryComparisonPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SubqueryComparisonPredicateContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *SubqueryComparisonPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryComparisonPredicateContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryComparisonPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryComparisonPredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *SubqueryComparisonPredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *SubqueryComparisonPredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *SubqueryComparisonPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubqueryComparisonPredicate(s)
	}
}

func (s *SubqueryComparisonPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubqueryComparisonPredicate(s)
	}
}

type JsonMemberOfPredicateContext struct {
	*PredicateContext
}

func NewJsonMemberOfPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonMemberOfPredicateContext {
	var p = new(JsonMemberOfPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *JsonMemberOfPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonMemberOfPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *JsonMemberOfPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *JsonMemberOfPredicateContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMBER, 0)
}

func (s *JsonMemberOfPredicateContext) OF() antlr.TerminalNode {
	return s.GetToken(MySqlParserOF, 0)
}

func (s *JsonMemberOfPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *JsonMemberOfPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *JsonMemberOfPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterJsonMemberOfPredicate(s)
	}
}

func (s *JsonMemberOfPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitJsonMemberOfPredicate(s)
	}
}

type BinaryComparisonPredicateContext struct {
	*PredicateContext
	left  IPredicateContext
	right IPredicateContext
}

func NewBinaryComparisonPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryComparisonPredicateContext {
	var p = new(BinaryComparisonPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BinaryComparisonPredicateContext) GetLeft() IPredicateContext { return s.left }

func (s *BinaryComparisonPredicateContext) GetRight() IPredicateContext { return s.right }

func (s *BinaryComparisonPredicateContext) SetLeft(v IPredicateContext) { s.left = v }

func (s *BinaryComparisonPredicateContext) SetRight(v IPredicateContext) { s.right = v }

func (s *BinaryComparisonPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryComparisonPredicateContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *BinaryComparisonPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BinaryComparisonPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BinaryComparisonPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinaryComparisonPredicate(s)
	}
}

func (s *BinaryComparisonPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinaryComparisonPredicate(s)
	}
}

type InPredicateContext struct {
	*PredicateContext
}

func NewInPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InPredicateContext {
	var p = new(InPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *InPredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *InPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *InPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *InPredicateContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *InPredicateContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *InPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *InPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInPredicate(s)
	}
}

func (s *InPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInPredicate(s)
	}
}

type BetweenPredicateContext struct {
	*PredicateContext
}

func NewBetweenPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BetweenPredicateContext {
	var p = new(BetweenPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BetweenPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BetweenPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BetweenPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BetweenPredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBETWEEN, 0)
}

func (s *BetweenPredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *BetweenPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *BetweenPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBetweenPredicate(s)
	}
}

func (s *BetweenPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBetweenPredicate(s)
	}
}

type IsNullPredicateContext struct {
	*PredicateContext
}

func NewIsNullPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsNullPredicateContext {
	var p = new(IsNullPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *IsNullPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsNullPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsNullPredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsNullPredicateContext) NullNotnull() INullNotnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullNotnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullNotnullContext)
}

func (s *IsNullPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIsNullPredicate(s)
	}
}

func (s *IsNullPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIsNullPredicate(s)
	}
}

type LikePredicateContext struct {
	*PredicateContext
}

func NewLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LikePredicateContext {
	var p = new(LikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *LikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *LikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *LikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *LikePredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *LikePredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *LikePredicateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *LikePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLikePredicate(s)
	}
}

func (s *LikePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLikePredicate(s)
	}
}

type RegexpPredicateContext struct {
	*PredicateContext
	regex antlr.Token
}

func NewRegexpPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RegexpPredicateContext {
	var p = new(RegexpPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *RegexpPredicateContext) GetRegex() antlr.Token { return s.regex }

func (s *RegexpPredicateContext) SetRegex(v antlr.Token) { s.regex = v }

func (s *RegexpPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegexpPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *RegexpPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *RegexpPredicateContext) REGEXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserREGEXP, 0)
}

func (s *RegexpPredicateContext) RLIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRLIKE, 0)
}

func (s *RegexpPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RegexpPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRegexpPredicate(s)
	}
}

func (s *RegexpPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRegexpPredicate(s)
	}
}

func (p *MySqlParser) Predicate() (localctx IPredicateContext) {
	return p.predicate(0)
}

func (p *MySqlParser) predicate(_p int) (localctx IPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 642
	p.EnterRecursionRule(localctx, 642, MySqlParserRULE_predicate, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewExpressionAtomPredicateContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	p.SetState(6673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 977, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6671)
			p.Match(MySqlParserLOCAL_ID)
		}
		{
			p.SetState(6672)
			p.Match(MySqlParserVAR_ASSIGN)
		}

	}
	{
		p.SetState(6675)
		p.expressionAtom(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6741)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 985, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6739)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 984, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryComparisonPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				localctx.(*BinaryComparisonPredicateContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6677)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(6678)
					p.ComparisonOperator()
				}
				{
					p.SetState(6679)

					var _x = p.predicate(9)

					localctx.(*BinaryComparisonPredicateContext).right = _x
				}

			case 2:
				localctx = NewBetweenPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6681)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				p.SetState(6683)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6682)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6685)
					p.Match(MySqlParserBETWEEN)
				}
				{
					p.SetState(6686)
					p.predicate(0)
				}
				{
					p.SetState(6687)
					p.Match(MySqlParserAND)
				}
				{
					p.SetState(6688)
					p.predicate(7)
				}

			case 3:
				localctx = NewSoundsLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6690)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(6691)
					p.Match(MySqlParserSOUNDS)
				}
				{
					p.SetState(6692)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(6693)
					p.predicate(6)
				}

			case 4:
				localctx = NewRegexpPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6694)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(6696)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6695)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6698)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*RegexpPredicateContext).regex = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserREGEXP || _la == MySqlParserRLIKE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*RegexpPredicateContext).regex = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6699)
					p.predicate(4)
				}

			case 5:
				localctx = NewInPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6700)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				p.SetState(6702)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6701)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6704)
					p.Match(MySqlParserIN)
				}
				{
					p.SetState(6705)
					p.Match(MySqlParserLR_BRACKET)
				}
				p.SetState(6708)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 981, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(6706)
						p.SelectStatement()
					}

				case 2:
					{
						p.SetState(6707)
						p.Expressions()
					}

				}
				{
					p.SetState(6710)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 6:
				localctx = NewIsNullPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6712)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(6713)
					p.Match(MySqlParserIS)
				}
				{
					p.SetState(6714)
					p.NullNotnull()
				}

			case 7:
				localctx = NewSubqueryComparisonPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6715)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(6716)
					p.ComparisonOperator()
				}
				{
					p.SetState(6717)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*SubqueryComparisonPredicateContext).quantifier = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserANY || _la == MySqlParserSOME) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*SubqueryComparisonPredicateContext).quantifier = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6718)
					p.Match(MySqlParserLR_BRACKET)
				}
				{
					p.SetState(6719)
					p.SelectStatement()
				}
				{
					p.SetState(6720)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 8:
				localctx = NewLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6722)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(6724)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6723)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6726)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(6727)
					p.predicate(0)
				}
				p.SetState(6730)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 983, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(6728)
						p.Match(MySqlParserESCAPE)
					}
					{
						p.SetState(6729)
						p.Match(MySqlParserSTRING_LITERAL)
					}

				}

			case 9:
				localctx = NewJsonMemberOfPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6732)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(6733)
					p.Match(MySqlParserMEMBER)
				}
				{
					p.SetState(6734)
					p.Match(MySqlParserOF)
				}
				{
					p.SetState(6735)
					p.Match(MySqlParserLR_BRACKET)
				}
				{
					p.SetState(6736)
					p.predicate(0)
				}
				{
					p.SetState(6737)
					p.Match(MySqlParserRR_BRACKET)
				}

			}

		}
		p.SetState(6743)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 985, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionAtomContext is an interface to support dynamic dispatch.
type IExpressionAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionAtomContext differentiates from other interfaces.
	IsExpressionAtomContext()
}

type ExpressionAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionAtomContext() *ExpressionAtomContext {
	var p = new(ExpressionAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionAtom
	return p
}

func (*ExpressionAtomContext) IsExpressionAtomContext() {}

func NewExpressionAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionAtomContext {
	var p = new(ExpressionAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionAtom

	return p
}

func (s *ExpressionAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionAtomContext) CopyFrom(ctx *ExpressionAtomContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnaryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewUnaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryExpressionAtomContext {
	var p = new(UnaryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *UnaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionAtomContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *UnaryExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *UnaryExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnaryExpressionAtom(s)
	}
}

func (s *UnaryExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnaryExpressionAtom(s)
	}
}

type CollateExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewCollateExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollateExpressionAtomContext {
	var p = new(CollateExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *CollateExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *CollateExpressionAtomContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CollateExpressionAtomContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CollateExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollateExpressionAtom(s)
	}
}

func (s *CollateExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollateExpressionAtom(s)
	}
}

type MysqlVariableExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewMysqlVariableExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MysqlVariableExpressionAtomContext {
	var p = new(MysqlVariableExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *MysqlVariableExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MysqlVariableExpressionAtomContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *MysqlVariableExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMysqlVariableExpressionAtom(s)
	}
}

func (s *MysqlVariableExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMysqlVariableExpressionAtom(s)
	}
}

type NestedExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewNestedExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NestedExpressionAtomContext {
	var p = new(NestedExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *NestedExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *NestedExpressionAtomContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *NestedExpressionAtomContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NestedExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *NestedExpressionAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *NestedExpressionAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *NestedExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNestedExpressionAtom(s)
	}
}

func (s *NestedExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNestedExpressionAtom(s)
	}
}

type NestedRowExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewNestedRowExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NestedRowExpressionAtomContext {
	var p = new(NestedRowExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *NestedRowExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedRowExpressionAtomContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *NestedRowExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *NestedRowExpressionAtomContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *NestedRowExpressionAtomContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NestedRowExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *NestedRowExpressionAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *NestedRowExpressionAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *NestedRowExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNestedRowExpressionAtom(s)
	}
}

func (s *NestedRowExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNestedRowExpressionAtom(s)
	}
}

type MathExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewMathExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MathExpressionAtomContext {
	var p = new(MathExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *MathExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *MathExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *MathExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *MathExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *MathExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathExpressionAtomContext) MathOperator() IMathOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMathOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMathOperatorContext)
}

func (s *MathExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *MathExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *MathExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMathExpressionAtom(s)
	}
}

func (s *MathExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMathExpressionAtom(s)
	}
}

type ExistsExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewExistsExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsExpressionAtomContext {
	var p = new(ExistsExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *ExistsExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsExpressionAtomContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *ExistsExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ExistsExpressionAtomContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *ExistsExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ExistsExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExistsExpressionAtom(s)
	}
}

func (s *ExistsExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExistsExpressionAtom(s)
	}
}

type IntervalExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewIntervalExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalExpressionAtomContext {
	var p = new(IntervalExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *IntervalExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExpressionAtomContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *IntervalExpressionAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExpressionAtomContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalExpressionAtom(s)
	}
}

func (s *IntervalExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalExpressionAtom(s)
	}
}

type JsonExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewJsonExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonExpressionAtomContext {
	var p = new(JsonExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *JsonExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *JsonExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *JsonExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *JsonExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *JsonExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonExpressionAtomContext) JsonOperator() IJsonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJsonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJsonOperatorContext)
}

func (s *JsonExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *JsonExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *JsonExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterJsonExpressionAtom(s)
	}
}

func (s *JsonExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitJsonExpressionAtom(s)
	}
}

type SubqueryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewSubqueryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryExpressionAtomContext {
	var p = new(SubqueryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *SubqueryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryExpressionAtomContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubqueryExpressionAtom(s)
	}
}

func (s *SubqueryExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubqueryExpressionAtom(s)
	}
}

type ConstantExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewConstantExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantExpressionAtomContext {
	var p = new(ConstantExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *ConstantExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionAtomContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstantExpressionAtom(s)
	}
}

func (s *ConstantExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstantExpressionAtom(s)
	}
}

type FunctionCallExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewFunctionCallExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionAtomContext {
	var p = new(FunctionCallExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *FunctionCallExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionAtomContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionCallExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionCallExpressionAtom(s)
	}
}

func (s *FunctionCallExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionCallExpressionAtom(s)
	}
}

type BinaryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewBinaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryExpressionAtomContext {
	var p = new(BinaryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *BinaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionAtomContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *BinaryExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *BinaryExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinaryExpressionAtom(s)
	}
}

func (s *BinaryExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinaryExpressionAtom(s)
	}
}

type FullColumnNameExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewFullColumnNameExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FullColumnNameExpressionAtomContext {
	var p = new(FullColumnNameExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *FullColumnNameExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullColumnNameExpressionAtomContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FullColumnNameExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFullColumnNameExpressionAtom(s)
	}
}

func (s *FullColumnNameExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFullColumnNameExpressionAtom(s)
	}
}

type BitExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewBitExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitExpressionAtomContext {
	var p = new(BitExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *BitExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *BitExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *BitExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *BitExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *BitExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitExpressionAtomContext) BitOperator() IBitOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitOperatorContext)
}

func (s *BitExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *BitExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *BitExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBitExpressionAtom(s)
	}
}

func (s *BitExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBitExpressionAtom(s)
	}
}

func (p *MySqlParser) ExpressionAtom() (localctx IExpressionAtomContext) {
	return p.expressionAtom(0)
}

func (p *MySqlParser) expressionAtom(_p int) (localctx IExpressionAtomContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionAtomContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionAtomContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 644
	p.EnterRecursionRule(localctx, 644, MySqlParserRULE_expressionAtom, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6789)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 988, p.GetParserRuleContext()) {
	case 1:
		localctx = NewConstantExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(6745)
			p.Constant()
		}

	case 2:
		localctx = NewFullColumnNameExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6746)
			p.FullColumnName()
		}

	case 3:
		localctx = NewFunctionCallExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6747)
			p.FunctionCall()
		}

	case 4:
		localctx = NewMysqlVariableExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6748)
			p.MysqlVariable()
		}

	case 5:
		localctx = NewUnaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6749)
			p.UnaryOperator()
		}
		{
			p.SetState(6750)
			p.expressionAtom(10)
		}

	case 6:
		localctx = NewBinaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6752)
			p.Match(MySqlParserBINARY)
		}
		{
			p.SetState(6753)
			p.expressionAtom(9)
		}

	case 7:
		localctx = NewNestedExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6754)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6755)
			p.expression(0)
		}
		p.SetState(6760)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(6756)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6757)
				p.expression(0)
			}

			p.SetState(6762)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6763)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 8:
		localctx = NewNestedRowExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6765)
			p.Match(MySqlParserROW)
		}
		{
			p.SetState(6766)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6767)
			p.expression(0)
		}
		p.SetState(6770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserCOMMA {
			{
				p.SetState(6768)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6769)
				p.expression(0)
			}

			p.SetState(6772)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6774)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewExistsExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6776)
			p.Match(MySqlParserEXISTS)
		}
		{
			p.SetState(6777)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6778)
			p.SelectStatement()
		}
		{
			p.SetState(6779)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubqueryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6781)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6782)
			p.SelectStatement()
		}
		{
			p.SetState(6783)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewIntervalExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6785)
			p.Match(MySqlParserINTERVAL)
		}
		{
			p.SetState(6786)
			p.expression(0)
		}
		{
			p.SetState(6787)
			p.IntervalType()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6808)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 990, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6806)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 989, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBitExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*BitExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6791)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(6792)
					p.BitOperator()
				}
				{
					p.SetState(6793)

					var _x = p.expressionAtom(4)

					localctx.(*BitExpressionAtomContext).right = _x
				}

			case 2:
				localctx = NewMathExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*MathExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6795)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(6796)
					p.MathOperator()
				}
				{
					p.SetState(6797)

					var _x = p.expressionAtom(3)

					localctx.(*MathExpressionAtomContext).right = _x
				}

			case 3:
				localctx = NewJsonExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*JsonExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6799)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(6800)
					p.JsonOperator()
				}
				{
					p.SetState(6801)

					var _x = p.expressionAtom(2)

					localctx.(*JsonExpressionAtomContext).right = _x
				}

			case 4:
				localctx = NewCollateExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6803)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(6804)
					p.Match(MySqlParserCOLLATE)
				}
				{
					p.SetState(6805)
					p.CollationName()
				}

			}

		}
		p.SetState(6810)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 990, p.GetParserRuleContext())
	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *UnaryOperatorContext) BIT_NOT_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_NOT_OP, 0)
}

func (s *UnaryOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *UnaryOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *UnaryOperatorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnaryOperator(s)
	}
}

func (s *UnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnaryOperator(s)
	}
}

func (p *MySqlParser) UnaryOperator() (localctx IUnaryOperatorContext) {
	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, MySqlParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6811)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNOT || (((_la-1083)&-(0x1f+1)) == 0 && ((1<<uint((_la-1083)))&((1<<(MySqlParserPLUS-1083))|(1<<(MySqlParserMINUS-1083))|(1<<(MySqlParserEXCLAMATION_SYMBOL-1083))|(1<<(MySqlParserBIT_NOT_OP-1083)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) GREATER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) LESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitComparisonOperator(s)
	}
}

func (p *MySqlParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, MySqlParserRULE_comparisonOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6827)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 991, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6813)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6814)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6815)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6816)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6817)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6818)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6819)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6820)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6821)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6822)
			p.Match(MySqlParserEXCLAMATION_SYMBOL)
		}
		{
			p.SetState(6823)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6824)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6825)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(6826)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}

	return localctx
}

// ILogicalOperatorContext is an interface to support dynamic dispatch.
type ILogicalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOperatorContext differentiates from other interfaces.
	IsLogicalOperatorContext()
}

type LogicalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOperatorContext() *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_logicalOperator
	return p
}

func (*LogicalOperatorContext) IsLogicalOperatorContext() {}

func NewLogicalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_logicalOperator

	return p
}

func (s *LogicalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOperatorContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *LogicalOperatorContext) AllBIT_AND_OP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBIT_AND_OP)
}

func (s *LogicalOperatorContext) BIT_AND_OP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND_OP, i)
}

func (s *LogicalOperatorContext) XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserXOR, 0)
}

func (s *LogicalOperatorContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *LogicalOperatorContext) AllBIT_OR_OP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBIT_OR_OP)
}

func (s *LogicalOperatorContext) BIT_OR_OP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR_OP, i)
}

func (s *LogicalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLogicalOperator(s)
	}
}

func (s *LogicalOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLogicalOperator(s)
	}
}

func (p *MySqlParser) LogicalOperator() (localctx ILogicalOperatorContext) {
	localctx = NewLogicalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, MySqlParserRULE_logicalOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6836)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6829)
			p.Match(MySqlParserAND)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6830)
			p.Match(MySqlParserBIT_AND_OP)
		}
		{
			p.SetState(6831)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserXOR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6832)
			p.Match(MySqlParserXOR)
		}

	case MySqlParserOR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6833)
			p.Match(MySqlParserOR)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6834)
			p.Match(MySqlParserBIT_OR_OP)
		}
		{
			p.SetState(6835)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBitOperatorContext is an interface to support dynamic dispatch.
type IBitOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitOperatorContext differentiates from other interfaces.
	IsBitOperatorContext()
}

type BitOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitOperatorContext() *BitOperatorContext {
	var p = new(BitOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_bitOperator
	return p
}

func (*BitOperatorContext) IsBitOperatorContext() {}

func NewBitOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitOperatorContext {
	var p = new(BitOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_bitOperator

	return p
}

func (s *BitOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitOperatorContext) AllLESS_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLESS_SYMBOL)
}

func (s *BitOperatorContext) LESS_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, i)
}

func (s *BitOperatorContext) AllGREATER_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGREATER_SYMBOL)
}

func (s *BitOperatorContext) GREATER_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, i)
}

func (s *BitOperatorContext) BIT_AND_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND_OP, 0)
}

func (s *BitOperatorContext) BIT_XOR_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR_OP, 0)
}

func (s *BitOperatorContext) BIT_OR_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR_OP, 0)
}

func (s *BitOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBitOperator(s)
	}
}

func (s *BitOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBitOperator(s)
	}
}

func (p *MySqlParser) BitOperator() (localctx IBitOperatorContext) {
	localctx = NewBitOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, MySqlParserRULE_bitOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6845)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLESS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6838)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6839)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case MySqlParserGREATER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6840)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6841)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6842)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserBIT_XOR_OP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6843)
			p.Match(MySqlParserBIT_XOR_OP)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6844)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMathOperatorContext is an interface to support dynamic dispatch.
type IMathOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMathOperatorContext differentiates from other interfaces.
	IsMathOperatorContext()
}

type MathOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMathOperatorContext() *MathOperatorContext {
	var p = new(MathOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_mathOperator
	return p
}

func (*MathOperatorContext) IsMathOperatorContext() {}

func NewMathOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MathOperatorContext {
	var p = new(MathOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_mathOperator

	return p
}

func (s *MathOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *MathOperatorContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *MathOperatorContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIVIDE, 0)
}

func (s *MathOperatorContext) MODULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODULE, 0)
}

func (s *MathOperatorContext) DIV() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIV, 0)
}

func (s *MathOperatorContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMOD, 0)
}

func (s *MathOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *MathOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *MathOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MathOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMathOperator(s)
	}
}

func (s *MathOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMathOperator(s)
	}
}

func (p *MySqlParser) MathOperator() (localctx IMathOperatorContext) {
	localctx = NewMathOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, MySqlParserRULE_mathOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6847)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-1080)&-(0x1f+1)) == 0 && ((1<<uint((_la-1080)))&((1<<(MySqlParserSTAR-1080))|(1<<(MySqlParserDIVIDE-1080))|(1<<(MySqlParserMODULE-1080))|(1<<(MySqlParserPLUS-1080))|(1<<(MySqlParserMINUS-1080))|(1<<(MySqlParserDIV-1080))|(1<<(MySqlParserMOD-1080)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IJsonOperatorContext is an interface to support dynamic dispatch.
type IJsonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJsonOperatorContext differentiates from other interfaces.
	IsJsonOperatorContext()
}

type JsonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJsonOperatorContext() *JsonOperatorContext {
	var p = new(JsonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_jsonOperator
	return p
}

func (*JsonOperatorContext) IsJsonOperatorContext() {}

func NewJsonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JsonOperatorContext {
	var p = new(JsonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_jsonOperator

	return p
}

func (s *JsonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *JsonOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *JsonOperatorContext) AllGREATER_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGREATER_SYMBOL)
}

func (s *JsonOperatorContext) GREATER_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, i)
}

func (s *JsonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JsonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterJsonOperator(s)
	}
}

func (s *JsonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitJsonOperator(s)
	}
}

func (p *MySqlParser) JsonOperator() (localctx IJsonOperatorContext) {
	localctx = NewJsonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, MySqlParserRULE_jsonOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 994, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6849)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6850)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6851)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6852)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6853)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}

	return localctx
}

// ICharsetNameBaseContext is an interface to support dynamic dispatch.
type ICharsetNameBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetNameBaseContext differentiates from other interfaces.
	IsCharsetNameBaseContext()
}

type CharsetNameBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetNameBaseContext() *CharsetNameBaseContext {
	var p = new(CharsetNameBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charsetNameBase
	return p
}

func (*CharsetNameBaseContext) IsCharsetNameBaseContext() {}

func NewCharsetNameBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetNameBaseContext {
	var p = new(CharsetNameBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charsetNameBase

	return p
}

func (s *CharsetNameBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetNameBaseContext) ARMSCII8() antlr.TerminalNode {
	return s.GetToken(MySqlParserARMSCII8, 0)
}

func (s *CharsetNameBaseContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *CharsetNameBaseContext) BIG5() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIG5, 0)
}

func (s *CharsetNameBaseContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CharsetNameBaseContext) CP1250() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1250, 0)
}

func (s *CharsetNameBaseContext) CP1251() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1251, 0)
}

func (s *CharsetNameBaseContext) CP1256() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1256, 0)
}

func (s *CharsetNameBaseContext) CP1257() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1257, 0)
}

func (s *CharsetNameBaseContext) CP850() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP850, 0)
}

func (s *CharsetNameBaseContext) CP852() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP852, 0)
}

func (s *CharsetNameBaseContext) CP866() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP866, 0)
}

func (s *CharsetNameBaseContext) CP932() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP932, 0)
}

func (s *CharsetNameBaseContext) DEC8() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEC8, 0)
}

func (s *CharsetNameBaseContext) EUCJPMS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCJPMS, 0)
}

func (s *CharsetNameBaseContext) EUCKR() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCKR, 0)
}

func (s *CharsetNameBaseContext) GB18030() antlr.TerminalNode {
	return s.GetToken(MySqlParserGB18030, 0)
}

func (s *CharsetNameBaseContext) GB2312() antlr.TerminalNode {
	return s.GetToken(MySqlParserGB2312, 0)
}

func (s *CharsetNameBaseContext) GBK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGBK, 0)
}

func (s *CharsetNameBaseContext) GEOSTD8() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOSTD8, 0)
}

func (s *CharsetNameBaseContext) GREEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREEK, 0)
}

func (s *CharsetNameBaseContext) HEBREW() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEBREW, 0)
}

func (s *CharsetNameBaseContext) HP8() antlr.TerminalNode {
	return s.GetToken(MySqlParserHP8, 0)
}

func (s *CharsetNameBaseContext) KEYBCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYBCS2, 0)
}

func (s *CharsetNameBaseContext) KOI8R() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8R, 0)
}

func (s *CharsetNameBaseContext) KOI8U() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8U, 0)
}

func (s *CharsetNameBaseContext) LATIN1() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN1, 0)
}

func (s *CharsetNameBaseContext) LATIN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN2, 0)
}

func (s *CharsetNameBaseContext) LATIN5() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN5, 0)
}

func (s *CharsetNameBaseContext) LATIN7() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN7, 0)
}

func (s *CharsetNameBaseContext) MACCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACCE, 0)
}

func (s *CharsetNameBaseContext) MACROMAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACROMAN, 0)
}

func (s *CharsetNameBaseContext) SJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSJIS, 0)
}

func (s *CharsetNameBaseContext) SWE7() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWE7, 0)
}

func (s *CharsetNameBaseContext) TIS620() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIS620, 0)
}

func (s *CharsetNameBaseContext) UCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCS2, 0)
}

func (s *CharsetNameBaseContext) UJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUJIS, 0)
}

func (s *CharsetNameBaseContext) UTF16() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16, 0)
}

func (s *CharsetNameBaseContext) UTF16LE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16LE, 0)
}

func (s *CharsetNameBaseContext) UTF32() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF32, 0)
}

func (s *CharsetNameBaseContext) UTF8() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8, 0)
}

func (s *CharsetNameBaseContext) UTF8MB3() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB3, 0)
}

func (s *CharsetNameBaseContext) UTF8MB4() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB4, 0)
}

func (s *CharsetNameBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetNameBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetNameBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharsetNameBase(s)
	}
}

func (s *CharsetNameBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharsetNameBase(s)
	}
}

func (p *MySqlParser) CharsetNameBase() (localctx ICharsetNameBaseContext) {
	localctx = NewCharsetNameBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, MySqlParserRULE_charsetNameBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6856)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINARY || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserARMSCII8-711))|(1<<(MySqlParserASCII-711))|(1<<(MySqlParserBIG5-711))|(1<<(MySqlParserCP1250-711))|(1<<(MySqlParserCP1251-711))|(1<<(MySqlParserCP1256-711))|(1<<(MySqlParserCP1257-711))|(1<<(MySqlParserCP850-711))|(1<<(MySqlParserCP852-711))|(1<<(MySqlParserCP866-711))|(1<<(MySqlParserCP932-711))|(1<<(MySqlParserDEC8-711))|(1<<(MySqlParserEUCJPMS-711))|(1<<(MySqlParserEUCKR-711))|(1<<(MySqlParserGB18030-711))|(1<<(MySqlParserGB2312-711))|(1<<(MySqlParserGBK-711))|(1<<(MySqlParserGEOSTD8-711))|(1<<(MySqlParserGREEK-711))|(1<<(MySqlParserHEBREW-711))|(1<<(MySqlParserHP8-711))|(1<<(MySqlParserKEYBCS2-711))|(1<<(MySqlParserKOI8R-711))|(1<<(MySqlParserKOI8U-711))|(1<<(MySqlParserLATIN1-711))|(1<<(MySqlParserLATIN2-711))|(1<<(MySqlParserLATIN5-711))|(1<<(MySqlParserLATIN7-711))|(1<<(MySqlParserMACCE-711))|(1<<(MySqlParserMACROMAN-711))|(1<<(MySqlParserSJIS-711))|(1<<(MySqlParserSWE7-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserTIS620-743))|(1<<(MySqlParserUCS2-743))|(1<<(MySqlParserUJIS-743))|(1<<(MySqlParserUTF16-743))|(1<<(MySqlParserUTF16LE-743))|(1<<(MySqlParserUTF32-743))|(1<<(MySqlParserUTF8-743))|(1<<(MySqlParserUTF8MB3-743))|(1<<(MySqlParserUTF8MB4-743)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITransactionLevelBaseContext is an interface to support dynamic dispatch.
type ITransactionLevelBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionLevelBaseContext differentiates from other interfaces.
	IsTransactionLevelBaseContext()
}

type TransactionLevelBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionLevelBaseContext() *TransactionLevelBaseContext {
	var p = new(TransactionLevelBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionLevelBase
	return p
}

func (*TransactionLevelBaseContext) IsTransactionLevelBaseContext() {}

func NewTransactionLevelBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionLevelBaseContext {
	var p = new(TransactionLevelBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionLevelBase

	return p
}

func (s *TransactionLevelBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionLevelBaseContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *TransactionLevelBaseContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *TransactionLevelBaseContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *TransactionLevelBaseContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *TransactionLevelBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionLevelBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionLevelBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransactionLevelBase(s)
	}
}

func (s *TransactionLevelBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransactionLevelBase(s)
	}
}

func (p *MySqlParser) TransactionLevelBase() (localctx ITransactionLevelBaseContext) {
	localctx = NewTransactionLevelBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, MySqlParserRULE_transactionLevelBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6858)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-764)&-(0x1f+1)) == 0 && ((1<<uint((_la-764)))&((1<<(MySqlParserREPEATABLE-764))|(1<<(MySqlParserCOMMITTED-764))|(1<<(MySqlParserUNCOMMITTED-764))|(1<<(MySqlParserSERIALIZABLE-764)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrivilegesBaseContext is an interface to support dynamic dispatch.
type IPrivilegesBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegesBaseContext differentiates from other interfaces.
	IsPrivilegesBaseContext()
}

type PrivilegesBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegesBaseContext() *PrivilegesBaseContext {
	var p = new(PrivilegesBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilegesBase
	return p
}

func (*PrivilegesBaseContext) IsPrivilegesBaseContext() {}

func NewPrivilegesBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegesBaseContext {
	var p = new(PrivilegesBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilegesBase

	return p
}

func (s *PrivilegesBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegesBaseContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *PrivilegesBaseContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *PrivilegesBaseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *PrivilegesBaseContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *PrivilegesBaseContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *PrivilegesBaseContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *PrivilegesBaseContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *PrivilegesBaseContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *PrivilegesBaseContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *PrivilegesBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegesBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegesBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivilegesBase(s)
	}
}

func (s *PrivilegesBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivilegesBase(s)
	}
}

func (p *MySqlParser) PrivilegesBase() (localctx IPrivilegesBaseContext) {
	localctx = NewPrivilegesBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, MySqlParserRULE_privilegesBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6860)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-669)&-(0x1f+1)) == 0 && ((1<<uint((_la-669)))&((1<<(MySqlParserTABLES-669))|(1<<(MySqlParserROUTINE-669))|(1<<(MySqlParserEXECUTE-669))|(1<<(MySqlParserFILE-669))|(1<<(MySqlParserPROCESS-669))|(1<<(MySqlParserRELOAD-669))|(1<<(MySqlParserSHUTDOWN-669))|(1<<(MySqlParserSUPER-669))|(1<<(MySqlParserPRIVILEGES-669)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIntervalTypeBaseContext is an interface to support dynamic dispatch.
type IIntervalTypeBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalTypeBaseContext differentiates from other interfaces.
	IsIntervalTypeBaseContext()
}

type IntervalTypeBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalTypeBaseContext() *IntervalTypeBaseContext {
	var p = new(IntervalTypeBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalTypeBase
	return p
}

func (*IntervalTypeBaseContext) IsIntervalTypeBaseContext() {}

func NewIntervalTypeBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalTypeBaseContext {
	var p = new(IntervalTypeBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalTypeBase

	return p
}

func (s *IntervalTypeBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalTypeBaseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *IntervalTypeBaseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *IntervalTypeBaseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *IntervalTypeBaseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *IntervalTypeBaseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *IntervalTypeBaseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *IntervalTypeBaseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *IntervalTypeBaseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *IntervalTypeBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalTypeBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalTypeBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalTypeBase(s)
	}
}

func (s *IntervalTypeBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalTypeBase(s)
	}
}

func (p *MySqlParser) IntervalTypeBase() (localctx IIntervalTypeBaseContext) {
	localctx = NewIntervalTypeBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, MySqlParserRULE_intervalTypeBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6862)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-661)&-(0x1f+1)) == 0 && ((1<<uint((_la-661)))&((1<<(MySqlParserQUARTER-661))|(1<<(MySqlParserMONTH-661))|(1<<(MySqlParserDAY-661))|(1<<(MySqlParserHOUR-661))|(1<<(MySqlParserMINUTE-661))|(1<<(MySqlParserWEEK-661))|(1<<(MySqlParserSECOND-661))|(1<<(MySqlParserMICROSECOND-661)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDataTypeBaseContext is an interface to support dynamic dispatch.
type IDataTypeBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeBaseContext differentiates from other interfaces.
	IsDataTypeBaseContext()
}

type DataTypeBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeBaseContext() *DataTypeBaseContext {
	var p = new(DataTypeBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dataTypeBase
	return p
}

func (*DataTypeBaseContext) IsDataTypeBaseContext() {}

func NewDataTypeBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeBaseContext {
	var p = new(DataTypeBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dataTypeBase

	return p
}

func (s *DataTypeBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeBaseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *DataTypeBaseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *DataTypeBaseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *DataTypeBaseContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *DataTypeBaseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *DataTypeBaseContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *DataTypeBaseContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *DataTypeBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDataTypeBase(s)
	}
}

func (s *DataTypeBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDataTypeBase(s)
	}
}

func (p *MySqlParser) DataTypeBase() (localctx IDataTypeBaseContext) {
	localctx = NewDataTypeBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, MySqlParserRULE_dataTypeBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6864)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserDATETIME-208))|(1<<(MySqlParserYEAR-208))|(1<<(MySqlParserTEXT-208))|(1<<(MySqlParserENUM-208)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordsCanBeIdContext is an interface to support dynamic dispatch.
type IKeywordsCanBeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordsCanBeIdContext differentiates from other interfaces.
	IsKeywordsCanBeIdContext()
}

type KeywordsCanBeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordsCanBeIdContext() *KeywordsCanBeIdContext {
	var p = new(KeywordsCanBeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_keywordsCanBeId
	return p
}

func (*KeywordsCanBeIdContext) IsKeywordsCanBeIdContext() {}

func NewKeywordsCanBeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordsCanBeIdContext {
	var p = new(KeywordsCanBeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_keywordsCanBeId

	return p
}

func (s *KeywordsCanBeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordsCanBeIdContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserACCOUNT, 0)
}

func (s *KeywordsCanBeIdContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *KeywordsCanBeIdContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserADMIN, 0)
}

func (s *KeywordsCanBeIdContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *KeywordsCanBeIdContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAGGREGATE, 0)
}

func (s *KeywordsCanBeIdContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *KeywordsCanBeIdContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *KeywordsCanBeIdContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *KeywordsCanBeIdContext) AUDIT_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUDIT_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *KeywordsCanBeIdContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *KeywordsCanBeIdContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *KeywordsCanBeIdContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG, 0)
}

func (s *KeywordsCanBeIdContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *KeywordsCanBeIdContext) BACKUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBACKUP_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ENCRYPTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *KeywordsCanBeIdContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND, 0)
}

func (s *KeywordsCanBeIdContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR, 0)
}

func (s *KeywordsCanBeIdContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR, 0)
}

func (s *KeywordsCanBeIdContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOCK, 0)
}

func (s *KeywordsCanBeIdContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOL, 0)
}

func (s *KeywordsCanBeIdContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOLEAN, 0)
}

func (s *KeywordsCanBeIdContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *KeywordsCanBeIdContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *KeywordsCanBeIdContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *KeywordsCanBeIdContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *KeywordsCanBeIdContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGED, 0)
}

func (s *KeywordsCanBeIdContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *KeywordsCanBeIdContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *KeywordsCanBeIdContext) PAGE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE_CHECKSUM, 0)
}

func (s *KeywordsCanBeIdContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *KeywordsCanBeIdContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *KeywordsCanBeIdContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *KeywordsCanBeIdContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *KeywordsCanBeIdContext) CLONE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLONE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *KeywordsCanBeIdContext) CLUSTERING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLUSTERING, 0)
}

func (s *KeywordsCanBeIdContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *KeywordsCanBeIdContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *KeywordsCanBeIdContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *KeywordsCanBeIdContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *KeywordsCanBeIdContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *KeywordsCanBeIdContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *KeywordsCanBeIdContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *KeywordsCanBeIdContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *KeywordsCanBeIdContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *KeywordsCanBeIdContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *KeywordsCanBeIdContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSION, 0)
}

func (s *KeywordsCanBeIdContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *KeywordsCanBeIdContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECT, 0)
}

func (s *KeywordsCanBeIdContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *KeywordsCanBeIdContext) CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *KeywordsCanBeIdContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *KeywordsCanBeIdContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTEXT, 0)
}

func (s *KeywordsCanBeIdContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *KeywordsCanBeIdContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *KeywordsCanBeIdContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *KeywordsCanBeIdContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySqlParserCPU, 0)
}

func (s *KeywordsCanBeIdContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *KeywordsCanBeIdContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *KeywordsCanBeIdContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *KeywordsCanBeIdContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *KeywordsCanBeIdContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEALLOCATE, 0)
}

func (s *KeywordsCanBeIdContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT_AUTH, 0)
}

func (s *KeywordsCanBeIdContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *KeywordsCanBeIdContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *KeywordsCanBeIdContext) DES_KEY_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_KEY_FILE, 0)
}

func (s *KeywordsCanBeIdContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIAGNOSTICS, 0)
}

func (s *KeywordsCanBeIdContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *KeywordsCanBeIdContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *KeywordsCanBeIdContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *KeywordsCanBeIdContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *KeywordsCanBeIdContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *KeywordsCanBeIdContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *KeywordsCanBeIdContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *KeywordsCanBeIdContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *KeywordsCanBeIdContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *KeywordsCanBeIdContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION, 0)
}

func (s *KeywordsCanBeIdContext) ENCRYPTION_KEY_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION_KEY_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *KeywordsCanBeIdContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *KeywordsCanBeIdContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *KeywordsCanBeIdContext) ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE_ATTRIBUTE, 0)
}

func (s *KeywordsCanBeIdContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *KeywordsCanBeIdContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, 0)
}

func (s *KeywordsCanBeIdContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *KeywordsCanBeIdContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *KeywordsCanBeIdContext) EUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUR, 0)
}

func (s *KeywordsCanBeIdContext) EVEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVEN, 0)
}

func (s *KeywordsCanBeIdContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *KeywordsCanBeIdContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *KeywordsCanBeIdContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *KeywordsCanBeIdContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCEPT, 0)
}

func (s *KeywordsCanBeIdContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *KeywordsCanBeIdContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *KeywordsCanBeIdContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *KeywordsCanBeIdContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT, 0)
}

func (s *KeywordsCanBeIdContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *KeywordsCanBeIdContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAST, 0)
}

func (s *KeywordsCanBeIdContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAULTS, 0)
}

func (s *KeywordsCanBeIdContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *KeywordsCanBeIdContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE_BLOCK_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILTER, 0)
}

func (s *KeywordsCanBeIdContext) FIREWALL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) FIREWALL_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_USER, 0)
}

func (s *KeywordsCanBeIdContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *KeywordsCanBeIdContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *KeywordsCanBeIdContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH, 0)
}

func (s *KeywordsCanBeIdContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWS, 0)
}

func (s *KeywordsCanBeIdContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND, 0)
}

func (s *KeywordsCanBeIdContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *KeywordsCanBeIdContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *KeywordsCanBeIdContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERAL, 0)
}

func (s *KeywordsCanBeIdContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *KeywordsCanBeIdContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *KeywordsCanBeIdContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_CONCAT, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_REPLICATION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *KeywordsCanBeIdContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *KeywordsCanBeIdContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySqlParserHELP, 0)
}

func (s *KeywordsCanBeIdContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *KeywordsCanBeIdContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *KeywordsCanBeIdContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *KeywordsCanBeIdContext) IGNORED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORED, 0)
}

func (s *KeywordsCanBeIdContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE_SERVER_IDS, 0)
}

func (s *KeywordsCanBeIdContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *KeywordsCanBeIdContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEXES, 0)
}

func (s *KeywordsCanBeIdContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) INNODB_REDO_LOG_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ARCHIVE, 0)
}

func (s *KeywordsCanBeIdContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *KeywordsCanBeIdContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *KeywordsCanBeIdContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTALL, 0)
}

func (s *KeywordsCanBeIdContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANCE, 0)
}

func (s *KeywordsCanBeIdContext) INSTANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANT, 0)
}

func (s *KeywordsCanBeIdContext) INTERNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERNAL, 0)
}

func (s *KeywordsCanBeIdContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *KeywordsCanBeIdContext) IO() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO, 0)
}

func (s *KeywordsCanBeIdContext) IO_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO_THREAD, 0)
}

func (s *KeywordsCanBeIdContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySqlParserIPC, 0)
}

func (s *KeywordsCanBeIdContext) ISO() antlr.TerminalNode {
	return s.GetToken(MySqlParserISO, 0)
}

func (s *KeywordsCanBeIdContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *KeywordsCanBeIdContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *KeywordsCanBeIdContext) JIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJIS, 0)
}

func (s *KeywordsCanBeIdContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *KeywordsCanBeIdContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *KeywordsCanBeIdContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *KeywordsCanBeIdContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVES, 0)
}

func (s *KeywordsCanBeIdContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *KeywordsCanBeIdContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *KeywordsCanBeIdContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *KeywordsCanBeIdContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *KeywordsCanBeIdContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *KeywordsCanBeIdContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *KeywordsCanBeIdContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_AUTO_POSITION, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_CONNECT_RETRY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_DELAY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HOST, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PORT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_RETRY_COUNT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CA, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CAPATH, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CERT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CIPHER, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRL, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRLPATH, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_KEY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_TLS_VERSION, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_USER, 0)
}

func (s *KeywordsCanBeIdContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX, 0)
}

func (s *KeywordsCanBeIdContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *KeywordsCanBeIdContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *KeywordsCanBeIdContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUM, 0)
}

func (s *KeywordsCanBeIdContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMBER, 0)
}

func (s *KeywordsCanBeIdContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *KeywordsCanBeIdContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *KeywordsCanBeIdContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *KeywordsCanBeIdContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *KeywordsCanBeIdContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIGRATE, 0)
}

func (s *KeywordsCanBeIdContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN, 0)
}

func (s *KeywordsCanBeIdContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *KeywordsCanBeIdContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *KeywordsCanBeIdContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *KeywordsCanBeIdContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *KeywordsCanBeIdContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *KeywordsCanBeIdContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *KeywordsCanBeIdContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *KeywordsCanBeIdContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *KeywordsCanBeIdContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *KeywordsCanBeIdContext) NDB_STORED_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB_STORED_USER, 0)
}

func (s *KeywordsCanBeIdContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEVER, 0)
}

func (s *KeywordsCanBeIdContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *KeywordsCanBeIdContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *KeywordsCanBeIdContext) NOCOPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOCOPY, 0)
}

func (s *KeywordsCanBeIdContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *KeywordsCanBeIdContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *KeywordsCanBeIdContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOWAIT, 0)
}

func (s *KeywordsCanBeIdContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMBER, 0)
}

func (s *KeywordsCanBeIdContext) ODBC() antlr.TerminalNode {
	return s.GetToken(MySqlParserODBC, 0)
}

func (s *KeywordsCanBeIdContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *KeywordsCanBeIdContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *KeywordsCanBeIdContext) OF() antlr.TerminalNode {
	return s.GetToken(MySqlParserOF, 0)
}

func (s *KeywordsCanBeIdContext) OJ() antlr.TerminalNode {
	return s.GetToken(MySqlParserOJ, 0)
}

func (s *KeywordsCanBeIdContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE, 0)
}

func (s *KeywordsCanBeIdContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *KeywordsCanBeIdContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *KeywordsCanBeIdContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *KeywordsCanBeIdContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZER_COSTS, 0)
}

func (s *KeywordsCanBeIdContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONAL, 0)
}

func (s *KeywordsCanBeIdContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *KeywordsCanBeIdContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *KeywordsCanBeIdContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *KeywordsCanBeIdContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *KeywordsCanBeIdContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE, 0)
}

func (s *KeywordsCanBeIdContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *KeywordsCanBeIdContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *KeywordsCanBeIdContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *KeywordsCanBeIdContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *KeywordsCanBeIdContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) PERSIST_RO_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERSIST_RO_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPHASE, 0)
}

func (s *KeywordsCanBeIdContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *KeywordsCanBeIdContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN_DIR, 0)
}

func (s *KeywordsCanBeIdContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *KeywordsCanBeIdContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *KeywordsCanBeIdContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDES, 0)
}

func (s *KeywordsCanBeIdContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *KeywordsCanBeIdContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *KeywordsCanBeIdContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREV, 0)
}

func (s *KeywordsCanBeIdContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *KeywordsCanBeIdContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *KeywordsCanBeIdContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *KeywordsCanBeIdContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *KeywordsCanBeIdContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *KeywordsCanBeIdContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *KeywordsCanBeIdContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *KeywordsCanBeIdContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECOVER, 0)
}

func (s *KeywordsCanBeIdContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECURSIVE, 0)
}

func (s *KeywordsCanBeIdContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *KeywordsCanBeIdContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *KeywordsCanBeIdContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *KeywordsCanBeIdContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *KeywordsCanBeIdContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *KeywordsCanBeIdContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *KeywordsCanBeIdContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *KeywordsCanBeIdContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_REWRITE_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION_APPLIER() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_APPLIER, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION_SLAVE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_SLAVE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *KeywordsCanBeIdContext) RESOURCE_GROUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) RESOURCE_GROUP_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_USER, 0)
}

func (s *KeywordsCanBeIdContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESUME, 0)
}

func (s *KeywordsCanBeIdContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNED_SQLSTATE, 0)
}

func (s *KeywordsCanBeIdContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *KeywordsCanBeIdContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE, 0)
}

func (s *KeywordsCanBeIdContext) ROLE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *KeywordsCanBeIdContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *KeywordsCanBeIdContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROTATE, 0)
}

func (s *KeywordsCanBeIdContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *KeywordsCanBeIdContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *KeywordsCanBeIdContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *KeywordsCanBeIdContext) RTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRTREE, 0)
}

func (s *KeywordsCanBeIdContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *KeywordsCanBeIdContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *KeywordsCanBeIdContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *KeywordsCanBeIdContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *KeywordsCanBeIdContext) SECONDARY_ENGINE_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECONDARY_ENGINE_ATTRIBUTE, 0)
}

func (s *KeywordsCanBeIdContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *KeywordsCanBeIdContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *KeywordsCanBeIdContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *KeywordsCanBeIdContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) SET_USER_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET_USER_ID, 0)
}

func (s *KeywordsCanBeIdContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *KeywordsCanBeIdContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *KeywordsCanBeIdContext) SHOW_ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW_ROUTINE, 0)
}

func (s *KeywordsCanBeIdContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *KeywordsCanBeIdContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *KeywordsCanBeIdContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *KeywordsCanBeIdContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLOW, 0)
}

func (s *KeywordsCanBeIdContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *KeywordsCanBeIdContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *KeywordsCanBeIdContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *KeywordsCanBeIdContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *KeywordsCanBeIdContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *KeywordsCanBeIdContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOURCE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_GTIDS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BEFORE_GTIDS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *KeywordsCanBeIdContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD, 0)
}

func (s *KeywordsCanBeIdContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTACKED, 0)
}

func (s *KeywordsCanBeIdContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *KeywordsCanBeIdContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *KeywordsCanBeIdContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *KeywordsCanBeIdContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *KeywordsCanBeIdContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *KeywordsCanBeIdContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *KeywordsCanBeIdContext) STD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTD, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_POP, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_SAMP, 0)
}

func (s *KeywordsCanBeIdContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *KeywordsCanBeIdContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *KeywordsCanBeIdContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING, 0)
}

func (s *KeywordsCanBeIdContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *KeywordsCanBeIdContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *KeywordsCanBeIdContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *KeywordsCanBeIdContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *KeywordsCanBeIdContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUM, 0)
}

func (s *KeywordsCanBeIdContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUSPEND, 0)
}

func (s *KeywordsCanBeIdContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWAPS, 0)
}

func (s *KeywordsCanBeIdContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWITCHES, 0)
}

func (s *KeywordsCanBeIdContext) SYSTEM_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *KeywordsCanBeIdContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *KeywordsCanBeIdContext) TABLE_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_ENCRYPTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *KeywordsCanBeIdContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *KeywordsCanBeIdContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *KeywordsCanBeIdContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRADITIONAL, 0)
}

func (s *KeywordsCanBeIdContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *KeywordsCanBeIdContext) TRANSACTIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTIONAL, 0)
}

func (s *KeywordsCanBeIdContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGERS, 0)
}

func (s *KeywordsCanBeIdContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *KeywordsCanBeIdContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *KeywordsCanBeIdContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *KeywordsCanBeIdContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNINSTALL, 0)
}

func (s *KeywordsCanBeIdContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *KeywordsCanBeIdContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *KeywordsCanBeIdContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *KeywordsCanBeIdContext) USA() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSA, 0)
}

func (s *KeywordsCanBeIdContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *KeywordsCanBeIdContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE_FRM, 0)
}

func (s *KeywordsCanBeIdContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER_RESOURCES, 0)
}

func (s *KeywordsCanBeIdContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *KeywordsCanBeIdContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *KeywordsCanBeIdContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_POP, 0)
}

func (s *KeywordsCanBeIdContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_SAMP, 0)
}

func (s *KeywordsCanBeIdContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *KeywordsCanBeIdContext) VARIANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIANCE, 0)
}

func (s *KeywordsCanBeIdContext) VERSION_TOKEN_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION_TOKEN_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *KeywordsCanBeIdContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *KeywordsCanBeIdContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *KeywordsCanBeIdContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *KeywordsCanBeIdContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *KeywordsCanBeIdContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *KeywordsCanBeIdContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *KeywordsCanBeIdContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *KeywordsCanBeIdContext) XA_RECOVER_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA_RECOVER_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *KeywordsCanBeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordsCanBeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordsCanBeIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterKeywordsCanBeId(s)
	}
}

func (s *KeywordsCanBeIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitKeywordsCanBeId(s)
	}
}

func (p *MySqlParser) KeywordsCanBeId() (localctx IKeywordsCanBeIdContext) {
	localctx = NewKeywordsCanBeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, MySqlParserRULE_keywordsCanBeId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6866)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(MySqlParserCURRENT-34))|(1<<(MySqlParserDIAGNOSTICS-34))|(1<<(MySqlParserEXCEPT-34)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserIGNORED || (((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(MySqlParserNUMBER-111))|(1<<(MySqlParserOPTIONAL-111))|(1<<(MySqlParserORDER-111)))) != 0) || _la == MySqlParserSTACKED || _la == MySqlParserSERIAL || (((_la-274)&-(0x1f+1)) == 0 && ((1<<uint((_la-274)))&((1<<(MySqlParserAVG-274))|(1<<(MySqlParserBIT_AND-274))|(1<<(MySqlParserBIT_OR-274))|(1<<(MySqlParserBIT_XOR-274))|(1<<(MySqlParserCOUNT-274))|(1<<(MySqlParserGROUP_CONCAT-274))|(1<<(MySqlParserMAX-274))|(1<<(MySqlParserMIN-274))|(1<<(MySqlParserSTD-274))|(1<<(MySqlParserSTDDEV-274))|(1<<(MySqlParserSTDDEV_POP-274))|(1<<(MySqlParserSTDDEV_SAMP-274))|(1<<(MySqlParserSUM-274))|(1<<(MySqlParserVAR_POP-274))|(1<<(MySqlParserVAR_SAMP-274))|(1<<(MySqlParserVARIANCE-274)))) != 0) || (((_la-320)&-(0x1f+1)) == 0 && ((1<<uint((_la-320)))&((1<<(MySqlParserACCOUNT-320))|(1<<(MySqlParserACTION-320))|(1<<(MySqlParserAFTER-320))|(1<<(MySqlParserAGGREGATE-320))|(1<<(MySqlParserALGORITHM-320))|(1<<(MySqlParserANY-320))|(1<<(MySqlParserAT-320))|(1<<(MySqlParserAUTHORS-320))|(1<<(MySqlParserAUTOCOMMIT-320))|(1<<(MySqlParserAUTOEXTEND_SIZE-320))|(1<<(MySqlParserAUTO_INCREMENT-320))|(1<<(MySqlParserAVG_ROW_LENGTH-320))|(1<<(MySqlParserBEGIN-320))|(1<<(MySqlParserBINLOG-320))|(1<<(MySqlParserBIT-320))|(1<<(MySqlParserBLOCK-320))|(1<<(MySqlParserBOOL-320))|(1<<(MySqlParserBOOLEAN-320))|(1<<(MySqlParserBTREE-320))|(1<<(MySqlParserCACHE-320))|(1<<(MySqlParserCASCADED-320))|(1<<(MySqlParserCHAIN-320))|(1<<(MySqlParserCHANGED-320))|(1<<(MySqlParserCHANNEL-320))|(1<<(MySqlParserCHECKSUM-320))|(1<<(MySqlParserPAGE_CHECKSUM-320))|(1<<(MySqlParserCIPHER-320))|(1<<(MySqlParserCLASS_ORIGIN-320))|(1<<(MySqlParserCLIENT-320))|(1<<(MySqlParserCLOSE-320))|(1<<(MySqlParserCLUSTERING-320))|(1<<(MySqlParserCOALESCE-320)))) != 0) || (((_la-352)&-(0x1f+1)) == 0 && ((1<<uint((_la-352)))&((1<<(MySqlParserCODE-352))|(1<<(MySqlParserCOLUMNS-352))|(1<<(MySqlParserCOLUMN_FORMAT-352))|(1<<(MySqlParserCOLUMN_NAME-352))|(1<<(MySqlParserCOMMENT-352))|(1<<(MySqlParserCOMMIT-352))|(1<<(MySqlParserCOMPACT-352))|(1<<(MySqlParserCOMPLETION-352))|(1<<(MySqlParserCOMPRESSED-352))|(1<<(MySqlParserCOMPRESSION-352))|(1<<(MySqlParserCONCURRENT-352))|(1<<(MySqlParserCONNECT-352))|(1<<(MySqlParserCONNECTION-352))|(1<<(MySqlParserCONSISTENT-352))|(1<<(MySqlParserCONSTRAINT_CATALOG-352))|(1<<(MySqlParserCONSTRAINT_SCHEMA-352))|(1<<(MySqlParserCONSTRAINT_NAME-352))|(1<<(MySqlParserCONTAINS-352))|(1<<(MySqlParserCONTEXT-352))|(1<<(MySqlParserCONTRIBUTORS-352))|(1<<(MySqlParserCOPY-352))|(1<<(MySqlParserCPU-352))|(1<<(MySqlParserCURSOR_NAME-352))|(1<<(MySqlParserDATA-352))|(1<<(MySqlParserDATAFILE-352))|(1<<(MySqlParserDEALLOCATE-352))|(1<<(MySqlParserDEFAULT_AUTH-352))|(1<<(MySqlParserDEFINER-352))|(1<<(MySqlParserDELAY_KEY_WRITE-352))|(1<<(MySqlParserDES_KEY_FILE-352))|(1<<(MySqlParserDIRECTORY-352))|(1<<(MySqlParserDISABLE-352)))) != 0) || (((_la-384)&-(0x1f+1)) == 0 && ((1<<uint((_la-384)))&((1<<(MySqlParserDISCARD-384))|(1<<(MySqlParserDISK-384))|(1<<(MySqlParserDO-384))|(1<<(MySqlParserDUMPFILE-384))|(1<<(MySqlParserDUPLICATE-384))|(1<<(MySqlParserDYNAMIC-384))|(1<<(MySqlParserENABLE-384))|(1<<(MySqlParserENCRYPTION-384))|(1<<(MySqlParserEND-384))|(1<<(MySqlParserENDS-384))|(1<<(MySqlParserENGINE-384))|(1<<(MySqlParserENGINES-384))|(1<<(MySqlParserERROR-384))|(1<<(MySqlParserERRORS-384))|(1<<(MySqlParserESCAPE-384))|(1<<(MySqlParserEVEN-384))|(1<<(MySqlParserEVENT-384))|(1<<(MySqlParserEVENTS-384))|(1<<(MySqlParserEVERY-384))|(1<<(MySqlParserEXCHANGE-384))|(1<<(MySqlParserEXCLUSIVE-384))|(1<<(MySqlParserEXPIRE-384))|(1<<(MySqlParserEXPORT-384))|(1<<(MySqlParserEXTENDED-384))|(1<<(MySqlParserEXTENT_SIZE-384))|(1<<(MySqlParserFAST-384))|(1<<(MySqlParserFAULTS-384))|(1<<(MySqlParserFIELDS-384))|(1<<(MySqlParserFILE_BLOCK_SIZE-384))|(1<<(MySqlParserFILTER-384))|(1<<(MySqlParserFIRST-384))|(1<<(MySqlParserFIXED-384)))) != 0) || (((_la-416)&-(0x1f+1)) == 0 && ((1<<uint((_la-416)))&((1<<(MySqlParserFLUSH-416))|(1<<(MySqlParserFOLLOWS-416))|(1<<(MySqlParserFOUND-416))|(1<<(MySqlParserFULL-416))|(1<<(MySqlParserFUNCTION-416))|(1<<(MySqlParserGENERAL-416))|(1<<(MySqlParserGLOBAL-416))|(1<<(MySqlParserGRANTS-416))|(1<<(MySqlParserGROUP_REPLICATION-416))|(1<<(MySqlParserHANDLER-416))|(1<<(MySqlParserHASH-416))|(1<<(MySqlParserHELP-416))|(1<<(MySqlParserHOST-416))|(1<<(MySqlParserHOSTS-416))|(1<<(MySqlParserIDENTIFIED-416))|(1<<(MySqlParserIGNORE_SERVER_IDS-416))|(1<<(MySqlParserIMPORT-416))|(1<<(MySqlParserINDEXES-416))|(1<<(MySqlParserINITIAL_SIZE-416))|(1<<(MySqlParserINPLACE-416))|(1<<(MySqlParserINSERT_METHOD-416))|(1<<(MySqlParserINSTALL-416))|(1<<(MySqlParserINSTANCE-416))|(1<<(MySqlParserINSTANT-416))|(1<<(MySqlParserINVOKER-416))|(1<<(MySqlParserIO-416))|(1<<(MySqlParserIO_THREAD-416))|(1<<(MySqlParserIPC-416))|(1<<(MySqlParserISOLATION-416))|(1<<(MySqlParserISSUER-416)))) != 0) || (((_la-448)&-(0x1f+1)) == 0 && ((1<<uint((_la-448)))&((1<<(MySqlParserJSON-448))|(1<<(MySqlParserKEY_BLOCK_SIZE-448))|(1<<(MySqlParserLANGUAGE-448))|(1<<(MySqlParserLAST-448))|(1<<(MySqlParserLEAVES-448))|(1<<(MySqlParserLESS-448))|(1<<(MySqlParserLEVEL-448))|(1<<(MySqlParserLIST-448))|(1<<(MySqlParserLOCAL-448))|(1<<(MySqlParserLOGFILE-448))|(1<<(MySqlParserLOGS-448))|(1<<(MySqlParserMASTER-448))|(1<<(MySqlParserMASTER_AUTO_POSITION-448))|(1<<(MySqlParserMASTER_CONNECT_RETRY-448))|(1<<(MySqlParserMASTER_DELAY-448))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-448))|(1<<(MySqlParserMASTER_HOST-448))|(1<<(MySqlParserMASTER_LOG_FILE-448))|(1<<(MySqlParserMASTER_LOG_POS-448))|(1<<(MySqlParserMASTER_PASSWORD-448))|(1<<(MySqlParserMASTER_PORT-448))|(1<<(MySqlParserMASTER_RETRY_COUNT-448))|(1<<(MySqlParserMASTER_SSL-448))|(1<<(MySqlParserMASTER_SSL_CA-448))|(1<<(MySqlParserMASTER_SSL_CAPATH-448))|(1<<(MySqlParserMASTER_SSL_CERT-448))|(1<<(MySqlParserMASTER_SSL_CIPHER-448))|(1<<(MySqlParserMASTER_SSL_CRL-448))|(1<<(MySqlParserMASTER_SSL_CRLPATH-448))|(1<<(MySqlParserMASTER_SSL_KEY-448))|(1<<(MySqlParserMASTER_TLS_VERSION-448))|(1<<(MySqlParserMASTER_USER-448)))) != 0) || (((_la-480)&-(0x1f+1)) == 0 && ((1<<uint((_la-480)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-480))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-480))|(1<<(MySqlParserMAX_ROWS-480))|(1<<(MySqlParserMAX_SIZE-480))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-480))|(1<<(MySqlParserMAX_USER_CONNECTIONS-480))|(1<<(MySqlParserMEDIUM-480))|(1<<(MySqlParserMEMBER-480))|(1<<(MySqlParserMERGE-480))|(1<<(MySqlParserMESSAGE_TEXT-480))|(1<<(MySqlParserMID-480))|(1<<(MySqlParserMIGRATE-480))|(1<<(MySqlParserMIN_ROWS-480))|(1<<(MySqlParserMODE-480))|(1<<(MySqlParserMODIFY-480))|(1<<(MySqlParserMUTEX-480))|(1<<(MySqlParserMYSQL-480))|(1<<(MySqlParserMYSQL_ERRNO-480))|(1<<(MySqlParserNAME-480))|(1<<(MySqlParserNAMES-480))|(1<<(MySqlParserNCHAR-480))|(1<<(MySqlParserNEVER-480))|(1<<(MySqlParserNEXT-480))|(1<<(MySqlParserNO-480))|(1<<(MySqlParserNOCOPY-480))|(1<<(MySqlParserNOWAIT-480))|(1<<(MySqlParserNODEGROUP-480))|(1<<(MySqlParserNONE-480))|(1<<(MySqlParserODBC-480))|(1<<(MySqlParserOFFLINE-480))|(1<<(MySqlParserOFFSET-480))|(1<<(MySqlParserOF-480)))) != 0) || (((_la-512)&-(0x1f+1)) == 0 && ((1<<uint((_la-512)))&((1<<(MySqlParserOJ-512))|(1<<(MySqlParserOLD_PASSWORD-512))|(1<<(MySqlParserONE-512))|(1<<(MySqlParserONLINE-512))|(1<<(MySqlParserONLY-512))|(1<<(MySqlParserOPEN-512))|(1<<(MySqlParserOPTIMIZER_COSTS-512))|(1<<(MySqlParserOPTIONS-512))|(1<<(MySqlParserOWNER-512))|(1<<(MySqlParserPACK_KEYS-512))|(1<<(MySqlParserPAGE-512))|(1<<(MySqlParserPARSER-512))|(1<<(MySqlParserPARTIAL-512))|(1<<(MySqlParserPARTITIONING-512))|(1<<(MySqlParserPARTITIONS-512))|(1<<(MySqlParserPASSWORD-512))|(1<<(MySqlParserPHASE-512))|(1<<(MySqlParserPLUGIN-512))|(1<<(MySqlParserPLUGIN_DIR-512))|(1<<(MySqlParserPLUGINS-512))|(1<<(MySqlParserPORT-512))|(1<<(MySqlParserPRECEDES-512))|(1<<(MySqlParserPREPARE-512))|(1<<(MySqlParserPRESERVE-512))|(1<<(MySqlParserPREV-512))|(1<<(MySqlParserPROCESSLIST-512))|(1<<(MySqlParserPROFILE-512))|(1<<(MySqlParserPROFILES-512))|(1<<(MySqlParserPROXY-512))|(1<<(MySqlParserQUERY-512))|(1<<(MySqlParserQUICK-512)))) != 0) || (((_la-544)&-(0x1f+1)) == 0 && ((1<<uint((_la-544)))&((1<<(MySqlParserREBUILD-544))|(1<<(MySqlParserRECOVER-544))|(1<<(MySqlParserRECURSIVE-544))|(1<<(MySqlParserREDO_BUFFER_SIZE-544))|(1<<(MySqlParserREDUNDANT-544))|(1<<(MySqlParserRELAY-544))|(1<<(MySqlParserRELAY_LOG_FILE-544))|(1<<(MySqlParserRELAY_LOG_POS-544))|(1<<(MySqlParserRELAYLOG-544))|(1<<(MySqlParserREMOVE-544))|(1<<(MySqlParserREORGANIZE-544))|(1<<(MySqlParserREPAIR-544))|(1<<(MySqlParserREPLICATE_DO_DB-544))|(1<<(MySqlParserREPLICATE_DO_TABLE-544))|(1<<(MySqlParserREPLICATE_IGNORE_DB-544))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-544))|(1<<(MySqlParserREPLICATE_REWRITE_DB-544))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-544))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-544))|(1<<(MySqlParserREPLICATION-544))|(1<<(MySqlParserRESET-544))|(1<<(MySqlParserRESUME-544))|(1<<(MySqlParserRETURNED_SQLSTATE-544))|(1<<(MySqlParserRETURNS-544))|(1<<(MySqlParserROLE-544))|(1<<(MySqlParserROLLBACK-544))|(1<<(MySqlParserROLLUP-544))|(1<<(MySqlParserROTATE-544))|(1<<(MySqlParserROW-544))|(1<<(MySqlParserROWS-544))|(1<<(MySqlParserROW_FORMAT-544)))) != 0) || (((_la-576)&-(0x1f+1)) == 0 && ((1<<uint((_la-576)))&((1<<(MySqlParserRTREE-576))|(1<<(MySqlParserSAVEPOINT-576))|(1<<(MySqlParserSCHEDULE-576))|(1<<(MySqlParserSECURITY-576))|(1<<(MySqlParserSERVER-576))|(1<<(MySqlParserSESSION-576))|(1<<(MySqlParserSHARE-576))|(1<<(MySqlParserSHARED-576))|(1<<(MySqlParserSIGNED-576))|(1<<(MySqlParserSIMPLE-576))|(1<<(MySqlParserSLAVE-576))|(1<<(MySqlParserSLOW-576))|(1<<(MySqlParserSNAPSHOT-576))|(1<<(MySqlParserSOCKET-576))|(1<<(MySqlParserSOME-576))|(1<<(MySqlParserSONAME-576))|(1<<(MySqlParserSOUNDS-576))|(1<<(MySqlParserSOURCE-576))|(1<<(MySqlParserSQL_AFTER_GTIDS-576))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-576))|(1<<(MySqlParserSQL_BEFORE_GTIDS-576))|(1<<(MySqlParserSQL_BUFFER_RESULT-576))|(1<<(MySqlParserSQL_CACHE-576))|(1<<(MySqlParserSQL_NO_CACHE-576))|(1<<(MySqlParserSQL_THREAD-576))|(1<<(MySqlParserSTART-576))|(1<<(MySqlParserSTARTS-576))|(1<<(MySqlParserSTATS_AUTO_RECALC-576))|(1<<(MySqlParserSTATS_PERSISTENT-576))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-576))|(1<<(MySqlParserSTATUS-576))|(1<<(MySqlParserSTOP-576)))) != 0) || (((_la-608)&-(0x1f+1)) == 0 && ((1<<uint((_la-608)))&((1<<(MySqlParserSTORAGE-608))|(1<<(MySqlParserSTRING-608))|(1<<(MySqlParserSUBCLASS_ORIGIN-608))|(1<<(MySqlParserSUBJECT-608))|(1<<(MySqlParserSUBPARTITION-608))|(1<<(MySqlParserSUBPARTITIONS-608))|(1<<(MySqlParserSUSPEND-608))|(1<<(MySqlParserSWAPS-608))|(1<<(MySqlParserSWITCHES-608))|(1<<(MySqlParserTABLE_NAME-608))|(1<<(MySqlParserTABLESPACE-608))|(1<<(MySqlParserTEMPORARY-608))|(1<<(MySqlParserTEMPTABLE-608))|(1<<(MySqlParserTHAN-608))|(1<<(MySqlParserTRADITIONAL-608))|(1<<(MySqlParserTRANSACTION-608))|(1<<(MySqlParserTRANSACTIONAL-608))|(1<<(MySqlParserTRIGGERS-608))|(1<<(MySqlParserTRUNCATE-608))|(1<<(MySqlParserUNDEFINED-608))|(1<<(MySqlParserUNDOFILE-608))|(1<<(MySqlParserUNDO_BUFFER_SIZE-608))|(1<<(MySqlParserUNINSTALL-608))|(1<<(MySqlParserUNKNOWN-608))|(1<<(MySqlParserUNTIL-608))|(1<<(MySqlParserUPGRADE-608))|(1<<(MySqlParserUSER-608))|(1<<(MySqlParserUSE_FRM-608))|(1<<(MySqlParserUSER_RESOURCES-608)))) != 0) || (((_la-640)&-(0x1f+1)) == 0 && ((1<<uint((_la-640)))&((1<<(MySqlParserVALIDATION-640))|(1<<(MySqlParserVALUE-640))|(1<<(MySqlParserVARIABLES-640))|(1<<(MySqlParserVIEW-640))|(1<<(MySqlParserWAIT-640))|(1<<(MySqlParserWARNINGS-640))|(1<<(MySqlParserWITHOUT-640))|(1<<(MySqlParserWORK-640))|(1<<(MySqlParserWRAPPER-640))|(1<<(MySqlParserX509-640))|(1<<(MySqlParserXA-640))|(1<<(MySqlParserXML-640))|(1<<(MySqlParserEUR-640))|(1<<(MySqlParserUSA-640))|(1<<(MySqlParserJIS-640))|(1<<(MySqlParserISO-640))|(1<<(MySqlParserINTERNAL-640)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserAUDIT_ADMIN-679))|(1<<(MySqlParserBACKUP_ADMIN-679))|(1<<(MySqlParserBINLOG_ADMIN-679))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-679))|(1<<(MySqlParserCLONE_ADMIN-679))|(1<<(MySqlParserCONNECTION_ADMIN-679))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-679))|(1<<(MySqlParserFIREWALL_ADMIN-679))|(1<<(MySqlParserFIREWALL_USER-679))|(1<<(MySqlParserADMIN-679))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-679))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-679))|(1<<(MySqlParserNDB_STORED_USER-679))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-679))|(1<<(MySqlParserREPLICATION_APPLIER-679))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-679))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-679))|(1<<(MySqlParserRESOURCE_GROUP_USER-679))|(1<<(MySqlParserROLE_ADMIN-679))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-679))|(1<<(MySqlParserSET_USER_ID-679))|(1<<(MySqlParserSHOW_ROUTINE-679))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-679))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-679))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-679))|(1<<(MySqlParserXA_RECOVER_ADMIN-679)))) != 0) || _la == MySqlParserMEMORY || _la == MySqlParserCATALOG_NAME || _la == MySqlParserENGINE_ATTRIBUTE || _la == MySqlParserSECONDARY_ENGINE_ATTRIBUTE || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFunctionNameBaseContext is an interface to support dynamic dispatch.
type IFunctionNameBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameBaseContext differentiates from other interfaces.
	IsFunctionNameBaseContext()
}

type FunctionNameBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameBaseContext() *FunctionNameBaseContext {
	var p = new(FunctionNameBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionNameBase
	return p
}

func (*FunctionNameBaseContext) IsFunctionNameBaseContext() {}

func NewFunctionNameBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameBaseContext {
	var p = new(FunctionNameBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionNameBase

	return p
}

func (s *FunctionNameBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameBaseContext) ABS() antlr.TerminalNode {
	return s.GetToken(MySqlParserABS, 0)
}

func (s *FunctionNameBaseContext) ACOS() antlr.TerminalNode {
	return s.GetToken(MySqlParserACOS, 0)
}

func (s *FunctionNameBaseContext) ADDDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDDATE, 0)
}

func (s *FunctionNameBaseContext) ADDTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDTIME, 0)
}

func (s *FunctionNameBaseContext) AES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) AES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserAREA, 0)
}

func (s *FunctionNameBaseContext) ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASBINARY, 0)
}

func (s *FunctionNameBaseContext) ASIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASIN, 0)
}

func (s *FunctionNameBaseContext) ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASTEXT, 0)
}

func (s *FunctionNameBaseContext) ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKB, 0)
}

func (s *FunctionNameBaseContext) ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_DERIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DERIVE, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_SIGN, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_VERIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_VERIFY, 0)
}

func (s *FunctionNameBaseContext) ATAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN, 0)
}

func (s *FunctionNameBaseContext) ATAN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN2, 0)
}

func (s *FunctionNameBaseContext) BENCHMARK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBENCHMARK, 0)
}

func (s *FunctionNameBaseContext) BIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIN, 0)
}

func (s *FunctionNameBaseContext) BIT_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_COUNT, 0)
}

func (s *FunctionNameBaseContext) BIT_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_LENGTH, 0)
}

func (s *FunctionNameBaseContext) BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserBUFFER, 0)
}

func (s *FunctionNameBaseContext) CEIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEIL, 0)
}

func (s *FunctionNameBaseContext) CEILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEILING, 0)
}

func (s *FunctionNameBaseContext) CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCENTROID, 0)
}

func (s *FunctionNameBaseContext) CHARACTER_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER_LENGTH, 0)
}

func (s *FunctionNameBaseContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *FunctionNameBaseContext) CHAR_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR_LENGTH, 0)
}

func (s *FunctionNameBaseContext) COERCIBILITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOERCIBILITY, 0)
}

func (s *FunctionNameBaseContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *FunctionNameBaseContext) COMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESS, 0)
}

func (s *FunctionNameBaseContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT, 0)
}

func (s *FunctionNameBaseContext) CONCAT_WS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT_WS, 0)
}

func (s *FunctionNameBaseContext) CONNECTION_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ID, 0)
}

func (s *FunctionNameBaseContext) CONV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONV, 0)
}

func (s *FunctionNameBaseContext) CONVERT_TZ() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT_TZ, 0)
}

func (s *FunctionNameBaseContext) COS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOS, 0)
}

func (s *FunctionNameBaseContext) COT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOT, 0)
}

func (s *FunctionNameBaseContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *FunctionNameBaseContext) CRC32() antlr.TerminalNode {
	return s.GetToken(MySqlParserCRC32, 0)
}

func (s *FunctionNameBaseContext) CREATE_ASYMMETRIC_PRIV_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, 0)
}

func (s *FunctionNameBaseContext) CREATE_ASYMMETRIC_PUB_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PUB_KEY, 0)
}

func (s *FunctionNameBaseContext) CREATE_DH_PARAMETERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DH_PARAMETERS, 0)
}

func (s *FunctionNameBaseContext) CREATE_DIGEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DIGEST, 0)
}

func (s *FunctionNameBaseContext) CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSSES, 0)
}

func (s *FunctionNameBaseContext) CUME_DIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCUME_DIST, 0)
}

func (s *FunctionNameBaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *FunctionNameBaseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *FunctionNameBaseContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATEDIFF, 0)
}

func (s *FunctionNameBaseContext) DATE_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_FORMAT, 0)
}

func (s *FunctionNameBaseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *FunctionNameBaseContext) DAYNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYNAME, 0)
}

func (s *FunctionNameBaseContext) DAYOFMONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFMONTH, 0)
}

func (s *FunctionNameBaseContext) DAYOFWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFWEEK, 0)
}

func (s *FunctionNameBaseContext) DAYOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFYEAR, 0)
}

func (s *FunctionNameBaseContext) DECODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECODE, 0)
}

func (s *FunctionNameBaseContext) DEGREES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEGREES, 0)
}

func (s *FunctionNameBaseContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDENSE_RANK, 0)
}

func (s *FunctionNameBaseContext) DES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) DES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIMENSION, 0)
}

func (s *FunctionNameBaseContext) DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISJOINT, 0)
}

func (s *FunctionNameBaseContext) ELT() antlr.TerminalNode {
	return s.GetToken(MySqlParserELT, 0)
}

func (s *FunctionNameBaseContext) ENCODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCODE, 0)
}

func (s *FunctionNameBaseContext) ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPT, 0)
}

func (s *FunctionNameBaseContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDPOINT, 0)
}

func (s *FunctionNameBaseContext) ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENVELOPE, 0)
}

func (s *FunctionNameBaseContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUALS, 0)
}

func (s *FunctionNameBaseContext) EXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXP, 0)
}

func (s *FunctionNameBaseContext) EXPORT_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT_SET, 0)
}

func (s *FunctionNameBaseContext) EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTERIORRING, 0)
}

func (s *FunctionNameBaseContext) EXTRACTVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACTVALUE, 0)
}

func (s *FunctionNameBaseContext) FIELD() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELD, 0)
}

func (s *FunctionNameBaseContext) FIND_IN_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIND_IN_SET, 0)
}

func (s *FunctionNameBaseContext) FIRST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST_VALUE, 0)
}

func (s *FunctionNameBaseContext) FLOOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOOR, 0)
}

func (s *FunctionNameBaseContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *FunctionNameBaseContext) FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND_ROWS, 0)
}

func (s *FunctionNameBaseContext) FROM_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_BASE64, 0)
}

func (s *FunctionNameBaseContext) FROM_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_DAYS, 0)
}

func (s *FunctionNameBaseContext) FROM_UNIXTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_UNIXTIME, 0)
}

func (s *FunctionNameBaseContext) GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYN, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYTYPE, 0)
}

func (s *FunctionNameBaseContext) GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *FunctionNameBaseContext) GET_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_LOCK, 0)
}

func (s *FunctionNameBaseContext) GLENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLENGTH, 0)
}

func (s *FunctionNameBaseContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATEST, 0)
}

func (s *FunctionNameBaseContext) GTID_SUBSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBSET, 0)
}

func (s *FunctionNameBaseContext) GTID_SUBTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBTRACT, 0)
}

func (s *FunctionNameBaseContext) HEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEX, 0)
}

func (s *FunctionNameBaseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *FunctionNameBaseContext) IFNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserIFNULL, 0)
}

func (s *FunctionNameBaseContext) INET6_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_ATON, 0)
}

func (s *FunctionNameBaseContext) INET6_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_NTOA, 0)
}

func (s *FunctionNameBaseContext) INET_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_ATON, 0)
}

func (s *FunctionNameBaseContext) INET_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_NTOA, 0)
}

func (s *FunctionNameBaseContext) INSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTR, 0)
}

func (s *FunctionNameBaseContext) INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERIORRINGN, 0)
}

func (s *FunctionNameBaseContext) INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERSECTS, 0)
}

func (s *FunctionNameBaseContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *FunctionNameBaseContext) ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserISCLOSED, 0)
}

func (s *FunctionNameBaseContext) ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserISEMPTY, 0)
}

func (s *FunctionNameBaseContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserISNULL, 0)
}

func (s *FunctionNameBaseContext) ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSIMPLE, 0)
}

func (s *FunctionNameBaseContext) IS_FREE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_FREE_LOCK, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4_COMPAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_COMPAT, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4_MAPPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_MAPPED, 0)
}

func (s *FunctionNameBaseContext) IS_IPV6() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV6, 0)
}

func (s *FunctionNameBaseContext) IS_USED_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_USED_LOCK, 0)
}

func (s *FunctionNameBaseContext) LAG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAG, 0)
}

func (s *FunctionNameBaseContext) LAST_INSERT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST_INSERT_ID, 0)
}

func (s *FunctionNameBaseContext) LAST_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST_VALUE, 0)
}

func (s *FunctionNameBaseContext) LCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLCASE, 0)
}

func (s *FunctionNameBaseContext) LEAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAD, 0)
}

func (s *FunctionNameBaseContext) LEAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAST, 0)
}

func (s *FunctionNameBaseContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *FunctionNameBaseContext) LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserLENGTH, 0)
}

func (s *FunctionNameBaseContext) LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *FunctionNameBaseContext) LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) LN() antlr.TerminalNode {
	return s.GetToken(MySqlParserLN, 0)
}

func (s *FunctionNameBaseContext) LOAD_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD_FILE, 0)
}

func (s *FunctionNameBaseContext) LOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCATE, 0)
}

func (s *FunctionNameBaseContext) LOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG, 0)
}

func (s *FunctionNameBaseContext) LOG10() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG10, 0)
}

func (s *FunctionNameBaseContext) LOG2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG2, 0)
}

func (s *FunctionNameBaseContext) LOWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOWER, 0)
}

func (s *FunctionNameBaseContext) LPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLPAD, 0)
}

func (s *FunctionNameBaseContext) LTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserLTRIM, 0)
}

func (s *FunctionNameBaseContext) MAKEDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKEDATE, 0)
}

func (s *FunctionNameBaseContext) MAKETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKETIME, 0)
}

func (s *FunctionNameBaseContext) MAKE_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKE_SET, 0)
}

func (s *FunctionNameBaseContext) MASTER_POS_WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_POS_WAIT, 0)
}

func (s *FunctionNameBaseContext) MBRCONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRCONTAINS, 0)
}

func (s *FunctionNameBaseContext) MBRDISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRDISJOINT, 0)
}

func (s *FunctionNameBaseContext) MBREQUAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBREQUAL, 0)
}

func (s *FunctionNameBaseContext) MBRINTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRINTERSECTS, 0)
}

func (s *FunctionNameBaseContext) MBROVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBROVERLAPS, 0)
}

func (s *FunctionNameBaseContext) MBRTOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRTOUCHES, 0)
}

func (s *FunctionNameBaseContext) MBRWITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRWITHIN, 0)
}

func (s *FunctionNameBaseContext) MD5() antlr.TerminalNode {
	return s.GetToken(MySqlParserMD5, 0)
}

func (s *FunctionNameBaseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *FunctionNameBaseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *FunctionNameBaseContext) MLINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MLINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMOD, 0)
}

func (s *FunctionNameBaseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *FunctionNameBaseContext) MONTHNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTHNAME, 0)
}

func (s *FunctionNameBaseContext) MPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MPOLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MPOLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) NAME_CONST() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME_CONST, 0)
}

func (s *FunctionNameBaseContext) NTH_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNTH_VALUE, 0)
}

func (s *FunctionNameBaseContext) NTILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNTILE, 0)
}

func (s *FunctionNameBaseContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULLIF, 0)
}

func (s *FunctionNameBaseContext) NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMGEOMETRIES, 0)
}

func (s *FunctionNameBaseContext) NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMINTERIORRINGS, 0)
}

func (s *FunctionNameBaseContext) NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMPOINTS, 0)
}

func (s *FunctionNameBaseContext) OCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCT, 0)
}

func (s *FunctionNameBaseContext) OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCTET_LENGTH, 0)
}

func (s *FunctionNameBaseContext) ORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserORD, 0)
}

func (s *FunctionNameBaseContext) OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOVERLAPS, 0)
}

func (s *FunctionNameBaseContext) PERCENT_RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERCENT_RANK, 0)
}

func (s *FunctionNameBaseContext) PERIOD_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_ADD, 0)
}

func (s *FunctionNameBaseContext) PERIOD_DIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_DIFF, 0)
}

func (s *FunctionNameBaseContext) PI() antlr.TerminalNode {
	return s.GetToken(MySqlParserPI, 0)
}

func (s *FunctionNameBaseContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *FunctionNameBaseContext) POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTN, 0)
}

func (s *FunctionNameBaseContext) POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *FunctionNameBaseContext) POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *FunctionNameBaseContext) POW() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOW, 0)
}

func (s *FunctionNameBaseContext) POWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOWER, 0)
}

func (s *FunctionNameBaseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *FunctionNameBaseContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUOTE, 0)
}

func (s *FunctionNameBaseContext) RADIANS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRADIANS, 0)
}

func (s *FunctionNameBaseContext) RAND() antlr.TerminalNode {
	return s.GetToken(MySqlParserRAND, 0)
}

func (s *FunctionNameBaseContext) RANK() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANK, 0)
}

func (s *FunctionNameBaseContext) RANDOM_BYTES() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANDOM_BYTES, 0)
}

func (s *FunctionNameBaseContext) RELEASE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE_LOCK, 0)
}

func (s *FunctionNameBaseContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, 0)
}

func (s *FunctionNameBaseContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *FunctionNameBaseContext) ROUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUND, 0)
}

func (s *FunctionNameBaseContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_COUNT, 0)
}

func (s *FunctionNameBaseContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_NUMBER, 0)
}

func (s *FunctionNameBaseContext) RPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRPAD, 0)
}

func (s *FunctionNameBaseContext) RTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserRTRIM, 0)
}

func (s *FunctionNameBaseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *FunctionNameBaseContext) SEC_TO_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEC_TO_TIME, 0)
}

func (s *FunctionNameBaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *FunctionNameBaseContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_USER, 0)
}

func (s *FunctionNameBaseContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *FunctionNameBaseContext) SHA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA, 0)
}

func (s *FunctionNameBaseContext) SHA1() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA1, 0)
}

func (s *FunctionNameBaseContext) SHA2() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA2, 0)
}

func (s *FunctionNameBaseContext) SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGN, 0)
}

func (s *FunctionNameBaseContext) SIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIN, 0)
}

func (s *FunctionNameBaseContext) SLEEP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLEEP, 0)
}

func (s *FunctionNameBaseContext) SOUNDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDEX, 0)
}

func (s *FunctionNameBaseContext) SQL_THREAD_WAIT_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, 0)
}

func (s *FunctionNameBaseContext) SQRT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQRT, 0)
}

func (s *FunctionNameBaseContext) SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSRID, 0)
}

func (s *FunctionNameBaseContext) STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTPOINT, 0)
}

func (s *FunctionNameBaseContext) STRCMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRCMP, 0)
}

func (s *FunctionNameBaseContext) STR_TO_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTR_TO_DATE, 0)
}

func (s *FunctionNameBaseContext) ST_AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_AREA, 0)
}

func (s *FunctionNameBaseContext) ST_ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASBINARY, 0)
}

func (s *FunctionNameBaseContext) ST_ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKB, 0)
}

func (s *FunctionNameBaseContext) ST_ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKT, 0)
}

func (s *FunctionNameBaseContext) ST_BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_BUFFER, 0)
}

func (s *FunctionNameBaseContext) ST_CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CENTROID, 0)
}

func (s *FunctionNameBaseContext) ST_CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CONTAINS, 0)
}

func (s *FunctionNameBaseContext) ST_CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CROSSES, 0)
}

func (s *FunctionNameBaseContext) ST_DIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIFFERENCE, 0)
}

func (s *FunctionNameBaseContext) ST_DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIMENSION, 0)
}

func (s *FunctionNameBaseContext) ST_DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISJOINT, 0)
}

func (s *FunctionNameBaseContext) ST_DISTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISTANCE, 0)
}

func (s *FunctionNameBaseContext) ST_ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENDPOINT, 0)
}

func (s *FunctionNameBaseContext) ST_ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENVELOPE, 0)
}

func (s *FunctionNameBaseContext) ST_EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EQUALS, 0)
}

func (s *FunctionNameBaseContext) ST_EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EXTERIORRING, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMTXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYN, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYTYPE, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERIORRINGN, 0)
}

func (s *FunctionNameBaseContext) ST_INTERSECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTION, 0)
}

func (s *FunctionNameBaseContext) ST_INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTS, 0)
}

func (s *FunctionNameBaseContext) ST_ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISCLOSED, 0)
}

func (s *FunctionNameBaseContext) ST_ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISEMPTY, 0)
}

func (s *FunctionNameBaseContext) ST_ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISSIMPLE, 0)
}

func (s *FunctionNameBaseContext) ST_LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMGEOMETRIES, 0)
}

func (s *FunctionNameBaseContext) ST_NUMINTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRING, 0)
}

func (s *FunctionNameBaseContext) ST_NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRINGS, 0)
}

func (s *FunctionNameBaseContext) ST_NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMPOINTS, 0)
}

func (s *FunctionNameBaseContext) ST_OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_OVERLAPS, 0)
}

func (s *FunctionNameBaseContext) ST_POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTN, 0)
}

func (s *FunctionNameBaseContext) ST_POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SRID, 0)
}

func (s *FunctionNameBaseContext) ST_STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_STARTPOINT, 0)
}

func (s *FunctionNameBaseContext) ST_SYMDIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SYMDIFFERENCE, 0)
}

func (s *FunctionNameBaseContext) ST_TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_TOUCHES, 0)
}

func (s *FunctionNameBaseContext) ST_UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_UNION, 0)
}

func (s *FunctionNameBaseContext) ST_WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_WITHIN, 0)
}

func (s *FunctionNameBaseContext) ST_X() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_X, 0)
}

func (s *FunctionNameBaseContext) ST_Y() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_Y, 0)
}

func (s *FunctionNameBaseContext) SUBDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBDATE, 0)
}

func (s *FunctionNameBaseContext) SUBSTRING_INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING_INDEX, 0)
}

func (s *FunctionNameBaseContext) SUBTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBTIME, 0)
}

func (s *FunctionNameBaseContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_USER, 0)
}

func (s *FunctionNameBaseContext) TAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTAN, 0)
}

func (s *FunctionNameBaseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *FunctionNameBaseContext) TIMEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMEDIFF, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMPADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPADD, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMPDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPDIFF, 0)
}

func (s *FunctionNameBaseContext) TIME_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_FORMAT, 0)
}

func (s *FunctionNameBaseContext) TIME_TO_SEC() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_TO_SEC, 0)
}

func (s *FunctionNameBaseContext) TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTOUCHES, 0)
}

func (s *FunctionNameBaseContext) TO_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_BASE64, 0)
}

func (s *FunctionNameBaseContext) TO_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_DAYS, 0)
}

func (s *FunctionNameBaseContext) TO_SECONDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_SECONDS, 0)
}

func (s *FunctionNameBaseContext) UCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCASE, 0)
}

func (s *FunctionNameBaseContext) UNCOMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESS, 0)
}

func (s *FunctionNameBaseContext) UNCOMPRESSED_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESSED_LENGTH, 0)
}

func (s *FunctionNameBaseContext) UNHEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNHEX, 0)
}

func (s *FunctionNameBaseContext) UNIX_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIX_TIMESTAMP, 0)
}

func (s *FunctionNameBaseContext) UPDATEXML() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATEXML, 0)
}

func (s *FunctionNameBaseContext) UPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPPER, 0)
}

func (s *FunctionNameBaseContext) UUID() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID, 0)
}

func (s *FunctionNameBaseContext) UUID_SHORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID_SHORT, 0)
}

func (s *FunctionNameBaseContext) VALIDATE_PASSWORD_STRENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATE_PASSWORD_STRENGTH, 0)
}

func (s *FunctionNameBaseContext) VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION, 0)
}

func (s *FunctionNameBaseContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *FunctionNameBaseContext) WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)
}

func (s *FunctionNameBaseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *FunctionNameBaseContext) WEEKDAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKDAY, 0)
}

func (s *FunctionNameBaseContext) WEEKOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKOFYEAR, 0)
}

func (s *FunctionNameBaseContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *FunctionNameBaseContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHIN, 0)
}

func (s *FunctionNameBaseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *FunctionNameBaseContext) YEARWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEARWEEK, 0)
}

func (s *FunctionNameBaseContext) Y_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserY_FUNCTION, 0)
}

func (s *FunctionNameBaseContext) X_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserX_FUNCTION, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY, 0)
}

func (s *FunctionNameBaseContext) JSON_OBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OBJECT, 0)
}

func (s *FunctionNameBaseContext) JSON_QUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_QUOTE, 0)
}

func (s *FunctionNameBaseContext) JSON_CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_CONTAINS, 0)
}

func (s *FunctionNameBaseContext) JSON_CONTAINS_PATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_CONTAINS_PATH, 0)
}

func (s *FunctionNameBaseContext) JSON_EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_EXTRACT, 0)
}

func (s *FunctionNameBaseContext) JSON_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_KEYS, 0)
}

func (s *FunctionNameBaseContext) JSON_OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OVERLAPS, 0)
}

func (s *FunctionNameBaseContext) JSON_SEARCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SEARCH, 0)
}

func (s *FunctionNameBaseContext) JSON_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALUE, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY_APPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY_APPEND, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY_INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY_INSERT, 0)
}

func (s *FunctionNameBaseContext) JSON_INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_INSERT, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE_PATCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE_PATCH, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE_PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE_PRESERVE, 0)
}

func (s *FunctionNameBaseContext) JSON_REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_REMOVE, 0)
}

func (s *FunctionNameBaseContext) JSON_REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_REPLACE, 0)
}

func (s *FunctionNameBaseContext) JSON_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SET, 0)
}

func (s *FunctionNameBaseContext) JSON_UNQUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_UNQUOTE, 0)
}

func (s *FunctionNameBaseContext) JSON_DEPTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_DEPTH, 0)
}

func (s *FunctionNameBaseContext) JSON_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_LENGTH, 0)
}

func (s *FunctionNameBaseContext) JSON_TYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_TYPE, 0)
}

func (s *FunctionNameBaseContext) JSON_VALID() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALID, 0)
}

func (s *FunctionNameBaseContext) JSON_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_TABLE, 0)
}

func (s *FunctionNameBaseContext) JSON_SCHEMA_VALID() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SCHEMA_VALID, 0)
}

func (s *FunctionNameBaseContext) JSON_SCHEMA_VALIDATION_REPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SCHEMA_VALIDATION_REPORT, 0)
}

func (s *FunctionNameBaseContext) JSON_PRETTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_PRETTY, 0)
}

func (s *FunctionNameBaseContext) JSON_STORAGE_FREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_STORAGE_FREE, 0)
}

func (s *FunctionNameBaseContext) JSON_STORAGE_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_STORAGE_SIZE, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAYAGG() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAYAGG, 0)
}

func (s *FunctionNameBaseContext) JSON_OBJECTAGG() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OBJECTAGG, 0)
}

func (s *FunctionNameBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameBaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionNameBase(s)
	}
}

func (s *FunctionNameBaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionNameBase(s)
	}
}

func (p *MySqlParser) FunctionNameBase() (localctx IFunctionNameBaseContext) {
	localctx = NewFunctionNameBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, MySqlParserRULE_functionNameBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6868)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserLEFT || _la == MySqlParserRIGHT || _la == MySqlParserSCHEMA || (((_la-208)&-(0x1f+1)) == 0 && ((1<<uint((_la-208)))&((1<<(MySqlParserDATE-208))|(1<<(MySqlParserTIME-208))|(1<<(MySqlParserTIMESTAMP-208))|(1<<(MySqlParserYEAR-208)))) != 0) || (((_la-242)&-(0x1f+1)) == 0 && ((1<<uint((_la-242)))&((1<<(MySqlParserJSON_ARRAY-242))|(1<<(MySqlParserJSON_OBJECT-242))|(1<<(MySqlParserJSON_QUOTE-242))|(1<<(MySqlParserJSON_CONTAINS-242))|(1<<(MySqlParserJSON_CONTAINS_PATH-242))|(1<<(MySqlParserJSON_EXTRACT-242))|(1<<(MySqlParserJSON_KEYS-242))|(1<<(MySqlParserJSON_OVERLAPS-242))|(1<<(MySqlParserJSON_SEARCH-242))|(1<<(MySqlParserJSON_VALUE-242))|(1<<(MySqlParserJSON_ARRAY_APPEND-242))|(1<<(MySqlParserJSON_ARRAY_INSERT-242))|(1<<(MySqlParserJSON_INSERT-242))|(1<<(MySqlParserJSON_MERGE-242))|(1<<(MySqlParserJSON_MERGE_PATCH-242))|(1<<(MySqlParserJSON_MERGE_PRESERVE-242))|(1<<(MySqlParserJSON_REMOVE-242))|(1<<(MySqlParserJSON_REPLACE-242))|(1<<(MySqlParserJSON_SET-242))|(1<<(MySqlParserJSON_UNQUOTE-242))|(1<<(MySqlParserJSON_DEPTH-242))|(1<<(MySqlParserJSON_LENGTH-242))|(1<<(MySqlParserJSON_TYPE-242))|(1<<(MySqlParserJSON_VALID-242))|(1<<(MySqlParserJSON_TABLE-242))|(1<<(MySqlParserJSON_SCHEMA_VALID-242))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-242))|(1<<(MySqlParserJSON_PRETTY-242))|(1<<(MySqlParserJSON_STORAGE_FREE-242))|(1<<(MySqlParserJSON_STORAGE_SIZE-242))|(1<<(MySqlParserJSON_ARRAYAGG-242))|(1<<(MySqlParserJSON_OBJECTAGG-242)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOUNT-278))|(1<<(MySqlParserCUME_DIST-278))|(1<<(MySqlParserDENSE_RANK-278))|(1<<(MySqlParserFIRST_VALUE-278))|(1<<(MySqlParserLAG-278))|(1<<(MySqlParserLAST_VALUE-278))|(1<<(MySqlParserLEAD-278))|(1<<(MySqlParserNTILE-278))|(1<<(MySqlParserNTH_VALUE-278))|(1<<(MySqlParserPERCENT_RANK-278))|(1<<(MySqlParserRANK-278))|(1<<(MySqlParserROW_NUMBER-278)))) != 0) || _la == MySqlParserPOSITION || _la == MySqlParserINVISIBLE || (((_la-645)&-(0x1f+1)) == 0 && ((1<<uint((_la-645)))&((1<<(MySqlParserVISIBLE-645))|(1<<(MySqlParserQUARTER-645))|(1<<(MySqlParserMONTH-645))|(1<<(MySqlParserDAY-645))|(1<<(MySqlParserHOUR-645))|(1<<(MySqlParserMINUTE-645))|(1<<(MySqlParserWEEK-645))|(1<<(MySqlParserSECOND-645))|(1<<(MySqlParserMICROSECOND-645)))) != 0) || _la == MySqlParserSESSION_VARIABLES_ADMIN || (((_la-768)&-(0x1f+1)) == 0 && ((1<<uint((_la-768)))&((1<<(MySqlParserGEOMETRYCOLLECTION-768))|(1<<(MySqlParserLINESTRING-768))|(1<<(MySqlParserMULTILINESTRING-768))|(1<<(MySqlParserMULTIPOINT-768))|(1<<(MySqlParserMULTIPOLYGON-768))|(1<<(MySqlParserPOINT-768))|(1<<(MySqlParserPOLYGON-768))|(1<<(MySqlParserABS-768))|(1<<(MySqlParserACOS-768))|(1<<(MySqlParserADDDATE-768))|(1<<(MySqlParserADDTIME-768))|(1<<(MySqlParserAES_DECRYPT-768))|(1<<(MySqlParserAES_ENCRYPT-768))|(1<<(MySqlParserAREA-768))|(1<<(MySqlParserASBINARY-768))|(1<<(MySqlParserASIN-768))|(1<<(MySqlParserASTEXT-768))|(1<<(MySqlParserASWKB-768))|(1<<(MySqlParserASWKT-768))|(1<<(MySqlParserASYMMETRIC_DECRYPT-768))|(1<<(MySqlParserASYMMETRIC_DERIVE-768))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-768))|(1<<(MySqlParserASYMMETRIC_SIGN-768))|(1<<(MySqlParserASYMMETRIC_VERIFY-768))|(1<<(MySqlParserATAN-768))|(1<<(MySqlParserATAN2-768))|(1<<(MySqlParserBENCHMARK-768))|(1<<(MySqlParserBIN-768))|(1<<(MySqlParserBIT_COUNT-768))|(1<<(MySqlParserBIT_LENGTH-768)))) != 0) || (((_la-800)&-(0x1f+1)) == 0 && ((1<<uint((_la-800)))&((1<<(MySqlParserBUFFER-800))|(1<<(MySqlParserCEIL-800))|(1<<(MySqlParserCEILING-800))|(1<<(MySqlParserCENTROID-800))|(1<<(MySqlParserCHARACTER_LENGTH-800))|(1<<(MySqlParserCHARSET-800))|(1<<(MySqlParserCHAR_LENGTH-800))|(1<<(MySqlParserCOERCIBILITY-800))|(1<<(MySqlParserCOLLATION-800))|(1<<(MySqlParserCOMPRESS-800))|(1<<(MySqlParserCONCAT-800))|(1<<(MySqlParserCONCAT_WS-800))|(1<<(MySqlParserCONNECTION_ID-800))|(1<<(MySqlParserCONV-800))|(1<<(MySqlParserCONVERT_TZ-800))|(1<<(MySqlParserCOS-800))|(1<<(MySqlParserCOT-800))|(1<<(MySqlParserCRC32-800))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-800))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-800))|(1<<(MySqlParserCREATE_DH_PARAMETERS-800))|(1<<(MySqlParserCREATE_DIGEST-800))|(1<<(MySqlParserCROSSES-800))|(1<<(MySqlParserDATEDIFF-800))|(1<<(MySqlParserDATE_FORMAT-800))|(1<<(MySqlParserDAYNAME-800))|(1<<(MySqlParserDAYOFMONTH-800))|(1<<(MySqlParserDAYOFWEEK-800))|(1<<(MySqlParserDAYOFYEAR-800))|(1<<(MySqlParserDECODE-800))|(1<<(MySqlParserDEGREES-800)))) != 0) || (((_la-832)&-(0x1f+1)) == 0 && ((1<<uint((_la-832)))&((1<<(MySqlParserDES_DECRYPT-832))|(1<<(MySqlParserDES_ENCRYPT-832))|(1<<(MySqlParserDIMENSION-832))|(1<<(MySqlParserDISJOINT-832))|(1<<(MySqlParserELT-832))|(1<<(MySqlParserENCODE-832))|(1<<(MySqlParserENCRYPT-832))|(1<<(MySqlParserENDPOINT-832))|(1<<(MySqlParserENVELOPE-832))|(1<<(MySqlParserEQUALS-832))|(1<<(MySqlParserEXP-832))|(1<<(MySqlParserEXPORT_SET-832))|(1<<(MySqlParserEXTERIORRING-832))|(1<<(MySqlParserEXTRACTVALUE-832))|(1<<(MySqlParserFIELD-832))|(1<<(MySqlParserFIND_IN_SET-832))|(1<<(MySqlParserFLOOR-832))|(1<<(MySqlParserFORMAT-832))|(1<<(MySqlParserFOUND_ROWS-832))|(1<<(MySqlParserFROM_BASE64-832))|(1<<(MySqlParserFROM_DAYS-832))|(1<<(MySqlParserFROM_UNIXTIME-832))|(1<<(MySqlParserGEOMCOLLFROMTEXT-832))|(1<<(MySqlParserGEOMCOLLFROMWKB-832))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-832))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-832))|(1<<(MySqlParserGEOMETRYFROMTEXT-832))|(1<<(MySqlParserGEOMETRYFROMWKB-832))|(1<<(MySqlParserGEOMETRYN-832))|(1<<(MySqlParserGEOMETRYTYPE-832))|(1<<(MySqlParserGEOMFROMTEXT-832)))) != 0) || (((_la-864)&-(0x1f+1)) == 0 && ((1<<uint((_la-864)))&((1<<(MySqlParserGEOMFROMWKB-864))|(1<<(MySqlParserGET_FORMAT-864))|(1<<(MySqlParserGET_LOCK-864))|(1<<(MySqlParserGLENGTH-864))|(1<<(MySqlParserGREATEST-864))|(1<<(MySqlParserGTID_SUBSET-864))|(1<<(MySqlParserGTID_SUBTRACT-864))|(1<<(MySqlParserHEX-864))|(1<<(MySqlParserIFNULL-864))|(1<<(MySqlParserINET6_ATON-864))|(1<<(MySqlParserINET6_NTOA-864))|(1<<(MySqlParserINET_ATON-864))|(1<<(MySqlParserINET_NTOA-864))|(1<<(MySqlParserINSTR-864))|(1<<(MySqlParserINTERIORRINGN-864))|(1<<(MySqlParserINTERSECTS-864))|(1<<(MySqlParserISCLOSED-864))|(1<<(MySqlParserISEMPTY-864))|(1<<(MySqlParserISNULL-864))|(1<<(MySqlParserISSIMPLE-864))|(1<<(MySqlParserIS_FREE_LOCK-864))|(1<<(MySqlParserIS_IPV4-864))|(1<<(MySqlParserIS_IPV4_COMPAT-864))|(1<<(MySqlParserIS_IPV4_MAPPED-864))|(1<<(MySqlParserIS_IPV6-864))|(1<<(MySqlParserIS_USED_LOCK-864))|(1<<(MySqlParserLAST_INSERT_ID-864))|(1<<(MySqlParserLCASE-864))|(1<<(MySqlParserLEAST-864))|(1<<(MySqlParserLENGTH-864))|(1<<(MySqlParserLINEFROMTEXT-864))|(1<<(MySqlParserLINEFROMWKB-864)))) != 0) || (((_la-896)&-(0x1f+1)) == 0 && ((1<<uint((_la-896)))&((1<<(MySqlParserLINESTRINGFROMTEXT-896))|(1<<(MySqlParserLINESTRINGFROMWKB-896))|(1<<(MySqlParserLN-896))|(1<<(MySqlParserLOAD_FILE-896))|(1<<(MySqlParserLOCATE-896))|(1<<(MySqlParserLOG-896))|(1<<(MySqlParserLOG10-896))|(1<<(MySqlParserLOG2-896))|(1<<(MySqlParserLOWER-896))|(1<<(MySqlParserLPAD-896))|(1<<(MySqlParserLTRIM-896))|(1<<(MySqlParserMAKEDATE-896))|(1<<(MySqlParserMAKETIME-896))|(1<<(MySqlParserMAKE_SET-896))|(1<<(MySqlParserMASTER_POS_WAIT-896))|(1<<(MySqlParserMBRCONTAINS-896))|(1<<(MySqlParserMBRDISJOINT-896))|(1<<(MySqlParserMBREQUAL-896))|(1<<(MySqlParserMBRINTERSECTS-896))|(1<<(MySqlParserMBROVERLAPS-896))|(1<<(MySqlParserMBRTOUCHES-896))|(1<<(MySqlParserMBRWITHIN-896))|(1<<(MySqlParserMD5-896))|(1<<(MySqlParserMLINEFROMTEXT-896))|(1<<(MySqlParserMLINEFROMWKB-896))|(1<<(MySqlParserMONTHNAME-896))|(1<<(MySqlParserMPOINTFROMTEXT-896))|(1<<(MySqlParserMPOINTFROMWKB-896))|(1<<(MySqlParserMPOLYFROMTEXT-896))|(1<<(MySqlParserMPOLYFROMWKB-896))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-896))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-896)))) != 0) || (((_la-928)&-(0x1f+1)) == 0 && ((1<<uint((_la-928)))&((1<<(MySqlParserMULTIPOINTFROMTEXT-928))|(1<<(MySqlParserMULTIPOINTFROMWKB-928))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-928))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-928))|(1<<(MySqlParserNAME_CONST-928))|(1<<(MySqlParserNULLIF-928))|(1<<(MySqlParserNUMGEOMETRIES-928))|(1<<(MySqlParserNUMINTERIORRINGS-928))|(1<<(MySqlParserNUMPOINTS-928))|(1<<(MySqlParserOCT-928))|(1<<(MySqlParserOCTET_LENGTH-928))|(1<<(MySqlParserORD-928))|(1<<(MySqlParserOVERLAPS-928))|(1<<(MySqlParserPERIOD_ADD-928))|(1<<(MySqlParserPERIOD_DIFF-928))|(1<<(MySqlParserPI-928))|(1<<(MySqlParserPOINTFROMTEXT-928))|(1<<(MySqlParserPOINTFROMWKB-928))|(1<<(MySqlParserPOINTN-928))|(1<<(MySqlParserPOLYFROMTEXT-928))|(1<<(MySqlParserPOLYFROMWKB-928))|(1<<(MySqlParserPOLYGONFROMTEXT-928))|(1<<(MySqlParserPOLYGONFROMWKB-928))|(1<<(MySqlParserPOW-928))|(1<<(MySqlParserPOWER-928))|(1<<(MySqlParserQUOTE-928))|(1<<(MySqlParserRADIANS-928))|(1<<(MySqlParserRAND-928))|(1<<(MySqlParserRANDOM_BYTES-928))|(1<<(MySqlParserRELEASE_LOCK-928))|(1<<(MySqlParserREVERSE-928))|(1<<(MySqlParserROUND-928)))) != 0) || (((_la-960)&-(0x1f+1)) == 0 && ((1<<uint((_la-960)))&((1<<(MySqlParserROW_COUNT-960))|(1<<(MySqlParserRPAD-960))|(1<<(MySqlParserRTRIM-960))|(1<<(MySqlParserSEC_TO_TIME-960))|(1<<(MySqlParserSESSION_USER-960))|(1<<(MySqlParserSHA-960))|(1<<(MySqlParserSHA1-960))|(1<<(MySqlParserSHA2-960))|(1<<(MySqlParserSIGN-960))|(1<<(MySqlParserSIN-960))|(1<<(MySqlParserSLEEP-960))|(1<<(MySqlParserSOUNDEX-960))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-960))|(1<<(MySqlParserSQRT-960))|(1<<(MySqlParserSRID-960))|(1<<(MySqlParserSTARTPOINT-960))|(1<<(MySqlParserSTRCMP-960))|(1<<(MySqlParserSTR_TO_DATE-960))|(1<<(MySqlParserST_AREA-960))|(1<<(MySqlParserST_ASBINARY-960))|(1<<(MySqlParserST_ASTEXT-960))|(1<<(MySqlParserST_ASWKB-960))|(1<<(MySqlParserST_ASWKT-960))|(1<<(MySqlParserST_BUFFER-960))|(1<<(MySqlParserST_CENTROID-960))|(1<<(MySqlParserST_CONTAINS-960))|(1<<(MySqlParserST_CROSSES-960))|(1<<(MySqlParserST_DIFFERENCE-960))|(1<<(MySqlParserST_DIMENSION-960))|(1<<(MySqlParserST_DISJOINT-960)))) != 0) || (((_la-992)&-(0x1f+1)) == 0 && ((1<<uint((_la-992)))&((1<<(MySqlParserST_DISTANCE-992))|(1<<(MySqlParserST_ENDPOINT-992))|(1<<(MySqlParserST_ENVELOPE-992))|(1<<(MySqlParserST_EQUALS-992))|(1<<(MySqlParserST_EXTERIORRING-992))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-992))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-992))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-992))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-992))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-992))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-992))|(1<<(MySqlParserST_GEOMETRYFROMWKB-992))|(1<<(MySqlParserST_GEOMETRYN-992))|(1<<(MySqlParserST_GEOMETRYTYPE-992))|(1<<(MySqlParserST_GEOMFROMTEXT-992))|(1<<(MySqlParserST_GEOMFROMWKB-992))|(1<<(MySqlParserST_INTERIORRINGN-992))|(1<<(MySqlParserST_INTERSECTION-992))|(1<<(MySqlParserST_INTERSECTS-992))|(1<<(MySqlParserST_ISCLOSED-992))|(1<<(MySqlParserST_ISEMPTY-992))|(1<<(MySqlParserST_ISSIMPLE-992))|(1<<(MySqlParserST_LINEFROMTEXT-992))|(1<<(MySqlParserST_LINEFROMWKB-992))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-992))|(1<<(MySqlParserST_LINESTRINGFROMWKB-992))|(1<<(MySqlParserST_NUMGEOMETRIES-992))|(1<<(MySqlParserST_NUMINTERIORRING-992))|(1<<(MySqlParserST_NUMINTERIORRINGS-992))|(1<<(MySqlParserST_NUMPOINTS-992))|(1<<(MySqlParserST_OVERLAPS-992))|(1<<(MySqlParserST_POINTFROMTEXT-992)))) != 0) || (((_la-1024)&-(0x1f+1)) == 0 && ((1<<uint((_la-1024)))&((1<<(MySqlParserST_POINTFROMWKB-1024))|(1<<(MySqlParserST_POINTN-1024))|(1<<(MySqlParserST_POLYFROMTEXT-1024))|(1<<(MySqlParserST_POLYFROMWKB-1024))|(1<<(MySqlParserST_POLYGONFROMTEXT-1024))|(1<<(MySqlParserST_POLYGONFROMWKB-1024))|(1<<(MySqlParserST_SRID-1024))|(1<<(MySqlParserST_STARTPOINT-1024))|(1<<(MySqlParserST_SYMDIFFERENCE-1024))|(1<<(MySqlParserST_TOUCHES-1024))|(1<<(MySqlParserST_UNION-1024))|(1<<(MySqlParserST_WITHIN-1024))|(1<<(MySqlParserST_X-1024))|(1<<(MySqlParserST_Y-1024))|(1<<(MySqlParserSUBDATE-1024))|(1<<(MySqlParserSUBSTRING_INDEX-1024))|(1<<(MySqlParserSUBTIME-1024))|(1<<(MySqlParserSYSTEM_USER-1024))|(1<<(MySqlParserTAN-1024))|(1<<(MySqlParserTIMEDIFF-1024))|(1<<(MySqlParserTIMESTAMPADD-1024))|(1<<(MySqlParserTIMESTAMPDIFF-1024))|(1<<(MySqlParserTIME_FORMAT-1024))|(1<<(MySqlParserTIME_TO_SEC-1024))|(1<<(MySqlParserTOUCHES-1024))|(1<<(MySqlParserTO_BASE64-1024))|(1<<(MySqlParserTO_DAYS-1024))|(1<<(MySqlParserTO_SECONDS-1024))|(1<<(MySqlParserUCASE-1024))|(1<<(MySqlParserUNCOMPRESS-1024))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1024))|(1<<(MySqlParserUNHEX-1024)))) != 0) || (((_la-1056)&-(0x1f+1)) == 0 && ((1<<uint((_la-1056)))&((1<<(MySqlParserUNIX_TIMESTAMP-1056))|(1<<(MySqlParserUPDATEXML-1056))|(1<<(MySqlParserUPPER-1056))|(1<<(MySqlParserUUID-1056))|(1<<(MySqlParserUUID_SHORT-1056))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1056))|(1<<(MySqlParserVERSION-1056))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1056))|(1<<(MySqlParserWEEKDAY-1056))|(1<<(MySqlParserWEEKOFYEAR-1056))|(1<<(MySqlParserWEIGHT_STRING-1056))|(1<<(MySqlParserWITHIN-1056))|(1<<(MySqlParserYEARWEEK-1056))|(1<<(MySqlParserY_FUNCTION-1056))|(1<<(MySqlParserX_FUNCTION-1056))|(1<<(MySqlParserMOD-1056)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *MySqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 320:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 321:
		var t *PredicateContext = nil
		if localctx != nil {
			t = localctx.(*PredicateContext)
		}
		return p.Predicate_Sempred(t, predIndex)

	case 322:
		var t *ExpressionAtomContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionAtomContext)
		}
		return p.ExpressionAtom_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MySqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) Predicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) ExpressionAtom_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
